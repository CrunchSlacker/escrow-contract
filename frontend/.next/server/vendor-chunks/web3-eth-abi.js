/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/web3-eth-abi";
exports.ids = ["vendor-chunks/web3-eth-abi"];
exports.modules = {

/***/ "(ssr)/./node_modules/web3-eth-abi/lib/index.js":
/*!************************************************!*\
  !*** ./node_modules/web3-eth-abi/lib/index.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */ /**\n * @file index.js\n * @author Marek Kotewicz <marek@parity.io>\n * @author Fabian Vogelsteller <fabian@frozeman.de>\n * @date 2018\n */ var Buffer = (__webpack_require__(/*! buffer */ \"buffer\").Buffer);\nvar utils = __webpack_require__(/*! web3-utils */ \"(ssr)/./node_modules/web3-utils/lib/index.js\");\nvar EthersAbiCoder = (__webpack_require__(/*! @ethersproject/abi */ \"(ssr)/./node_modules/@ethersproject/abi/lib.esm/index.js\").AbiCoder);\nvar ParamType = (__webpack_require__(/*! @ethersproject/abi */ \"(ssr)/./node_modules/@ethersproject/abi/lib.esm/index.js\").ParamType);\nvar ethersAbiCoder = new EthersAbiCoder(function(type, value) {\n    if (type.match(/^u?int/) && !Array.isArray(value) && (!(!!value && typeof value === \"object\") || value.constructor.name !== \"BN\")) {\n        return value.toString();\n    }\n    return value;\n});\n// result method\nfunction Result() {}\n/**\n * ABICoder prototype should be used to encode/decode solidity params of any type\n */ var ABICoder = function() {};\n/**\n * Encodes the function name to its ABI representation, which are the first 4 bytes of the sha3 of the function name including  types.\n *\n * @method encodeFunctionSignature\n * @param {String|Object} functionName\n * @return {String} encoded function name\n */ ABICoder.prototype.encodeFunctionSignature = function(functionName) {\n    if (typeof functionName === \"function\" || typeof functionName === \"object\" && functionName) {\n        functionName = utils._jsonInterfaceMethodToString(functionName);\n    }\n    return utils.sha3(functionName).slice(0, 10);\n};\n/**\n * Encodes the function name to its ABI representation, which are the first 4 bytes of the sha3 of the function name including  types.\n *\n * @method encodeEventSignature\n * @param {String|Object} functionName\n * @return {String} encoded function name\n */ ABICoder.prototype.encodeEventSignature = function(functionName) {\n    if (typeof functionName === \"function\" || typeof functionName === \"object\" && functionName) {\n        functionName = utils._jsonInterfaceMethodToString(functionName);\n    }\n    return utils.sha3(functionName);\n};\n/**\n * Should be used to encode plain param\n *\n * @method encodeParameter\n *\n * @param {String|Object} type\n * @param {any} param\n *\n * @return {String} encoded plain param\n */ ABICoder.prototype.encodeParameter = function(type, param) {\n    return this.encodeParameters([\n        type\n    ], [\n        param\n    ]);\n};\n/**\n * Should be used to encode list of params\n *\n * @method encodeParameters\n *\n * @param {Array<String|Object>} types\n * @param {Array<any>} params\n *\n * @return {String} encoded list of params\n */ ABICoder.prototype.encodeParameters = function(types, params) {\n    var self = this;\n    types = self.mapTypes(types);\n    params = params.map(function(param, index) {\n        let type = types[index];\n        if (typeof type === \"object\" && type.type) {\n            // We may get a named type of shape {name, type}\n            type = type.type;\n        }\n        param = self.formatParam(type, param);\n        // Format params for tuples\n        if (typeof type === \"string\" && type.includes(\"tuple\")) {\n            const coder = ethersAbiCoder._getCoder(ParamType.from(type));\n            const modifyParams = (coder, param)=>{\n                if (coder.name === \"array\") {\n                    if (!coder.type.match(/\\[(\\d+)\\]/)) {\n                        return param.map((p)=>modifyParams(ethersAbiCoder._getCoder(ParamType.from(coder.type.replace(\"[]\", \"\"))), p));\n                    }\n                    const arrayLength = parseInt(coder.type.match(/\\[(\\d+)\\]/)[1]);\n                    if (param.length !== arrayLength) {\n                        throw new Error(\"Array length does not matches with the given input\");\n                    }\n                    return param.map((p)=>modifyParams(ethersAbiCoder._getCoder(ParamType.from(coder.type.replace(/\\[\\d+\\]/, \"\"))), p));\n                }\n                coder.coders.forEach((c, i)=>{\n                    if (c.name === \"tuple\") {\n                        modifyParams(c, param[i]);\n                    } else {\n                        param[i] = self.formatParam(c.name, param[i]);\n                    }\n                });\n            };\n            modifyParams(coder, param);\n        }\n        return param;\n    });\n    return ethersAbiCoder.encode(types, params);\n};\n/**\n * Map types if simplified format is used\n *\n * @method mapTypes\n * @param {Array} types\n * @return {Array}\n */ ABICoder.prototype.mapTypes = function(types) {\n    var self = this;\n    var mappedTypes = [];\n    types.forEach(function(type) {\n        // Remap `function` type params to bytes24 since Ethers does not\n        // recognize former type. Solidity docs say `Function` is a bytes24\n        // encoding the contract address followed by the function selector hash.\n        if (typeof type === \"object\" && type.type === \"function\") {\n            type = Object.assign({}, type, {\n                type: \"bytes24\"\n            });\n        }\n        if (self.isSimplifiedStructFormat(type)) {\n            var structName = Object.keys(type)[0];\n            mappedTypes.push(Object.assign(self.mapStructNameAndType(structName), {\n                components: self.mapStructToCoderFormat(type[structName])\n            }));\n            return;\n        }\n        mappedTypes.push(type);\n    });\n    return mappedTypes;\n};\n/**\n * Check if type is simplified struct format\n *\n * @method isSimplifiedStructFormat\n * @param {string | Object} type\n * @returns {boolean}\n */ ABICoder.prototype.isSimplifiedStructFormat = function(type) {\n    return typeof type === \"object\" && typeof type.components === \"undefined\" && typeof type.name === \"undefined\";\n};\n/**\n * Maps the correct tuple type and name when the simplified format in encode/decodeParameter is used\n *\n * @method mapStructNameAndType\n * @param {string} structName\n * @return {{type: string, name: *}}\n */ ABICoder.prototype.mapStructNameAndType = function(structName) {\n    var type = \"tuple\";\n    if (structName.indexOf(\"[]\") > -1) {\n        type = \"tuple[]\";\n        structName = structName.slice(0, -2);\n    }\n    return {\n        type: type,\n        name: structName\n    };\n};\n/**\n * Maps the simplified format in to the expected format of the ABICoder\n *\n * @method mapStructToCoderFormat\n * @param {Object} struct\n * @return {Array}\n */ ABICoder.prototype.mapStructToCoderFormat = function(struct) {\n    var self = this;\n    var components = [];\n    Object.keys(struct).forEach(function(key) {\n        if (typeof struct[key] === \"object\") {\n            components.push(Object.assign(self.mapStructNameAndType(key), {\n                components: self.mapStructToCoderFormat(struct[key])\n            }));\n            return;\n        }\n        components.push({\n            name: key,\n            type: struct[key]\n        });\n    });\n    return components;\n};\n/**\n * Handle some formatting of params for backwards compatability with Ethers V4\n *\n * @method formatParam\n * @param {String} - type\n * @param {any} - param\n * @return {any} - The formatted param\n */ ABICoder.prototype.formatParam = function(type, param) {\n    const paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);\n    const paramTypeBytesArray = new RegExp(/^bytes([0-9]*)\\[\\]$/);\n    const paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);\n    const paramTypeNumberArray = new RegExp(/^(u?int)([0-9]*)\\[\\]$/);\n    // Format BN to string\n    if (utils.isBN(param) || utils.isBigNumber(param)) {\n        return param.toString(10);\n    }\n    if (type.match(paramTypeBytesArray) || type.match(paramTypeNumberArray)) {\n        return param.map((p)=>this.formatParam(type.replace(\"[]\", \"\"), p));\n    }\n    // Format correct width for u?int[0-9]*\n    let match = type.match(paramTypeNumber);\n    if (match) {\n        let size = parseInt(match[2] || \"256\");\n        if (size / 8 < param.length) {\n            param = param.startsWith(\"-\") ? `-${utils.leftPad(param.substring(1), size)}` : utils.leftPad(param, size);\n        }\n    }\n    // Format correct length for bytes[0-9]+\n    match = type.match(paramTypeBytes);\n    if (match) {\n        if (Buffer.isBuffer(param)) {\n            param = utils.toHex(param);\n        }\n        // format to correct length\n        let size = parseInt(match[1]);\n        if (size) {\n            let maxSize = size * 2;\n            if (param.substring(0, 2) === \"0x\") {\n                maxSize += 2;\n            }\n            if (param.length < maxSize) {\n                // pad to correct length\n                param = utils.rightPad(param, size * 2);\n            }\n        }\n        // format odd-length bytes to even-length\n        if (param.length % 2 === 1) {\n            param = \"0x0\" + param.substring(2);\n        }\n    }\n    return param;\n};\n/**\n * Encodes a function call from its json interface and parameters.\n *\n * @method encodeFunctionCall\n * @param {Array} jsonInterface\n * @param {Array} params\n * @return {String} The encoded ABI for this function call\n */ ABICoder.prototype.encodeFunctionCall = function(jsonInterface, params) {\n    return this.encodeFunctionSignature(jsonInterface) + this.encodeParameters(jsonInterface.inputs, params).replace(\"0x\", \"\");\n};\n/**\n * Should be used to decode bytes to plain param\n *\n * @method decodeParameter\n * @param {String} type\n * @param {String} bytes\n * @return {Object} plain param\n */ ABICoder.prototype.decodeParameter = function(type, bytes) {\n    return this.decodeParameters([\n        type\n    ], bytes)[0];\n};\n/**\n * Should be used to decode list of params\n *\n * @method decodeParameter\n * @param {Array} outputs\n * @param {String} bytes\n * @return {Array} array of plain params\n */ ABICoder.prototype.decodeParameters = function(outputs, bytes) {\n    return this.decodeParametersWith(outputs, bytes, false);\n};\n/**\n * Should be used to decode list of params\n *\n * @method decodeParameter\n * @param {Array} outputs\n * @param {String} bytes\n * @param {Boolean} loose\n * @return {Array} array of plain params\n */ ABICoder.prototype.decodeParametersWith = function(outputs, bytes, loose) {\n    if (outputs.length > 0 && (!bytes || bytes === \"0x\" || bytes === \"0X\")) {\n        throw new Error(\"Returned values aren't valid, did it run Out of Gas? \" + \"You might also see this error if you are not using the \" + \"correct ABI for the contract you are retrieving data from, \" + \"requesting data from a block number that does not exist, \" + \"or querying a node which is not fully synced.\");\n    }\n    var res = ethersAbiCoder.decode(this.mapTypes(outputs), \"0x\" + bytes.replace(/0x/i, \"\"), loose);\n    var returnValue = new Result();\n    returnValue.__length__ = 0;\n    outputs.forEach(function(output, i) {\n        var decodedValue = res[returnValue.__length__];\n        const isStringObject = typeof output === \"object\" && output.type && output.type === \"string\";\n        const isStringType = typeof output === \"string\" && output === \"string\";\n        // only convert `0x` to null if it's not string value\n        decodedValue = decodedValue === \"0x\" && !isStringObject && !isStringType ? null : decodedValue;\n        returnValue[i] = decodedValue;\n        if ((typeof output === \"function\" || !!output && typeof output === \"object\") && output.name) {\n            returnValue[output.name] = decodedValue;\n        }\n        returnValue.__length__++;\n    });\n    return returnValue;\n};\n/**\n * Decodes events non- and indexed parameters.\n *\n * @method decodeLog\n * @param {Object} inputs\n * @param {String} data\n * @param {Array} topics\n * @return {Array} array of plain params\n */ ABICoder.prototype.decodeLog = function(inputs, data, topics) {\n    var _this = this;\n    topics = Array.isArray(topics) ? topics : [\n        topics\n    ];\n    data = data || \"\";\n    var notIndexedInputs = [];\n    var indexedParams = [];\n    var topicCount = 0;\n    // TODO check for anonymous logs?\n    inputs.forEach(function(input, i) {\n        if (input.indexed) {\n            indexedParams[i] = [\n                \"bool\",\n                \"int\",\n                \"uint\",\n                \"address\",\n                \"fixed\",\n                \"ufixed\"\n            ].find(function(staticType) {\n                return input.type.indexOf(staticType) !== -1;\n            }) ? _this.decodeParameter(input.type, topics[topicCount]) : topics[topicCount];\n            topicCount++;\n        } else {\n            notIndexedInputs[i] = input;\n        }\n    });\n    var nonIndexedData = data;\n    var notIndexedParams = nonIndexedData ? this.decodeParametersWith(notIndexedInputs, nonIndexedData, true) : [];\n    var returnValue = new Result();\n    returnValue.__length__ = 0;\n    inputs.forEach(function(res, i) {\n        returnValue[i] = res.type === \"string\" ? \"\" : null;\n        if (typeof notIndexedParams[i] !== \"undefined\") {\n            returnValue[i] = notIndexedParams[i];\n        }\n        if (typeof indexedParams[i] !== \"undefined\") {\n            returnValue[i] = indexedParams[i];\n        }\n        if (res.name) {\n            returnValue[res.name] = returnValue[i];\n        }\n        returnValue.__length__++;\n    });\n    return returnValue;\n};\nvar coder = new ABICoder();\nmodule.exports = coder;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-abi/lib/index.js\n");

/***/ })

};
;