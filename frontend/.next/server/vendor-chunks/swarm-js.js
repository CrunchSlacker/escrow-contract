/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/swarm-js";
exports.ids = ["vendor-chunks/swarm-js"];
exports.modules = {

/***/ "(ssr)/./node_modules/swarm-js/lib/api-node.js":
/*!***********************************************!*\
  !*** ./node_modules/swarm-js/lib/api-node.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var fs = __webpack_require__(/*! fs-extra */ \"(ssr)/./node_modules/fs-extra/lib/index.js\");\nvar files = __webpack_require__(/*! ./files.js */ \"(ssr)/./node_modules/swarm-js/lib/files.js\");\nvar os = __webpack_require__(/*! os */ \"os\");\nvar path = __webpack_require__(/*! path */ \"path\");\nvar child_process = __webpack_require__(/*! child_process */ \"child_process\");\nvar mimetype = __webpack_require__(/*! mime-types */ \"(ssr)/./node_modules/mime-types/index.js\");\nvar defaultArchives = __webpack_require__(/*! ./../archives/archives.json */ \"(ssr)/./node_modules/swarm-js/archives/archives.json\");\nvar requester = __webpack_require__(/*! xhr-request */ \"(ssr)/./node_modules/xhr-request/index.js\");\nvar downloadUrl = \"http://ethereum-mist.s3.amazonaws.com/swarm/\";\nvar bytes = __webpack_require__(/*! eth-lib/lib/bytes */ \"(ssr)/./node_modules/eth-lib/lib/bytes.js\");\nvar hash = __webpack_require__(/*! ./swarm-hash.js */ \"(ssr)/./node_modules/swarm-js/lib/swarm-hash.js\");\nvar pick = __webpack_require__(/*! ./pick.js */ \"(ssr)/./node_modules/swarm-js/lib/pick.js\");\nvar swarm = __webpack_require__(/*! ./swarm */ \"(ssr)/./node_modules/swarm-js/lib/swarm.js\"); // Fixes issue that causes xhr-request-promise on Node.js to only accept Buffer\nvar request = function request(url, params, callback) {\n    var newParams = {};\n    for(var key in params){\n        newParams[key] = params[key];\n    }\n    if (typeof newParams.body !== \"undefined\") {\n        newParams.body = newParams.body instanceof Buffer ? newParams.body : new Buffer(newParams.body);\n    }\n    return requester(url, newParams, callback);\n};\nmodule.exports = swarm({\n    fs: fs,\n    files: files,\n    os: os,\n    path: path,\n    child_process: child_process,\n    defaultArchives: defaultArchives,\n    mimetype: mimetype,\n    request: request,\n    downloadUrl: downloadUrl,\n    bytes: bytes,\n    hash: hash,\n    pick: pick\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dhcm0tanMvbGliL2FwaS1ub2RlLmpzIiwibWFwcGluZ3MiOiJBQUFBLElBQUlBLEtBQUtDLG1CQUFPQSxDQUFDLDREQUFVO0FBRTNCLElBQUlDLFFBQVFELG1CQUFPQSxDQUFDLDhEQUFZO0FBRWhDLElBQUlFLEtBQUtGLG1CQUFPQSxDQUFDLGNBQUk7QUFFckIsSUFBSUcsT0FBT0gsbUJBQU9BLENBQUMsa0JBQU07QUFFekIsSUFBSUksZ0JBQWdCSixtQkFBT0EsQ0FBQyxvQ0FBZTtBQUUzQyxJQUFJSyxXQUFXTCxtQkFBT0EsQ0FBQztBQUV2QixJQUFJTSxrQkFBa0JOLG1CQUFPQSxDQUFDLHlGQUE2QjtBQUUzRCxJQUFJTyxZQUFZUCxtQkFBT0EsQ0FBQyw4REFBYTtBQUVyQyxJQUFJUSxjQUFjO0FBRWxCLElBQUlDLFFBQVFULG1CQUFPQSxDQUFDLG9FQUFtQjtBQUV2QyxJQUFJVSxPQUFPVixtQkFBT0EsQ0FBQyx3RUFBaUI7QUFFcEMsSUFBSVcsT0FBT1gsbUJBQU9BLENBQUMsNERBQVc7QUFFOUIsSUFBSVksUUFBUVosbUJBQU9BLENBQUMsMkRBQVMsR0FBRywrRUFBK0U7QUFHL0csSUFBSWEsVUFBVSxTQUFTQSxRQUFRQyxHQUFHLEVBQUVDLE1BQU0sRUFBRUMsUUFBUTtJQUNsRCxJQUFJQyxZQUFZLENBQUM7SUFFakIsSUFBSyxJQUFJQyxPQUFPSCxPQUFRO1FBQ3RCRSxTQUFTLENBQUNDLElBQUksR0FBR0gsTUFBTSxDQUFDRyxJQUFJO0lBQzlCO0lBRUEsSUFBSSxPQUFPRCxVQUFVRSxJQUFJLEtBQUssYUFBYTtRQUN6Q0YsVUFBVUUsSUFBSSxHQUFHRixVQUFVRSxJQUFJLFlBQVlDLFNBQVNILFVBQVVFLElBQUksR0FBRyxJQUFJQyxPQUFPSCxVQUFVRSxJQUFJO0lBQ2hHO0lBRUEsT0FBT1osVUFBVU8sS0FBS0csV0FBV0Q7QUFDbkM7QUFFQUssT0FBT0MsT0FBTyxHQUFHVixNQUFNO0lBQ3JCYixJQUFJQTtJQUNKRSxPQUFPQTtJQUNQQyxJQUFJQTtJQUNKQyxNQUFNQTtJQUNOQyxlQUFlQTtJQUNmRSxpQkFBaUJBO0lBQ2pCRCxVQUFVQTtJQUNWUSxTQUFTQTtJQUNUTCxhQUFhQTtJQUNiQyxPQUFPQTtJQUNQQyxNQUFNQTtJQUNOQyxNQUFNQTtBQUNSIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvc3dhcm0tanMvbGliL2FwaS1ub2RlLmpzP2I0MzAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGZzID0gcmVxdWlyZShcImZzLWV4dHJhXCIpO1xuXG52YXIgZmlsZXMgPSByZXF1aXJlKFwiLi9maWxlcy5qc1wiKTtcblxudmFyIG9zID0gcmVxdWlyZShcIm9zXCIpO1xuXG52YXIgcGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xuXG52YXIgY2hpbGRfcHJvY2VzcyA9IHJlcXVpcmUoXCJjaGlsZF9wcm9jZXNzXCIpO1xuXG52YXIgbWltZXR5cGUgPSByZXF1aXJlKCdtaW1lLXR5cGVzJyk7XG5cbnZhciBkZWZhdWx0QXJjaGl2ZXMgPSByZXF1aXJlKFwiLi8uLi9hcmNoaXZlcy9hcmNoaXZlcy5qc29uXCIpO1xuXG52YXIgcmVxdWVzdGVyID0gcmVxdWlyZShcInhoci1yZXF1ZXN0XCIpO1xuXG52YXIgZG93bmxvYWRVcmwgPSBcImh0dHA6Ly9ldGhlcmV1bS1taXN0LnMzLmFtYXpvbmF3cy5jb20vc3dhcm0vXCI7XG5cbnZhciBieXRlcyA9IHJlcXVpcmUoXCJldGgtbGliL2xpYi9ieXRlc1wiKTtcblxudmFyIGhhc2ggPSByZXF1aXJlKFwiLi9zd2FybS1oYXNoLmpzXCIpO1xuXG52YXIgcGljayA9IHJlcXVpcmUoXCIuL3BpY2suanNcIik7XG5cbnZhciBzd2FybSA9IHJlcXVpcmUoXCIuL3N3YXJtXCIpOyAvLyBGaXhlcyBpc3N1ZSB0aGF0IGNhdXNlcyB4aHItcmVxdWVzdC1wcm9taXNlIG9uIE5vZGUuanMgdG8gb25seSBhY2NlcHQgQnVmZmVyXG5cblxudmFyIHJlcXVlc3QgPSBmdW5jdGlvbiByZXF1ZXN0KHVybCwgcGFyYW1zLCBjYWxsYmFjaykge1xuICB2YXIgbmV3UGFyYW1zID0ge307XG5cbiAgZm9yICh2YXIga2V5IGluIHBhcmFtcykge1xuICAgIG5ld1BhcmFtc1trZXldID0gcGFyYW1zW2tleV07XG4gIH1cblxuICBpZiAodHlwZW9mIG5ld1BhcmFtcy5ib2R5ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgbmV3UGFyYW1zLmJvZHkgPSBuZXdQYXJhbXMuYm9keSBpbnN0YW5jZW9mIEJ1ZmZlciA/IG5ld1BhcmFtcy5ib2R5IDogbmV3IEJ1ZmZlcihuZXdQYXJhbXMuYm9keSk7XG4gIH1cblxuICByZXR1cm4gcmVxdWVzdGVyKHVybCwgbmV3UGFyYW1zLCBjYWxsYmFjayk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN3YXJtKHtcbiAgZnM6IGZzLFxuICBmaWxlczogZmlsZXMsXG4gIG9zOiBvcyxcbiAgcGF0aDogcGF0aCxcbiAgY2hpbGRfcHJvY2VzczogY2hpbGRfcHJvY2VzcyxcbiAgZGVmYXVsdEFyY2hpdmVzOiBkZWZhdWx0QXJjaGl2ZXMsXG4gIG1pbWV0eXBlOiBtaW1ldHlwZSxcbiAgcmVxdWVzdDogcmVxdWVzdCxcbiAgZG93bmxvYWRVcmw6IGRvd25sb2FkVXJsLFxuICBieXRlczogYnl0ZXMsXG4gIGhhc2g6IGhhc2gsXG4gIHBpY2s6IHBpY2tcbn0pOyJdLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJmaWxlcyIsIm9zIiwicGF0aCIsImNoaWxkX3Byb2Nlc3MiLCJtaW1ldHlwZSIsImRlZmF1bHRBcmNoaXZlcyIsInJlcXVlc3RlciIsImRvd25sb2FkVXJsIiwiYnl0ZXMiLCJoYXNoIiwicGljayIsInN3YXJtIiwicmVxdWVzdCIsInVybCIsInBhcmFtcyIsImNhbGxiYWNrIiwibmV3UGFyYW1zIiwia2V5IiwiYm9keSIsIkJ1ZmZlciIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swarm-js/lib/api-node.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/swarm-js/lib/files.js":
/*!********************************************!*\
  !*** ./node_modules/swarm-js/lib/files.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// This module implements some file download utils. Its most important export\n// is `safeDownloadTargzFile`, which, given a file, its md5, a tar.gz url, its\n// md5 and a path, returns a Promise that will only resolve once the exact file\n// you expect is available on that path.\nvar Q = __webpack_require__(/*! bluebird */ \"(ssr)/./node_modules/bluebird/js/release/bluebird.js\");\nvar assert = __webpack_require__(/*! assert */ \"assert\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar fs = __webpack_require__(/*! fs-extra */ \"(ssr)/./node_modules/fs-extra/lib/index.js\");\nvar got = __webpack_require__(/*! got */ \"(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/index.js\");\nvar mkdirp = __webpack_require__(/*! mkdirp-promise */ \"(ssr)/./node_modules/mkdirp-promise/lib/index.js\");\nvar path = __webpack_require__(/*! path */ \"path\");\nvar tar = __webpack_require__(/*! tar */ \"(ssr)/./node_modules/tar/index.js\"); // String -> String ~> Promise String\n//   Downloads a file from an url to a path.\n//   Returns a promise containing the path.\nvar download = function download(url) {\n    return function(filePath) {\n        var promise = Q.resolve(mkdirp(path.dirname(filePath))).then(function() {\n            return new Q(function(resolve, reject) {\n                var writeStream = fs.createWriteStream(filePath);\n                var downloadStream = got.stream(url);\n                downloadStream.on(\"end\", function() {\n                    return resolve(filePath);\n                });\n                downloadStream.on(\"data\", function(chunk) {\n                    return promise.onDataCallback(chunk);\n                });\n                downloadStream.on(\"error\", reject);\n                downloadStream.pipe(writeStream);\n            });\n        });\n        promise.onDataCallback = function() {};\n        promise.onData = function(callback) {\n            promise.onDataCallback = callback || function() {};\n            return promise;\n        };\n        return promise;\n    };\n}; // String -> String ~> Promise String\n//   Hashes a file using the given algorithm (ex: \"md5\").\n//   Returns a promise containing the hashed string.\nvar hash = function hash(algorithm) {\n    return function(path) {\n        return new Q(function(resolve, reject) {\n            var readStream = fs.ReadStream(path);\n            var hash = crypto.createHash(algorithm);\n            readStream.on(\"data\", function(d) {\n                return hash.update(d);\n            });\n            readStream.on(\"end\", function() {\n                return resolve(hash.digest(\"hex\"));\n            });\n            readStream.on(\"error\", reject);\n        });\n    };\n}; // String -> String ~> Promise ()\n//   Asserts a file matches this md5 hash.\n//   Returns a promise containing its path.\nvar checksum = function checksum(fileHash) {\n    return function(path) {\n        return hash(\"md5\")(path).then(function(actualHash) {\n            return actualHash === fileHash;\n        }).then(assert).then(function() {\n            return path;\n        });\n    };\n}; // String ~> String ~> String ~> Promise String\n//   Downloads a file to a directory, check.\n//   Checks if the md5 hash matches.\n//   Returns a promise containing the path.\nvar downloadAndCheck = function downloadAndCheck(url) {\n    return function(path) {\n        return function(fileHash) {\n            return download(url)(path).then(checksum(fileHash));\n        };\n    };\n}; // String -> String ~> Promise String\n//   TODO: work for zip and other types\nvar extract = function extract(fromPath) {\n    return function(toPath) {\n        return tar.x(fromPath, toPath).then(function() {\n            return toPath;\n        });\n    };\n}; // String ~> Promise String\n//   Reads a file as an UTF8 string.\n//   Returns a promise containing that string.\nvar readUTF8 = function readUTF8(path) {\n    return fs.readFile(path, {\n        encoding: \"utf8\"\n    });\n}; // String ~> Promise Bool\nvar isDirectory = function isDirectory(path) {\n    return fs.exists(path).then(assert).then(function() {\n        return fs.lstat(path);\n    }).then(function(stats) {\n        return stats.isDirectory();\n    })[\"catch\"](function() {\n        return false;\n    });\n}; // String -> Promise String\nvar directoryTree = function directoryTree(dirPath) {\n    var paths = [];\n    var search = function search(dirPath) {\n        return isDirectory(dirPath).then(function(isDir) {\n            if (isDir) {\n                var searchOnDir = function searchOnDir(dir) {\n                    return search(path.join(dirPath, dir));\n                };\n                return Q.all(Q.map(fs.readdir(dirPath), searchOnDir));\n            } else {\n                paths.push(dirPath);\n            }\n            ;\n        });\n    };\n    return Q.all(search(dirPath)).then(function() {\n        return paths;\n    });\n}; // Regex -> String ~> Promise (Array String)\nvar search = function search(regex) {\n    return function(dirPath) {\n        return directoryTree(dirPath).then(function(tree) {\n            return tree.filter(function(path) {\n                return regex.test(path);\n            });\n        });\n    };\n}; // String -> String -> String -> String ~> Promise String\n//   Downloads a file inside a tar.gz and places it at `filePath`.\n//   Checks the md5 hash of the tar before extracting it.\n//   Checks the md5 hash of the file after extracting it.\n//   If all is OK, returns a promise containing the file path.\nvar safeDownloadArchived = function safeDownloadArchived(url) {\n    return function(archiveHash) {\n        return function(fileHash) {\n            return function(filePath) {\n                var fileDir = path.dirname(filePath);\n                var fileName = path.basename(filePath);\n                var archivePath = path.join(fileDir, \".swarm_downloads/files.tar.gz\");\n                var archiveDir = path.dirname(archivePath);\n                var promise = Q.resolve(mkdirp(archiveDir)).then(function() {\n                    return checksum(fileHash)(filePath);\n                }).then(function() {\n                    return filePath;\n                })[\"catch\"](function() {\n                    return fs.exists(archiveDir).then(function(exists) {\n                        return !exists ? fs.mkdir(archiveDir) : null;\n                    }).then(function() {\n                        return download(url)(archivePath).onData(promise.onDataCallback);\n                    }).then(function() {\n                        return hash(\"md5\")(archivePath);\n                    }).then(function() {\n                        return archiveHash ? checksum(archiveHash)(archivePath) : null;\n                    }).then(function() {\n                        return extract(archivePath)(archiveDir);\n                    }).then(function() {\n                        return search(new RegExp(fileName + \"$\"))(archiveDir);\n                    }).then(function(fp) {\n                        return fs.rename(fp[0], filePath);\n                    }).then(function() {\n                        return fs.unlink(archivePath);\n                    }).then(function() {\n                        return fileHash ? checksum(fileHash)(filePath) : null;\n                    }).then(function() {\n                        return filePath;\n                    });\n                });\n                promise.onDataCallback = function() {};\n                promise.onData = function(callback) {\n                    promise.onDataCallback = callback || function() {};\n                    return promise;\n                };\n                return promise;\n            };\n        };\n    };\n}; // String -> String ~> Promise String\n//   Like `safeDownloadArchivedFile`, but without the checksums.\nvar downloadArchived = function downloadArchived(url) {\n    return function(path) {\n        return safeDownloadArchived(url)(null)(null)(path);\n    };\n}; // () => Promise Bool\n//   Tests the implementation by downloading a predetermined tar.gz\n//   from a mocked HTTP-server into a mocked filesystem. Does some\n//   redundancy tests such as checking the file constents and double\n//   checking its MD5 hash.\n//   Returns a promise containing a boolean, true if tests passed.\nvar test = function test() {\n    var filePath = \"/swarm/foo.txt\";\n    var fileHash = \"d3b07384d113edec49eaa6238ad5ff00\";\n    var archiveUrl = \"http://localhost:12534\";\n    var archiveHash = \"7fa45f946bb2a696bdd9972e0fbceac2\";\n    var archiveData = new Buffer([\n        0x1f,\n        0x8b,\n        0x08,\n        0x00,\n        0xf1,\n        0x34,\n        0xaf,\n        0x58,\n        0x00,\n        0x03,\n        0xed,\n        0xcf,\n        0x3d,\n        0x0e,\n        0x83,\n        0x30,\n        0x0c,\n        0x86,\n        0x61,\n        0x66,\n        0x4e,\n        0xe1,\n        0x13,\n        0x54,\n        0xce,\n        0x0f,\n        0xc9,\n        0x79,\n        0x58,\n        0xb2,\n        0x46,\n        0x82,\n        0x14,\n        0x71,\n        0x7c,\n        0xd2,\n        0x06,\n        0x31,\n        0x52,\n        0x75,\n        0x40,\n        0x08,\n        0xe9,\n        0x7d,\n        0x96,\n        0x4f,\n        0x96,\n        0x3d,\n        0x7c,\n        0x4e,\n        0x39,\n        0xbf,\n        0xca,\n        0x5a,\n        0xba,\n        0x2b,\n        0xa9,\n        0x6a,\n        0xf0,\n        0x5e,\n        0x3e,\n        0x19,\n        0xc3,\n        0xf0,\n        0x4d,\n        0xb5,\n        0x6d,\n        0xde,\n        0x79,\n        0x31,\n        0x4e,\n        0x07,\n        0x17,\n        0x9c,\n        0xb5,\n        0x31,\n        0x8a,\n        0x1a,\n        0xab,\n        0xc6,\n        0x77,\n        0xa2,\n        0x97,\n        0xb6,\n        0xda,\n        0xbd,\n        0xe7,\n        0x32,\n        0x4e,\n        0xb5,\n        0xca,\n        0xf2,\n        0xe3,\n        0xae,\n        0x9e,\n        0xa5,\n        0x74,\n        0xb2,\n        0x6f,\n        0x8f,\n        0xc8,\n        0x91,\n        0x0f,\n        0x91,\n        0x72,\n        0xee,\n        0xef,\n        0xee,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0xf8,\n        0xdf,\n        0x06,\n        0xb3,\n        0x2a,\n        0xda,\n        0xed,\n        0x00,\n        0x28,\n        0x00,\n        0x00\n    ]);\n    var crypto = __webpack_require__(/*! crypto */ \"crypto\");\n    var fsMock = __webpack_require__(/*! mock-fs */ \"(ssr)/./node_modules/mock-fs/lib/index.js\")({\n        \"/swarm\": {}\n    });\n    var httpMock = (__webpack_require__(/*! http */ \"http\").createServer)(function(_, res) {\n        return res.end(archiveData);\n    }).listen(12534);\n    return safeDownloadArchived(archiveUrl)(archiveHash)(fileHash)(filePath).then(checksum(fileHash)).then(readUTF8).then(function(text) {\n        return text === \"foo\\n\";\n    }).then(assert).then(function() {\n        return safeDownloadArchived(archiveUrl)(archiveHash)(fileHash)(filePath);\n    }).then(function() {\n        return true;\n    })[\"catch\"](false)[\"finally\"](function() {\n        return httpMock.close();\n    });\n};\nmodule.exports = {\n    download: download,\n    hash: hash,\n    checksum: checksum,\n    downloadAndCheck: downloadAndCheck,\n    extract: extract,\n    readUTF8: readUTF8,\n    safeDownloadArchived: safeDownloadArchived,\n    directoryTree: directoryTree,\n    downloadArchived: downloadArchived,\n    search: search,\n    test: test\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swarm-js/lib/files.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/swarm-js/lib/pick.js":
/*!*******************************************!*\
  !*** ./node_modules/swarm-js/lib/pick.js ***!
  \*******************************************/
/***/ ((module) => {

eval("var picker = function picker(type) {\n    return function() {\n        return new Promise(function(resolve, reject) {\n            var fileLoader = function fileLoader(e) {\n                var directory = {};\n                var totalFiles = e.target.files.length;\n                var loadedFiles = 0;\n                [].map.call(e.target.files, function(file) {\n                    var reader = new FileReader();\n                    reader.onload = function(e) {\n                        var data = new Uint8Array(e.target.result);\n                        if (type === \"directory\") {\n                            var path = file.webkitRelativePath;\n                            directory[path.slice(path.indexOf(\"/\") + 1)] = {\n                                type: \"text/plain\",\n                                data: data\n                            };\n                            if (++loadedFiles === totalFiles) resolve(directory);\n                        } else if (type === \"file\") {\n                            var _path = file.webkitRelativePath;\n                            resolve({\n                                \"type\": mimetype.lookup(_path),\n                                \"data\": data\n                            });\n                        } else {\n                            resolve(data);\n                        }\n                    };\n                    reader.readAsArrayBuffer(file);\n                });\n            };\n            var fileInput;\n            if (type === \"directory\") {\n                fileInput = document.createElement(\"input\");\n                fileInput.addEventListener(\"change\", fileLoader);\n                fileInput.type = \"file\";\n                fileInput.webkitdirectory = true;\n                fileInput.mozdirectory = true;\n                fileInput.msdirectory = true;\n                fileInput.odirectory = true;\n                fileInput.directory = true;\n            } else {\n                fileInput = document.createElement(\"input\");\n                fileInput.addEventListener(\"change\", fileLoader);\n                fileInput.type = \"file\";\n            }\n            ;\n            var mouseEvent = document.createEvent(\"MouseEvents\");\n            mouseEvent.initEvent(\"click\", true, false);\n            fileInput.dispatchEvent(mouseEvent);\n        });\n    };\n};\nmodule.exports = {\n    data: picker(\"data\"),\n    file: picker(\"file\"),\n    directory: picker(\"directory\")\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9zd2FybS1qcy9saWIvcGljay5qcz8zZTM4Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBwaWNrZXIgPSBmdW5jdGlvbiBwaWNrZXIodHlwZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgZmlsZUxvYWRlciA9IGZ1bmN0aW9uIGZpbGVMb2FkZXIoZSkge1xuICAgICAgICB2YXIgZGlyZWN0b3J5ID0ge307XG4gICAgICAgIHZhciB0b3RhbEZpbGVzID0gZS50YXJnZXQuZmlsZXMubGVuZ3RoO1xuICAgICAgICB2YXIgbG9hZGVkRmlsZXMgPSAwO1xuICAgICAgICBbXS5tYXAuY2FsbChlLnRhcmdldC5maWxlcywgZnVuY3Rpb24gKGZpbGUpIHtcbiAgICAgICAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcblxuICAgICAgICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgdmFyIGRhdGEgPSBuZXcgVWludDhBcnJheShlLnRhcmdldC5yZXN1bHQpO1xuXG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gXCJkaXJlY3RvcnlcIikge1xuICAgICAgICAgICAgICB2YXIgcGF0aCA9IGZpbGUud2Via2l0UmVsYXRpdmVQYXRoO1xuICAgICAgICAgICAgICBkaXJlY3RvcnlbcGF0aC5zbGljZShwYXRoLmluZGV4T2YoXCIvXCIpICsgMSldID0ge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwidGV4dC9wbGFpblwiLFxuICAgICAgICAgICAgICAgIGRhdGE6IGRhdGFcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgaWYgKCsrbG9hZGVkRmlsZXMgPT09IHRvdGFsRmlsZXMpIHJlc29sdmUoZGlyZWN0b3J5KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJmaWxlXCIpIHtcbiAgICAgICAgICAgICAgdmFyIF9wYXRoID0gZmlsZS53ZWJraXRSZWxhdGl2ZVBhdGg7XG4gICAgICAgICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBtaW1ldHlwZS5sb29rdXAoX3BhdGgpLFxuICAgICAgICAgICAgICAgIFwiZGF0YVwiOiBkYXRhXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVzb2x2ZShkYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpO1xuICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBmaWxlSW5wdXQ7XG5cbiAgICAgIGlmICh0eXBlID09PSBcImRpcmVjdG9yeVwiKSB7XG4gICAgICAgIGZpbGVJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICAgICAgZmlsZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgZmlsZUxvYWRlcik7XG4gICAgICAgIGZpbGVJbnB1dC50eXBlID0gXCJmaWxlXCI7XG4gICAgICAgIGZpbGVJbnB1dC53ZWJraXRkaXJlY3RvcnkgPSB0cnVlO1xuICAgICAgICBmaWxlSW5wdXQubW96ZGlyZWN0b3J5ID0gdHJ1ZTtcbiAgICAgICAgZmlsZUlucHV0Lm1zZGlyZWN0b3J5ID0gdHJ1ZTtcbiAgICAgICAgZmlsZUlucHV0Lm9kaXJlY3RvcnkgPSB0cnVlO1xuICAgICAgICBmaWxlSW5wdXQuZGlyZWN0b3J5ID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZpbGVJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICAgICAgZmlsZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgZmlsZUxvYWRlcik7XG4gICAgICAgIGZpbGVJbnB1dC50eXBlID0gXCJmaWxlXCI7XG4gICAgICB9XG5cbiAgICAgIDtcbiAgICAgIHZhciBtb3VzZUV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJNb3VzZUV2ZW50c1wiKTtcbiAgICAgIG1vdXNlRXZlbnQuaW5pdEV2ZW50KFwiY2xpY2tcIiwgdHJ1ZSwgZmFsc2UpO1xuICAgICAgZmlsZUlucHV0LmRpc3BhdGNoRXZlbnQobW91c2VFdmVudCk7XG4gICAgfSk7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZGF0YTogcGlja2VyKFwiZGF0YVwiKSxcbiAgZmlsZTogcGlja2VyKFwiZmlsZVwiKSxcbiAgZGlyZWN0b3J5OiBwaWNrZXIoXCJkaXJlY3RvcnlcIilcbn07Il0sIm5hbWVzIjpbInBpY2tlciIsInR5cGUiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImZpbGVMb2FkZXIiLCJlIiwiZGlyZWN0b3J5IiwidG90YWxGaWxlcyIsInRhcmdldCIsImZpbGVzIiwibGVuZ3RoIiwibG9hZGVkRmlsZXMiLCJtYXAiLCJjYWxsIiwiZmlsZSIsInJlYWRlciIsIkZpbGVSZWFkZXIiLCJvbmxvYWQiLCJkYXRhIiwiVWludDhBcnJheSIsInJlc3VsdCIsInBhdGgiLCJ3ZWJraXRSZWxhdGl2ZVBhdGgiLCJzbGljZSIsImluZGV4T2YiLCJfcGF0aCIsIm1pbWV0eXBlIiwibG9va3VwIiwicmVhZEFzQXJyYXlCdWZmZXIiLCJmaWxlSW5wdXQiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwid2Via2l0ZGlyZWN0b3J5IiwibW96ZGlyZWN0b3J5IiwibXNkaXJlY3RvcnkiLCJvZGlyZWN0b3J5IiwibW91c2VFdmVudCIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLFNBQVMsU0FBU0EsT0FBT0MsSUFBSTtJQUMvQixPQUFPO1FBQ0wsT0FBTyxJQUFJQyxRQUFRLFNBQVVDLE9BQU8sRUFBRUMsTUFBTTtZQUMxQyxJQUFJQyxhQUFhLFNBQVNBLFdBQVdDLENBQUM7Z0JBQ3BDLElBQUlDLFlBQVksQ0FBQztnQkFDakIsSUFBSUMsYUFBYUYsRUFBRUcsTUFBTSxDQUFDQyxLQUFLLENBQUNDLE1BQU07Z0JBQ3RDLElBQUlDLGNBQWM7Z0JBQ2xCLEVBQUUsQ0FBQ0MsR0FBRyxDQUFDQyxJQUFJLENBQUNSLEVBQUVHLE1BQU0sQ0FBQ0MsS0FBSyxFQUFFLFNBQVVLLElBQUk7b0JBQ3hDLElBQUlDLFNBQVMsSUFBSUM7b0JBRWpCRCxPQUFPRSxNQUFNLEdBQUcsU0FBVVosQ0FBQzt3QkFDekIsSUFBSWEsT0FBTyxJQUFJQyxXQUFXZCxFQUFFRyxNQUFNLENBQUNZLE1BQU07d0JBRXpDLElBQUlwQixTQUFTLGFBQWE7NEJBQ3hCLElBQUlxQixPQUFPUCxLQUFLUSxrQkFBa0I7NEJBQ2xDaEIsU0FBUyxDQUFDZSxLQUFLRSxLQUFLLENBQUNGLEtBQUtHLE9BQU8sQ0FBQyxPQUFPLEdBQUcsR0FBRztnQ0FDN0N4QixNQUFNO2dDQUNOa0IsTUFBTUE7NEJBQ1I7NEJBQ0EsSUFBSSxFQUFFUCxnQkFBZ0JKLFlBQVlMLFFBQVFJO3dCQUM1QyxPQUFPLElBQUlOLFNBQVMsUUFBUTs0QkFDMUIsSUFBSXlCLFFBQVFYLEtBQUtRLGtCQUFrQjs0QkFDbkNwQixRQUFRO2dDQUNOLFFBQVF3QixTQUFTQyxNQUFNLENBQUNGO2dDQUN4QixRQUFRUDs0QkFDVjt3QkFDRixPQUFPOzRCQUNMaEIsUUFBUWdCO3dCQUNWO29CQUNGO29CQUVBSCxPQUFPYSxpQkFBaUIsQ0FBQ2Q7Z0JBQzNCO1lBQ0Y7WUFFQSxJQUFJZTtZQUVKLElBQUk3QixTQUFTLGFBQWE7Z0JBQ3hCNkIsWUFBWUMsU0FBU0MsYUFBYSxDQUFDO2dCQUNuQ0YsVUFBVUcsZ0JBQWdCLENBQUMsVUFBVTVCO2dCQUNyQ3lCLFVBQVU3QixJQUFJLEdBQUc7Z0JBQ2pCNkIsVUFBVUksZUFBZSxHQUFHO2dCQUM1QkosVUFBVUssWUFBWSxHQUFHO2dCQUN6QkwsVUFBVU0sV0FBVyxHQUFHO2dCQUN4Qk4sVUFBVU8sVUFBVSxHQUFHO2dCQUN2QlAsVUFBVXZCLFNBQVMsR0FBRztZQUN4QixPQUFPO2dCQUNMdUIsWUFBWUMsU0FBU0MsYUFBYSxDQUFDO2dCQUNuQ0YsVUFBVUcsZ0JBQWdCLENBQUMsVUFBVTVCO2dCQUNyQ3lCLFVBQVU3QixJQUFJLEdBQUc7WUFDbkI7O1lBR0EsSUFBSXFDLGFBQWFQLFNBQVNRLFdBQVcsQ0FBQztZQUN0Q0QsV0FBV0UsU0FBUyxDQUFDLFNBQVMsTUFBTTtZQUNwQ1YsVUFBVVcsYUFBYSxDQUFDSDtRQUMxQjtJQUNGO0FBQ0Y7QUFFQUksT0FBT0MsT0FBTyxHQUFHO0lBQ2Z4QixNQUFNbkIsT0FBTztJQUNiZSxNQUFNZixPQUFPO0lBQ2JPLFdBQVdQLE9BQU87QUFDcEIiLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dhcm0tanMvbGliL3BpY2suanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swarm-js/lib/pick.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/swarm-js/lib/swarm-hash.js":
/*!*************************************************!*\
  !*** ./node_modules/swarm-js/lib/swarm-hash.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Thanks https://github.com/axic/swarmhash\nvar keccak = (__webpack_require__(/*! eth-lib/lib/hash */ \"(ssr)/./node_modules/eth-lib/lib/hash.js\").keccak256);\nvar Bytes = __webpack_require__(/*! eth-lib/lib/bytes */ \"(ssr)/./node_modules/eth-lib/lib/bytes.js\");\nvar swarmHashBlock = function swarmHashBlock(length, data) {\n    var lengthEncoded = Bytes.reverse(Bytes.pad(6, Bytes.fromNumber(length)));\n    var bytes = Bytes.flatten([\n        lengthEncoded,\n        \"0x0000\",\n        data\n    ]);\n    return keccak(bytes).slice(2);\n}; // (Bytes | Uint8Array | String) -> String\nvar swarmHash = function swarmHash(data) {\n    if (typeof data === \"string\" && data.slice(0, 2) !== \"0x\") {\n        data = Bytes.fromString(data);\n    } else if (typeof data !== \"string\" && data.length !== undefined) {\n        data = Bytes.fromUint8Array(data);\n    }\n    var length = Bytes.length(data);\n    if (length <= 4096) {\n        return swarmHashBlock(length, data);\n    }\n    var maxSize = 4096;\n    while(maxSize * (4096 / 32) < length){\n        maxSize *= 4096 / 32;\n    }\n    var innerNodes = [];\n    for(var i = 0; i < length; i += maxSize){\n        var size = maxSize < length - i ? maxSize : length - i;\n        innerNodes.push(swarmHash(Bytes.slice(data, i, i + size)));\n    }\n    return swarmHashBlock(length, Bytes.flatten(innerNodes));\n};\nmodule.exports = swarmHash;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dhcm0tanMvbGliL3N3YXJtLWhhc2guanMiLCJtYXBwaW5ncyI6IkFBQUEsMkNBQTJDO0FBQzNDLElBQUlBLFNBQVNDLG1HQUFxQztBQUVsRCxJQUFJRSxRQUFRRixtQkFBT0EsQ0FBQyxvRUFBbUI7QUFFdkMsSUFBSUcsaUJBQWlCLFNBQVNBLGVBQWVDLE1BQU0sRUFBRUMsSUFBSTtJQUN2RCxJQUFJQyxnQkFBZ0JKLE1BQU1LLE9BQU8sQ0FBQ0wsTUFBTU0sR0FBRyxDQUFDLEdBQUdOLE1BQU1PLFVBQVUsQ0FBQ0w7SUFDaEUsSUFBSU0sUUFBUVIsTUFBTVMsT0FBTyxDQUFDO1FBQUNMO1FBQWU7UUFBVUQ7S0FBSztJQUN6RCxPQUFPTixPQUFPVyxPQUFPRSxLQUFLLENBQUM7QUFDN0IsR0FBRywwQ0FBMEM7QUFHN0MsSUFBSUMsWUFBWSxTQUFTQSxVQUFVUixJQUFJO0lBQ3JDLElBQUksT0FBT0EsU0FBUyxZQUFZQSxLQUFLTyxLQUFLLENBQUMsR0FBRyxPQUFPLE1BQU07UUFDekRQLE9BQU9ILE1BQU1ZLFVBQVUsQ0FBQ1Q7SUFDMUIsT0FBTyxJQUFJLE9BQU9BLFNBQVMsWUFBWUEsS0FBS0QsTUFBTSxLQUFLVyxXQUFXO1FBQ2hFVixPQUFPSCxNQUFNYyxjQUFjLENBQUNYO0lBQzlCO0lBRUEsSUFBSUQsU0FBU0YsTUFBTUUsTUFBTSxDQUFDQztJQUUxQixJQUFJRCxVQUFVLE1BQU07UUFDbEIsT0FBT0QsZUFBZUMsUUFBUUM7SUFDaEM7SUFFQSxJQUFJWSxVQUFVO0lBRWQsTUFBT0EsVUFBVyxRQUFPLEVBQUMsSUFBS2IsT0FBUTtRQUNyQ2EsV0FBVyxPQUFPO0lBQ3BCO0lBRUEsSUFBSUMsYUFBYSxFQUFFO0lBRW5CLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJZixRQUFRZSxLQUFLRixRQUFTO1FBQ3hDLElBQUlHLE9BQU9ILFVBQVViLFNBQVNlLElBQUlGLFVBQVViLFNBQVNlO1FBQ3JERCxXQUFXRyxJQUFJLENBQUNSLFVBQVVYLE1BQU1VLEtBQUssQ0FBQ1AsTUFBTWMsR0FBR0EsSUFBSUM7SUFDckQ7SUFFQSxPQUFPakIsZUFBZUMsUUFBUUYsTUFBTVMsT0FBTyxDQUFDTztBQUM5QztBQUVBSSxPQUFPQyxPQUFPLEdBQUdWIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvc3dhcm0tanMvbGliL3N3YXJtLWhhc2guanM/NjhkYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGFua3MgaHR0cHM6Ly9naXRodWIuY29tL2F4aWMvc3dhcm1oYXNoXG52YXIga2VjY2FrID0gcmVxdWlyZShcImV0aC1saWIvbGliL2hhc2hcIikua2VjY2FrMjU2O1xuXG52YXIgQnl0ZXMgPSByZXF1aXJlKFwiZXRoLWxpYi9saWIvYnl0ZXNcIik7XG5cbnZhciBzd2FybUhhc2hCbG9jayA9IGZ1bmN0aW9uIHN3YXJtSGFzaEJsb2NrKGxlbmd0aCwgZGF0YSkge1xuICB2YXIgbGVuZ3RoRW5jb2RlZCA9IEJ5dGVzLnJldmVyc2UoQnl0ZXMucGFkKDYsIEJ5dGVzLmZyb21OdW1iZXIobGVuZ3RoKSkpO1xuICB2YXIgYnl0ZXMgPSBCeXRlcy5mbGF0dGVuKFtsZW5ndGhFbmNvZGVkLCBcIjB4MDAwMFwiLCBkYXRhXSk7XG4gIHJldHVybiBrZWNjYWsoYnl0ZXMpLnNsaWNlKDIpO1xufTsgLy8gKEJ5dGVzIHwgVWludDhBcnJheSB8IFN0cmluZykgLT4gU3RyaW5nXG5cblxudmFyIHN3YXJtSGFzaCA9IGZ1bmN0aW9uIHN3YXJtSGFzaChkYXRhKSB7XG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiAmJiBkYXRhLnNsaWNlKDAsIDIpICE9PSBcIjB4XCIpIHtcbiAgICBkYXRhID0gQnl0ZXMuZnJvbVN0cmluZyhkYXRhKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiAmJiBkYXRhLmxlbmd0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZGF0YSA9IEJ5dGVzLmZyb21VaW50OEFycmF5KGRhdGEpO1xuICB9XG5cbiAgdmFyIGxlbmd0aCA9IEJ5dGVzLmxlbmd0aChkYXRhKTtcblxuICBpZiAobGVuZ3RoIDw9IDQwOTYpIHtcbiAgICByZXR1cm4gc3dhcm1IYXNoQmxvY2sobGVuZ3RoLCBkYXRhKTtcbiAgfVxuXG4gIHZhciBtYXhTaXplID0gNDA5NjtcblxuICB3aGlsZSAobWF4U2l6ZSAqICg0MDk2IC8gMzIpIDwgbGVuZ3RoKSB7XG4gICAgbWF4U2l6ZSAqPSA0MDk2IC8gMzI7XG4gIH1cblxuICB2YXIgaW5uZXJOb2RlcyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IG1heFNpemUpIHtcbiAgICB2YXIgc2l6ZSA9IG1heFNpemUgPCBsZW5ndGggLSBpID8gbWF4U2l6ZSA6IGxlbmd0aCAtIGk7XG4gICAgaW5uZXJOb2Rlcy5wdXNoKHN3YXJtSGFzaChCeXRlcy5zbGljZShkYXRhLCBpLCBpICsgc2l6ZSkpKTtcbiAgfVxuXG4gIHJldHVybiBzd2FybUhhc2hCbG9jayhsZW5ndGgsIEJ5dGVzLmZsYXR0ZW4oaW5uZXJOb2RlcykpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBzd2FybUhhc2g7Il0sIm5hbWVzIjpbImtlY2NhayIsInJlcXVpcmUiLCJrZWNjYWsyNTYiLCJCeXRlcyIsInN3YXJtSGFzaEJsb2NrIiwibGVuZ3RoIiwiZGF0YSIsImxlbmd0aEVuY29kZWQiLCJyZXZlcnNlIiwicGFkIiwiZnJvbU51bWJlciIsImJ5dGVzIiwiZmxhdHRlbiIsInNsaWNlIiwic3dhcm1IYXNoIiwiZnJvbVN0cmluZyIsInVuZGVmaW5lZCIsImZyb21VaW50OEFycmF5IiwibWF4U2l6ZSIsImlubmVyTm9kZXMiLCJpIiwic2l6ZSIsInB1c2giLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swarm-js/lib/swarm-hash.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/swarm-js/lib/swarm.js":
/*!********************************************!*\
  !*** ./node_modules/swarm-js/lib/swarm.js ***!
  \********************************************/
/***/ ((module) => {

eval("// TODO: this is a temporary fix to hide those libraries from the browser. A\n// slightly better long-term solution would be to split this file into two,\n// separating the functions that are used on Node.js from the functions that\n// are used only on the browser.\nmodule.exports = function(_ref) {\n    var fs = _ref.fs, files = _ref.files, os = _ref.os, path = _ref.path, child_process = _ref.child_process, mimetype = _ref.mimetype, defaultArchives = _ref.defaultArchives, request = _ref.request, downloadUrl = _ref.downloadUrl, bytes = _ref.bytes, hash = _ref.hash, pick = _ref.pick;\n    // ∀ a . String -> JSON -> Map String a -o Map String a\n    //   Inserts a key/val pair in an object impurely.\n    var impureInsert = function impureInsert(key) {\n        return function(val) {\n            return function(map) {\n                return map[key] = val, map;\n            };\n        };\n    }; // String -> JSON -> Map String JSON\n    //   Merges an array of keys and an array of vals into an object.\n    var toMap = function toMap(keys) {\n        return function(vals) {\n            var map = {};\n            for(var i = 0, l = keys.length; i < l; ++i){\n                map[keys[i]] = vals[i];\n            }\n            return map;\n        };\n    }; // ∀ a . Map String a -> Map String a -> Map String a\n    //   Merges two maps into one.\n    var merge = function merge(a) {\n        return function(b) {\n            var map = {};\n            for(var key in a){\n                map[key] = a[key];\n            }\n            for(var _key in b){\n                map[_key] = b[_key];\n            }\n            return map;\n        };\n    }; // ∀ a . [a] -> [a] -> Bool\n    var equals = function equals(a) {\n        return function(b) {\n            if (a.length !== b.length) {\n                return false;\n            } else {\n                for(var i = 0, l = a.length; i < l; ++i){\n                    if (a[i] !== b[i]) return false;\n                }\n            }\n            return true;\n        };\n    }; // String -> String -> String\n    var rawUrl = function rawUrl(swarmUrl) {\n        return function(hash) {\n            return \"\".concat(swarmUrl, \"/bzz-raw:/\").concat(hash);\n        };\n    }; // String -> String -> Promise Uint8Array\n    //   Gets the raw contents of a Swarm hash address.\n    var downloadData = function downloadData(swarmUrl) {\n        return function(hash) {\n            return new Promise(function(resolve, reject) {\n                request(rawUrl(swarmUrl)(hash), {\n                    responseType: \"arraybuffer\"\n                }, function(err, arrayBuffer, response) {\n                    if (err) {\n                        return reject(err);\n                    }\n                    if (response.statusCode >= 400) {\n                        return reject(new Error(\"Error \".concat(response.statusCode, \".\")));\n                    }\n                    return resolve(new Uint8Array(arrayBuffer));\n                });\n            });\n        };\n    }; // type Entry = {\"type\": String, \"hash\": String}\n    // type File = {\"type\": String, \"data\": Uint8Array}\n    // String -> String -> Promise (Map String Entry)\n    //   Solves the manifest of a Swarm address recursively.\n    //   Returns a map from full paths to entries.\n    var downloadEntries = function downloadEntries(swarmUrl) {\n        return function(hash) {\n            var search = function search(hash) {\n                return function(path) {\n                    return function(routes) {\n                        // Formats an entry to the Swarm.js type.\n                        var format = function format(entry) {\n                            return {\n                                type: entry.contentType,\n                                hash: entry.hash\n                            };\n                        }; // To download a single entry:\n                        //   if type is bzz-manifest, go deeper\n                        //   if not, add it to the routing table\n                        var downloadEntry = function downloadEntry(entry) {\n                            if (entry.path === undefined) {\n                                return Promise.resolve();\n                            } else {\n                                return entry.contentType === \"application/bzz-manifest+json\" ? search(entry.hash)(path + entry.path)(routes) : Promise.resolve(impureInsert(path + entry.path)(format(entry))(routes));\n                            }\n                        }; // Downloads the initial manifest and then each entry.\n                        return downloadData(swarmUrl)(hash).then(function(text) {\n                            return JSON.parse(toString(text)).entries;\n                        }).then(function(entries) {\n                            return Promise.all(entries.map(downloadEntry));\n                        }).then(function() {\n                            return routes;\n                        });\n                    };\n                };\n            };\n            return search(hash)(\"\")({});\n        };\n    }; // String -> String -> Promise (Map String String)\n    //   Same as `downloadEntries`, but returns only hashes (no types).\n    var downloadRoutes = function downloadRoutes(swarmUrl) {\n        return function(hash) {\n            return downloadEntries(swarmUrl)(hash).then(function(entries) {\n                return toMap(Object.keys(entries))(Object.keys(entries).map(function(route) {\n                    return entries[route].hash;\n                }));\n            });\n        };\n    }; // String -> String -> Promise (Map String File)\n    //   Gets the entire directory tree in a Swarm address.\n    //   Returns a promise mapping paths to file contents.\n    var downloadDirectory = function downloadDirectory(swarmUrl) {\n        return function(hash) {\n            return downloadEntries(swarmUrl)(hash).then(function(entries) {\n                var paths = Object.keys(entries);\n                var hashs = paths.map(function(path) {\n                    return entries[path].hash;\n                });\n                var types = paths.map(function(path) {\n                    return entries[path].type;\n                });\n                var datas = hashs.map(downloadData(swarmUrl));\n                var files = function files(datas) {\n                    return datas.map(function(data, i) {\n                        return {\n                            type: types[i],\n                            data: data\n                        };\n                    });\n                };\n                return Promise.all(datas).then(function(datas) {\n                    return toMap(paths)(files(datas));\n                });\n            });\n        };\n    }; // String -> String -> String -> Promise String\n    //   Gets the raw contents of a Swarm hash address.\n    //   Returns a promise with the downloaded file path.\n    var downloadDataToDisk = function downloadDataToDisk(swarmUrl) {\n        return function(hash) {\n            return function(filePath) {\n                return files.download(rawUrl(swarmUrl)(hash))(filePath);\n            };\n        };\n    }; // String -> String -> String -> Promise (Map String String)\n    //   Gets the entire directory tree in a Swarm address.\n    //   Returns a promise mapping paths to file contents.\n    var downloadDirectoryToDisk = function downloadDirectoryToDisk(swarmUrl) {\n        return function(hash) {\n            return function(dirPath) {\n                return downloadRoutes(swarmUrl)(hash).then(function(routingTable) {\n                    var downloads = [];\n                    for(var route in routingTable){\n                        if (route.length > 0) {\n                            var filePath = path.join(dirPath, route);\n                            downloads.push(downloadDataToDisk(swarmUrl)(routingTable[route])(filePath));\n                        }\n                        ;\n                    }\n                    ;\n                    return Promise.all(downloads).then(function() {\n                        return dirPath;\n                    });\n                });\n            };\n        };\n    }; // String -> Uint8Array -> Promise String\n    //   Uploads raw data to Swarm.\n    //   Returns a promise with the uploaded hash.\n    var uploadData = function uploadData(swarmUrl) {\n        return function(data) {\n            return new Promise(function(resolve, reject) {\n                var params = {\n                    body: typeof data === \"string\" ? fromString(data) : data,\n                    method: \"POST\"\n                };\n                request(\"\".concat(swarmUrl, \"/bzz-raw:/\"), params, function(err, data) {\n                    if (err) {\n                        return reject(err);\n                    }\n                    return resolve(data);\n                });\n            });\n        };\n    }; // String -> String -> String -> File -> Promise String\n    //   Uploads a file to the Swarm manifest at a given hash, under a specific\n    //   route. Returns a promise containing the uploaded hash.\n    //   FIXME: for some reasons Swarm-Gateways is sometimes returning\n    //   error 404 (bad request), so we retry up to 3 times. Why?\n    var uploadToManifest = function uploadToManifest(swarmUrl) {\n        return function(hash) {\n            return function(route) {\n                return function(file) {\n                    var attempt = function attempt(n) {\n                        var slashRoute = route[0] === \"/\" ? route : \"/\" + route;\n                        var url = \"\".concat(swarmUrl, \"/bzz:/\").concat(hash).concat(slashRoute);\n                        var opt = {\n                            method: \"PUT\",\n                            headers: {\n                                \"Content-Type\": file.type\n                            },\n                            body: file.data\n                        };\n                        return new Promise(function(resolve, reject) {\n                            request(url, opt, function(err, data) {\n                                if (err) {\n                                    return reject(err);\n                                }\n                                if (data.indexOf(\"error\") !== -1) {\n                                    return reject(data);\n                                }\n                                return resolve(data);\n                            });\n                        })[\"catch\"](function(e) {\n                            return n > 0 && attempt(n - 1);\n                        });\n                    };\n                    return attempt(3);\n                };\n            };\n        };\n    }; // String -> {type: String, data: Uint8Array} -> Promise String\n    var uploadFile = function uploadFile(swarmUrl) {\n        return function(file) {\n            return uploadDirectory(swarmUrl)({\n                \"\": file\n            });\n        };\n    }; // String -> String -> Promise String\n    var uploadFileFromDisk = function uploadFileFromDisk(swarmUrl) {\n        return function(filePath) {\n            return fs.readFile(filePath).then(function(data) {\n                return uploadFile(swarmUrl)({\n                    type: mimetype.lookup(filePath),\n                    data: data\n                });\n            });\n        };\n    }; // String -> Map String File -> Promise String\n    //   Uploads a directory to Swarm. The directory is\n    //   represented as a map of routes and files.\n    //   A default path is encoded by having a \"\" route.\n    var uploadDirectory = function uploadDirectory(swarmUrl) {\n        return function(directory) {\n            return uploadData(swarmUrl)(\"{}\").then(function(hash) {\n                var uploadRoute = function uploadRoute(route) {\n                    return function(hash) {\n                        return uploadToManifest(swarmUrl)(hash)(route)(directory[route]);\n                    };\n                };\n                var uploadToHash = function uploadToHash(hash, route) {\n                    return hash.then(uploadRoute(route));\n                };\n                return Object.keys(directory).reduce(uploadToHash, Promise.resolve(hash));\n            });\n        };\n    }; // String -> Promise String\n    var uploadDataFromDisk = function uploadDataFromDisk(swarmUrl) {\n        return function(filePath) {\n            return fs.readFile(filePath).then(uploadData(swarmUrl));\n        };\n    }; // String -> Nullable String -> String -> Promise String\n    var uploadDirectoryFromDisk = function uploadDirectoryFromDisk(swarmUrl) {\n        return function(defaultPath) {\n            return function(dirPath) {\n                return files.directoryTree(dirPath).then(function(fullPaths) {\n                    return Promise.all(fullPaths.map(function(path) {\n                        return fs.readFile(path);\n                    })).then(function(datas) {\n                        var paths = fullPaths.map(function(path) {\n                            return path.slice(dirPath.length);\n                        });\n                        var types = fullPaths.map(function(path) {\n                            return mimetype.lookup(path) || \"text/plain\";\n                        });\n                        return toMap(paths)(datas.map(function(data, i) {\n                            return {\n                                type: types[i],\n                                data: data\n                            };\n                        }));\n                    });\n                }).then(function(directory) {\n                    return merge(defaultPath ? {\n                        \"\": directory[defaultPath]\n                    } : {})(directory);\n                }).then(uploadDirectory(swarmUrl));\n            };\n        };\n    }; // String -> UploadInfo -> Promise String\n    //   Simplified multi-type upload which calls the correct\n    //   one based on the type of the argument given.\n    var _upload = function upload(swarmUrl) {\n        return function(arg) {\n            // Upload raw data from browser\n            if (arg.pick === \"data\") {\n                return pick.data().then(uploadData(swarmUrl)); // Upload a file from browser\n            } else if (arg.pick === \"file\") {\n                return pick.file().then(uploadFile(swarmUrl)); // Upload a directory from browser\n            } else if (arg.pick === \"directory\") {\n                return pick.directory().then(uploadDirectory(swarmUrl)); // Upload directory/file from disk\n            } else if (arg.path) {\n                switch(arg.kind){\n                    case \"data\":\n                        return uploadDataFromDisk(swarmUrl)(arg.path);\n                    case \"file\":\n                        return uploadFileFromDisk(swarmUrl)(arg.path);\n                    case \"directory\":\n                        return uploadDirectoryFromDisk(swarmUrl)(arg.defaultFile)(arg.path);\n                }\n                ; // Upload UTF-8 string or raw data (buffer)\n            } else if (arg.length || typeof arg === \"string\") {\n                return uploadData(swarmUrl)(arg); // Upload directory with JSON\n            } else if (arg instanceof Object) {\n                return uploadDirectory(swarmUrl)(arg);\n            }\n            return Promise.reject(new Error(\"Bad arguments\"));\n        };\n    }; // String -> String -> Nullable String -> Promise (String | Uint8Array | Map String Uint8Array)\n    //   Simplified multi-type download which calls the correct function based on\n    //   the type of the argument given, and on whether the Swwarm address has a\n    //   directory or a file.\n    var _download = function download(swarmUrl) {\n        return function(hash) {\n            return function(path) {\n                return isDirectory(swarmUrl)(hash).then(function(isDir) {\n                    if (isDir) {\n                        return path ? downloadDirectoryToDisk(swarmUrl)(hash)(path) : downloadDirectory(swarmUrl)(hash);\n                    } else {\n                        return path ? downloadDataToDisk(swarmUrl)(hash)(path) : downloadData(swarmUrl)(hash);\n                    }\n                });\n            };\n        };\n    }; // String -> Promise String\n    //   Downloads the Swarm binaries into a path. Returns a promise that only\n    //   resolves when the exact Swarm file is there, and verified to be correct.\n    //   If it was already there to begin with, skips the download.\n    var downloadBinary = function downloadBinary(path, archives) {\n        var system = os.platform().replace(\"win32\", \"windows\") + \"-\" + (os.arch() === \"x64\" ? \"amd64\" : \"386\");\n        var archive = (archives || defaultArchives)[system];\n        var archiveUrl = downloadUrl + archive.archive + \".tar.gz\";\n        var archiveMD5 = archive.archiveMD5;\n        var binaryMD5 = archive.binaryMD5;\n        return files.safeDownloadArchived(archiveUrl)(archiveMD5)(binaryMD5)(path);\n    }; // type SwarmSetup = {\n    //   account : String,\n    //   password : String,\n    //   dataDir : String,\n    //   binPath : String,\n    //   ensApi : String,\n    //   onDownloadProgress : Number ~> (),\n    //   archives : [{\n    //     archive: String,\n    //     binaryMD5: String,\n    //     archiveMD5: String\n    //   }]\n    // }\n    // SwarmSetup ~> Promise Process\n    //   Starts the Swarm process.\n    var startProcess = function startProcess(swarmSetup) {\n        return new Promise(function(resolve, reject) {\n            var spawn = child_process.spawn;\n            var hasString = function hasString(str) {\n                return function(buffer) {\n                    return (\"\" + buffer).indexOf(str) !== -1;\n                };\n            };\n            var account = swarmSetup.account, password = swarmSetup.password, dataDir = swarmSetup.dataDir, ensApi = swarmSetup.ensApi, privateKey = swarmSetup.privateKey;\n            var STARTUP_TIMEOUT_SECS = 3;\n            var WAITING_PASSWORD = 0;\n            var STARTING = 1;\n            var LISTENING = 2;\n            var PASSWORD_PROMPT_HOOK = \"Passphrase\";\n            var LISTENING_HOOK = \"Swarm http proxy started\";\n            var state = WAITING_PASSWORD;\n            var swarmProcess = spawn(swarmSetup.binPath, [\n                \"--bzzaccount\",\n                account || privateKey,\n                \"--datadir\",\n                dataDir,\n                \"--ens-api\",\n                ensApi\n            ]);\n            var handleProcessOutput = function handleProcessOutput(data) {\n                if (state === WAITING_PASSWORD && hasString(PASSWORD_PROMPT_HOOK)(data)) {\n                    setTimeout(function() {\n                        state = STARTING;\n                        swarmProcess.stdin.write(password + \"\\n\");\n                    }, 500);\n                } else if (hasString(LISTENING_HOOK)(data)) {\n                    state = LISTENING;\n                    clearTimeout(timeout);\n                    resolve(swarmProcess);\n                }\n            };\n            swarmProcess.stdout.on(\"data\", handleProcessOutput);\n            swarmProcess.stderr.on(\"data\", handleProcessOutput); //swarmProcess.on('close', () => setTimeout(restart, 2000));\n            var restart = function restart() {\n                return startProcess(swarmSetup).then(resolve)[\"catch\"](reject);\n            };\n            var error = function error() {\n                return reject(new Error(\"Couldn't start swarm process.\"));\n            };\n            var timeout = setTimeout(error, 20000);\n        });\n    }; // Process ~> Promise ()\n    //   Stops the Swarm process.\n    var stopProcess = function stopProcess(process) {\n        return new Promise(function(resolve, reject) {\n            process.stderr.removeAllListeners(\"data\");\n            process.stdout.removeAllListeners(\"data\");\n            process.stdin.removeAllListeners(\"error\");\n            process.removeAllListeners(\"error\");\n            process.removeAllListeners(\"exit\");\n            process.kill(\"SIGINT\");\n            var killTimeout = setTimeout(function() {\n                return process.kill(\"SIGKILL\");\n            }, 8000);\n            process.once(\"close\", function() {\n                clearTimeout(killTimeout);\n                resolve();\n            });\n        });\n    }; // SwarmSetup -> (SwarmAPI -> Promise ()) -> Promise ()\n    //   Receives a Swarm configuration object and a callback function. It then\n    //   checks if a local Swarm node is running. If no local Swarm is found, it\n    //   downloads the Swarm binaries to the dataDir (if not there), checksums,\n    //   starts the Swarm process and calls the callback function with an API\n    //   object using the local node. That callback must return a promise which\n    //   will resolve when it is done using the API, so that this function can\n    //   close the Swarm process properly. Returns a promise that resolves when the\n    //   user is done with the API and the Swarm process is closed.\n    //   TODO: check if Swarm process is already running (improve `isAvailable`)\n    var local = function local(swarmSetup) {\n        return function(useAPI) {\n            return _isAvailable(\"http://localhost:8500\").then(function(isAvailable) {\n                return isAvailable ? useAPI(at(\"http://localhost:8500\")).then(function() {}) : downloadBinary(swarmSetup.binPath, swarmSetup.archives).onData(function(data) {\n                    return (swarmSetup.onProgress || function() {})(data.length);\n                }).then(function() {\n                    return startProcess(swarmSetup);\n                }).then(function(process) {\n                    return useAPI(at(\"http://localhost:8500\")).then(function() {\n                        return process;\n                    });\n                }).then(stopProcess);\n            });\n        };\n    }; // String ~> Promise Bool\n    //   Returns true if Swarm is available on `url`.\n    //   Perfoms a test upload to determine that.\n    //   TODO: improve this?\n    var _isAvailable = function isAvailable(swarmUrl) {\n        var testFile = \"test\";\n        var testHash = \"c9a99c7d326dcc6316f32fe2625b311f6dc49a175e6877681ded93137d3569e7\";\n        return uploadData(swarmUrl)(testFile).then(function(hash) {\n            return hash === testHash;\n        })[\"catch\"](function() {\n            return false;\n        });\n    }; // String -> String ~> Promise Bool\n    //   Returns a Promise which is true if that Swarm address is a directory.\n    //   Determines that by checking that it (i) is a JSON, (ii) has a .entries.\n    //   TODO: improve this?\n    var isDirectory = function isDirectory(swarmUrl) {\n        return function(hash) {\n            return downloadData(swarmUrl)(hash).then(function(data) {\n                try {\n                    return !!JSON.parse(toString(data)).entries;\n                } catch (e) {\n                    return false;\n                }\n            });\n        };\n    }; // Uncurries a function; used to allow the f(x,y,z) style on exports.\n    var uncurry = function uncurry(f) {\n        return function(a, b, c, d, e) {\n            var p; // Hardcoded because efficiency (`arguments` is very slow).\n            if (typeof a !== \"undefined\") p = f(a);\n            if (typeof b !== \"undefined\") p = f(b);\n            if (typeof c !== \"undefined\") p = f(c);\n            if (typeof d !== \"undefined\") p = f(d);\n            if (typeof e !== \"undefined\") p = f(e);\n            return p;\n        };\n    }; // () -> Promise Bool\n    //   Not sure how to mock Swarm to test it properly. Ideas?\n    var test = function test() {\n        return Promise.resolve(true);\n    }; // Uint8Array -> String\n    var toString = function toString(uint8Array) {\n        return bytes.toString(bytes.fromUint8Array(uint8Array));\n    }; // String -> Uint8Array\n    var fromString = function fromString(string) {\n        return bytes.toUint8Array(bytes.fromString(string));\n    }; // String -> SwarmAPI\n    //   Fixes the `swarmUrl`, returning an API where you don't have to pass it.\n    var at = function at(swarmUrl) {\n        return {\n            download: function download(hash, path) {\n                return _download(swarmUrl)(hash)(path);\n            },\n            downloadData: uncurry(downloadData(swarmUrl)),\n            downloadDataToDisk: uncurry(downloadDataToDisk(swarmUrl)),\n            downloadDirectory: uncurry(downloadDirectory(swarmUrl)),\n            downloadDirectoryToDisk: uncurry(downloadDirectoryToDisk(swarmUrl)),\n            downloadEntries: uncurry(downloadEntries(swarmUrl)),\n            downloadRoutes: uncurry(downloadRoutes(swarmUrl)),\n            isAvailable: function isAvailable() {\n                return _isAvailable(swarmUrl);\n            },\n            upload: function upload(arg) {\n                return _upload(swarmUrl)(arg);\n            },\n            uploadData: uncurry(uploadData(swarmUrl)),\n            uploadFile: uncurry(uploadFile(swarmUrl)),\n            uploadFileFromDisk: uncurry(uploadFile(swarmUrl)),\n            uploadDataFromDisk: uncurry(uploadDataFromDisk(swarmUrl)),\n            uploadDirectory: uncurry(uploadDirectory(swarmUrl)),\n            uploadDirectoryFromDisk: uncurry(uploadDirectoryFromDisk(swarmUrl)),\n            uploadToManifest: uncurry(uploadToManifest(swarmUrl)),\n            pick: pick,\n            hash: hash,\n            fromString: fromString,\n            toString: toString\n        };\n    };\n    return {\n        at: at,\n        local: local,\n        download: _download,\n        downloadBinary: downloadBinary,\n        downloadData: downloadData,\n        downloadDataToDisk: downloadDataToDisk,\n        downloadDirectory: downloadDirectory,\n        downloadDirectoryToDisk: downloadDirectoryToDisk,\n        downloadEntries: downloadEntries,\n        downloadRoutes: downloadRoutes,\n        isAvailable: _isAvailable,\n        startProcess: startProcess,\n        stopProcess: stopProcess,\n        upload: _upload,\n        uploadData: uploadData,\n        uploadDataFromDisk: uploadDataFromDisk,\n        uploadFile: uploadFile,\n        uploadFileFromDisk: uploadFileFromDisk,\n        uploadDirectory: uploadDirectory,\n        uploadDirectoryFromDisk: uploadDirectoryFromDisk,\n        uploadToManifest: uploadToManifest,\n        pick: pick,\n        hash: hash,\n        fromString: fromString,\n        toString: toString\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swarm-js/lib/swarm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/swarm-js/node_modules/@szmarczak/http-timer/dist/source/index.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/swarm-js/node_modules/@szmarczak/http-timer/dist/source/index.js ***!
  \***************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst defer_to_connect_1 = __webpack_require__(/*! defer-to-connect */ \"(ssr)/./node_modules/defer-to-connect/dist/source/index.js\");\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst nodejsMajorVersion = Number(process.versions.node.split(\".\")[0]);\nconst timer = (request)=>{\n    if (request.timings) {\n        return request.timings;\n    }\n    const timings = {\n        start: Date.now(),\n        socket: undefined,\n        lookup: undefined,\n        connect: undefined,\n        secureConnect: undefined,\n        upload: undefined,\n        response: undefined,\n        end: undefined,\n        error: undefined,\n        abort: undefined,\n        phases: {\n            wait: undefined,\n            dns: undefined,\n            tcp: undefined,\n            tls: undefined,\n            request: undefined,\n            firstByte: undefined,\n            download: undefined,\n            total: undefined\n        }\n    };\n    request.timings = timings;\n    const handleError = (origin)=>{\n        const emit = origin.emit.bind(origin);\n        origin.emit = (event, ...args)=>{\n            // Catches the `error` event\n            if (event === \"error\") {\n                timings.error = Date.now();\n                timings.phases.total = timings.error - timings.start;\n                origin.emit = emit;\n            }\n            // Saves the original behavior\n            return emit(event, ...args);\n        };\n    };\n    handleError(request);\n    const onAbort = ()=>{\n        timings.abort = Date.now();\n        // Let the `end` response event be responsible for setting the total phase,\n        // unless the Node.js major version is >= 13.\n        if (!timings.response || nodejsMajorVersion >= 13) {\n            timings.phases.total = Date.now() - timings.start;\n        }\n    };\n    request.prependOnceListener(\"abort\", onAbort);\n    const onSocket = (socket)=>{\n        timings.socket = Date.now();\n        timings.phases.wait = timings.socket - timings.start;\n        if (util_1.types.isProxy(socket)) {\n            return;\n        }\n        const lookupListener = ()=>{\n            timings.lookup = Date.now();\n            timings.phases.dns = timings.lookup - timings.socket;\n        };\n        socket.prependOnceListener(\"lookup\", lookupListener);\n        defer_to_connect_1.default(socket, {\n            connect: ()=>{\n                timings.connect = Date.now();\n                if (timings.lookup === undefined) {\n                    socket.removeListener(\"lookup\", lookupListener);\n                    timings.lookup = timings.connect;\n                    timings.phases.dns = timings.lookup - timings.socket;\n                }\n                timings.phases.tcp = timings.connect - timings.lookup;\n            // This callback is called before flushing any data,\n            // so we don't need to set `timings.phases.request` here.\n            },\n            secureConnect: ()=>{\n                timings.secureConnect = Date.now();\n                timings.phases.tls = timings.secureConnect - timings.connect;\n            }\n        });\n    };\n    if (request.socket) {\n        onSocket(request.socket);\n    } else {\n        request.prependOnceListener(\"socket\", onSocket);\n    }\n    const onUpload = ()=>{\n        var _a;\n        timings.upload = Date.now();\n        timings.phases.request = timings.upload - ((_a = timings.secureConnect) !== null && _a !== void 0 ? _a : timings.connect);\n    };\n    const writableFinished = ()=>{\n        if (typeof request.writableFinished === \"boolean\") {\n            return request.writableFinished;\n        }\n        // Node.js doesn't have `request.writableFinished` property\n        return request.finished && request.outputSize === 0 && (!request.socket || request.socket.writableLength === 0);\n    };\n    if (writableFinished()) {\n        onUpload();\n    } else {\n        request.prependOnceListener(\"finish\", onUpload);\n    }\n    request.prependOnceListener(\"response\", (response)=>{\n        timings.response = Date.now();\n        timings.phases.firstByte = timings.response - timings.upload;\n        response.timings = timings;\n        handleError(response);\n        response.prependOnceListener(\"end\", ()=>{\n            timings.end = Date.now();\n            timings.phases.download = timings.end - timings.response;\n            timings.phases.total = timings.end - timings.start;\n        });\n        response.prependOnceListener(\"aborted\", onAbort);\n    });\n    return timings;\n};\nexports[\"default\"] = timer;\n// For CommonJS default export support\nmodule.exports = timer;\nmodule.exports[\"default\"] = timer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swarm-js/node_modules/@szmarczak/http-timer/dist/source/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/swarm-js/node_modules/cacheable-lookup/source/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/swarm-js/node_modules/cacheable-lookup/source/index.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { V4MAPPED, ADDRCONFIG, ALL, promises: { Resolver: AsyncResolver }, lookup: dnsLookup } = __webpack_require__(/*! dns */ \"dns\");\nconst { promisify } = __webpack_require__(/*! util */ \"util\");\nconst os = __webpack_require__(/*! os */ \"os\");\nconst kCacheableLookupCreateConnection = Symbol(\"cacheableLookupCreateConnection\");\nconst kCacheableLookupInstance = Symbol(\"cacheableLookupInstance\");\nconst kExpires = Symbol(\"expires\");\nconst supportsALL = typeof ALL === \"number\";\nconst verifyAgent = (agent)=>{\n    if (!(agent && typeof agent.createConnection === \"function\")) {\n        throw new Error(\"Expected an Agent instance as the first argument\");\n    }\n};\nconst map4to6 = (entries)=>{\n    for (const entry of entries){\n        if (entry.family === 6) {\n            continue;\n        }\n        entry.address = `::ffff:${entry.address}`;\n        entry.family = 6;\n    }\n};\nconst getIfaceInfo = ()=>{\n    let has4 = false;\n    let has6 = false;\n    for (const device of Object.values(os.networkInterfaces())){\n        for (const iface of device){\n            if (iface.internal) {\n                continue;\n            }\n            if (iface.family === \"IPv6\") {\n                has6 = true;\n            } else {\n                has4 = true;\n            }\n            if (has4 && has6) {\n                return {\n                    has4,\n                    has6\n                };\n            }\n        }\n    }\n    return {\n        has4,\n        has6\n    };\n};\nconst isIterable = (map)=>{\n    return Symbol.iterator in map;\n};\nconst ttl = {\n    ttl: true\n};\nconst all = {\n    all: true\n};\nclass CacheableLookup {\n    constructor({ cache = new Map(), maxTtl = Infinity, fallbackDuration = 3600, errorTtl = 0.15, resolver = new AsyncResolver(), lookup = dnsLookup } = {}){\n        this.maxTtl = maxTtl;\n        this.errorTtl = errorTtl;\n        this._cache = cache;\n        this._resolver = resolver;\n        this._dnsLookup = promisify(lookup);\n        if (this._resolver instanceof AsyncResolver) {\n            this._resolve4 = this._resolver.resolve4.bind(this._resolver);\n            this._resolve6 = this._resolver.resolve6.bind(this._resolver);\n        } else {\n            this._resolve4 = promisify(this._resolver.resolve4.bind(this._resolver));\n            this._resolve6 = promisify(this._resolver.resolve6.bind(this._resolver));\n        }\n        this._iface = getIfaceInfo();\n        this._pending = {};\n        this._nextRemovalTime = false;\n        this._hostnamesToFallback = new Set();\n        if (fallbackDuration < 1) {\n            this._fallback = false;\n        } else {\n            this._fallback = true;\n            const interval = setInterval(()=>{\n                this._hostnamesToFallback.clear();\n            }, fallbackDuration * 1000);\n            /* istanbul ignore next: There is no `interval.unref()` when running inside an Electron renderer */ if (interval.unref) {\n                interval.unref();\n            }\n        }\n        this.lookup = this.lookup.bind(this);\n        this.lookupAsync = this.lookupAsync.bind(this);\n    }\n    set servers(servers) {\n        this.clear();\n        this._resolver.setServers(servers);\n    }\n    get servers() {\n        return this._resolver.getServers();\n    }\n    lookup(hostname, options, callback) {\n        if (typeof options === \"function\") {\n            callback = options;\n            options = {};\n        } else if (typeof options === \"number\") {\n            options = {\n                family: options\n            };\n        }\n        if (!callback) {\n            throw new Error(\"Callback must be a function.\");\n        }\n        // eslint-disable-next-line promise/prefer-await-to-then\n        this.lookupAsync(hostname, options).then((result)=>{\n            if (options.all) {\n                callback(null, result);\n            } else {\n                callback(null, result.address, result.family, result.expires, result.ttl);\n            }\n        }, callback);\n    }\n    async lookupAsync(hostname, options = {}) {\n        if (typeof options === \"number\") {\n            options = {\n                family: options\n            };\n        }\n        let cached = await this.query(hostname);\n        if (options.family === 6) {\n            const filtered = cached.filter((entry)=>entry.family === 6);\n            if (options.hints & V4MAPPED) {\n                if (supportsALL && options.hints & ALL || filtered.length === 0) {\n                    map4to6(cached);\n                } else {\n                    cached = filtered;\n                }\n            } else {\n                cached = filtered;\n            }\n        } else if (options.family === 4) {\n            cached = cached.filter((entry)=>entry.family === 4);\n        }\n        if (options.hints & ADDRCONFIG) {\n            const { _iface } = this;\n            cached = cached.filter((entry)=>entry.family === 6 ? _iface.has6 : _iface.has4);\n        }\n        if (cached.length === 0) {\n            const error = new Error(`cacheableLookup ENOTFOUND ${hostname}`);\n            error.code = \"ENOTFOUND\";\n            error.hostname = hostname;\n            throw error;\n        }\n        if (options.all) {\n            return cached;\n        }\n        return cached[0];\n    }\n    async query(hostname) {\n        let cached = await this._cache.get(hostname);\n        if (!cached) {\n            const pending = this._pending[hostname];\n            if (pending) {\n                cached = await pending;\n            } else {\n                const newPromise = this.queryAndCache(hostname);\n                this._pending[hostname] = newPromise;\n                try {\n                    cached = await newPromise;\n                } finally{\n                    delete this._pending[hostname];\n                }\n            }\n        }\n        cached = cached.map((entry)=>{\n            return {\n                ...entry\n            };\n        });\n        return cached;\n    }\n    async _resolve(hostname) {\n        const wrap = async (promise)=>{\n            try {\n                return await promise;\n            } catch (error) {\n                if (error.code === \"ENODATA\" || error.code === \"ENOTFOUND\") {\n                    return [];\n                }\n                throw error;\n            }\n        };\n        // ANY is unsafe as it doesn't trigger new queries in the underlying server.\n        const [A, AAAA] = await Promise.all([\n            this._resolve4(hostname, ttl),\n            this._resolve6(hostname, ttl)\n        ].map((promise)=>wrap(promise)));\n        let aTtl = 0;\n        let aaaaTtl = 0;\n        let cacheTtl = 0;\n        const now = Date.now();\n        for (const entry of A){\n            entry.family = 4;\n            entry.expires = now + entry.ttl * 1000;\n            aTtl = Math.max(aTtl, entry.ttl);\n        }\n        for (const entry of AAAA){\n            entry.family = 6;\n            entry.expires = now + entry.ttl * 1000;\n            aaaaTtl = Math.max(aaaaTtl, entry.ttl);\n        }\n        if (A.length > 0) {\n            if (AAAA.length > 0) {\n                cacheTtl = Math.min(aTtl, aaaaTtl);\n            } else {\n                cacheTtl = aTtl;\n            }\n        } else {\n            cacheTtl = aaaaTtl;\n        }\n        return {\n            entries: [\n                ...A,\n                ...AAAA\n            ],\n            cacheTtl\n        };\n    }\n    async _lookup(hostname) {\n        try {\n            const entries = await this._dnsLookup(hostname, {\n                all: true\n            });\n            return {\n                entries,\n                cacheTtl: 0\n            };\n        } catch (_) {\n            return {\n                entries: [],\n                cacheTtl: 0\n            };\n        }\n    }\n    async _set(hostname, data, cacheTtl) {\n        if (this.maxTtl > 0 && cacheTtl > 0) {\n            cacheTtl = Math.min(cacheTtl, this.maxTtl) * 1000;\n            data[kExpires] = Date.now() + cacheTtl;\n            try {\n                await this._cache.set(hostname, data, cacheTtl);\n            } catch (error) {\n                this.lookupAsync = async ()=>{\n                    const cacheError = new Error(\"Cache Error. Please recreate the CacheableLookup instance.\");\n                    cacheError.cause = error;\n                    throw cacheError;\n                };\n            }\n            if (isIterable(this._cache)) {\n                this._tick(cacheTtl);\n            }\n        }\n    }\n    async queryAndCache(hostname) {\n        if (this._hostnamesToFallback.has(hostname)) {\n            return this._dnsLookup(hostname, all);\n        }\n        let query = await this._resolve(hostname);\n        if (query.entries.length === 0 && this._fallback) {\n            query = await this._lookup(hostname);\n            if (query.entries.length !== 0) {\n                // Use `dns.lookup(...)` for that particular hostname\n                this._hostnamesToFallback.add(hostname);\n            }\n        }\n        const cacheTtl = query.entries.length === 0 ? this.errorTtl : query.cacheTtl;\n        await this._set(hostname, query.entries, cacheTtl);\n        return query.entries;\n    }\n    _tick(ms) {\n        const nextRemovalTime = this._nextRemovalTime;\n        if (!nextRemovalTime || ms < nextRemovalTime) {\n            clearTimeout(this._removalTimeout);\n            this._nextRemovalTime = ms;\n            this._removalTimeout = setTimeout(()=>{\n                this._nextRemovalTime = false;\n                let nextExpiry = Infinity;\n                const now = Date.now();\n                for (const [hostname, entries] of this._cache){\n                    const expires = entries[kExpires];\n                    if (now >= expires) {\n                        this._cache.delete(hostname);\n                    } else if (expires < nextExpiry) {\n                        nextExpiry = expires;\n                    }\n                }\n                if (nextExpiry !== Infinity) {\n                    this._tick(nextExpiry - now);\n                }\n            }, ms);\n            /* istanbul ignore next: There is no `timeout.unref()` when running inside an Electron renderer */ if (this._removalTimeout.unref) {\n                this._removalTimeout.unref();\n            }\n        }\n    }\n    install(agent) {\n        verifyAgent(agent);\n        if (kCacheableLookupCreateConnection in agent) {\n            throw new Error(\"CacheableLookup has been already installed\");\n        }\n        agent[kCacheableLookupCreateConnection] = agent.createConnection;\n        agent[kCacheableLookupInstance] = this;\n        agent.createConnection = (options, callback)=>{\n            if (!(\"lookup\" in options)) {\n                options.lookup = this.lookup;\n            }\n            return agent[kCacheableLookupCreateConnection](options, callback);\n        };\n    }\n    uninstall(agent) {\n        verifyAgent(agent);\n        if (agent[kCacheableLookupCreateConnection]) {\n            if (agent[kCacheableLookupInstance] !== this) {\n                throw new Error(\"The agent is not owned by this CacheableLookup instance\");\n            }\n            agent.createConnection = agent[kCacheableLookupCreateConnection];\n            delete agent[kCacheableLookupCreateConnection];\n            delete agent[kCacheableLookupInstance];\n        }\n    }\n    updateInterfaceInfo() {\n        const { _iface } = this;\n        this._iface = getIfaceInfo();\n        if (_iface.has4 && !this._iface.has4 || _iface.has6 && !this._iface.has6) {\n            this._cache.clear();\n        }\n    }\n    clear(hostname) {\n        if (hostname) {\n            this._cache.delete(hostname);\n            return;\n        }\n        this._cache.clear();\n    }\n}\nmodule.exports = CacheableLookup;\nmodule.exports[\"default\"] = CacheableLookup;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swarm-js/node_modules/cacheable-lookup/source/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/as-promise/create-rejection.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/swarm-js/node_modules/got/dist/source/as-promise/create-rejection.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst types_1 = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/as-promise/types.js\");\nfunction createRejection(error, ...beforeErrorGroups) {\n    const promise = (async ()=>{\n        if (error instanceof types_1.RequestError) {\n            try {\n                for (const hooks of beforeErrorGroups){\n                    if (hooks) {\n                        for (const hook of hooks){\n                            // eslint-disable-next-line no-await-in-loop\n                            error = await hook(error);\n                        }\n                    }\n                }\n            } catch (error_) {\n                error = error_;\n            }\n        }\n        throw error;\n    })();\n    const returnPromise = ()=>promise;\n    promise.json = returnPromise;\n    promise.text = returnPromise;\n    promise.buffer = returnPromise;\n    promise.on = returnPromise;\n    return promise;\n}\nexports[\"default\"] = createRejection;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dhcm0tanMvbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9hcy1wcm9taXNlL2NyZWF0ZS1yZWplY3Rpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsVUFBVUMsbUJBQU9BLENBQUMsK0ZBQVM7QUFDakMsU0FBU0MsZ0JBQWdCQyxLQUFLLEVBQUUsR0FBR0MsaUJBQWlCO0lBQ2hELE1BQU1DLFVBQVUsQ0FBQztRQUNiLElBQUlGLGlCQUFpQkgsUUFBUU0sWUFBWSxFQUFFO1lBQ3ZDLElBQUk7Z0JBQ0EsS0FBSyxNQUFNQyxTQUFTSCxrQkFBbUI7b0JBQ25DLElBQUlHLE9BQU87d0JBQ1AsS0FBSyxNQUFNQyxRQUFRRCxNQUFPOzRCQUN0Qiw0Q0FBNEM7NEJBQzVDSixRQUFRLE1BQU1LLEtBQUtMO3dCQUN2QjtvQkFDSjtnQkFDSjtZQUNKLEVBQ0EsT0FBT00sUUFBUTtnQkFDWE4sUUFBUU07WUFDWjtRQUNKO1FBQ0EsTUFBTU47SUFDVjtJQUNBLE1BQU1PLGdCQUFnQixJQUFNTDtJQUM1QkEsUUFBUU0sSUFBSSxHQUFHRDtJQUNmTCxRQUFRTyxJQUFJLEdBQUdGO0lBQ2ZMLFFBQVFRLE1BQU0sR0FBR0g7SUFDakJMLFFBQVFTLEVBQUUsR0FBR0o7SUFDYixPQUFPTDtBQUNYO0FBQ0FQLGtCQUFlLEdBQUdJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvc3dhcm0tanMvbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9hcy1wcm9taXNlL2NyZWF0ZS1yZWplY3Rpb24uanM/Y2FjYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi90eXBlc1wiKTtcbmZ1bmN0aW9uIGNyZWF0ZVJlamVjdGlvbihlcnJvciwgLi4uYmVmb3JlRXJyb3JHcm91cHMpIHtcbiAgICBjb25zdCBwcm9taXNlID0gKGFzeW5jICgpID0+IHtcbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgdHlwZXNfMS5SZXF1ZXN0RXJyb3IpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBob29rcyBvZiBiZWZvcmVFcnJvckdyb3Vwcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaG9va3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaG9vayBvZiBob29rcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1hd2FpdC1pbi1sb29wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSBhd2FpdCBob29rKGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcl8pIHtcbiAgICAgICAgICAgICAgICBlcnJvciA9IGVycm9yXztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9KSgpO1xuICAgIGNvbnN0IHJldHVyblByb21pc2UgPSAoKSA9PiBwcm9taXNlO1xuICAgIHByb21pc2UuanNvbiA9IHJldHVyblByb21pc2U7XG4gICAgcHJvbWlzZS50ZXh0ID0gcmV0dXJuUHJvbWlzZTtcbiAgICBwcm9taXNlLmJ1ZmZlciA9IHJldHVyblByb21pc2U7XG4gICAgcHJvbWlzZS5vbiA9IHJldHVyblByb21pc2U7XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVSZWplY3Rpb247XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ0eXBlc18xIiwicmVxdWlyZSIsImNyZWF0ZVJlamVjdGlvbiIsImVycm9yIiwiYmVmb3JlRXJyb3JHcm91cHMiLCJwcm9taXNlIiwiUmVxdWVzdEVycm9yIiwiaG9va3MiLCJob29rIiwiZXJyb3JfIiwicmV0dXJuUHJvbWlzZSIsImpzb24iLCJ0ZXh0IiwiYnVmZmVyIiwib24iLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/as-promise/create-rejection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/as-promise/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/swarm-js/node_modules/got/dist/source/as-promise/index.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, {\n        enumerable: true,\n        get: function() {\n            return m[k];\n        }\n    });\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = this && this.__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst is_1 = __webpack_require__(/*! @sindresorhus/is */ \"(ssr)/./node_modules/@sindresorhus/is/dist/index.js\");\nconst PCancelable = __webpack_require__(/*! p-cancelable */ \"(ssr)/./node_modules/swarm-js/node_modules/p-cancelable/index.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/as-promise/types.js\");\nconst parse_body_1 = __webpack_require__(/*! ./parse-body */ \"(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/as-promise/parse-body.js\");\nconst core_1 = __webpack_require__(/*! ../core */ \"(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/core/index.js\");\nconst proxy_events_1 = __webpack_require__(/*! ../core/utils/proxy-events */ \"(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/core/utils/proxy-events.js\");\nconst get_buffer_1 = __webpack_require__(/*! ../core/utils/get-buffer */ \"(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/core/utils/get-buffer.js\");\nconst is_response_ok_1 = __webpack_require__(/*! ../core/utils/is-response-ok */ \"(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/core/utils/is-response-ok.js\");\nconst proxiedRequestEvents = [\n    \"request\",\n    \"response\",\n    \"redirect\",\n    \"uploadProgress\",\n    \"downloadProgress\"\n];\nfunction asPromise(normalizedOptions) {\n    let globalRequest;\n    let globalResponse;\n    const emitter = new events_1.EventEmitter();\n    const promise = new PCancelable((resolve, reject, onCancel)=>{\n        const makeRequest = (retryCount)=>{\n            const request = new core_1.default(undefined, normalizedOptions);\n            request.retryCount = retryCount;\n            request._noPipe = true;\n            onCancel(()=>request.destroy());\n            onCancel.shouldReject = false;\n            onCancel(()=>reject(new types_1.CancelError(request)));\n            globalRequest = request;\n            request.once(\"response\", async (response)=>{\n                var _a;\n                response.retryCount = retryCount;\n                if (response.request.aborted) {\n                    // Canceled while downloading - will throw a `CancelError` or `TimeoutError` error\n                    return;\n                }\n                // Download body\n                let rawBody;\n                try {\n                    rawBody = await get_buffer_1.default(request);\n                    response.rawBody = rawBody;\n                } catch (_b) {\n                    // The same error is caught below.\n                    // See request.once('error')\n                    return;\n                }\n                if (request._isAboutToError) {\n                    return;\n                }\n                // Parse body\n                const contentEncoding = ((_a = response.headers[\"content-encoding\"]) !== null && _a !== void 0 ? _a : \"\").toLowerCase();\n                const isCompressed = [\n                    \"gzip\",\n                    \"deflate\",\n                    \"br\"\n                ].includes(contentEncoding);\n                const { options } = request;\n                if (isCompressed && !options.decompress) {\n                    response.body = rawBody;\n                } else {\n                    try {\n                        response.body = parse_body_1.default(response, options.responseType, options.parseJson, options.encoding);\n                    } catch (error) {\n                        // Fallback to `utf8`\n                        response.body = rawBody.toString();\n                        if (is_response_ok_1.isResponseOk(response)) {\n                            request._beforeError(error);\n                            return;\n                        }\n                    }\n                }\n                try {\n                    for (const [index, hook] of options.hooks.afterResponse.entries()){\n                        // @ts-expect-error TS doesn't notice that CancelableRequest is a Promise\n                        // eslint-disable-next-line no-await-in-loop\n                        response = await hook(response, async (updatedOptions)=>{\n                            const typedOptions = core_1.default.normalizeArguments(undefined, {\n                                ...updatedOptions,\n                                retry: {\n                                    calculateDelay: ()=>0\n                                },\n                                throwHttpErrors: false,\n                                resolveBodyOnly: false\n                            }, options);\n                            // Remove any further hooks for that request, because we'll call them anyway.\n                            // The loop continues. We don't want duplicates (asPromise recursion).\n                            typedOptions.hooks.afterResponse = typedOptions.hooks.afterResponse.slice(0, index);\n                            for (const hook of typedOptions.hooks.beforeRetry){\n                                // eslint-disable-next-line no-await-in-loop\n                                await hook(typedOptions);\n                            }\n                            const promise = asPromise(typedOptions);\n                            onCancel(()=>{\n                                promise.catch(()=>{});\n                                promise.cancel();\n                            });\n                            return promise;\n                        });\n                    }\n                } catch (error) {\n                    request._beforeError(new types_1.RequestError(error.message, error, request));\n                    return;\n                }\n                globalResponse = response;\n                if (!is_response_ok_1.isResponseOk(response)) {\n                    request._beforeError(new types_1.HTTPError(response));\n                    return;\n                }\n                request.destroy();\n                resolve(request.options.resolveBodyOnly ? response.body : response);\n            });\n            const onError = (error)=>{\n                if (promise.isCanceled) {\n                    return;\n                }\n                const { options } = request;\n                if (error instanceof types_1.HTTPError && !options.throwHttpErrors) {\n                    const { response } = error;\n                    resolve(request.options.resolveBodyOnly ? response.body : response);\n                    return;\n                }\n                reject(error);\n            };\n            request.once(\"error\", onError);\n            const previousBody = request.options.body;\n            request.once(\"retry\", (newRetryCount, error)=>{\n                var _a, _b;\n                if (previousBody === ((_a = error.request) === null || _a === void 0 ? void 0 : _a.options.body) && is_1.default.nodeStream((_b = error.request) === null || _b === void 0 ? void 0 : _b.options.body)) {\n                    onError(error);\n                    return;\n                }\n                makeRequest(newRetryCount);\n            });\n            proxy_events_1.default(request, emitter, proxiedRequestEvents);\n        };\n        makeRequest(0);\n    });\n    promise.on = (event, fn)=>{\n        emitter.on(event, fn);\n        return promise;\n    };\n    const shortcut = (responseType)=>{\n        const newPromise = (async ()=>{\n            // Wait until downloading has ended\n            await promise;\n            const { options } = globalResponse.request;\n            return parse_body_1.default(globalResponse, responseType, options.parseJson, options.encoding);\n        })();\n        Object.defineProperties(newPromise, Object.getOwnPropertyDescriptors(promise));\n        return newPromise;\n    };\n    promise.json = ()=>{\n        const { headers } = globalRequest.options;\n        if (!globalRequest.writableFinished && headers.accept === undefined) {\n            headers.accept = \"application/json\";\n        }\n        return shortcut(\"json\");\n    };\n    promise.buffer = ()=>shortcut(\"buffer\");\n    promise.text = ()=>shortcut(\"text\");\n    return promise;\n}\nexports[\"default\"] = asPromise;\n__exportStar(__webpack_require__(/*! ./types */ \"(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/as-promise/types.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/as-promise/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/as-promise/normalize-arguments.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/swarm-js/node_modules/got/dist/source/as-promise/normalize-arguments.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst is_1 = __webpack_require__(/*! @sindresorhus/is */ \"(ssr)/./node_modules/@sindresorhus/is/dist/index.js\");\nconst normalizeArguments = (options, defaults)=>{\n    if (is_1.default.null_(options.encoding)) {\n        throw new TypeError(\"To get a Buffer, set `options.responseType` to `buffer` instead\");\n    }\n    is_1.assert.any([\n        is_1.default.string,\n        is_1.default.undefined\n    ], options.encoding);\n    is_1.assert.any([\n        is_1.default.boolean,\n        is_1.default.undefined\n    ], options.resolveBodyOnly);\n    is_1.assert.any([\n        is_1.default.boolean,\n        is_1.default.undefined\n    ], options.methodRewriting);\n    is_1.assert.any([\n        is_1.default.boolean,\n        is_1.default.undefined\n    ], options.isStream);\n    is_1.assert.any([\n        is_1.default.string,\n        is_1.default.undefined\n    ], options.responseType);\n    // `options.responseType`\n    if (options.responseType === undefined) {\n        options.responseType = \"text\";\n    }\n    // `options.retry`\n    const { retry } = options;\n    if (defaults) {\n        options.retry = {\n            ...defaults.retry\n        };\n    } else {\n        options.retry = {\n            calculateDelay: (retryObject)=>retryObject.computedValue,\n            limit: 0,\n            methods: [],\n            statusCodes: [],\n            errorCodes: [],\n            maxRetryAfter: undefined\n        };\n    }\n    if (is_1.default.object(retry)) {\n        options.retry = {\n            ...options.retry,\n            ...retry\n        };\n        options.retry.methods = [\n            ...new Set(options.retry.methods.map((method)=>method.toUpperCase()))\n        ];\n        options.retry.statusCodes = [\n            ...new Set(options.retry.statusCodes)\n        ];\n        options.retry.errorCodes = [\n            ...new Set(options.retry.errorCodes)\n        ];\n    } else if (is_1.default.number(retry)) {\n        options.retry.limit = retry;\n    }\n    if (is_1.default.undefined(options.retry.maxRetryAfter)) {\n        options.retry.maxRetryAfter = Math.min(// TypeScript is not smart enough to handle `.filter(x => is.number(x))`.\n        // eslint-disable-next-line unicorn/no-fn-reference-in-iterator\n        ...[\n            options.timeout.request,\n            options.timeout.connect\n        ].filter(is_1.default.number));\n    }\n    // `options.pagination`\n    if (is_1.default.object(options.pagination)) {\n        if (defaults) {\n            options.pagination = {\n                ...defaults.pagination,\n                ...options.pagination\n            };\n        }\n        const { pagination } = options;\n        if (!is_1.default.function_(pagination.transform)) {\n            throw new Error(\"`options.pagination.transform` must be implemented\");\n        }\n        if (!is_1.default.function_(pagination.shouldContinue)) {\n            throw new Error(\"`options.pagination.shouldContinue` must be implemented\");\n        }\n        if (!is_1.default.function_(pagination.filter)) {\n            throw new TypeError(\"`options.pagination.filter` must be implemented\");\n        }\n        if (!is_1.default.function_(pagination.paginate)) {\n            throw new Error(\"`options.pagination.paginate` must be implemented\");\n        }\n    }\n    // JSON mode\n    if (options.responseType === \"json\" && options.headers.accept === undefined) {\n        options.headers.accept = \"application/json\";\n    }\n    return options;\n};\nexports[\"default\"] = normalizeArguments;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/as-promise/normalize-arguments.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/as-promise/parse-body.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/swarm-js/node_modules/got/dist/source/as-promise/parse-body.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst types_1 = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/as-promise/types.js\");\nconst parseBody = (response, responseType, parseJson, encoding)=>{\n    const { rawBody } = response;\n    try {\n        if (responseType === \"text\") {\n            return rawBody.toString(encoding);\n        }\n        if (responseType === \"json\") {\n            return rawBody.length === 0 ? \"\" : parseJson(rawBody.toString());\n        }\n        if (responseType === \"buffer\") {\n            return rawBody;\n        }\n        throw new types_1.ParseError({\n            message: `Unknown body type '${responseType}'`,\n            name: \"Error\"\n        }, response);\n    } catch (error) {\n        throw new types_1.ParseError(error, response);\n    }\n};\nexports[\"default\"] = parseBody;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dhcm0tanMvbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9hcy1wcm9taXNlL3BhcnNlLWJvZHkuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsVUFBVUMsbUJBQU9BLENBQUMsK0ZBQVM7QUFDakMsTUFBTUMsWUFBWSxDQUFDQyxVQUFVQyxjQUFjQyxXQUFXQztJQUNsRCxNQUFNLEVBQUVDLE9BQU8sRUFBRSxHQUFHSjtJQUNwQixJQUFJO1FBQ0EsSUFBSUMsaUJBQWlCLFFBQVE7WUFDekIsT0FBT0csUUFBUUMsUUFBUSxDQUFDRjtRQUM1QjtRQUNBLElBQUlGLGlCQUFpQixRQUFRO1lBQ3pCLE9BQU9HLFFBQVFFLE1BQU0sS0FBSyxJQUFJLEtBQUtKLFVBQVVFLFFBQVFDLFFBQVE7UUFDakU7UUFDQSxJQUFJSixpQkFBaUIsVUFBVTtZQUMzQixPQUFPRztRQUNYO1FBQ0EsTUFBTSxJQUFJUCxRQUFRVSxVQUFVLENBQUM7WUFDekJDLFNBQVMsQ0FBQyxtQkFBbUIsRUFBRVAsYUFBYSxDQUFDLENBQUM7WUFDOUNRLE1BQU07UUFDVixHQUFHVDtJQUNQLEVBQ0EsT0FBT1UsT0FBTztRQUNWLE1BQU0sSUFBSWIsUUFBUVUsVUFBVSxDQUFDRyxPQUFPVjtJQUN4QztBQUNKO0FBQ0FMLGtCQUFlLEdBQUdJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvc3dhcm0tanMvbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9hcy1wcm9taXNlL3BhcnNlLWJvZHkuanM/Mjg5MSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi90eXBlc1wiKTtcbmNvbnN0IHBhcnNlQm9keSA9IChyZXNwb25zZSwgcmVzcG9uc2VUeXBlLCBwYXJzZUpzb24sIGVuY29kaW5nKSA9PiB7XG4gICAgY29uc3QgeyByYXdCb2R5IH0gPSByZXNwb25zZTtcbiAgICB0cnkge1xuICAgICAgICBpZiAocmVzcG9uc2VUeXBlID09PSAndGV4dCcpIHtcbiAgICAgICAgICAgIHJldHVybiByYXdCb2R5LnRvU3RyaW5nKGVuY29kaW5nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzcG9uc2VUeXBlID09PSAnanNvbicpIHtcbiAgICAgICAgICAgIHJldHVybiByYXdCb2R5Lmxlbmd0aCA9PT0gMCA/ICcnIDogcGFyc2VKc29uKHJhd0JvZHkudG9TdHJpbmcoKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc3BvbnNlVHlwZSA9PT0gJ2J1ZmZlcicpIHtcbiAgICAgICAgICAgIHJldHVybiByYXdCb2R5O1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyB0eXBlc18xLlBhcnNlRXJyb3Ioe1xuICAgICAgICAgICAgbWVzc2FnZTogYFVua25vd24gYm9keSB0eXBlICcke3Jlc3BvbnNlVHlwZX0nYCxcbiAgICAgICAgICAgIG5hbWU6ICdFcnJvcidcbiAgICAgICAgfSwgcmVzcG9uc2UpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IHR5cGVzXzEuUGFyc2VFcnJvcihlcnJvciwgcmVzcG9uc2UpO1xuICAgIH1cbn07XG5leHBvcnRzLmRlZmF1bHQgPSBwYXJzZUJvZHk7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ0eXBlc18xIiwicmVxdWlyZSIsInBhcnNlQm9keSIsInJlc3BvbnNlIiwicmVzcG9uc2VUeXBlIiwicGFyc2VKc29uIiwiZW5jb2RpbmciLCJyYXdCb2R5IiwidG9TdHJpbmciLCJsZW5ndGgiLCJQYXJzZUVycm9yIiwibWVzc2FnZSIsIm5hbWUiLCJlcnJvciIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/as-promise/parse-body.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/as-promise/types.js":
/*!********************************************************************************!*\
  !*** ./node_modules/swarm-js/node_modules/got/dist/source/as-promise/types.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, {\n        enumerable: true,\n        get: function() {\n            return m[k];\n        }\n    });\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = this && this.__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.CancelError = exports.ParseError = void 0;\nconst core_1 = __webpack_require__(/*! ../core */ \"(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/core/index.js\");\n/**\nAn error to be thrown when server response code is 2xx, and parsing body fails.\nIncludes a `response` property.\n*/ class ParseError extends core_1.RequestError {\n    constructor(error, response){\n        const { options } = response.request;\n        super(`${error.message} in \"${options.url.toString()}\"`, error, response.request);\n        this.name = \"ParseError\";\n        this.code = this.code === \"ERR_GOT_REQUEST_ERROR\" ? \"ERR_BODY_PARSE_FAILURE\" : this.code;\n    }\n}\nexports.ParseError = ParseError;\n/**\nAn error to be thrown when the request is aborted with `.cancel()`.\n*/ class CancelError extends core_1.RequestError {\n    constructor(request){\n        super(\"Promise was canceled\", {}, request);\n        this.name = \"CancelError\";\n        this.code = \"ERR_CANCELED\";\n    }\n    get isCanceled() {\n        return true;\n    }\n}\nexports.CancelError = CancelError;\n__exportStar(__webpack_require__(/*! ../core */ \"(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/core/index.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dhcm0tanMvbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9hcy1wcm9taXNlL3R5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsSUFBSUEsa0JBQWtCLElBQUssSUFBSSxJQUFJLENBQUNBLGVBQWUsSUFBTUMsQ0FBQUEsT0FBT0MsTUFBTSxHQUFJLFNBQVNDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLEVBQUU7SUFDMUYsSUFBSUEsT0FBT0MsV0FBV0QsS0FBS0Q7SUFDM0JKLE9BQU9PLGNBQWMsQ0FBQ0wsR0FBR0csSUFBSTtRQUFFRyxZQUFZO1FBQU1DLEtBQUs7WUFBYSxPQUFPTixDQUFDLENBQUNDLEVBQUU7UUFBRTtJQUFFO0FBQ3RGLElBQU0sU0FBU0YsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsRUFBRTtJQUN0QixJQUFJQSxPQUFPQyxXQUFXRCxLQUFLRDtJQUMzQkYsQ0FBQyxDQUFDRyxHQUFHLEdBQUdGLENBQUMsQ0FBQ0MsRUFBRTtBQUNoQixDQUFDO0FBQ0QsSUFBSU0sZUFBZSxJQUFLLElBQUksSUFBSSxDQUFDQSxZQUFZLElBQUssU0FBU1AsQ0FBQyxFQUFFUSxRQUFPO0lBQ2pFLElBQUssSUFBSUMsS0FBS1QsRUFBRyxJQUFJUyxNQUFNLGFBQWEsQ0FBQ1osT0FBT2EsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ0osVUFBU0MsSUFBSWIsZ0JBQWdCWSxVQUFTUixHQUFHUztBQUMzSDtBQUNBWiw4Q0FBNkM7SUFBRWdCLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RMLG1CQUFtQixHQUFHQSxrQkFBa0IsR0FBRyxLQUFLO0FBQ2hELE1BQU1RLFNBQVNDLG1CQUFPQSxDQUFDLHlGQUFTO0FBQ2hDOzs7QUFHQSxHQUNBLE1BQU1GLG1CQUFtQkMsT0FBT0UsWUFBWTtJQUN4Q0MsWUFBWUMsS0FBSyxFQUFFQyxRQUFRLENBQUU7UUFDekIsTUFBTSxFQUFFQyxPQUFPLEVBQUUsR0FBR0QsU0FBU0UsT0FBTztRQUNwQyxLQUFLLENBQUMsQ0FBQyxFQUFFSCxNQUFNSSxPQUFPLENBQUMsS0FBSyxFQUFFRixRQUFRRyxHQUFHLENBQUNDLFFBQVEsR0FBRyxDQUFDLENBQUMsRUFBRU4sT0FBT0MsU0FBU0UsT0FBTztRQUNoRixJQUFJLENBQUNJLElBQUksR0FBRztRQUNaLElBQUksQ0FBQ0MsSUFBSSxHQUFHLElBQUksQ0FBQ0EsSUFBSSxLQUFLLDBCQUEwQiwyQkFBMkIsSUFBSSxDQUFDQSxJQUFJO0lBQzVGO0FBQ0o7QUFDQXBCLGtCQUFrQixHQUFHTztBQUNyQjs7QUFFQSxHQUNBLE1BQU1ELG9CQUFvQkUsT0FBT0UsWUFBWTtJQUN6Q0MsWUFBWUksT0FBTyxDQUFFO1FBQ2pCLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxHQUFHQTtRQUNsQyxJQUFJLENBQUNJLElBQUksR0FBRztRQUNaLElBQUksQ0FBQ0MsSUFBSSxHQUFHO0lBQ2hCO0lBQ0EsSUFBSUMsYUFBYTtRQUNiLE9BQU87SUFDWDtBQUNKO0FBQ0FyQixtQkFBbUIsR0FBR007QUFDdEJQLGFBQWFVLG1CQUFPQSxDQUFDLHlGQUFTLEdBQUdUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvc3dhcm0tanMvbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9hcy1wcm9taXNlL3R5cGVzLmpzPzY3MmMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ2FuY2VsRXJyb3IgPSBleHBvcnRzLlBhcnNlRXJyb3IgPSB2b2lkIDA7XG5jb25zdCBjb3JlXzEgPSByZXF1aXJlKFwiLi4vY29yZVwiKTtcbi8qKlxuQW4gZXJyb3IgdG8gYmUgdGhyb3duIHdoZW4gc2VydmVyIHJlc3BvbnNlIGNvZGUgaXMgMnh4LCBhbmQgcGFyc2luZyBib2R5IGZhaWxzLlxuSW5jbHVkZXMgYSBgcmVzcG9uc2VgIHByb3BlcnR5LlxuKi9cbmNsYXNzIFBhcnNlRXJyb3IgZXh0ZW5kcyBjb3JlXzEuUmVxdWVzdEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihlcnJvciwgcmVzcG9uc2UpIHtcbiAgICAgICAgY29uc3QgeyBvcHRpb25zIH0gPSByZXNwb25zZS5yZXF1ZXN0O1xuICAgICAgICBzdXBlcihgJHtlcnJvci5tZXNzYWdlfSBpbiBcIiR7b3B0aW9ucy51cmwudG9TdHJpbmcoKX1cImAsIGVycm9yLCByZXNwb25zZS5yZXF1ZXN0KTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ1BhcnNlRXJyb3InO1xuICAgICAgICB0aGlzLmNvZGUgPSB0aGlzLmNvZGUgPT09ICdFUlJfR09UX1JFUVVFU1RfRVJST1InID8gJ0VSUl9CT0RZX1BBUlNFX0ZBSUxVUkUnIDogdGhpcy5jb2RlO1xuICAgIH1cbn1cbmV4cG9ydHMuUGFyc2VFcnJvciA9IFBhcnNlRXJyb3I7XG4vKipcbkFuIGVycm9yIHRvIGJlIHRocm93biB3aGVuIHRoZSByZXF1ZXN0IGlzIGFib3J0ZWQgd2l0aCBgLmNhbmNlbCgpYC5cbiovXG5jbGFzcyBDYW5jZWxFcnJvciBleHRlbmRzIGNvcmVfMS5SZXF1ZXN0RXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHJlcXVlc3QpIHtcbiAgICAgICAgc3VwZXIoJ1Byb21pc2Ugd2FzIGNhbmNlbGVkJywge30sIHJlcXVlc3QpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnQ2FuY2VsRXJyb3InO1xuICAgICAgICB0aGlzLmNvZGUgPSAnRVJSX0NBTkNFTEVEJztcbiAgICB9XG4gICAgZ2V0IGlzQ2FuY2VsZWQoKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cbmV4cG9ydHMuQ2FuY2VsRXJyb3IgPSBDYW5jZWxFcnJvcjtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi4vY29yZVwiKSwgZXhwb3J0cyk7XG4iXSwibmFtZXMiOlsiX19jcmVhdGVCaW5kaW5nIiwiT2JqZWN0IiwiY3JlYXRlIiwibyIsIm0iLCJrIiwiazIiLCJ1bmRlZmluZWQiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJfX2V4cG9ydFN0YXIiLCJleHBvcnRzIiwicCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInZhbHVlIiwiQ2FuY2VsRXJyb3IiLCJQYXJzZUVycm9yIiwiY29yZV8xIiwicmVxdWlyZSIsIlJlcXVlc3RFcnJvciIsImNvbnN0cnVjdG9yIiwiZXJyb3IiLCJyZXNwb25zZSIsIm9wdGlvbnMiLCJyZXF1ZXN0IiwibWVzc2FnZSIsInVybCIsInRvU3RyaW5nIiwibmFtZSIsImNvZGUiLCJpc0NhbmNlbGVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/as-promise/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/core/calculate-retry-delay.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/swarm-js/node_modules/got/dist/source/core/calculate-retry-delay.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.retryAfterStatusCodes = void 0;\nexports.retryAfterStatusCodes = new Set([\n    413,\n    429,\n    503\n]);\nconst calculateRetryDelay = ({ attemptCount, retryOptions, error, retryAfter })=>{\n    if (attemptCount > retryOptions.limit) {\n        return 0;\n    }\n    const hasMethod = retryOptions.methods.includes(error.options.method);\n    const hasErrorCode = retryOptions.errorCodes.includes(error.code);\n    const hasStatusCode = error.response && retryOptions.statusCodes.includes(error.response.statusCode);\n    if (!hasMethod || !hasErrorCode && !hasStatusCode) {\n        return 0;\n    }\n    if (error.response) {\n        if (retryAfter) {\n            if (retryOptions.maxRetryAfter === undefined || retryAfter > retryOptions.maxRetryAfter) {\n                return 0;\n            }\n            return retryAfter;\n        }\n        if (error.response.statusCode === 413) {\n            return 0;\n        }\n    }\n    const noise = Math.random() * 100;\n    return 2 ** (attemptCount - 1) * 1000 + noise;\n};\nexports[\"default\"] = calculateRetryDelay;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dhcm0tanMvbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9jb3JlL2NhbGN1bGF0ZS1yZXRyeS1kZWxheS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsNkJBQTZCLEdBQUcsS0FBSztBQUNyQ0EsNkJBQTZCLEdBQUcsSUFBSUcsSUFBSTtJQUFDO0lBQUs7SUFBSztDQUFJO0FBQ3ZELE1BQU1DLHNCQUFzQixDQUFDLEVBQUVDLFlBQVksRUFBRUMsWUFBWSxFQUFFQyxLQUFLLEVBQUVDLFVBQVUsRUFBRTtJQUMxRSxJQUFJSCxlQUFlQyxhQUFhRyxLQUFLLEVBQUU7UUFDbkMsT0FBTztJQUNYO0lBQ0EsTUFBTUMsWUFBWUosYUFBYUssT0FBTyxDQUFDQyxRQUFRLENBQUNMLE1BQU1NLE9BQU8sQ0FBQ0MsTUFBTTtJQUNwRSxNQUFNQyxlQUFlVCxhQUFhVSxVQUFVLENBQUNKLFFBQVEsQ0FBQ0wsTUFBTVUsSUFBSTtJQUNoRSxNQUFNQyxnQkFBZ0JYLE1BQU1ZLFFBQVEsSUFBSWIsYUFBYWMsV0FBVyxDQUFDUixRQUFRLENBQUNMLE1BQU1ZLFFBQVEsQ0FBQ0UsVUFBVTtJQUNuRyxJQUFJLENBQUNYLGFBQWMsQ0FBQ0ssZ0JBQWdCLENBQUNHLGVBQWdCO1FBQ2pELE9BQU87SUFDWDtJQUNBLElBQUlYLE1BQU1ZLFFBQVEsRUFBRTtRQUNoQixJQUFJWCxZQUFZO1lBQ1osSUFBSUYsYUFBYWdCLGFBQWEsS0FBS0MsYUFBYWYsYUFBYUYsYUFBYWdCLGFBQWEsRUFBRTtnQkFDckYsT0FBTztZQUNYO1lBQ0EsT0FBT2Q7UUFDWDtRQUNBLElBQUlELE1BQU1ZLFFBQVEsQ0FBQ0UsVUFBVSxLQUFLLEtBQUs7WUFDbkMsT0FBTztRQUNYO0lBQ0o7SUFDQSxNQUFNRyxRQUFRQyxLQUFLQyxNQUFNLEtBQUs7SUFDOUIsT0FBTyxLQUFRckIsQ0FBQUEsZUFBZSxLQUFNLE9BQVFtQjtBQUNoRDtBQUNBeEIsa0JBQWUsR0FBR0kiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9zd2FybS1qcy9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvY2FsY3VsYXRlLXJldHJ5LWRlbGF5LmpzPzNmYzQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJldHJ5QWZ0ZXJTdGF0dXNDb2RlcyA9IHZvaWQgMDtcbmV4cG9ydHMucmV0cnlBZnRlclN0YXR1c0NvZGVzID0gbmV3IFNldChbNDEzLCA0MjksIDUwM10pO1xuY29uc3QgY2FsY3VsYXRlUmV0cnlEZWxheSA9ICh7IGF0dGVtcHRDb3VudCwgcmV0cnlPcHRpb25zLCBlcnJvciwgcmV0cnlBZnRlciB9KSA9PiB7XG4gICAgaWYgKGF0dGVtcHRDb3VudCA+IHJldHJ5T3B0aW9ucy5saW1pdCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgY29uc3QgaGFzTWV0aG9kID0gcmV0cnlPcHRpb25zLm1ldGhvZHMuaW5jbHVkZXMoZXJyb3Iub3B0aW9ucy5tZXRob2QpO1xuICAgIGNvbnN0IGhhc0Vycm9yQ29kZSA9IHJldHJ5T3B0aW9ucy5lcnJvckNvZGVzLmluY2x1ZGVzKGVycm9yLmNvZGUpO1xuICAgIGNvbnN0IGhhc1N0YXR1c0NvZGUgPSBlcnJvci5yZXNwb25zZSAmJiByZXRyeU9wdGlvbnMuc3RhdHVzQ29kZXMuaW5jbHVkZXMoZXJyb3IucmVzcG9uc2Uuc3RhdHVzQ29kZSk7XG4gICAgaWYgKCFoYXNNZXRob2QgfHwgKCFoYXNFcnJvckNvZGUgJiYgIWhhc1N0YXR1c0NvZGUpKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBpZiAoZXJyb3IucmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKHJldHJ5QWZ0ZXIpIHtcbiAgICAgICAgICAgIGlmIChyZXRyeU9wdGlvbnMubWF4UmV0cnlBZnRlciA9PT0gdW5kZWZpbmVkIHx8IHJldHJ5QWZ0ZXIgPiByZXRyeU9wdGlvbnMubWF4UmV0cnlBZnRlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJldHJ5QWZ0ZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVycm9yLnJlc3BvbnNlLnN0YXR1c0NvZGUgPT09IDQxMykge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3Qgbm9pc2UgPSBNYXRoLnJhbmRvbSgpICogMTAwO1xuICAgIHJldHVybiAoKDIgKiogKGF0dGVtcHRDb3VudCAtIDEpKSAqIDEwMDApICsgbm9pc2U7XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gY2FsY3VsYXRlUmV0cnlEZWxheTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInJldHJ5QWZ0ZXJTdGF0dXNDb2RlcyIsIlNldCIsImNhbGN1bGF0ZVJldHJ5RGVsYXkiLCJhdHRlbXB0Q291bnQiLCJyZXRyeU9wdGlvbnMiLCJlcnJvciIsInJldHJ5QWZ0ZXIiLCJsaW1pdCIsImhhc01ldGhvZCIsIm1ldGhvZHMiLCJpbmNsdWRlcyIsIm9wdGlvbnMiLCJtZXRob2QiLCJoYXNFcnJvckNvZGUiLCJlcnJvckNvZGVzIiwiY29kZSIsImhhc1N0YXR1c0NvZGUiLCJyZXNwb25zZSIsInN0YXR1c0NvZGVzIiwic3RhdHVzQ29kZSIsIm1heFJldHJ5QWZ0ZXIiLCJ1bmRlZmluZWQiLCJub2lzZSIsIk1hdGgiLCJyYW5kb20iLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/core/calculate-retry-delay.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/core/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/swarm-js/node_modules/got/dist/source/core/index.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.UnsupportedProtocolError = exports.ReadError = exports.TimeoutError = exports.UploadError = exports.CacheError = exports.HTTPError = exports.MaxRedirectsError = exports.RequestError = exports.setNonEnumerableProperties = exports.knownHookEvents = exports.withoutBody = exports.kIsNormalizedAlready = void 0;\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst fs_1 = __webpack_require__(/*! fs */ \"fs\");\nconst url_1 = __webpack_require__(/*! url */ \"url\");\nconst http = __webpack_require__(/*! http */ \"http\");\nconst http_1 = __webpack_require__(/*! http */ \"http\");\nconst https = __webpack_require__(/*! https */ \"https\");\nconst http_timer_1 = __webpack_require__(/*! @szmarczak/http-timer */ \"(ssr)/./node_modules/swarm-js/node_modules/@szmarczak/http-timer/dist/source/index.js\");\nconst cacheable_lookup_1 = __webpack_require__(/*! cacheable-lookup */ \"(ssr)/./node_modules/swarm-js/node_modules/cacheable-lookup/source/index.js\");\nconst CacheableRequest = __webpack_require__(/*! cacheable-request */ \"(ssr)/./node_modules/cacheable-request/src/index.js\");\nconst decompressResponse = __webpack_require__(/*! decompress-response */ \"(ssr)/./node_modules/decompress-response/index.js\");\n// @ts-expect-error Missing types\nconst http2wrapper = __webpack_require__(/*! http2-wrapper */ \"(ssr)/./node_modules/swarm-js/node_modules/http2-wrapper/source/index.js\");\nconst lowercaseKeys = __webpack_require__(/*! lowercase-keys */ \"(ssr)/./node_modules/swarm-js/node_modules/lowercase-keys/index.js\");\nconst is_1 = __webpack_require__(/*! @sindresorhus/is */ \"(ssr)/./node_modules/@sindresorhus/is/dist/index.js\");\nconst get_body_size_1 = __webpack_require__(/*! ./utils/get-body-size */ \"(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/core/utils/get-body-size.js\");\nconst is_form_data_1 = __webpack_require__(/*! ./utils/is-form-data */ \"(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/core/utils/is-form-data.js\");\nconst proxy_events_1 = __webpack_require__(/*! ./utils/proxy-events */ \"(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/core/utils/proxy-events.js\");\nconst timed_out_1 = __webpack_require__(/*! ./utils/timed-out */ \"(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/core/utils/timed-out.js\");\nconst url_to_options_1 = __webpack_require__(/*! ./utils/url-to-options */ \"(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/core/utils/url-to-options.js\");\nconst options_to_url_1 = __webpack_require__(/*! ./utils/options-to-url */ \"(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/core/utils/options-to-url.js\");\nconst weakable_map_1 = __webpack_require__(/*! ./utils/weakable-map */ \"(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/core/utils/weakable-map.js\");\nconst get_buffer_1 = __webpack_require__(/*! ./utils/get-buffer */ \"(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/core/utils/get-buffer.js\");\nconst dns_ip_version_1 = __webpack_require__(/*! ./utils/dns-ip-version */ \"(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/core/utils/dns-ip-version.js\");\nconst is_response_ok_1 = __webpack_require__(/*! ./utils/is-response-ok */ \"(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/core/utils/is-response-ok.js\");\nconst deprecation_warning_1 = __webpack_require__(/*! ../utils/deprecation-warning */ \"(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/utils/deprecation-warning.js\");\nconst normalize_arguments_1 = __webpack_require__(/*! ../as-promise/normalize-arguments */ \"(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/as-promise/normalize-arguments.js\");\nconst calculate_retry_delay_1 = __webpack_require__(/*! ./calculate-retry-delay */ \"(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/core/calculate-retry-delay.js\");\nlet globalDnsCache;\nconst kRequest = Symbol(\"request\");\nconst kResponse = Symbol(\"response\");\nconst kResponseSize = Symbol(\"responseSize\");\nconst kDownloadedSize = Symbol(\"downloadedSize\");\nconst kBodySize = Symbol(\"bodySize\");\nconst kUploadedSize = Symbol(\"uploadedSize\");\nconst kServerResponsesPiped = Symbol(\"serverResponsesPiped\");\nconst kUnproxyEvents = Symbol(\"unproxyEvents\");\nconst kIsFromCache = Symbol(\"isFromCache\");\nconst kCancelTimeouts = Symbol(\"cancelTimeouts\");\nconst kStartedReading = Symbol(\"startedReading\");\nconst kStopReading = Symbol(\"stopReading\");\nconst kTriggerRead = Symbol(\"triggerRead\");\nconst kBody = Symbol(\"body\");\nconst kJobs = Symbol(\"jobs\");\nconst kOriginalResponse = Symbol(\"originalResponse\");\nconst kRetryTimeout = Symbol(\"retryTimeout\");\nexports.kIsNormalizedAlready = Symbol(\"isNormalizedAlready\");\nconst supportsBrotli = is_1.default.string(process.versions.brotli);\nexports.withoutBody = new Set([\n    \"GET\",\n    \"HEAD\"\n]);\nexports.knownHookEvents = [\n    \"init\",\n    \"beforeRequest\",\n    \"beforeRedirect\",\n    \"beforeError\",\n    \"beforeRetry\",\n    // Promise-Only\n    \"afterResponse\"\n];\nfunction validateSearchParameters(searchParameters) {\n    // eslint-disable-next-line guard-for-in\n    for(const key in searchParameters){\n        const value = searchParameters[key];\n        if (!is_1.default.string(value) && !is_1.default.number(value) && !is_1.default.boolean(value) && !is_1.default.null_(value) && !is_1.default.undefined(value)) {\n            throw new TypeError(`The \\`searchParams\\` value '${String(value)}' must be a string, number, boolean or null`);\n        }\n    }\n}\nfunction isClientRequest(clientRequest) {\n    return is_1.default.object(clientRequest) && !(\"statusCode\" in clientRequest);\n}\nconst cacheableStore = new weakable_map_1.default();\nconst waitForOpenFile = async (file)=>new Promise((resolve, reject)=>{\n        const onError = (error)=>{\n            reject(error);\n        };\n        // Node.js 12 has incomplete types\n        if (!file.pending) {\n            resolve();\n        }\n        file.once(\"error\", onError);\n        file.once(\"ready\", ()=>{\n            file.off(\"error\", onError);\n            resolve();\n        });\n    });\nconst redirectCodes = new Set([\n    300,\n    301,\n    302,\n    303,\n    304,\n    307,\n    308\n]);\nconst nonEnumerableProperties = [\n    \"context\",\n    \"body\",\n    \"json\",\n    \"form\"\n];\nexports.setNonEnumerableProperties = (sources, to)=>{\n    // Non enumerable properties shall not be merged\n    const properties = {};\n    for (const source of sources){\n        if (!source) {\n            continue;\n        }\n        for (const name of nonEnumerableProperties){\n            if (!(name in source)) {\n                continue;\n            }\n            properties[name] = {\n                writable: true,\n                configurable: true,\n                enumerable: false,\n                // @ts-expect-error TS doesn't see the check above\n                value: source[name]\n            };\n        }\n    }\n    Object.defineProperties(to, properties);\n};\n/**\nAn error to be thrown when a request fails.\nContains a `code` property with error class code, like `ECONNREFUSED`.\n*/ class RequestError extends Error {\n    constructor(message, error, self){\n        var _a, _b;\n        super(message);\n        Error.captureStackTrace(this, this.constructor);\n        this.name = \"RequestError\";\n        this.code = (_a = error.code) !== null && _a !== void 0 ? _a : \"ERR_GOT_REQUEST_ERROR\";\n        if (self instanceof Request) {\n            Object.defineProperty(this, \"request\", {\n                enumerable: false,\n                value: self\n            });\n            Object.defineProperty(this, \"response\", {\n                enumerable: false,\n                value: self[kResponse]\n            });\n            Object.defineProperty(this, \"options\", {\n                // This fails because of TS 3.7.2 useDefineForClassFields\n                // Ref: https://github.com/microsoft/TypeScript/issues/34972\n                enumerable: false,\n                value: self.options\n            });\n        } else {\n            Object.defineProperty(this, \"options\", {\n                // This fails because of TS 3.7.2 useDefineForClassFields\n                // Ref: https://github.com/microsoft/TypeScript/issues/34972\n                enumerable: false,\n                value: self\n            });\n        }\n        this.timings = (_b = this.request) === null || _b === void 0 ? void 0 : _b.timings;\n        // Recover the original stacktrace\n        if (is_1.default.string(error.stack) && is_1.default.string(this.stack)) {\n            const indexOfMessage = this.stack.indexOf(this.message) + this.message.length;\n            const thisStackTrace = this.stack.slice(indexOfMessage).split(\"\\n\").reverse();\n            const errorStackTrace = error.stack.slice(error.stack.indexOf(error.message) + error.message.length).split(\"\\n\").reverse();\n            // Remove duplicated traces\n            while(errorStackTrace.length !== 0 && errorStackTrace[0] === thisStackTrace[0]){\n                thisStackTrace.shift();\n            }\n            this.stack = `${this.stack.slice(0, indexOfMessage)}${thisStackTrace.reverse().join(\"\\n\")}${errorStackTrace.reverse().join(\"\\n\")}`;\n        }\n    }\n}\nexports.RequestError = RequestError;\n/**\nAn error to be thrown when the server redirects you more than ten times.\nIncludes a `response` property.\n*/ class MaxRedirectsError extends RequestError {\n    constructor(request){\n        super(`Redirected ${request.options.maxRedirects} times. Aborting.`, {}, request);\n        this.name = \"MaxRedirectsError\";\n        this.code = \"ERR_TOO_MANY_REDIRECTS\";\n    }\n}\nexports.MaxRedirectsError = MaxRedirectsError;\n/**\nAn error to be thrown when the server response code is not 2xx nor 3xx if `options.followRedirect` is `true`, but always except for 304.\nIncludes a `response` property.\n*/ class HTTPError extends RequestError {\n    constructor(response){\n        super(`Response code ${response.statusCode} (${response.statusMessage})`, {}, response.request);\n        this.name = \"HTTPError\";\n        this.code = \"ERR_NON_2XX_3XX_RESPONSE\";\n    }\n}\nexports.HTTPError = HTTPError;\n/**\nAn error to be thrown when a cache method fails.\nFor example, if the database goes down or there's a filesystem error.\n*/ class CacheError extends RequestError {\n    constructor(error, request){\n        super(error.message, error, request);\n        this.name = \"CacheError\";\n        this.code = this.code === \"ERR_GOT_REQUEST_ERROR\" ? \"ERR_CACHE_ACCESS\" : this.code;\n    }\n}\nexports.CacheError = CacheError;\n/**\nAn error to be thrown when the request body is a stream and an error occurs while reading from that stream.\n*/ class UploadError extends RequestError {\n    constructor(error, request){\n        super(error.message, error, request);\n        this.name = \"UploadError\";\n        this.code = this.code === \"ERR_GOT_REQUEST_ERROR\" ? \"ERR_UPLOAD\" : this.code;\n    }\n}\nexports.UploadError = UploadError;\n/**\nAn error to be thrown when the request is aborted due to a timeout.\nIncludes an `event` and `timings` property.\n*/ class TimeoutError extends RequestError {\n    constructor(error, timings, request){\n        super(error.message, error, request);\n        this.name = \"TimeoutError\";\n        this.event = error.event;\n        this.timings = timings;\n    }\n}\nexports.TimeoutError = TimeoutError;\n/**\nAn error to be thrown when reading from response stream fails.\n*/ class ReadError extends RequestError {\n    constructor(error, request){\n        super(error.message, error, request);\n        this.name = \"ReadError\";\n        this.code = this.code === \"ERR_GOT_REQUEST_ERROR\" ? \"ERR_READING_RESPONSE_STREAM\" : this.code;\n    }\n}\nexports.ReadError = ReadError;\n/**\nAn error to be thrown when given an unsupported protocol.\n*/ class UnsupportedProtocolError extends RequestError {\n    constructor(options){\n        super(`Unsupported protocol \"${options.url.protocol}\"`, {}, options);\n        this.name = \"UnsupportedProtocolError\";\n        this.code = \"ERR_UNSUPPORTED_PROTOCOL\";\n    }\n}\nexports.UnsupportedProtocolError = UnsupportedProtocolError;\nconst proxiedRequestEvents = [\n    \"socket\",\n    \"connect\",\n    \"continue\",\n    \"information\",\n    \"upgrade\",\n    \"timeout\"\n];\nclass Request extends stream_1.Duplex {\n    constructor(url, options = {}, defaults){\n        super({\n            // This must be false, to enable throwing after destroy\n            // It is used for retry logic in Promise API\n            autoDestroy: false,\n            // It needs to be zero because we're just proxying the data to another stream\n            highWaterMark: 0\n        });\n        this[kDownloadedSize] = 0;\n        this[kUploadedSize] = 0;\n        this.requestInitialized = false;\n        this[kServerResponsesPiped] = new Set();\n        this.redirects = [];\n        this[kStopReading] = false;\n        this[kTriggerRead] = false;\n        this[kJobs] = [];\n        this.retryCount = 0;\n        // TODO: Remove this when targeting Node.js >= 12\n        this._progressCallbacks = [];\n        const unlockWrite = ()=>this._unlockWrite();\n        const lockWrite = ()=>this._lockWrite();\n        this.on(\"pipe\", (source)=>{\n            source.prependListener(\"data\", unlockWrite);\n            source.on(\"data\", lockWrite);\n            source.prependListener(\"end\", unlockWrite);\n            source.on(\"end\", lockWrite);\n        });\n        this.on(\"unpipe\", (source)=>{\n            source.off(\"data\", unlockWrite);\n            source.off(\"data\", lockWrite);\n            source.off(\"end\", unlockWrite);\n            source.off(\"end\", lockWrite);\n        });\n        this.on(\"pipe\", (source)=>{\n            if (source instanceof http_1.IncomingMessage) {\n                this.options.headers = {\n                    ...source.headers,\n                    ...this.options.headers\n                };\n            }\n        });\n        const { json, body, form } = options;\n        if (json || body || form) {\n            this._lockWrite();\n        }\n        if (exports.kIsNormalizedAlready in options) {\n            this.options = options;\n        } else {\n            try {\n                // @ts-expect-error Common TypeScript bug saying that `this.constructor` is not accessible\n                this.options = this.constructor.normalizeArguments(url, options, defaults);\n            } catch (error) {\n                // TODO: Move this to `_destroy()`\n                if (is_1.default.nodeStream(options.body)) {\n                    options.body.destroy();\n                }\n                this.destroy(error);\n                return;\n            }\n        }\n        (async ()=>{\n            var _a;\n            try {\n                if (this.options.body instanceof fs_1.ReadStream) {\n                    await waitForOpenFile(this.options.body);\n                }\n                const { url: normalizedURL } = this.options;\n                if (!normalizedURL) {\n                    throw new TypeError(\"Missing `url` property\");\n                }\n                this.requestUrl = normalizedURL.toString();\n                decodeURI(this.requestUrl);\n                await this._finalizeBody();\n                await this._makeRequest();\n                if (this.destroyed) {\n                    (_a = this[kRequest]) === null || _a === void 0 ? void 0 : _a.destroy();\n                    return;\n                }\n                // Queued writes etc.\n                for (const job of this[kJobs]){\n                    job();\n                }\n                // Prevent memory leak\n                this[kJobs].length = 0;\n                this.requestInitialized = true;\n            } catch (error) {\n                if (error instanceof RequestError) {\n                    this._beforeError(error);\n                    return;\n                }\n                // This is a workaround for https://github.com/nodejs/node/issues/33335\n                if (!this.destroyed) {\n                    this.destroy(error);\n                }\n            }\n        })();\n    }\n    static normalizeArguments(url, options, defaults) {\n        var _a, _b, _c, _d, _e;\n        const rawOptions = options;\n        if (is_1.default.object(url) && !is_1.default.urlInstance(url)) {\n            options = {\n                ...defaults,\n                ...url,\n                ...options\n            };\n        } else {\n            if (url && options && options.url !== undefined) {\n                throw new TypeError(\"The `url` option is mutually exclusive with the `input` argument\");\n            }\n            options = {\n                ...defaults,\n                ...options\n            };\n            if (url !== undefined) {\n                options.url = url;\n            }\n            if (is_1.default.urlInstance(options.url)) {\n                options.url = new url_1.URL(options.url.toString());\n            }\n        }\n        // TODO: Deprecate URL options in Got 12.\n        // Support extend-specific options\n        if (options.cache === false) {\n            options.cache = undefined;\n        }\n        if (options.dnsCache === false) {\n            options.dnsCache = undefined;\n        }\n        // Nice type assertions\n        is_1.assert.any([\n            is_1.default.string,\n            is_1.default.undefined\n        ], options.method);\n        is_1.assert.any([\n            is_1.default.object,\n            is_1.default.undefined\n        ], options.headers);\n        is_1.assert.any([\n            is_1.default.string,\n            is_1.default.urlInstance,\n            is_1.default.undefined\n        ], options.prefixUrl);\n        is_1.assert.any([\n            is_1.default.object,\n            is_1.default.undefined\n        ], options.cookieJar);\n        is_1.assert.any([\n            is_1.default.object,\n            is_1.default.string,\n            is_1.default.undefined\n        ], options.searchParams);\n        is_1.assert.any([\n            is_1.default.object,\n            is_1.default.string,\n            is_1.default.undefined\n        ], options.cache);\n        is_1.assert.any([\n            is_1.default.object,\n            is_1.default.number,\n            is_1.default.undefined\n        ], options.timeout);\n        is_1.assert.any([\n            is_1.default.object,\n            is_1.default.undefined\n        ], options.context);\n        is_1.assert.any([\n            is_1.default.object,\n            is_1.default.undefined\n        ], options.hooks);\n        is_1.assert.any([\n            is_1.default.boolean,\n            is_1.default.undefined\n        ], options.decompress);\n        is_1.assert.any([\n            is_1.default.boolean,\n            is_1.default.undefined\n        ], options.ignoreInvalidCookies);\n        is_1.assert.any([\n            is_1.default.boolean,\n            is_1.default.undefined\n        ], options.followRedirect);\n        is_1.assert.any([\n            is_1.default.number,\n            is_1.default.undefined\n        ], options.maxRedirects);\n        is_1.assert.any([\n            is_1.default.boolean,\n            is_1.default.undefined\n        ], options.throwHttpErrors);\n        is_1.assert.any([\n            is_1.default.boolean,\n            is_1.default.undefined\n        ], options.http2);\n        is_1.assert.any([\n            is_1.default.boolean,\n            is_1.default.undefined\n        ], options.allowGetBody);\n        is_1.assert.any([\n            is_1.default.string,\n            is_1.default.undefined\n        ], options.localAddress);\n        is_1.assert.any([\n            dns_ip_version_1.isDnsLookupIpVersion,\n            is_1.default.undefined\n        ], options.dnsLookupIpVersion);\n        is_1.assert.any([\n            is_1.default.object,\n            is_1.default.undefined\n        ], options.https);\n        is_1.assert.any([\n            is_1.default.boolean,\n            is_1.default.undefined\n        ], options.rejectUnauthorized);\n        if (options.https) {\n            is_1.assert.any([\n                is_1.default.boolean,\n                is_1.default.undefined\n            ], options.https.rejectUnauthorized);\n            is_1.assert.any([\n                is_1.default.function_,\n                is_1.default.undefined\n            ], options.https.checkServerIdentity);\n            is_1.assert.any([\n                is_1.default.string,\n                is_1.default.object,\n                is_1.default.array,\n                is_1.default.undefined\n            ], options.https.certificateAuthority);\n            is_1.assert.any([\n                is_1.default.string,\n                is_1.default.object,\n                is_1.default.array,\n                is_1.default.undefined\n            ], options.https.key);\n            is_1.assert.any([\n                is_1.default.string,\n                is_1.default.object,\n                is_1.default.array,\n                is_1.default.undefined\n            ], options.https.certificate);\n            is_1.assert.any([\n                is_1.default.string,\n                is_1.default.undefined\n            ], options.https.passphrase);\n            is_1.assert.any([\n                is_1.default.string,\n                is_1.default.buffer,\n                is_1.default.array,\n                is_1.default.undefined\n            ], options.https.pfx);\n        }\n        is_1.assert.any([\n            is_1.default.object,\n            is_1.default.undefined\n        ], options.cacheOptions);\n        // `options.method`\n        if (is_1.default.string(options.method)) {\n            options.method = options.method.toUpperCase();\n        } else {\n            options.method = \"GET\";\n        }\n        // `options.headers`\n        if (options.headers === (defaults === null || defaults === void 0 ? void 0 : defaults.headers)) {\n            options.headers = {\n                ...options.headers\n            };\n        } else {\n            options.headers = lowercaseKeys({\n                ...defaults === null || defaults === void 0 ? void 0 : defaults.headers,\n                ...options.headers\n            });\n        }\n        // Disallow legacy `url.Url`\n        if (\"slashes\" in options) {\n            throw new TypeError(\"The legacy `url.Url` has been deprecated. Use `URL` instead.\");\n        }\n        // `options.auth`\n        if (\"auth\" in options) {\n            throw new TypeError(\"Parameter `auth` is deprecated. Use `username` / `password` instead.\");\n        }\n        // `options.searchParams`\n        if (\"searchParams\" in options) {\n            if (options.searchParams && options.searchParams !== (defaults === null || defaults === void 0 ? void 0 : defaults.searchParams)) {\n                let searchParameters;\n                if (is_1.default.string(options.searchParams) || options.searchParams instanceof url_1.URLSearchParams) {\n                    searchParameters = new url_1.URLSearchParams(options.searchParams);\n                } else {\n                    validateSearchParameters(options.searchParams);\n                    searchParameters = new url_1.URLSearchParams();\n                    // eslint-disable-next-line guard-for-in\n                    for(const key in options.searchParams){\n                        const value = options.searchParams[key];\n                        if (value === null) {\n                            searchParameters.append(key, \"\");\n                        } else if (value !== undefined) {\n                            searchParameters.append(key, value);\n                        }\n                    }\n                }\n                // `normalizeArguments()` is also used to merge options\n                (_a = defaults === null || defaults === void 0 ? void 0 : defaults.searchParams) === null || _a === void 0 ? void 0 : _a.forEach((value, key)=>{\n                    // Only use default if one isn't already defined\n                    if (!searchParameters.has(key)) {\n                        searchParameters.append(key, value);\n                    }\n                });\n                options.searchParams = searchParameters;\n            }\n        }\n        // `options.username` & `options.password`\n        options.username = (_b = options.username) !== null && _b !== void 0 ? _b : \"\";\n        options.password = (_c = options.password) !== null && _c !== void 0 ? _c : \"\";\n        // `options.prefixUrl` & `options.url`\n        if (is_1.default.undefined(options.prefixUrl)) {\n            options.prefixUrl = (_d = defaults === null || defaults === void 0 ? void 0 : defaults.prefixUrl) !== null && _d !== void 0 ? _d : \"\";\n        } else {\n            options.prefixUrl = options.prefixUrl.toString();\n            if (options.prefixUrl !== \"\" && !options.prefixUrl.endsWith(\"/\")) {\n                options.prefixUrl += \"/\";\n            }\n        }\n        if (is_1.default.string(options.url)) {\n            if (options.url.startsWith(\"/\")) {\n                throw new Error(\"`input` must not start with a slash when using `prefixUrl`\");\n            }\n            options.url = options_to_url_1.default(options.prefixUrl + options.url, options);\n        } else if (is_1.default.undefined(options.url) && options.prefixUrl !== \"\" || options.protocol) {\n            options.url = options_to_url_1.default(options.prefixUrl, options);\n        }\n        if (options.url) {\n            if (\"port\" in options) {\n                delete options.port;\n            }\n            // Make it possible to change `options.prefixUrl`\n            let { prefixUrl } = options;\n            Object.defineProperty(options, \"prefixUrl\", {\n                set: (value)=>{\n                    const url = options.url;\n                    if (!url.href.startsWith(value)) {\n                        throw new Error(`Cannot change \\`prefixUrl\\` from ${prefixUrl} to ${value}: ${url.href}`);\n                    }\n                    options.url = new url_1.URL(value + url.href.slice(prefixUrl.length));\n                    prefixUrl = value;\n                },\n                get: ()=>prefixUrl\n            });\n            // Support UNIX sockets\n            let { protocol } = options.url;\n            if (protocol === \"unix:\") {\n                protocol = \"http:\";\n                options.url = new url_1.URL(`http://unix${options.url.pathname}${options.url.search}`);\n            }\n            // Set search params\n            if (options.searchParams) {\n                // eslint-disable-next-line @typescript-eslint/no-base-to-string\n                options.url.search = options.searchParams.toString();\n            }\n            // Protocol check\n            if (protocol !== \"http:\" && protocol !== \"https:\") {\n                throw new UnsupportedProtocolError(options);\n            }\n            // Update `username`\n            if (options.username === \"\") {\n                options.username = options.url.username;\n            } else {\n                options.url.username = options.username;\n            }\n            // Update `password`\n            if (options.password === \"\") {\n                options.password = options.url.password;\n            } else {\n                options.url.password = options.password;\n            }\n        }\n        // `options.cookieJar`\n        const { cookieJar } = options;\n        if (cookieJar) {\n            let { setCookie, getCookieString } = cookieJar;\n            is_1.assert.function_(setCookie);\n            is_1.assert.function_(getCookieString);\n            /* istanbul ignore next: Horrible `tough-cookie` v3 check */ if (setCookie.length === 4 && getCookieString.length === 0) {\n                setCookie = util_1.promisify(setCookie.bind(options.cookieJar));\n                getCookieString = util_1.promisify(getCookieString.bind(options.cookieJar));\n                options.cookieJar = {\n                    setCookie,\n                    getCookieString: getCookieString\n                };\n            }\n        }\n        // `options.cache`\n        const { cache } = options;\n        if (cache) {\n            if (!cacheableStore.has(cache)) {\n                cacheableStore.set(cache, new CacheableRequest((requestOptions, handler)=>{\n                    const result = requestOptions[kRequest](requestOptions, handler);\n                    // TODO: remove this when `cacheable-request` supports async request functions.\n                    if (is_1.default.promise(result)) {\n                        // @ts-expect-error\n                        // We only need to implement the error handler in order to support HTTP2 caching.\n                        // The result will be a promise anyway.\n                        result.once = (event, handler)=>{\n                            if (event === \"error\") {\n                                result.catch(handler);\n                            } else if (event === \"abort\") {\n                                // The empty catch is needed here in case when\n                                // it rejects before it's `await`ed in `_makeRequest`.\n                                (async ()=>{\n                                    try {\n                                        const request = await result;\n                                        request.once(\"abort\", handler);\n                                    } catch (_a) {}\n                                })();\n                            } else {\n                                /* istanbul ignore next: safety check */ throw new Error(`Unknown HTTP2 promise event: ${event}`);\n                            }\n                            return result;\n                        };\n                    }\n                    return result;\n                }, cache));\n            }\n        }\n        // `options.cacheOptions`\n        options.cacheOptions = {\n            ...options.cacheOptions\n        };\n        // `options.dnsCache`\n        if (options.dnsCache === true) {\n            if (!globalDnsCache) {\n                globalDnsCache = new cacheable_lookup_1.default();\n            }\n            options.dnsCache = globalDnsCache;\n        } else if (!is_1.default.undefined(options.dnsCache) && !options.dnsCache.lookup) {\n            throw new TypeError(`Parameter \\`dnsCache\\` must be a CacheableLookup instance or a boolean, got ${is_1.default(options.dnsCache)}`);\n        }\n        // `options.timeout`\n        if (is_1.default.number(options.timeout)) {\n            options.timeout = {\n                request: options.timeout\n            };\n        } else if (defaults && options.timeout !== defaults.timeout) {\n            options.timeout = {\n                ...defaults.timeout,\n                ...options.timeout\n            };\n        } else {\n            options.timeout = {\n                ...options.timeout\n            };\n        }\n        // `options.context`\n        if (!options.context) {\n            options.context = {};\n        }\n        // `options.hooks`\n        const areHooksDefault = options.hooks === (defaults === null || defaults === void 0 ? void 0 : defaults.hooks);\n        options.hooks = {\n            ...options.hooks\n        };\n        for (const event of exports.knownHookEvents){\n            if (event in options.hooks) {\n                if (is_1.default.array(options.hooks[event])) {\n                    // See https://github.com/microsoft/TypeScript/issues/31445#issuecomment-576929044\n                    options.hooks[event] = [\n                        ...options.hooks[event]\n                    ];\n                } else {\n                    throw new TypeError(`Parameter \\`${event}\\` must be an Array, got ${is_1.default(options.hooks[event])}`);\n                }\n            } else {\n                options.hooks[event] = [];\n            }\n        }\n        if (defaults && !areHooksDefault) {\n            for (const event of exports.knownHookEvents){\n                const defaultHooks = defaults.hooks[event];\n                if (defaultHooks.length > 0) {\n                    // See https://github.com/microsoft/TypeScript/issues/31445#issuecomment-576929044\n                    options.hooks[event] = [\n                        ...defaults.hooks[event],\n                        ...options.hooks[event]\n                    ];\n                }\n            }\n        }\n        // DNS options\n        if (\"family\" in options) {\n            deprecation_warning_1.default('\"options.family\" was never documented, please use \"options.dnsLookupIpVersion\"');\n        }\n        // HTTPS options\n        if (defaults === null || defaults === void 0 ? void 0 : defaults.https) {\n            options.https = {\n                ...defaults.https,\n                ...options.https\n            };\n        }\n        if (\"rejectUnauthorized\" in options) {\n            deprecation_warning_1.default('\"options.rejectUnauthorized\" is now deprecated, please use \"options.https.rejectUnauthorized\"');\n        }\n        if (\"checkServerIdentity\" in options) {\n            deprecation_warning_1.default('\"options.checkServerIdentity\" was never documented, please use \"options.https.checkServerIdentity\"');\n        }\n        if (\"ca\" in options) {\n            deprecation_warning_1.default('\"options.ca\" was never documented, please use \"options.https.certificateAuthority\"');\n        }\n        if (\"key\" in options) {\n            deprecation_warning_1.default('\"options.key\" was never documented, please use \"options.https.key\"');\n        }\n        if (\"cert\" in options) {\n            deprecation_warning_1.default('\"options.cert\" was never documented, please use \"options.https.certificate\"');\n        }\n        if (\"passphrase\" in options) {\n            deprecation_warning_1.default('\"options.passphrase\" was never documented, please use \"options.https.passphrase\"');\n        }\n        if (\"pfx\" in options) {\n            deprecation_warning_1.default('\"options.pfx\" was never documented, please use \"options.https.pfx\"');\n        }\n        // Other options\n        if (\"followRedirects\" in options) {\n            throw new TypeError(\"The `followRedirects` option does not exist. Use `followRedirect` instead.\");\n        }\n        if (options.agent) {\n            for(const key in options.agent){\n                if (key !== \"http\" && key !== \"https\" && key !== \"http2\") {\n                    throw new TypeError(`Expected the \\`options.agent\\` properties to be \\`http\\`, \\`https\\` or \\`http2\\`, got \\`${key}\\``);\n                }\n            }\n        }\n        options.maxRedirects = (_e = options.maxRedirects) !== null && _e !== void 0 ? _e : 0;\n        // Set non-enumerable properties\n        exports.setNonEnumerableProperties([\n            defaults,\n            rawOptions\n        ], options);\n        return normalize_arguments_1.default(options, defaults);\n    }\n    _lockWrite() {\n        const onLockedWrite = ()=>{\n            throw new TypeError(\"The payload has been already provided\");\n        };\n        this.write = onLockedWrite;\n        this.end = onLockedWrite;\n    }\n    _unlockWrite() {\n        this.write = super.write;\n        this.end = super.end;\n    }\n    async _finalizeBody() {\n        const { options } = this;\n        const { headers } = options;\n        const isForm = !is_1.default.undefined(options.form);\n        const isJSON = !is_1.default.undefined(options.json);\n        const isBody = !is_1.default.undefined(options.body);\n        const hasPayload = isForm || isJSON || isBody;\n        const cannotHaveBody = exports.withoutBody.has(options.method) && !(options.method === \"GET\" && options.allowGetBody);\n        this._cannotHaveBody = cannotHaveBody;\n        if (hasPayload) {\n            if (cannotHaveBody) {\n                throw new TypeError(`The \\`${options.method}\\` method cannot be used with a body`);\n            }\n            if ([\n                isBody,\n                isForm,\n                isJSON\n            ].filter((isTrue)=>isTrue).length > 1) {\n                throw new TypeError(\"The `body`, `json` and `form` options are mutually exclusive\");\n            }\n            if (isBody && !(options.body instanceof stream_1.Readable) && !is_1.default.string(options.body) && !is_1.default.buffer(options.body) && !is_form_data_1.default(options.body)) {\n                throw new TypeError(\"The `body` option must be a stream.Readable, string or Buffer\");\n            }\n            if (isForm && !is_1.default.object(options.form)) {\n                throw new TypeError(\"The `form` option must be an Object\");\n            }\n            {\n                // Serialize body\n                const noContentType = !is_1.default.string(headers[\"content-type\"]);\n                if (isBody) {\n                    // Special case for https://github.com/form-data/form-data\n                    if (is_form_data_1.default(options.body) && noContentType) {\n                        headers[\"content-type\"] = `multipart/form-data; boundary=${options.body.getBoundary()}`;\n                    }\n                    this[kBody] = options.body;\n                } else if (isForm) {\n                    if (noContentType) {\n                        headers[\"content-type\"] = \"application/x-www-form-urlencoded\";\n                    }\n                    this[kBody] = new url_1.URLSearchParams(options.form).toString();\n                } else {\n                    if (noContentType) {\n                        headers[\"content-type\"] = \"application/json\";\n                    }\n                    this[kBody] = options.stringifyJson(options.json);\n                }\n                const uploadBodySize = await get_body_size_1.default(this[kBody], options.headers);\n                // See https://tools.ietf.org/html/rfc7230#section-3.3.2\n                // A user agent SHOULD send a Content-Length in a request message when\n                // no Transfer-Encoding is sent and the request method defines a meaning\n                // for an enclosed payload body.  For example, a Content-Length header\n                // field is normally sent in a POST request even when the value is 0\n                // (indicating an empty payload body).  A user agent SHOULD NOT send a\n                // Content-Length header field when the request message does not contain\n                // a payload body and the method semantics do not anticipate such a\n                // body.\n                if (is_1.default.undefined(headers[\"content-length\"]) && is_1.default.undefined(headers[\"transfer-encoding\"])) {\n                    if (!cannotHaveBody && !is_1.default.undefined(uploadBodySize)) {\n                        headers[\"content-length\"] = String(uploadBodySize);\n                    }\n                }\n            }\n        } else if (cannotHaveBody) {\n            this._lockWrite();\n        } else {\n            this._unlockWrite();\n        }\n        this[kBodySize] = Number(headers[\"content-length\"]) || undefined;\n    }\n    async _onResponseBase(response) {\n        const { options } = this;\n        const { url } = options;\n        this[kOriginalResponse] = response;\n        if (options.decompress) {\n            response = decompressResponse(response);\n        }\n        const statusCode = response.statusCode;\n        const typedResponse = response;\n        typedResponse.statusMessage = typedResponse.statusMessage ? typedResponse.statusMessage : http.STATUS_CODES[statusCode];\n        typedResponse.url = options.url.toString();\n        typedResponse.requestUrl = this.requestUrl;\n        typedResponse.redirectUrls = this.redirects;\n        typedResponse.request = this;\n        typedResponse.isFromCache = response.fromCache || false;\n        typedResponse.ip = this.ip;\n        typedResponse.retryCount = this.retryCount;\n        this[kIsFromCache] = typedResponse.isFromCache;\n        this[kResponseSize] = Number(response.headers[\"content-length\"]) || undefined;\n        this[kResponse] = response;\n        response.once(\"end\", ()=>{\n            this[kResponseSize] = this[kDownloadedSize];\n            this.emit(\"downloadProgress\", this.downloadProgress);\n        });\n        response.once(\"error\", (error)=>{\n            // Force clean-up, because some packages don't do this.\n            // TODO: Fix decompress-response\n            response.destroy();\n            this._beforeError(new ReadError(error, this));\n        });\n        response.once(\"aborted\", ()=>{\n            this._beforeError(new ReadError({\n                name: \"Error\",\n                message: \"The server aborted pending request\",\n                code: \"ECONNRESET\"\n            }, this));\n        });\n        this.emit(\"downloadProgress\", this.downloadProgress);\n        const rawCookies = response.headers[\"set-cookie\"];\n        if (is_1.default.object(options.cookieJar) && rawCookies) {\n            let promises = rawCookies.map(async (rawCookie)=>options.cookieJar.setCookie(rawCookie, url.toString()));\n            if (options.ignoreInvalidCookies) {\n                promises = promises.map(async (p)=>p.catch(()=>{}));\n            }\n            try {\n                await Promise.all(promises);\n            } catch (error) {\n                this._beforeError(error);\n                return;\n            }\n        }\n        if (options.followRedirect && response.headers.location && redirectCodes.has(statusCode)) {\n            // We're being redirected, we don't care about the response.\n            // It'd be best to abort the request, but we can't because\n            // we would have to sacrifice the TCP connection. We don't want that.\n            response.resume();\n            if (this[kRequest]) {\n                this[kCancelTimeouts]();\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete this[kRequest];\n                this[kUnproxyEvents]();\n            }\n            const shouldBeGet = statusCode === 303 && options.method !== \"GET\" && options.method !== \"HEAD\";\n            if (shouldBeGet || !options.methodRewriting) {\n                // Server responded with \"see other\", indicating that the resource exists at another location,\n                // and the client should request it from that location via GET or HEAD.\n                options.method = \"GET\";\n                if (\"body\" in options) {\n                    delete options.body;\n                }\n                if (\"json\" in options) {\n                    delete options.json;\n                }\n                if (\"form\" in options) {\n                    delete options.form;\n                }\n                this[kBody] = undefined;\n                delete options.headers[\"content-length\"];\n            }\n            if (this.redirects.length >= options.maxRedirects) {\n                this._beforeError(new MaxRedirectsError(this));\n                return;\n            }\n            try {\n                // Do not remove. See https://github.com/sindresorhus/got/pull/214\n                const redirectBuffer = Buffer.from(response.headers.location, \"binary\").toString();\n                // Handles invalid URLs. See https://github.com/sindresorhus/got/issues/604\n                const redirectUrl = new url_1.URL(redirectBuffer, url);\n                const redirectString = redirectUrl.toString();\n                decodeURI(redirectString);\n                // eslint-disable-next-line no-inner-declarations\n                function isUnixSocketURL(url) {\n                    return url.protocol === \"unix:\" || url.hostname === \"unix\";\n                }\n                if (!isUnixSocketURL(url) && isUnixSocketURL(redirectUrl)) {\n                    this._beforeError(new RequestError(\"Cannot redirect to UNIX socket\", {}, this));\n                    return;\n                }\n                // Redirecting to a different site, clear sensitive data.\n                if (redirectUrl.hostname !== url.hostname || redirectUrl.port !== url.port) {\n                    if (\"host\" in options.headers) {\n                        delete options.headers.host;\n                    }\n                    if (\"cookie\" in options.headers) {\n                        delete options.headers.cookie;\n                    }\n                    if (\"authorization\" in options.headers) {\n                        delete options.headers.authorization;\n                    }\n                    if (options.username || options.password) {\n                        options.username = \"\";\n                        options.password = \"\";\n                    }\n                } else {\n                    redirectUrl.username = options.username;\n                    redirectUrl.password = options.password;\n                }\n                this.redirects.push(redirectString);\n                options.url = redirectUrl;\n                for (const hook of options.hooks.beforeRedirect){\n                    // eslint-disable-next-line no-await-in-loop\n                    await hook(options, typedResponse);\n                }\n                this.emit(\"redirect\", typedResponse, options);\n                await this._makeRequest();\n            } catch (error) {\n                this._beforeError(error);\n                return;\n            }\n            return;\n        }\n        if (options.isStream && options.throwHttpErrors && !is_response_ok_1.isResponseOk(typedResponse)) {\n            this._beforeError(new HTTPError(typedResponse));\n            return;\n        }\n        response.on(\"readable\", ()=>{\n            if (this[kTriggerRead]) {\n                this._read();\n            }\n        });\n        this.on(\"resume\", ()=>{\n            response.resume();\n        });\n        this.on(\"pause\", ()=>{\n            response.pause();\n        });\n        response.once(\"end\", ()=>{\n            this.push(null);\n        });\n        this.emit(\"response\", response);\n        for (const destination of this[kServerResponsesPiped]){\n            if (destination.headersSent) {\n                continue;\n            }\n            // eslint-disable-next-line guard-for-in\n            for(const key in response.headers){\n                const isAllowed = options.decompress ? key !== \"content-encoding\" : true;\n                const value = response.headers[key];\n                if (isAllowed) {\n                    destination.setHeader(key, value);\n                }\n            }\n            destination.statusCode = statusCode;\n        }\n    }\n    async _onResponse(response) {\n        try {\n            await this._onResponseBase(response);\n        } catch (error) {\n            /* istanbul ignore next: better safe than sorry */ this._beforeError(error);\n        }\n    }\n    _onRequest(request) {\n        const { options } = this;\n        const { timeout, url } = options;\n        http_timer_1.default(request);\n        this[kCancelTimeouts] = timed_out_1.default(request, timeout, url);\n        const responseEventName = options.cache ? \"cacheableResponse\" : \"response\";\n        request.once(responseEventName, (response)=>{\n            void this._onResponse(response);\n        });\n        request.once(\"error\", (error)=>{\n            var _a;\n            // Force clean-up, because some packages (e.g. nock) don't do this.\n            request.destroy();\n            // Node.js <= 12.18.2 mistakenly emits the response `end` first.\n            (_a = request.res) === null || _a === void 0 ? void 0 : _a.removeAllListeners(\"end\");\n            error = error instanceof timed_out_1.TimeoutError ? new TimeoutError(error, this.timings, this) : new RequestError(error.message, error, this);\n            this._beforeError(error);\n        });\n        this[kUnproxyEvents] = proxy_events_1.default(request, this, proxiedRequestEvents);\n        this[kRequest] = request;\n        this.emit(\"uploadProgress\", this.uploadProgress);\n        // Send body\n        const body = this[kBody];\n        const currentRequest = this.redirects.length === 0 ? this : request;\n        if (is_1.default.nodeStream(body)) {\n            body.pipe(currentRequest);\n            body.once(\"error\", (error)=>{\n                this._beforeError(new UploadError(error, this));\n            });\n        } else {\n            this._unlockWrite();\n            if (!is_1.default.undefined(body)) {\n                this._writeRequest(body, undefined, ()=>{});\n                currentRequest.end();\n                this._lockWrite();\n            } else if (this._cannotHaveBody || this._noPipe) {\n                currentRequest.end();\n                this._lockWrite();\n            }\n        }\n        this.emit(\"request\", request);\n    }\n    async _createCacheableRequest(url, options) {\n        return new Promise((resolve, reject)=>{\n            // TODO: Remove `utils/url-to-options.ts` when `cacheable-request` is fixed\n            Object.assign(options, url_to_options_1.default(url));\n            // `http-cache-semantics` checks this\n            // TODO: Fix this ignore.\n            // @ts-expect-error\n            delete options.url;\n            let request;\n            // This is ugly\n            const cacheRequest = cacheableStore.get(options.cache)(options, async (response)=>{\n                // TODO: Fix `cacheable-response`\n                response._readableState.autoDestroy = false;\n                if (request) {\n                    (await request).emit(\"cacheableResponse\", response);\n                }\n                resolve(response);\n            });\n            // Restore options\n            options.url = url;\n            cacheRequest.once(\"error\", reject);\n            cacheRequest.once(\"request\", async (requestOrPromise)=>{\n                request = requestOrPromise;\n                resolve(request);\n            });\n        });\n    }\n    async _makeRequest() {\n        var _a, _b, _c, _d, _e;\n        const { options } = this;\n        const { headers } = options;\n        for(const key in headers){\n            if (is_1.default.undefined(headers[key])) {\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete headers[key];\n            } else if (is_1.default.null_(headers[key])) {\n                throw new TypeError(`Use \\`undefined\\` instead of \\`null\\` to delete the \\`${key}\\` header`);\n            }\n        }\n        if (options.decompress && is_1.default.undefined(headers[\"accept-encoding\"])) {\n            headers[\"accept-encoding\"] = supportsBrotli ? \"gzip, deflate, br\" : \"gzip, deflate\";\n        }\n        // Set cookies\n        if (options.cookieJar) {\n            const cookieString = await options.cookieJar.getCookieString(options.url.toString());\n            if (is_1.default.nonEmptyString(cookieString)) {\n                options.headers.cookie = cookieString;\n            }\n        }\n        for (const hook of options.hooks.beforeRequest){\n            // eslint-disable-next-line no-await-in-loop\n            const result = await hook(options);\n            if (!is_1.default.undefined(result)) {\n                // @ts-expect-error Skip the type mismatch to support abstract responses\n                options.request = ()=>result;\n                break;\n            }\n        }\n        if (options.body && this[kBody] !== options.body) {\n            this[kBody] = options.body;\n        }\n        const { agent, request, timeout, url } = options;\n        if (options.dnsCache && !(\"lookup\" in options)) {\n            options.lookup = options.dnsCache.lookup;\n        }\n        // UNIX sockets\n        if (url.hostname === \"unix\") {\n            const matches = /(?<socketPath>.+?):(?<path>.+)/.exec(`${url.pathname}${url.search}`);\n            if (matches === null || matches === void 0 ? void 0 : matches.groups) {\n                const { socketPath, path } = matches.groups;\n                Object.assign(options, {\n                    socketPath,\n                    path,\n                    host: \"\"\n                });\n            }\n        }\n        const isHttps = url.protocol === \"https:\";\n        // Fallback function\n        let fallbackFn;\n        if (options.http2) {\n            fallbackFn = http2wrapper.auto;\n        } else {\n            fallbackFn = isHttps ? https.request : http.request;\n        }\n        const realFn = (_a = options.request) !== null && _a !== void 0 ? _a : fallbackFn;\n        // Cache support\n        const fn = options.cache ? this._createCacheableRequest : realFn;\n        // Pass an agent directly when HTTP2 is disabled\n        if (agent && !options.http2) {\n            options.agent = agent[isHttps ? \"https\" : \"http\"];\n        }\n        // Prepare plain HTTP request options\n        options[kRequest] = realFn;\n        delete options.request;\n        // TODO: Fix this ignore.\n        // @ts-expect-error\n        delete options.timeout;\n        const requestOptions = options;\n        requestOptions.shared = (_b = options.cacheOptions) === null || _b === void 0 ? void 0 : _b.shared;\n        requestOptions.cacheHeuristic = (_c = options.cacheOptions) === null || _c === void 0 ? void 0 : _c.cacheHeuristic;\n        requestOptions.immutableMinTimeToLive = (_d = options.cacheOptions) === null || _d === void 0 ? void 0 : _d.immutableMinTimeToLive;\n        requestOptions.ignoreCargoCult = (_e = options.cacheOptions) === null || _e === void 0 ? void 0 : _e.ignoreCargoCult;\n        // If `dnsLookupIpVersion` is not present do not override `family`\n        if (options.dnsLookupIpVersion !== undefined) {\n            try {\n                requestOptions.family = dns_ip_version_1.dnsLookupIpVersionToFamily(options.dnsLookupIpVersion);\n            } catch (_f) {\n                throw new Error(\"Invalid `dnsLookupIpVersion` option value\");\n            }\n        }\n        // HTTPS options remapping\n        if (options.https) {\n            if (\"rejectUnauthorized\" in options.https) {\n                requestOptions.rejectUnauthorized = options.https.rejectUnauthorized;\n            }\n            if (options.https.checkServerIdentity) {\n                requestOptions.checkServerIdentity = options.https.checkServerIdentity;\n            }\n            if (options.https.certificateAuthority) {\n                requestOptions.ca = options.https.certificateAuthority;\n            }\n            if (options.https.certificate) {\n                requestOptions.cert = options.https.certificate;\n            }\n            if (options.https.key) {\n                requestOptions.key = options.https.key;\n            }\n            if (options.https.passphrase) {\n                requestOptions.passphrase = options.https.passphrase;\n            }\n            if (options.https.pfx) {\n                requestOptions.pfx = options.https.pfx;\n            }\n        }\n        try {\n            let requestOrResponse = await fn(url, requestOptions);\n            if (is_1.default.undefined(requestOrResponse)) {\n                requestOrResponse = fallbackFn(url, requestOptions);\n            }\n            // Restore options\n            options.request = request;\n            options.timeout = timeout;\n            options.agent = agent;\n            // HTTPS options restore\n            if (options.https) {\n                if (\"rejectUnauthorized\" in options.https) {\n                    delete requestOptions.rejectUnauthorized;\n                }\n                if (options.https.checkServerIdentity) {\n                    // @ts-expect-error - This one will be removed when we remove the alias.\n                    delete requestOptions.checkServerIdentity;\n                }\n                if (options.https.certificateAuthority) {\n                    delete requestOptions.ca;\n                }\n                if (options.https.certificate) {\n                    delete requestOptions.cert;\n                }\n                if (options.https.key) {\n                    delete requestOptions.key;\n                }\n                if (options.https.passphrase) {\n                    delete requestOptions.passphrase;\n                }\n                if (options.https.pfx) {\n                    delete requestOptions.pfx;\n                }\n            }\n            if (isClientRequest(requestOrResponse)) {\n                this._onRequest(requestOrResponse);\n            // Emit the response after the stream has been ended\n            } else if (this.writable) {\n                this.once(\"finish\", ()=>{\n                    void this._onResponse(requestOrResponse);\n                });\n                this._unlockWrite();\n                this.end();\n                this._lockWrite();\n            } else {\n                void this._onResponse(requestOrResponse);\n            }\n        } catch (error) {\n            if (error instanceof CacheableRequest.CacheError) {\n                throw new CacheError(error, this);\n            }\n            throw new RequestError(error.message, error, this);\n        }\n    }\n    async _error(error) {\n        try {\n            for (const hook of this.options.hooks.beforeError){\n                // eslint-disable-next-line no-await-in-loop\n                error = await hook(error);\n            }\n        } catch (error_) {\n            error = new RequestError(error_.message, error_, this);\n        }\n        this.destroy(error);\n    }\n    _beforeError(error) {\n        if (this[kStopReading]) {\n            return;\n        }\n        const { options } = this;\n        const retryCount = this.retryCount + 1;\n        this[kStopReading] = true;\n        if (!(error instanceof RequestError)) {\n            error = new RequestError(error.message, error, this);\n        }\n        const typedError = error;\n        const { response } = typedError;\n        void (async ()=>{\n            if (response && !response.body) {\n                response.setEncoding(this._readableState.encoding);\n                try {\n                    response.rawBody = await get_buffer_1.default(response);\n                    response.body = response.rawBody.toString();\n                } catch (_a) {}\n            }\n            if (this.listenerCount(\"retry\") !== 0) {\n                let backoff;\n                try {\n                    let retryAfter;\n                    if (response && \"retry-after\" in response.headers) {\n                        retryAfter = Number(response.headers[\"retry-after\"]);\n                        if (Number.isNaN(retryAfter)) {\n                            retryAfter = Date.parse(response.headers[\"retry-after\"]) - Date.now();\n                            if (retryAfter <= 0) {\n                                retryAfter = 1;\n                            }\n                        } else {\n                            retryAfter *= 1000;\n                        }\n                    }\n                    backoff = await options.retry.calculateDelay({\n                        attemptCount: retryCount,\n                        retryOptions: options.retry,\n                        error: typedError,\n                        retryAfter,\n                        computedValue: calculate_retry_delay_1.default({\n                            attemptCount: retryCount,\n                            retryOptions: options.retry,\n                            error: typedError,\n                            retryAfter,\n                            computedValue: 0\n                        })\n                    });\n                } catch (error_) {\n                    void this._error(new RequestError(error_.message, error_, this));\n                    return;\n                }\n                if (backoff) {\n                    const retry = async ()=>{\n                        try {\n                            for (const hook of this.options.hooks.beforeRetry){\n                                // eslint-disable-next-line no-await-in-loop\n                                await hook(this.options, typedError, retryCount);\n                            }\n                        } catch (error_) {\n                            void this._error(new RequestError(error_.message, error, this));\n                            return;\n                        }\n                        // Something forced us to abort the retry\n                        if (this.destroyed) {\n                            return;\n                        }\n                        this.destroy();\n                        this.emit(\"retry\", retryCount, error);\n                    };\n                    this[kRetryTimeout] = setTimeout(retry, backoff);\n                    return;\n                }\n            }\n            void this._error(typedError);\n        })();\n    }\n    _read() {\n        this[kTriggerRead] = true;\n        const response = this[kResponse];\n        if (response && !this[kStopReading]) {\n            // We cannot put this in the `if` above\n            // because `.read()` also triggers the `end` event\n            if (response.readableLength) {\n                this[kTriggerRead] = false;\n            }\n            let data;\n            while((data = response.read()) !== null){\n                this[kDownloadedSize] += data.length;\n                this[kStartedReading] = true;\n                const progress = this.downloadProgress;\n                if (progress.percent < 1) {\n                    this.emit(\"downloadProgress\", progress);\n                }\n                this.push(data);\n            }\n        }\n    }\n    // Node.js 12 has incorrect types, so the encoding must be a string\n    _write(chunk, encoding, callback) {\n        const write = ()=>{\n            this._writeRequest(chunk, encoding, callback);\n        };\n        if (this.requestInitialized) {\n            write();\n        } else {\n            this[kJobs].push(write);\n        }\n    }\n    _writeRequest(chunk, encoding, callback) {\n        if (this[kRequest].destroyed) {\n            // Probably the `ClientRequest` instance will throw\n            return;\n        }\n        this._progressCallbacks.push(()=>{\n            this[kUploadedSize] += Buffer.byteLength(chunk, encoding);\n            const progress = this.uploadProgress;\n            if (progress.percent < 1) {\n                this.emit(\"uploadProgress\", progress);\n            }\n        });\n        // TODO: What happens if it's from cache? Then this[kRequest] won't be defined.\n        this[kRequest].write(chunk, encoding, (error)=>{\n            if (!error && this._progressCallbacks.length > 0) {\n                this._progressCallbacks.shift()();\n            }\n            callback(error);\n        });\n    }\n    _final(callback) {\n        const endRequest = ()=>{\n            // FIX: Node.js 10 calls the write callback AFTER the end callback!\n            while(this._progressCallbacks.length !== 0){\n                this._progressCallbacks.shift()();\n            }\n            // We need to check if `this[kRequest]` is present,\n            // because it isn't when we use cache.\n            if (!(kRequest in this)) {\n                callback();\n                return;\n            }\n            if (this[kRequest].destroyed) {\n                callback();\n                return;\n            }\n            this[kRequest].end((error)=>{\n                if (!error) {\n                    this[kBodySize] = this[kUploadedSize];\n                    this.emit(\"uploadProgress\", this.uploadProgress);\n                    this[kRequest].emit(\"upload-complete\");\n                }\n                callback(error);\n            });\n        };\n        if (this.requestInitialized) {\n            endRequest();\n        } else {\n            this[kJobs].push(endRequest);\n        }\n    }\n    _destroy(error, callback) {\n        var _a;\n        this[kStopReading] = true;\n        // Prevent further retries\n        clearTimeout(this[kRetryTimeout]);\n        if (kRequest in this) {\n            this[kCancelTimeouts]();\n            // TODO: Remove the next `if` when these get fixed:\n            // - https://github.com/nodejs/node/issues/32851\n            if (!((_a = this[kResponse]) === null || _a === void 0 ? void 0 : _a.complete)) {\n                this[kRequest].destroy();\n            }\n        }\n        if (error !== null && !is_1.default.undefined(error) && !(error instanceof RequestError)) {\n            error = new RequestError(error.message, error, this);\n        }\n        callback(error);\n    }\n    get _isAboutToError() {\n        return this[kStopReading];\n    }\n    /**\n    The remote IP address.\n    */ get ip() {\n        var _a;\n        return (_a = this.socket) === null || _a === void 0 ? void 0 : _a.remoteAddress;\n    }\n    /**\n    Indicates whether the request has been aborted or not.\n    */ get aborted() {\n        var _a, _b, _c;\n        return ((_b = (_a = this[kRequest]) === null || _a === void 0 ? void 0 : _a.destroyed) !== null && _b !== void 0 ? _b : this.destroyed) && !((_c = this[kOriginalResponse]) === null || _c === void 0 ? void 0 : _c.complete);\n    }\n    get socket() {\n        var _a, _b;\n        return (_b = (_a = this[kRequest]) === null || _a === void 0 ? void 0 : _a.socket) !== null && _b !== void 0 ? _b : undefined;\n    }\n    /**\n    Progress event for downloading (receiving a response).\n    */ get downloadProgress() {\n        let percent;\n        if (this[kResponseSize]) {\n            percent = this[kDownloadedSize] / this[kResponseSize];\n        } else if (this[kResponseSize] === this[kDownloadedSize]) {\n            percent = 1;\n        } else {\n            percent = 0;\n        }\n        return {\n            percent,\n            transferred: this[kDownloadedSize],\n            total: this[kResponseSize]\n        };\n    }\n    /**\n    Progress event for uploading (sending a request).\n    */ get uploadProgress() {\n        let percent;\n        if (this[kBodySize]) {\n            percent = this[kUploadedSize] / this[kBodySize];\n        } else if (this[kBodySize] === this[kUploadedSize]) {\n            percent = 1;\n        } else {\n            percent = 0;\n        }\n        return {\n            percent,\n            transferred: this[kUploadedSize],\n            total: this[kBodySize]\n        };\n    }\n    /**\n    The object contains the following properties:\n\n    - `start` - Time when the request started.\n    - `socket` - Time when a socket was assigned to the request.\n    - `lookup` - Time when the DNS lookup finished.\n    - `connect` - Time when the socket successfully connected.\n    - `secureConnect` - Time when the socket securely connected.\n    - `upload` - Time when the request finished uploading.\n    - `response` - Time when the request fired `response` event.\n    - `end` - Time when the response fired `end` event.\n    - `error` - Time when the request fired `error` event.\n    - `abort` - Time when the request fired `abort` event.\n    - `phases`\n        - `wait` - `timings.socket - timings.start`\n        - `dns` - `timings.lookup - timings.socket`\n        - `tcp` - `timings.connect - timings.lookup`\n        - `tls` - `timings.secureConnect - timings.connect`\n        - `request` - `timings.upload - (timings.secureConnect || timings.connect)`\n        - `firstByte` - `timings.response - timings.upload`\n        - `download` - `timings.end - timings.response`\n        - `total` - `(timings.end || timings.error || timings.abort) - timings.start`\n\n    If something has not been measured yet, it will be `undefined`.\n\n    __Note__: The time is a `number` representing the milliseconds elapsed since the UNIX epoch.\n    */ get timings() {\n        var _a;\n        return (_a = this[kRequest]) === null || _a === void 0 ? void 0 : _a.timings;\n    }\n    /**\n    Whether the response was retrieved from the cache.\n    */ get isFromCache() {\n        return this[kIsFromCache];\n    }\n    pipe(destination, options) {\n        if (this[kStartedReading]) {\n            throw new Error(\"Failed to pipe. The response has been emitted already.\");\n        }\n        if (destination instanceof http_1.ServerResponse) {\n            this[kServerResponsesPiped].add(destination);\n        }\n        return super.pipe(destination, options);\n    }\n    unpipe(destination) {\n        if (destination instanceof http_1.ServerResponse) {\n            this[kServerResponsesPiped].delete(destination);\n        }\n        super.unpipe(destination);\n        return this;\n    }\n}\nexports[\"default\"] = Request;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/core/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/core/utils/dns-ip-version.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/swarm-js/node_modules/got/dist/source/core/utils/dns-ip-version.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.dnsLookupIpVersionToFamily = exports.isDnsLookupIpVersion = void 0;\nconst conversionTable = {\n    auto: 0,\n    ipv4: 4,\n    ipv6: 6\n};\nexports.isDnsLookupIpVersion = (value)=>{\n    return value in conversionTable;\n};\nexports.dnsLookupIpVersionToFamily = (dnsLookupIpVersion)=>{\n    if (exports.isDnsLookupIpVersion(dnsLookupIpVersion)) {\n        return conversionTable[dnsLookupIpVersion];\n    }\n    throw new Error(\"Invalid DNS lookup IP version\");\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dhcm0tanMvbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9jb3JlL3V0aWxzL2Rucy1pcC12ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxrQ0FBa0MsR0FBR0EsNEJBQTRCLEdBQUcsS0FBSztBQUN6RSxNQUFNSSxrQkFBa0I7SUFDcEJDLE1BQU07SUFDTkMsTUFBTTtJQUNOQyxNQUFNO0FBQ1Y7QUFDQVAsNEJBQTRCLEdBQUcsQ0FBQ0M7SUFDNUIsT0FBT0EsU0FBU0c7QUFDcEI7QUFDQUosa0NBQWtDLEdBQUcsQ0FBQ1E7SUFDbEMsSUFBSVIsUUFBUUcsb0JBQW9CLENBQUNLLHFCQUFxQjtRQUNsRCxPQUFPSixlQUFlLENBQUNJLG1CQUFtQjtJQUM5QztJQUNBLE1BQU0sSUFBSUMsTUFBTTtBQUNwQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3N3YXJtLWpzL25vZGVfbW9kdWxlcy9nb3QvZGlzdC9zb3VyY2UvY29yZS91dGlscy9kbnMtaXAtdmVyc2lvbi5qcz8wZjg5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kbnNMb29rdXBJcFZlcnNpb25Ub0ZhbWlseSA9IGV4cG9ydHMuaXNEbnNMb29rdXBJcFZlcnNpb24gPSB2b2lkIDA7XG5jb25zdCBjb252ZXJzaW9uVGFibGUgPSB7XG4gICAgYXV0bzogMCxcbiAgICBpcHY0OiA0LFxuICAgIGlwdjY6IDZcbn07XG5leHBvcnRzLmlzRG5zTG9va3VwSXBWZXJzaW9uID0gKHZhbHVlKSA9PiB7XG4gICAgcmV0dXJuIHZhbHVlIGluIGNvbnZlcnNpb25UYWJsZTtcbn07XG5leHBvcnRzLmRuc0xvb2t1cElwVmVyc2lvblRvRmFtaWx5ID0gKGRuc0xvb2t1cElwVmVyc2lvbikgPT4ge1xuICAgIGlmIChleHBvcnRzLmlzRG5zTG9va3VwSXBWZXJzaW9uKGRuc0xvb2t1cElwVmVyc2lvbikpIHtcbiAgICAgICAgcmV0dXJuIGNvbnZlcnNpb25UYWJsZVtkbnNMb29rdXBJcFZlcnNpb25dO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgRE5TIGxvb2t1cCBJUCB2ZXJzaW9uJyk7XG59O1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZG5zTG9va3VwSXBWZXJzaW9uVG9GYW1pbHkiLCJpc0Ruc0xvb2t1cElwVmVyc2lvbiIsImNvbnZlcnNpb25UYWJsZSIsImF1dG8iLCJpcHY0IiwiaXB2NiIsImRuc0xvb2t1cElwVmVyc2lvbiIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/core/utils/dns-ip-version.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/core/utils/get-body-size.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/swarm-js/node_modules/got/dist/source/core/utils/get-body-size.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst fs_1 = __webpack_require__(/*! fs */ \"fs\");\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst is_1 = __webpack_require__(/*! @sindresorhus/is */ \"(ssr)/./node_modules/@sindresorhus/is/dist/index.js\");\nconst is_form_data_1 = __webpack_require__(/*! ./is-form-data */ \"(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/core/utils/is-form-data.js\");\nconst statAsync = util_1.promisify(fs_1.stat);\nexports[\"default\"] = async (body, headers)=>{\n    if (headers && \"content-length\" in headers) {\n        return Number(headers[\"content-length\"]);\n    }\n    if (!body) {\n        return 0;\n    }\n    if (is_1.default.string(body)) {\n        return Buffer.byteLength(body);\n    }\n    if (is_1.default.buffer(body)) {\n        return body.length;\n    }\n    if (is_form_data_1.default(body)) {\n        return util_1.promisify(body.getLength.bind(body))();\n    }\n    if (body instanceof fs_1.ReadStream) {\n        const { size } = await statAsync(body.path);\n        if (size === 0) {\n            return undefined;\n        }\n        return size;\n    }\n    return undefined;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dhcm0tanMvbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9jb3JlL3V0aWxzL2dldC1ib2R5LXNpemUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsT0FBT0MsbUJBQU9BLENBQUMsY0FBSTtBQUN6QixNQUFNQyxTQUFTRCxtQkFBT0EsQ0FBQyxrQkFBTTtBQUM3QixNQUFNRSxPQUFPRixtQkFBT0EsQ0FBQyw2RUFBa0I7QUFDdkMsTUFBTUcsaUJBQWlCSCxtQkFBT0EsQ0FBQyw2R0FBZ0I7QUFDL0MsTUFBTUksWUFBWUgsT0FBT0ksU0FBUyxDQUFDTixLQUFLTyxJQUFJO0FBQzVDVCxrQkFBZSxHQUFHLE9BQU9XLE1BQU1DO0lBQzNCLElBQUlBLFdBQVcsb0JBQW9CQSxTQUFTO1FBQ3hDLE9BQU9DLE9BQU9ELE9BQU8sQ0FBQyxpQkFBaUI7SUFDM0M7SUFDQSxJQUFJLENBQUNELE1BQU07UUFDUCxPQUFPO0lBQ1g7SUFDQSxJQUFJTixLQUFLSyxPQUFPLENBQUNJLE1BQU0sQ0FBQ0gsT0FBTztRQUMzQixPQUFPSSxPQUFPQyxVQUFVLENBQUNMO0lBQzdCO0lBQ0EsSUFBSU4sS0FBS0ssT0FBTyxDQUFDTyxNQUFNLENBQUNOLE9BQU87UUFDM0IsT0FBT0EsS0FBS08sTUFBTTtJQUN0QjtJQUNBLElBQUlaLGVBQWVJLE9BQU8sQ0FBQ0MsT0FBTztRQUM5QixPQUFPUCxPQUFPSSxTQUFTLENBQUNHLEtBQUtRLFNBQVMsQ0FBQ0MsSUFBSSxDQUFDVDtJQUNoRDtJQUNBLElBQUlBLGdCQUFnQlQsS0FBS21CLFVBQVUsRUFBRTtRQUNqQyxNQUFNLEVBQUVDLElBQUksRUFBRSxHQUFHLE1BQU1mLFVBQVVJLEtBQUtZLElBQUk7UUFDMUMsSUFBSUQsU0FBUyxHQUFHO1lBQ1osT0FBT0U7UUFDWDtRQUNBLE9BQU9GO0lBQ1g7SUFDQSxPQUFPRTtBQUNYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvc3dhcm0tanMvbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9jb3JlL3V0aWxzL2dldC1ib2R5LXNpemUuanM/NDk2ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGZzXzEgPSByZXF1aXJlKFwiZnNcIik7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwidXRpbFwiKTtcbmNvbnN0IGlzXzEgPSByZXF1aXJlKFwiQHNpbmRyZXNvcmh1cy9pc1wiKTtcbmNvbnN0IGlzX2Zvcm1fZGF0YV8xID0gcmVxdWlyZShcIi4vaXMtZm9ybS1kYXRhXCIpO1xuY29uc3Qgc3RhdEFzeW5jID0gdXRpbF8xLnByb21pc2lmeShmc18xLnN0YXQpO1xuZXhwb3J0cy5kZWZhdWx0ID0gYXN5bmMgKGJvZHksIGhlYWRlcnMpID0+IHtcbiAgICBpZiAoaGVhZGVycyAmJiAnY29udGVudC1sZW5ndGgnIGluIGhlYWRlcnMpIHtcbiAgICAgICAgcmV0dXJuIE51bWJlcihoZWFkZXJzWydjb250ZW50LWxlbmd0aCddKTtcbiAgICB9XG4gICAgaWYgKCFib2R5KSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBpZiAoaXNfMS5kZWZhdWx0LnN0cmluZyhib2R5KSkge1xuICAgICAgICByZXR1cm4gQnVmZmVyLmJ5dGVMZW5ndGgoYm9keSk7XG4gICAgfVxuICAgIGlmIChpc18xLmRlZmF1bHQuYnVmZmVyKGJvZHkpKSB7XG4gICAgICAgIHJldHVybiBib2R5Lmxlbmd0aDtcbiAgICB9XG4gICAgaWYgKGlzX2Zvcm1fZGF0YV8xLmRlZmF1bHQoYm9keSkpIHtcbiAgICAgICAgcmV0dXJuIHV0aWxfMS5wcm9taXNpZnkoYm9keS5nZXRMZW5ndGguYmluZChib2R5KSkoKTtcbiAgICB9XG4gICAgaWYgKGJvZHkgaW5zdGFuY2VvZiBmc18xLlJlYWRTdHJlYW0pIHtcbiAgICAgICAgY29uc3QgeyBzaXplIH0gPSBhd2FpdCBzdGF0QXN5bmMoYm9keS5wYXRoKTtcbiAgICAgICAgaWYgKHNpemUgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNpemU7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59O1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZnNfMSIsInJlcXVpcmUiLCJ1dGlsXzEiLCJpc18xIiwiaXNfZm9ybV9kYXRhXzEiLCJzdGF0QXN5bmMiLCJwcm9taXNpZnkiLCJzdGF0IiwiZGVmYXVsdCIsImJvZHkiLCJoZWFkZXJzIiwiTnVtYmVyIiwic3RyaW5nIiwiQnVmZmVyIiwiYnl0ZUxlbmd0aCIsImJ1ZmZlciIsImxlbmd0aCIsImdldExlbmd0aCIsImJpbmQiLCJSZWFkU3RyZWFtIiwic2l6ZSIsInBhdGgiLCJ1bmRlZmluZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/core/utils/get-body-size.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/core/utils/get-buffer.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/swarm-js/node_modules/got/dist/source/core/utils/get-buffer.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n// TODO: Update https://github.com/sindresorhus/get-stream\nconst getBuffer = async (stream)=>{\n    const chunks = [];\n    let length = 0;\n    for await (const chunk of stream){\n        chunks.push(chunk);\n        length += Buffer.byteLength(chunk);\n    }\n    if (Buffer.isBuffer(chunks[0])) {\n        return Buffer.concat(chunks, length);\n    }\n    return Buffer.from(chunks.join(\"\"));\n};\nexports[\"default\"] = getBuffer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dhcm0tanMvbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9jb3JlL3V0aWxzL2dldC1idWZmZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsMERBQTBEO0FBQzFELE1BQU1DLFlBQVksT0FBT0M7SUFDckIsTUFBTUMsU0FBUyxFQUFFO0lBQ2pCLElBQUlDLFNBQVM7SUFDYixXQUFXLE1BQU1DLFNBQVNILE9BQVE7UUFDOUJDLE9BQU9HLElBQUksQ0FBQ0Q7UUFDWkQsVUFBVUcsT0FBT0MsVUFBVSxDQUFDSDtJQUNoQztJQUNBLElBQUlFLE9BQU9FLFFBQVEsQ0FBQ04sTUFBTSxDQUFDLEVBQUUsR0FBRztRQUM1QixPQUFPSSxPQUFPRyxNQUFNLENBQUNQLFFBQVFDO0lBQ2pDO0lBQ0EsT0FBT0csT0FBT0ksSUFBSSxDQUFDUixPQUFPUyxJQUFJLENBQUM7QUFDbkM7QUFDQWIsa0JBQWUsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9zd2FybS1qcy9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL2NvcmUvdXRpbHMvZ2V0LWJ1ZmZlci5qcz9kMzY5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8gVE9ETzogVXBkYXRlIGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvZ2V0LXN0cmVhbVxuY29uc3QgZ2V0QnVmZmVyID0gYXN5bmMgKHN0cmVhbSkgPT4ge1xuICAgIGNvbnN0IGNodW5rcyA9IFtdO1xuICAgIGxldCBsZW5ndGggPSAwO1xuICAgIGZvciBhd2FpdCAoY29uc3QgY2h1bmsgb2Ygc3RyZWFtKSB7XG4gICAgICAgIGNodW5rcy5wdXNoKGNodW5rKTtcbiAgICAgICAgbGVuZ3RoICs9IEJ1ZmZlci5ieXRlTGVuZ3RoKGNodW5rKTtcbiAgICB9XG4gICAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihjaHVua3NbMF0pKSB7XG4gICAgICAgIHJldHVybiBCdWZmZXIuY29uY2F0KGNodW5rcywgbGVuZ3RoKTtcbiAgICB9XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGNodW5rcy5qb2luKCcnKSk7XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gZ2V0QnVmZmVyO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZ2V0QnVmZmVyIiwic3RyZWFtIiwiY2h1bmtzIiwibGVuZ3RoIiwiY2h1bmsiLCJwdXNoIiwiQnVmZmVyIiwiYnl0ZUxlbmd0aCIsImlzQnVmZmVyIiwiY29uY2F0IiwiZnJvbSIsImpvaW4iLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/core/utils/get-buffer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/core/utils/is-form-data.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/swarm-js/node_modules/got/dist/source/core/utils/is-form-data.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst is_1 = __webpack_require__(/*! @sindresorhus/is */ \"(ssr)/./node_modules/@sindresorhus/is/dist/index.js\");\nexports[\"default\"] = (body)=>is_1.default.nodeStream(body) && is_1.default.function_(body.getBoundary);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dhcm0tanMvbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9jb3JlL3V0aWxzL2lzLWZvcm0tZGF0YS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxPQUFPQyxtQkFBT0EsQ0FBQyw2RUFBa0I7QUFDdkNILGtCQUFlLEdBQUcsQ0FBQ0ssT0FBU0gsS0FBS0UsT0FBTyxDQUFDRSxVQUFVLENBQUNELFNBQVNILEtBQUtFLE9BQU8sQ0FBQ0csU0FBUyxDQUFDRixLQUFLRyxXQUFXIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvc3dhcm0tanMvbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9jb3JlL3V0aWxzL2lzLWZvcm0tZGF0YS5qcz9hMzVkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgaXNfMSA9IHJlcXVpcmUoXCJAc2luZHJlc29yaHVzL2lzXCIpO1xuZXhwb3J0cy5kZWZhdWx0ID0gKGJvZHkpID0+IGlzXzEuZGVmYXVsdC5ub2RlU3RyZWFtKGJvZHkpICYmIGlzXzEuZGVmYXVsdC5mdW5jdGlvbl8oYm9keS5nZXRCb3VuZGFyeSk7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJpc18xIiwicmVxdWlyZSIsImRlZmF1bHQiLCJib2R5Iiwibm9kZVN0cmVhbSIsImZ1bmN0aW9uXyIsImdldEJvdW5kYXJ5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/core/utils/is-form-data.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/core/utils/is-response-ok.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/swarm-js/node_modules/got/dist/source/core/utils/is-response-ok.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isResponseOk = void 0;\nexports.isResponseOk = (response)=>{\n    const { statusCode } = response;\n    const limitStatusCode = response.request.options.followRedirect ? 299 : 399;\n    return statusCode >= 200 && statusCode <= limitStatusCode || statusCode === 304;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dhcm0tanMvbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9jb3JlL3V0aWxzL2lzLXJlc3BvbnNlLW9rLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxvQkFBb0IsR0FBRyxLQUFLO0FBQzVCQSxvQkFBb0IsR0FBRyxDQUFDRztJQUNwQixNQUFNLEVBQUVDLFVBQVUsRUFBRSxHQUFHRDtJQUN2QixNQUFNRSxrQkFBa0JGLFNBQVNHLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDQyxjQUFjLEdBQUcsTUFBTTtJQUN4RSxPQUFPLGNBQWUsT0FBT0osY0FBY0MsbUJBQW9CRCxlQUFlO0FBQ2xGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvc3dhcm0tanMvbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9jb3JlL3V0aWxzL2lzLXJlc3BvbnNlLW9rLmpzPzFlZjUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzUmVzcG9uc2VPayA9IHZvaWQgMDtcbmV4cG9ydHMuaXNSZXNwb25zZU9rID0gKHJlc3BvbnNlKSA9PiB7XG4gICAgY29uc3QgeyBzdGF0dXNDb2RlIH0gPSByZXNwb25zZTtcbiAgICBjb25zdCBsaW1pdFN0YXR1c0NvZGUgPSByZXNwb25zZS5yZXF1ZXN0Lm9wdGlvbnMuZm9sbG93UmVkaXJlY3QgPyAyOTkgOiAzOTk7XG4gICAgcmV0dXJuIChzdGF0dXNDb2RlID49IDIwMCAmJiBzdGF0dXNDb2RlIDw9IGxpbWl0U3RhdHVzQ29kZSkgfHwgc3RhdHVzQ29kZSA9PT0gMzA0O1xufTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImlzUmVzcG9uc2VPayIsInJlc3BvbnNlIiwic3RhdHVzQ29kZSIsImxpbWl0U3RhdHVzQ29kZSIsInJlcXVlc3QiLCJvcHRpb25zIiwiZm9sbG93UmVkaXJlY3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/core/utils/is-response-ok.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/core/utils/options-to-url.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/swarm-js/node_modules/got/dist/source/core/utils/options-to-url.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n/* istanbul ignore file: deprecated */ const url_1 = __webpack_require__(/*! url */ \"url\");\nconst keys = [\n    \"protocol\",\n    \"host\",\n    \"hostname\",\n    \"port\",\n    \"pathname\",\n    \"search\"\n];\nexports[\"default\"] = (origin, options)=>{\n    var _a, _b;\n    if (options.path) {\n        if (options.pathname) {\n            throw new TypeError(\"Parameters `path` and `pathname` are mutually exclusive.\");\n        }\n        if (options.search) {\n            throw new TypeError(\"Parameters `path` and `search` are mutually exclusive.\");\n        }\n        if (options.searchParams) {\n            throw new TypeError(\"Parameters `path` and `searchParams` are mutually exclusive.\");\n        }\n    }\n    if (options.search && options.searchParams) {\n        throw new TypeError(\"Parameters `search` and `searchParams` are mutually exclusive.\");\n    }\n    if (!origin) {\n        if (!options.protocol) {\n            throw new TypeError(\"No URL protocol specified\");\n        }\n        origin = `${options.protocol}//${(_b = (_a = options.hostname) !== null && _a !== void 0 ? _a : options.host) !== null && _b !== void 0 ? _b : \"\"}`;\n    }\n    const url = new url_1.URL(origin);\n    if (options.path) {\n        const searchIndex = options.path.indexOf(\"?\");\n        if (searchIndex === -1) {\n            options.pathname = options.path;\n        } else {\n            options.pathname = options.path.slice(0, searchIndex);\n            options.search = options.path.slice(searchIndex + 1);\n        }\n        delete options.path;\n    }\n    for (const key of keys){\n        if (options[key]) {\n            url[key] = options[key].toString();\n        }\n    }\n    return url;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dhcm0tanMvbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9jb3JlL3V0aWxzL29wdGlvbnMtdG8tdXJsLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELG9DQUFvQyxHQUNwQyxNQUFNQyxRQUFRQyxtQkFBT0EsQ0FBQyxnQkFBSztBQUMzQixNQUFNQyxPQUFPO0lBQ1Q7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0NBQ0g7QUFDREosa0JBQWUsR0FBRyxDQUFDTSxRQUFRQztJQUN2QixJQUFJQyxJQUFJQztJQUNSLElBQUlGLFFBQVFHLElBQUksRUFBRTtRQUNkLElBQUlILFFBQVFJLFFBQVEsRUFBRTtZQUNsQixNQUFNLElBQUlDLFVBQVU7UUFDeEI7UUFDQSxJQUFJTCxRQUFRTSxNQUFNLEVBQUU7WUFDaEIsTUFBTSxJQUFJRCxVQUFVO1FBQ3hCO1FBQ0EsSUFBSUwsUUFBUU8sWUFBWSxFQUFFO1lBQ3RCLE1BQU0sSUFBSUYsVUFBVTtRQUN4QjtJQUNKO0lBQ0EsSUFBSUwsUUFBUU0sTUFBTSxJQUFJTixRQUFRTyxZQUFZLEVBQUU7UUFDeEMsTUFBTSxJQUFJRixVQUFVO0lBQ3hCO0lBQ0EsSUFBSSxDQUFDTixRQUFRO1FBQ1QsSUFBSSxDQUFDQyxRQUFRUSxRQUFRLEVBQUU7WUFDbkIsTUFBTSxJQUFJSCxVQUFVO1FBQ3hCO1FBQ0FOLFNBQVMsQ0FBQyxFQUFFQyxRQUFRUSxRQUFRLENBQUMsRUFBRSxFQUFFLENBQUNOLEtBQUssQ0FBQ0QsS0FBS0QsUUFBUVMsUUFBUSxNQUFNLFFBQVFSLE9BQU8sS0FBSyxJQUFJQSxLQUFLRCxRQUFRVSxJQUFJLE1BQU0sUUFBUVIsT0FBTyxLQUFLLElBQUlBLEtBQUssR0FBRyxDQUFDO0lBQ3ZKO0lBQ0EsTUFBTVMsTUFBTSxJQUFJaEIsTUFBTWlCLEdBQUcsQ0FBQ2I7SUFDMUIsSUFBSUMsUUFBUUcsSUFBSSxFQUFFO1FBQ2QsTUFBTVUsY0FBY2IsUUFBUUcsSUFBSSxDQUFDVyxPQUFPLENBQUM7UUFDekMsSUFBSUQsZ0JBQWdCLENBQUMsR0FBRztZQUNwQmIsUUFBUUksUUFBUSxHQUFHSixRQUFRRyxJQUFJO1FBQ25DLE9BQ0s7WUFDREgsUUFBUUksUUFBUSxHQUFHSixRQUFRRyxJQUFJLENBQUNZLEtBQUssQ0FBQyxHQUFHRjtZQUN6Q2IsUUFBUU0sTUFBTSxHQUFHTixRQUFRRyxJQUFJLENBQUNZLEtBQUssQ0FBQ0YsY0FBYztRQUN0RDtRQUNBLE9BQU9iLFFBQVFHLElBQUk7SUFDdkI7SUFDQSxLQUFLLE1BQU1hLE9BQU9uQixLQUFNO1FBQ3BCLElBQUlHLE9BQU8sQ0FBQ2dCLElBQUksRUFBRTtZQUNkTCxHQUFHLENBQUNLLElBQUksR0FBR2hCLE9BQU8sQ0FBQ2dCLElBQUksQ0FBQ0MsUUFBUTtRQUNwQztJQUNKO0lBQ0EsT0FBT047QUFDWCIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3N3YXJtLWpzL25vZGVfbW9kdWxlcy9nb3QvZGlzdC9zb3VyY2UvY29yZS91dGlscy9vcHRpb25zLXRvLXVybC5qcz9iYWI1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyogaXN0YW5idWwgaWdub3JlIGZpbGU6IGRlcHJlY2F0ZWQgKi9cbmNvbnN0IHVybF8xID0gcmVxdWlyZShcInVybFwiKTtcbmNvbnN0IGtleXMgPSBbXG4gICAgJ3Byb3RvY29sJyxcbiAgICAnaG9zdCcsXG4gICAgJ2hvc3RuYW1lJyxcbiAgICAncG9ydCcsXG4gICAgJ3BhdGhuYW1lJyxcbiAgICAnc2VhcmNoJ1xuXTtcbmV4cG9ydHMuZGVmYXVsdCA9IChvcmlnaW4sIG9wdGlvbnMpID0+IHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGlmIChvcHRpb25zLnBhdGgpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMucGF0aG5hbWUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1BhcmFtZXRlcnMgYHBhdGhgIGFuZCBgcGF0aG5hbWVgIGFyZSBtdXR1YWxseSBleGNsdXNpdmUuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuc2VhcmNoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQYXJhbWV0ZXJzIGBwYXRoYCBhbmQgYHNlYXJjaGAgYXJlIG11dHVhbGx5IGV4Y2x1c2l2ZS4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5zZWFyY2hQYXJhbXMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1BhcmFtZXRlcnMgYHBhdGhgIGFuZCBgc2VhcmNoUGFyYW1zYCBhcmUgbXV0dWFsbHkgZXhjbHVzaXZlLicpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChvcHRpb25zLnNlYXJjaCAmJiBvcHRpb25zLnNlYXJjaFBhcmFtcykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQYXJhbWV0ZXJzIGBzZWFyY2hgIGFuZCBgc2VhcmNoUGFyYW1zYCBhcmUgbXV0dWFsbHkgZXhjbHVzaXZlLicpO1xuICAgIH1cbiAgICBpZiAoIW9yaWdpbikge1xuICAgICAgICBpZiAoIW9wdGlvbnMucHJvdG9jb2wpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ05vIFVSTCBwcm90b2NvbCBzcGVjaWZpZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBvcmlnaW4gPSBgJHtvcHRpb25zLnByb3RvY29sfS8vJHsoX2IgPSAoX2EgPSBvcHRpb25zLmhvc3RuYW1lKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBvcHRpb25zLmhvc3QpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6ICcnfWA7XG4gICAgfVxuICAgIGNvbnN0IHVybCA9IG5ldyB1cmxfMS5VUkwob3JpZ2luKTtcbiAgICBpZiAob3B0aW9ucy5wYXRoKSB7XG4gICAgICAgIGNvbnN0IHNlYXJjaEluZGV4ID0gb3B0aW9ucy5wYXRoLmluZGV4T2YoJz8nKTtcbiAgICAgICAgaWYgKHNlYXJjaEluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgb3B0aW9ucy5wYXRobmFtZSA9IG9wdGlvbnMucGF0aDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9wdGlvbnMucGF0aG5hbWUgPSBvcHRpb25zLnBhdGguc2xpY2UoMCwgc2VhcmNoSW5kZXgpO1xuICAgICAgICAgICAgb3B0aW9ucy5zZWFyY2ggPSBvcHRpb25zLnBhdGguc2xpY2Uoc2VhcmNoSW5kZXggKyAxKTtcbiAgICAgICAgfVxuICAgICAgICBkZWxldGUgb3B0aW9ucy5wYXRoO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XG4gICAgICAgIGlmIChvcHRpb25zW2tleV0pIHtcbiAgICAgICAgICAgIHVybFtrZXldID0gb3B0aW9uc1trZXldLnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVybDtcbn07XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ1cmxfMSIsInJlcXVpcmUiLCJrZXlzIiwiZGVmYXVsdCIsIm9yaWdpbiIsIm9wdGlvbnMiLCJfYSIsIl9iIiwicGF0aCIsInBhdGhuYW1lIiwiVHlwZUVycm9yIiwic2VhcmNoIiwic2VhcmNoUGFyYW1zIiwicHJvdG9jb2wiLCJob3N0bmFtZSIsImhvc3QiLCJ1cmwiLCJVUkwiLCJzZWFyY2hJbmRleCIsImluZGV4T2YiLCJzbGljZSIsImtleSIsInRvU3RyaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/core/utils/options-to-url.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/core/utils/proxy-events.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/swarm-js/node_modules/got/dist/source/core/utils/proxy-events.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nfunction default_1(from, to, events) {\n    const fns = {};\n    for (const event of events){\n        fns[event] = (...args)=>{\n            to.emit(event, ...args);\n        };\n        from.on(event, fns[event]);\n    }\n    return ()=>{\n        for (const event of events){\n            from.off(event, fns[event]);\n        }\n    };\n}\nexports[\"default\"] = default_1;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dhcm0tanMvbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9jb3JlL3V0aWxzL3Byb3h5LWV2ZW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxTQUFTQyxVQUFVQyxJQUFJLEVBQUVDLEVBQUUsRUFBRUMsTUFBTTtJQUMvQixNQUFNQyxNQUFNLENBQUM7SUFDYixLQUFLLE1BQU1DLFNBQVNGLE9BQVE7UUFDeEJDLEdBQUcsQ0FBQ0MsTUFBTSxHQUFHLENBQUMsR0FBR0M7WUFDYkosR0FBR0ssSUFBSSxDQUFDRixVQUFVQztRQUN0QjtRQUNBTCxLQUFLTyxFQUFFLENBQUNILE9BQU9ELEdBQUcsQ0FBQ0MsTUFBTTtJQUM3QjtJQUNBLE9BQU87UUFDSCxLQUFLLE1BQU1BLFNBQVNGLE9BQVE7WUFDeEJGLEtBQUtRLEdBQUcsQ0FBQ0osT0FBT0QsR0FBRyxDQUFDQyxNQUFNO1FBQzlCO0lBQ0o7QUFDSjtBQUNBUCxrQkFBZSxHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3N3YXJtLWpzL25vZGVfbW9kdWxlcy9nb3QvZGlzdC9zb3VyY2UvY29yZS91dGlscy9wcm94eS1ldmVudHMuanM/NjExMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmZ1bmN0aW9uIGRlZmF1bHRfMShmcm9tLCB0bywgZXZlbnRzKSB7XG4gICAgY29uc3QgZm5zID0ge307XG4gICAgZm9yIChjb25zdCBldmVudCBvZiBldmVudHMpIHtcbiAgICAgICAgZm5zW2V2ZW50XSA9ICguLi5hcmdzKSA9PiB7XG4gICAgICAgICAgICB0by5lbWl0KGV2ZW50LCAuLi5hcmdzKTtcbiAgICAgICAgfTtcbiAgICAgICAgZnJvbS5vbihldmVudCwgZm5zW2V2ZW50XSk7XG4gICAgfVxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGZvciAoY29uc3QgZXZlbnQgb2YgZXZlbnRzKSB7XG4gICAgICAgICAgICBmcm9tLm9mZihldmVudCwgZm5zW2V2ZW50XSk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gZGVmYXVsdF8xO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdF8xIiwiZnJvbSIsInRvIiwiZXZlbnRzIiwiZm5zIiwiZXZlbnQiLCJhcmdzIiwiZW1pdCIsIm9uIiwib2ZmIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/core/utils/proxy-events.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/core/utils/timed-out.js":
/*!************************************************************************************!*\
  !*** ./node_modules/swarm-js/node_modules/got/dist/source/core/utils/timed-out.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.TimeoutError = void 0;\nconst net = __webpack_require__(/*! net */ \"net\");\nconst unhandle_1 = __webpack_require__(/*! ./unhandle */ \"(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/core/utils/unhandle.js\");\nconst reentry = Symbol(\"reentry\");\nconst noop = ()=>{};\nclass TimeoutError extends Error {\n    constructor(threshold, event){\n        super(`Timeout awaiting '${event}' for ${threshold}ms`);\n        this.event = event;\n        this.name = \"TimeoutError\";\n        this.code = \"ETIMEDOUT\";\n    }\n}\nexports.TimeoutError = TimeoutError;\nexports[\"default\"] = (request, delays, options)=>{\n    if (reentry in request) {\n        return noop;\n    }\n    request[reentry] = true;\n    const cancelers = [];\n    const { once, unhandleAll } = unhandle_1.default();\n    const addTimeout = (delay, callback, event)=>{\n        var _a;\n        const timeout = setTimeout(callback, delay, delay, event);\n        (_a = timeout.unref) === null || _a === void 0 ? void 0 : _a.call(timeout);\n        const cancel = ()=>{\n            clearTimeout(timeout);\n        };\n        cancelers.push(cancel);\n        return cancel;\n    };\n    const { host, hostname } = options;\n    const timeoutHandler = (delay, event)=>{\n        request.destroy(new TimeoutError(delay, event));\n    };\n    const cancelTimeouts = ()=>{\n        for (const cancel of cancelers){\n            cancel();\n        }\n        unhandleAll();\n    };\n    request.once(\"error\", (error)=>{\n        cancelTimeouts();\n        // Save original behavior\n        /* istanbul ignore next */ if (request.listenerCount(\"error\") === 0) {\n            throw error;\n        }\n    });\n    request.once(\"close\", cancelTimeouts);\n    once(request, \"response\", (response)=>{\n        once(response, \"end\", cancelTimeouts);\n    });\n    if (typeof delays.request !== \"undefined\") {\n        addTimeout(delays.request, timeoutHandler, \"request\");\n    }\n    if (typeof delays.socket !== \"undefined\") {\n        const socketTimeoutHandler = ()=>{\n            timeoutHandler(delays.socket, \"socket\");\n        };\n        request.setTimeout(delays.socket, socketTimeoutHandler);\n        // `request.setTimeout(0)` causes a memory leak.\n        // We can just remove the listener and forget about the timer - it's unreffed.\n        // See https://github.com/sindresorhus/got/issues/690\n        cancelers.push(()=>{\n            request.removeListener(\"timeout\", socketTimeoutHandler);\n        });\n    }\n    once(request, \"socket\", (socket)=>{\n        var _a;\n        const { socketPath } = request;\n        /* istanbul ignore next: hard to test */ if (socket.connecting) {\n            const hasPath = Boolean(socketPath !== null && socketPath !== void 0 ? socketPath : net.isIP((_a = hostname !== null && hostname !== void 0 ? hostname : host) !== null && _a !== void 0 ? _a : \"\") !== 0);\n            if (typeof delays.lookup !== \"undefined\" && !hasPath && typeof socket.address().address === \"undefined\") {\n                const cancelTimeout = addTimeout(delays.lookup, timeoutHandler, \"lookup\");\n                once(socket, \"lookup\", cancelTimeout);\n            }\n            if (typeof delays.connect !== \"undefined\") {\n                const timeConnect = ()=>addTimeout(delays.connect, timeoutHandler, \"connect\");\n                if (hasPath) {\n                    once(socket, \"connect\", timeConnect());\n                } else {\n                    once(socket, \"lookup\", (error)=>{\n                        if (error === null) {\n                            once(socket, \"connect\", timeConnect());\n                        }\n                    });\n                }\n            }\n            if (typeof delays.secureConnect !== \"undefined\" && options.protocol === \"https:\") {\n                once(socket, \"connect\", ()=>{\n                    const cancelTimeout = addTimeout(delays.secureConnect, timeoutHandler, \"secureConnect\");\n                    once(socket, \"secureConnect\", cancelTimeout);\n                });\n            }\n        }\n        if (typeof delays.send !== \"undefined\") {\n            const timeRequest = ()=>addTimeout(delays.send, timeoutHandler, \"send\");\n            /* istanbul ignore next: hard to test */ if (socket.connecting) {\n                once(socket, \"connect\", ()=>{\n                    once(request, \"upload-complete\", timeRequest());\n                });\n            } else {\n                once(request, \"upload-complete\", timeRequest());\n            }\n        }\n    });\n    if (typeof delays.response !== \"undefined\") {\n        once(request, \"upload-complete\", ()=>{\n            const cancelTimeout = addTimeout(delays.response, timeoutHandler, \"response\");\n            once(request, \"response\", cancelTimeout);\n        });\n    }\n    return cancelTimeouts;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/core/utils/timed-out.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/core/utils/unhandle.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/swarm-js/node_modules/got/dist/source/core/utils/unhandle.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n// When attaching listeners, it's very easy to forget about them.\n// Especially if you do error handling and set timeouts.\n// So instead of checking if it's proper to throw an error on every timeout ever,\n// use this simple tool which will remove all listeners you have attached.\nexports[\"default\"] = ()=>{\n    const handlers = [];\n    return {\n        once (origin, event, fn) {\n            origin.once(event, fn);\n            handlers.push({\n                origin,\n                event,\n                fn\n            });\n        },\n        unhandleAll () {\n            for (const handler of handlers){\n                const { origin, event, fn } = handler;\n                origin.removeListener(event, fn);\n            }\n            handlers.length = 0;\n        }\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dhcm0tanMvbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9jb3JlL3V0aWxzL3VuaGFuZGxlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELGlFQUFpRTtBQUNqRSx3REFBd0Q7QUFDeEQsaUZBQWlGO0FBQ2pGLDBFQUEwRTtBQUMxRUQsa0JBQWUsR0FBRztJQUNkLE1BQU1HLFdBQVcsRUFBRTtJQUNuQixPQUFPO1FBQ0hDLE1BQUtDLE1BQU0sRUFBRUMsS0FBSyxFQUFFQyxFQUFFO1lBQ2xCRixPQUFPRCxJQUFJLENBQUNFLE9BQU9DO1lBQ25CSixTQUFTSyxJQUFJLENBQUM7Z0JBQUVIO2dCQUFRQztnQkFBT0M7WUFBRztRQUN0QztRQUNBRTtZQUNJLEtBQUssTUFBTUMsV0FBV1AsU0FBVTtnQkFDNUIsTUFBTSxFQUFFRSxNQUFNLEVBQUVDLEtBQUssRUFBRUMsRUFBRSxFQUFFLEdBQUdHO2dCQUM5QkwsT0FBT00sY0FBYyxDQUFDTCxPQUFPQztZQUNqQztZQUNBSixTQUFTUyxNQUFNLEdBQUc7UUFDdEI7SUFDSjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvc3dhcm0tanMvbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9jb3JlL3V0aWxzL3VuaGFuZGxlLmpzP2ZhYTkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyBXaGVuIGF0dGFjaGluZyBsaXN0ZW5lcnMsIGl0J3MgdmVyeSBlYXN5IHRvIGZvcmdldCBhYm91dCB0aGVtLlxuLy8gRXNwZWNpYWxseSBpZiB5b3UgZG8gZXJyb3IgaGFuZGxpbmcgYW5kIHNldCB0aW1lb3V0cy5cbi8vIFNvIGluc3RlYWQgb2YgY2hlY2tpbmcgaWYgaXQncyBwcm9wZXIgdG8gdGhyb3cgYW4gZXJyb3Igb24gZXZlcnkgdGltZW91dCBldmVyLFxuLy8gdXNlIHRoaXMgc2ltcGxlIHRvb2wgd2hpY2ggd2lsbCByZW1vdmUgYWxsIGxpc3RlbmVycyB5b3UgaGF2ZSBhdHRhY2hlZC5cbmV4cG9ydHMuZGVmYXVsdCA9ICgpID0+IHtcbiAgICBjb25zdCBoYW5kbGVycyA9IFtdO1xuICAgIHJldHVybiB7XG4gICAgICAgIG9uY2Uob3JpZ2luLCBldmVudCwgZm4pIHtcbiAgICAgICAgICAgIG9yaWdpbi5vbmNlKGV2ZW50LCBmbik7XG4gICAgICAgICAgICBoYW5kbGVycy5wdXNoKHsgb3JpZ2luLCBldmVudCwgZm4gfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHVuaGFuZGxlQWxsKCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBoYW5kbGVyIG9mIGhhbmRsZXJzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBvcmlnaW4sIGV2ZW50LCBmbiB9ID0gaGFuZGxlcjtcbiAgICAgICAgICAgICAgICBvcmlnaW4ucmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGZuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGhhbmRsZXJzLmxlbmd0aCA9IDA7XG4gICAgICAgIH1cbiAgICB9O1xufTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJoYW5kbGVycyIsIm9uY2UiLCJvcmlnaW4iLCJldmVudCIsImZuIiwicHVzaCIsInVuaGFuZGxlQWxsIiwiaGFuZGxlciIsInJlbW92ZUxpc3RlbmVyIiwibGVuZ3RoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/core/utils/unhandle.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/core/utils/url-to-options.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/swarm-js/node_modules/got/dist/source/core/utils/url-to-options.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst is_1 = __webpack_require__(/*! @sindresorhus/is */ \"(ssr)/./node_modules/@sindresorhus/is/dist/index.js\");\nexports[\"default\"] = (url)=>{\n    // Cast to URL\n    url = url;\n    const options = {\n        protocol: url.protocol,\n        hostname: is_1.default.string(url.hostname) && url.hostname.startsWith(\"[\") ? url.hostname.slice(1, -1) : url.hostname,\n        host: url.host,\n        hash: url.hash,\n        search: url.search,\n        pathname: url.pathname,\n        href: url.href,\n        path: `${url.pathname || \"\"}${url.search || \"\"}`\n    };\n    if (is_1.default.string(url.port) && url.port.length > 0) {\n        options.port = Number(url.port);\n    }\n    if (url.username || url.password) {\n        options.auth = `${url.username || \"\"}:${url.password || \"\"}`;\n    }\n    return options;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dhcm0tanMvbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9jb3JlL3V0aWxzL3VybC10by1vcHRpb25zLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLE9BQU9DLG1CQUFPQSxDQUFDLDZFQUFrQjtBQUN2Q0gsa0JBQWUsR0FBRyxDQUFDSztJQUNmLGNBQWM7SUFDZEEsTUFBTUE7SUFDTixNQUFNQyxVQUFVO1FBQ1pDLFVBQVVGLElBQUlFLFFBQVE7UUFDdEJDLFVBQVVOLEtBQUtFLE9BQU8sQ0FBQ0ssTUFBTSxDQUFDSixJQUFJRyxRQUFRLEtBQUtILElBQUlHLFFBQVEsQ0FBQ0UsVUFBVSxDQUFDLE9BQU9MLElBQUlHLFFBQVEsQ0FBQ0csS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLTixJQUFJRyxRQUFRO1FBQ3RISSxNQUFNUCxJQUFJTyxJQUFJO1FBQ2RDLE1BQU1SLElBQUlRLElBQUk7UUFDZEMsUUFBUVQsSUFBSVMsTUFBTTtRQUNsQkMsVUFBVVYsSUFBSVUsUUFBUTtRQUN0QkMsTUFBTVgsSUFBSVcsSUFBSTtRQUNkQyxNQUFNLENBQUMsRUFBRVosSUFBSVUsUUFBUSxJQUFJLEdBQUcsRUFBRVYsSUFBSVMsTUFBTSxJQUFJLEdBQUcsQ0FBQztJQUNwRDtJQUNBLElBQUlaLEtBQUtFLE9BQU8sQ0FBQ0ssTUFBTSxDQUFDSixJQUFJYSxJQUFJLEtBQUtiLElBQUlhLElBQUksQ0FBQ0MsTUFBTSxHQUFHLEdBQUc7UUFDdERiLFFBQVFZLElBQUksR0FBR0UsT0FBT2YsSUFBSWEsSUFBSTtJQUNsQztJQUNBLElBQUliLElBQUlnQixRQUFRLElBQUloQixJQUFJaUIsUUFBUSxFQUFFO1FBQzlCaEIsUUFBUWlCLElBQUksR0FBRyxDQUFDLEVBQUVsQixJQUFJZ0IsUUFBUSxJQUFJLEdBQUcsQ0FBQyxFQUFFaEIsSUFBSWlCLFFBQVEsSUFBSSxHQUFHLENBQUM7SUFDaEU7SUFDQSxPQUFPaEI7QUFDWCIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3N3YXJtLWpzL25vZGVfbW9kdWxlcy9nb3QvZGlzdC9zb3VyY2UvY29yZS91dGlscy91cmwtdG8tb3B0aW9ucy5qcz9kYmQyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgaXNfMSA9IHJlcXVpcmUoXCJAc2luZHJlc29yaHVzL2lzXCIpO1xuZXhwb3J0cy5kZWZhdWx0ID0gKHVybCkgPT4ge1xuICAgIC8vIENhc3QgdG8gVVJMXG4gICAgdXJsID0gdXJsO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIHByb3RvY29sOiB1cmwucHJvdG9jb2wsXG4gICAgICAgIGhvc3RuYW1lOiBpc18xLmRlZmF1bHQuc3RyaW5nKHVybC5ob3N0bmFtZSkgJiYgdXJsLmhvc3RuYW1lLnN0YXJ0c1dpdGgoJ1snKSA/IHVybC5ob3N0bmFtZS5zbGljZSgxLCAtMSkgOiB1cmwuaG9zdG5hbWUsXG4gICAgICAgIGhvc3Q6IHVybC5ob3N0LFxuICAgICAgICBoYXNoOiB1cmwuaGFzaCxcbiAgICAgICAgc2VhcmNoOiB1cmwuc2VhcmNoLFxuICAgICAgICBwYXRobmFtZTogdXJsLnBhdGhuYW1lLFxuICAgICAgICBocmVmOiB1cmwuaHJlZixcbiAgICAgICAgcGF0aDogYCR7dXJsLnBhdGhuYW1lIHx8ICcnfSR7dXJsLnNlYXJjaCB8fCAnJ31gXG4gICAgfTtcbiAgICBpZiAoaXNfMS5kZWZhdWx0LnN0cmluZyh1cmwucG9ydCkgJiYgdXJsLnBvcnQubGVuZ3RoID4gMCkge1xuICAgICAgICBvcHRpb25zLnBvcnQgPSBOdW1iZXIodXJsLnBvcnQpO1xuICAgIH1cbiAgICBpZiAodXJsLnVzZXJuYW1lIHx8IHVybC5wYXNzd29yZCkge1xuICAgICAgICBvcHRpb25zLmF1dGggPSBgJHt1cmwudXNlcm5hbWUgfHwgJyd9OiR7dXJsLnBhc3N3b3JkIHx8ICcnfWA7XG4gICAgfVxuICAgIHJldHVybiBvcHRpb25zO1xufTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImlzXzEiLCJyZXF1aXJlIiwiZGVmYXVsdCIsInVybCIsIm9wdGlvbnMiLCJwcm90b2NvbCIsImhvc3RuYW1lIiwic3RyaW5nIiwic3RhcnRzV2l0aCIsInNsaWNlIiwiaG9zdCIsImhhc2giLCJzZWFyY2giLCJwYXRobmFtZSIsImhyZWYiLCJwYXRoIiwicG9ydCIsImxlbmd0aCIsIk51bWJlciIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJhdXRoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/core/utils/url-to-options.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/core/utils/weakable-map.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/swarm-js/node_modules/got/dist/source/core/utils/weakable-map.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nclass WeakableMap {\n    constructor(){\n        this.weakMap = new WeakMap();\n        this.map = new Map();\n    }\n    set(key, value) {\n        if (typeof key === \"object\") {\n            this.weakMap.set(key, value);\n        } else {\n            this.map.set(key, value);\n        }\n    }\n    get(key) {\n        if (typeof key === \"object\") {\n            return this.weakMap.get(key);\n        }\n        return this.map.get(key);\n    }\n    has(key) {\n        if (typeof key === \"object\") {\n            return this.weakMap.has(key);\n        }\n        return this.map.has(key);\n    }\n}\nexports[\"default\"] = WeakableMap;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dhcm0tanMvbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9jb3JlL3V0aWxzL3dlYWthYmxlLW1hcC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQztJQUNGQyxhQUFjO1FBQ1YsSUFBSSxDQUFDQyxPQUFPLEdBQUcsSUFBSUM7UUFDbkIsSUFBSSxDQUFDQyxHQUFHLEdBQUcsSUFBSUM7SUFDbkI7SUFDQUMsSUFBSUMsR0FBRyxFQUFFUixLQUFLLEVBQUU7UUFDWixJQUFJLE9BQU9RLFFBQVEsVUFBVTtZQUN6QixJQUFJLENBQUNMLE9BQU8sQ0FBQ0ksR0FBRyxDQUFDQyxLQUFLUjtRQUMxQixPQUNLO1lBQ0QsSUFBSSxDQUFDSyxHQUFHLENBQUNFLEdBQUcsQ0FBQ0MsS0FBS1I7UUFDdEI7SUFDSjtJQUNBUyxJQUFJRCxHQUFHLEVBQUU7UUFDTCxJQUFJLE9BQU9BLFFBQVEsVUFBVTtZQUN6QixPQUFPLElBQUksQ0FBQ0wsT0FBTyxDQUFDTSxHQUFHLENBQUNEO1FBQzVCO1FBQ0EsT0FBTyxJQUFJLENBQUNILEdBQUcsQ0FBQ0ksR0FBRyxDQUFDRDtJQUN4QjtJQUNBRSxJQUFJRixHQUFHLEVBQUU7UUFDTCxJQUFJLE9BQU9BLFFBQVEsVUFBVTtZQUN6QixPQUFPLElBQUksQ0FBQ0wsT0FBTyxDQUFDTyxHQUFHLENBQUNGO1FBQzVCO1FBQ0EsT0FBTyxJQUFJLENBQUNILEdBQUcsQ0FBQ0ssR0FBRyxDQUFDRjtJQUN4QjtBQUNKO0FBQ0FULGtCQUFlLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvc3dhcm0tanMvbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS9jb3JlL3V0aWxzL3dlYWthYmxlLW1hcC5qcz82ODk2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY2xhc3MgV2Vha2FibGVNYXAge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLndlYWtNYXAgPSBuZXcgV2Vha01hcCgpO1xuICAgICAgICB0aGlzLm1hcCA9IG5ldyBNYXAoKTtcbiAgICB9XG4gICAgc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBrZXkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICB0aGlzLndlYWtNYXAuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5tYXAuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldChrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBrZXkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy53ZWFrTWFwLmdldChrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLm1hcC5nZXQoa2V5KTtcbiAgICB9XG4gICAgaGFzKGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIGtleSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLndlYWtNYXAuaGFzKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMubWFwLmhhcyhrZXkpO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFdlYWthYmxlTWFwO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiV2Vha2FibGVNYXAiLCJjb25zdHJ1Y3RvciIsIndlYWtNYXAiLCJXZWFrTWFwIiwibWFwIiwiTWFwIiwic2V0Iiwia2V5IiwiZ2V0IiwiaGFzIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/core/utils/weakable-map.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/create.js":
/*!**********************************************************************!*\
  !*** ./node_modules/swarm-js/node_modules/got/dist/source/create.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, {\n        enumerable: true,\n        get: function() {\n            return m[k];\n        }\n    });\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = this && this.__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.defaultHandler = void 0;\nconst is_1 = __webpack_require__(/*! @sindresorhus/is */ \"(ssr)/./node_modules/@sindresorhus/is/dist/index.js\");\nconst as_promise_1 = __webpack_require__(/*! ./as-promise */ \"(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/as-promise/index.js\");\nconst create_rejection_1 = __webpack_require__(/*! ./as-promise/create-rejection */ \"(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/as-promise/create-rejection.js\");\nconst core_1 = __webpack_require__(/*! ./core */ \"(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/core/index.js\");\nconst deep_freeze_1 = __webpack_require__(/*! ./utils/deep-freeze */ \"(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/utils/deep-freeze.js\");\nconst errors = {\n    RequestError: as_promise_1.RequestError,\n    CacheError: as_promise_1.CacheError,\n    ReadError: as_promise_1.ReadError,\n    HTTPError: as_promise_1.HTTPError,\n    MaxRedirectsError: as_promise_1.MaxRedirectsError,\n    TimeoutError: as_promise_1.TimeoutError,\n    ParseError: as_promise_1.ParseError,\n    CancelError: as_promise_1.CancelError,\n    UnsupportedProtocolError: as_promise_1.UnsupportedProtocolError,\n    UploadError: as_promise_1.UploadError\n};\n// The `delay` package weighs 10KB (!)\nconst delay = async (ms)=>new Promise((resolve)=>{\n        setTimeout(resolve, ms);\n    });\nconst { normalizeArguments } = core_1.default;\nconst mergeOptions = (...sources)=>{\n    let mergedOptions;\n    for (const source of sources){\n        mergedOptions = normalizeArguments(undefined, source, mergedOptions);\n    }\n    return mergedOptions;\n};\nconst getPromiseOrStream = (options)=>options.isStream ? new core_1.default(undefined, options) : as_promise_1.default(options);\nconst isGotInstance = (value)=>\"defaults\" in value && \"options\" in value.defaults;\nconst aliases = [\n    \"get\",\n    \"post\",\n    \"put\",\n    \"patch\",\n    \"head\",\n    \"delete\"\n];\nexports.defaultHandler = (options, next)=>next(options);\nconst callInitHooks = (hooks, options)=>{\n    if (hooks) {\n        for (const hook of hooks){\n            hook(options);\n        }\n    }\n};\nconst create = (defaults)=>{\n    // Proxy properties from next handlers\n    defaults._rawHandlers = defaults.handlers;\n    defaults.handlers = defaults.handlers.map((fn)=>(options, next)=>{\n            // This will be assigned by assigning result\n            let root;\n            const result = fn(options, (newOptions)=>{\n                root = next(newOptions);\n                return root;\n            });\n            if (result !== root && !options.isStream && root) {\n                const typedResult = result;\n                const { then: promiseThen, catch: promiseCatch, finally: promiseFianlly } = typedResult;\n                Object.setPrototypeOf(typedResult, Object.getPrototypeOf(root));\n                Object.defineProperties(typedResult, Object.getOwnPropertyDescriptors(root));\n                // These should point to the new promise\n                // eslint-disable-next-line promise/prefer-await-to-then\n                typedResult.then = promiseThen;\n                typedResult.catch = promiseCatch;\n                typedResult.finally = promiseFianlly;\n            }\n            return result;\n        });\n    // Got interface\n    const got = (url, options = {}, _defaults)=>{\n        var _a, _b;\n        let iteration = 0;\n        const iterateHandlers = (newOptions)=>{\n            return defaults.handlers[iteration++](newOptions, iteration === defaults.handlers.length ? getPromiseOrStream : iterateHandlers);\n        };\n        // TODO: Remove this in Got 12.\n        if (is_1.default.plainObject(url)) {\n            const mergedOptions = {\n                ...url,\n                ...options\n            };\n            core_1.setNonEnumerableProperties([\n                url,\n                options\n            ], mergedOptions);\n            options = mergedOptions;\n            url = undefined;\n        }\n        try {\n            // Call `init` hooks\n            let initHookError;\n            try {\n                callInitHooks(defaults.options.hooks.init, options);\n                callInitHooks((_a = options.hooks) === null || _a === void 0 ? void 0 : _a.init, options);\n            } catch (error) {\n                initHookError = error;\n            }\n            // Normalize options & call handlers\n            const normalizedOptions = normalizeArguments(url, options, _defaults !== null && _defaults !== void 0 ? _defaults : defaults.options);\n            normalizedOptions[core_1.kIsNormalizedAlready] = true;\n            if (initHookError) {\n                throw new as_promise_1.RequestError(initHookError.message, initHookError, normalizedOptions);\n            }\n            return iterateHandlers(normalizedOptions);\n        } catch (error) {\n            if (options.isStream) {\n                throw error;\n            } else {\n                return create_rejection_1.default(error, defaults.options.hooks.beforeError, (_b = options.hooks) === null || _b === void 0 ? void 0 : _b.beforeError);\n            }\n        }\n    };\n    got.extend = (...instancesOrOptions)=>{\n        const optionsArray = [\n            defaults.options\n        ];\n        let handlers = [\n            ...defaults._rawHandlers\n        ];\n        let isMutableDefaults;\n        for (const value of instancesOrOptions){\n            if (isGotInstance(value)) {\n                optionsArray.push(value.defaults.options);\n                handlers.push(...value.defaults._rawHandlers);\n                isMutableDefaults = value.defaults.mutableDefaults;\n            } else {\n                optionsArray.push(value);\n                if (\"handlers\" in value) {\n                    handlers.push(...value.handlers);\n                }\n                isMutableDefaults = value.mutableDefaults;\n            }\n        }\n        handlers = handlers.filter((handler)=>handler !== exports.defaultHandler);\n        if (handlers.length === 0) {\n            handlers.push(exports.defaultHandler);\n        }\n        return create({\n            options: mergeOptions(...optionsArray),\n            handlers,\n            mutableDefaults: Boolean(isMutableDefaults)\n        });\n    };\n    // Pagination\n    const paginateEach = async function*(url, options) {\n        // TODO: Remove this `@ts-expect-error` when upgrading to TypeScript 4.\n        // Error: Argument of type 'Merge<Options, PaginationOptions<T, R>> | undefined' is not assignable to parameter of type 'Options | undefined'.\n        // @ts-expect-error\n        let normalizedOptions = normalizeArguments(url, options, defaults.options);\n        normalizedOptions.resolveBodyOnly = false;\n        const pagination = normalizedOptions.pagination;\n        if (!is_1.default.object(pagination)) {\n            throw new TypeError(\"`options.pagination` must be implemented\");\n        }\n        const all = [];\n        let { countLimit } = pagination;\n        let numberOfRequests = 0;\n        while(numberOfRequests < pagination.requestLimit){\n            if (numberOfRequests !== 0) {\n                // eslint-disable-next-line no-await-in-loop\n                await delay(pagination.backoff);\n            }\n            // @ts-expect-error FIXME!\n            // TODO: Throw when result is not an instance of Response\n            // eslint-disable-next-line no-await-in-loop\n            const result = await got(undefined, undefined, normalizedOptions);\n            // eslint-disable-next-line no-await-in-loop\n            const parsed = await pagination.transform(result);\n            const current = [];\n            for (const item of parsed){\n                if (pagination.filter(item, all, current)) {\n                    if (!pagination.shouldContinue(item, all, current)) {\n                        return;\n                    }\n                    yield item;\n                    if (pagination.stackAllItems) {\n                        all.push(item);\n                    }\n                    current.push(item);\n                    if (--countLimit <= 0) {\n                        return;\n                    }\n                }\n            }\n            const optionsToMerge = pagination.paginate(result, all, current);\n            if (optionsToMerge === false) {\n                return;\n            }\n            if (optionsToMerge === result.request.options) {\n                normalizedOptions = result.request.options;\n            } else if (optionsToMerge !== undefined) {\n                normalizedOptions = normalizeArguments(undefined, optionsToMerge, normalizedOptions);\n            }\n            numberOfRequests++;\n        }\n    };\n    got.paginate = paginateEach;\n    got.paginate.all = async (url, options)=>{\n        const results = [];\n        for await (const item of paginateEach(url, options)){\n            results.push(item);\n        }\n        return results;\n    };\n    // For those who like very descriptive names\n    got.paginate.each = paginateEach;\n    // Stream API\n    got.stream = (url, options)=>got(url, {\n            ...options,\n            isStream: true\n        });\n    // Shortcuts\n    for (const method of aliases){\n        got[method] = (url, options)=>got(url, {\n                ...options,\n                method\n            });\n        got.stream[method] = (url, options)=>{\n            return got(url, {\n                ...options,\n                method,\n                isStream: true\n            });\n        };\n    }\n    Object.assign(got, errors);\n    Object.defineProperty(got, \"defaults\", {\n        value: defaults.mutableDefaults ? defaults : deep_freeze_1.default(defaults),\n        writable: defaults.mutableDefaults,\n        configurable: defaults.mutableDefaults,\n        enumerable: true\n    });\n    got.mergeOptions = mergeOptions;\n    return got;\n};\nexports[\"default\"] = create;\n__exportStar(__webpack_require__(/*! ./types */ \"(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/types.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/create.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/swarm-js/node_modules/got/dist/source/index.js ***!
  \*********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, {\n        enumerable: true,\n        get: function() {\n            return m[k];\n        }\n    });\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = this && this.__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst url_1 = __webpack_require__(/*! url */ \"url\");\nconst create_1 = __webpack_require__(/*! ./create */ \"(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/create.js\");\nconst defaults = {\n    options: {\n        method: \"GET\",\n        retry: {\n            limit: 2,\n            methods: [\n                \"GET\",\n                \"PUT\",\n                \"HEAD\",\n                \"DELETE\",\n                \"OPTIONS\",\n                \"TRACE\"\n            ],\n            statusCodes: [\n                408,\n                413,\n                429,\n                500,\n                502,\n                503,\n                504,\n                521,\n                522,\n                524\n            ],\n            errorCodes: [\n                \"ETIMEDOUT\",\n                \"ECONNRESET\",\n                \"EADDRINUSE\",\n                \"ECONNREFUSED\",\n                \"EPIPE\",\n                \"ENOTFOUND\",\n                \"ENETUNREACH\",\n                \"EAI_AGAIN\"\n            ],\n            maxRetryAfter: undefined,\n            calculateDelay: ({ computedValue })=>computedValue\n        },\n        timeout: {},\n        headers: {\n            \"user-agent\": \"got (https://github.com/sindresorhus/got)\"\n        },\n        hooks: {\n            init: [],\n            beforeRequest: [],\n            beforeRedirect: [],\n            beforeRetry: [],\n            beforeError: [],\n            afterResponse: []\n        },\n        cache: undefined,\n        dnsCache: undefined,\n        decompress: true,\n        throwHttpErrors: true,\n        followRedirect: true,\n        isStream: false,\n        responseType: \"text\",\n        resolveBodyOnly: false,\n        maxRedirects: 10,\n        prefixUrl: \"\",\n        methodRewriting: true,\n        ignoreInvalidCookies: false,\n        context: {},\n        // TODO: Set this to `true` when Got 12 gets released\n        http2: false,\n        allowGetBody: false,\n        https: undefined,\n        pagination: {\n            transform: (response)=>{\n                if (response.request.options.responseType === \"json\") {\n                    return response.body;\n                }\n                return JSON.parse(response.body);\n            },\n            paginate: (response)=>{\n                if (!Reflect.has(response.headers, \"link\")) {\n                    return false;\n                }\n                const items = response.headers.link.split(\",\");\n                let next;\n                for (const item of items){\n                    const parsed = item.split(\";\");\n                    if (parsed[1].includes(\"next\")) {\n                        next = parsed[0].trimStart().trim();\n                        next = next.slice(1, -1);\n                        break;\n                    }\n                }\n                if (next) {\n                    const options = {\n                        url: new url_1.URL(next)\n                    };\n                    return options;\n                }\n                return false;\n            },\n            filter: ()=>true,\n            shouldContinue: ()=>true,\n            countLimit: Infinity,\n            backoff: 0,\n            requestLimit: 10000,\n            stackAllItems: true\n        },\n        parseJson: (text)=>JSON.parse(text),\n        stringifyJson: (object)=>JSON.stringify(object),\n        cacheOptions: {}\n    },\n    handlers: [\n        create_1.defaultHandler\n    ],\n    mutableDefaults: false\n};\nconst got = create_1.default(defaults);\nexports[\"default\"] = got;\n// For CommonJS default export support\nmodule.exports = got;\nmodule.exports[\"default\"] = got;\nmodule.exports.__esModule = true; // Workaround for TS issue: https://github.com/sindresorhus/got/pull/1267\n__exportStar(__webpack_require__(/*! ./create */ \"(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/create.js\"), exports);\n__exportStar(__webpack_require__(/*! ./as-promise */ \"(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/as-promise/index.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/types.js":
/*!*********************************************************************!*\
  !*** ./node_modules/swarm-js/node_modules/got/dist/source/types.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dhcm0tanMvbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS90eXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3N3YXJtLWpzL25vZGVfbW9kdWxlcy9nb3QvZGlzdC9zb3VyY2UvdHlwZXMuanM/MjViNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/utils/deep-freeze.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/swarm-js/node_modules/got/dist/source/utils/deep-freeze.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst is_1 = __webpack_require__(/*! @sindresorhus/is */ \"(ssr)/./node_modules/@sindresorhus/is/dist/index.js\");\nfunction deepFreeze(object) {\n    for (const value of Object.values(object)){\n        if (is_1.default.plainObject(value) || is_1.default.array(value)) {\n            deepFreeze(value);\n        }\n    }\n    return Object.freeze(object);\n}\nexports[\"default\"] = deepFreeze;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dhcm0tanMvbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS91dGlscy9kZWVwLWZyZWV6ZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxPQUFPQyxtQkFBT0EsQ0FBQyw2RUFBa0I7QUFDdkMsU0FBU0MsV0FBV0MsTUFBTTtJQUN0QixLQUFLLE1BQU1KLFNBQVNILE9BQU9RLE1BQU0sQ0FBQ0QsUUFBUztRQUN2QyxJQUFJSCxLQUFLSyxPQUFPLENBQUNDLFdBQVcsQ0FBQ1AsVUFBVUMsS0FBS0ssT0FBTyxDQUFDRSxLQUFLLENBQUNSLFFBQVE7WUFDOURHLFdBQVdIO1FBQ2Y7SUFDSjtJQUNBLE9BQU9ILE9BQU9ZLE1BQU0sQ0FBQ0w7QUFDekI7QUFDQUwsa0JBQWUsR0FBR0kiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9zd2FybS1qcy9ub2RlX21vZHVsZXMvZ290L2Rpc3Qvc291cmNlL3V0aWxzL2RlZXAtZnJlZXplLmpzPzYyZDEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBpc18xID0gcmVxdWlyZShcIkBzaW5kcmVzb3JodXMvaXNcIik7XG5mdW5jdGlvbiBkZWVwRnJlZXplKG9iamVjdCkge1xuICAgIGZvciAoY29uc3QgdmFsdWUgb2YgT2JqZWN0LnZhbHVlcyhvYmplY3QpKSB7XG4gICAgICAgIGlmIChpc18xLmRlZmF1bHQucGxhaW5PYmplY3QodmFsdWUpIHx8IGlzXzEuZGVmYXVsdC5hcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGRlZXBGcmVlemUodmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBPYmplY3QuZnJlZXplKG9iamVjdCk7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBkZWVwRnJlZXplO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiaXNfMSIsInJlcXVpcmUiLCJkZWVwRnJlZXplIiwib2JqZWN0IiwidmFsdWVzIiwiZGVmYXVsdCIsInBsYWluT2JqZWN0IiwiYXJyYXkiLCJmcmVlemUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/utils/deep-freeze.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/utils/deprecation-warning.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/swarm-js/node_modules/got/dist/source/utils/deprecation-warning.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst alreadyWarned = new Set();\nexports[\"default\"] = (message)=>{\n    if (alreadyWarned.has(message)) {\n        return;\n    }\n    alreadyWarned.add(message);\n    // @ts-expect-error Missing types.\n    process.emitWarning(`Got: ${message}`, {\n        type: \"DeprecationWarning\"\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dhcm0tanMvbm9kZV9tb2R1bGVzL2dvdC9kaXN0L3NvdXJjZS91dGlscy9kZXByZWNhdGlvbi13YXJuaW5nLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLGdCQUFnQixJQUFJQztBQUMxQkgsa0JBQWUsR0FBRyxDQUFDSztJQUNmLElBQUlILGNBQWNJLEdBQUcsQ0FBQ0QsVUFBVTtRQUM1QjtJQUNKO0lBQ0FILGNBQWNLLEdBQUcsQ0FBQ0Y7SUFDbEIsa0NBQWtDO0lBQ2xDRyxRQUFRQyxXQUFXLENBQUMsQ0FBQyxLQUFLLEVBQUVKLFFBQVEsQ0FBQyxFQUFFO1FBQ25DSyxNQUFNO0lBQ1Y7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3N3YXJtLWpzL25vZGVfbW9kdWxlcy9nb3QvZGlzdC9zb3VyY2UvdXRpbHMvZGVwcmVjYXRpb24td2FybmluZy5qcz9iMWVhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgYWxyZWFkeVdhcm5lZCA9IG5ldyBTZXQoKTtcbmV4cG9ydHMuZGVmYXVsdCA9IChtZXNzYWdlKSA9PiB7XG4gICAgaWYgKGFscmVhZHlXYXJuZWQuaGFzKG1lc3NhZ2UpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYWxyZWFkeVdhcm5lZC5hZGQobWVzc2FnZSk7XG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciBNaXNzaW5nIHR5cGVzLlxuICAgIHByb2Nlc3MuZW1pdFdhcm5pbmcoYEdvdDogJHttZXNzYWdlfWAsIHtcbiAgICAgICAgdHlwZTogJ0RlcHJlY2F0aW9uV2FybmluZydcbiAgICB9KTtcbn07XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJhbHJlYWR5V2FybmVkIiwiU2V0IiwiZGVmYXVsdCIsIm1lc3NhZ2UiLCJoYXMiLCJhZGQiLCJwcm9jZXNzIiwiZW1pdFdhcm5pbmciLCJ0eXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swarm-js/node_modules/got/dist/source/utils/deprecation-warning.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/swarm-js/node_modules/http2-wrapper/source/agent.js":
/*!**************************************************************************!*\
  !*** ./node_modules/swarm-js/node_modules/http2-wrapper/source/agent.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst http2 = __webpack_require__(/*! http2 */ \"http2\");\nconst QuickLRU = __webpack_require__(/*! quick-lru */ \"(ssr)/./node_modules/quick-lru/index.js\");\nconst kCurrentStreamsCount = Symbol(\"currentStreamsCount\");\nconst kRequest = Symbol(\"request\");\nconst kOriginSet = Symbol(\"cachedOriginSet\");\nconst kGracefullyClosing = Symbol(\"gracefullyClosing\");\nconst nameKeys = [\n    // `http2.connect()` options\n    \"maxDeflateDynamicTableSize\",\n    \"maxSessionMemory\",\n    \"maxHeaderListPairs\",\n    \"maxOutstandingPings\",\n    \"maxReservedRemoteStreams\",\n    \"maxSendHeaderBlockLength\",\n    \"paddingStrategy\",\n    // `tls.connect()` options\n    \"localAddress\",\n    \"path\",\n    \"rejectUnauthorized\",\n    \"minDHSize\",\n    // `tls.createSecureContext()` options\n    \"ca\",\n    \"cert\",\n    \"clientCertEngine\",\n    \"ciphers\",\n    \"key\",\n    \"pfx\",\n    \"servername\",\n    \"minVersion\",\n    \"maxVersion\",\n    \"secureProtocol\",\n    \"crl\",\n    \"honorCipherOrder\",\n    \"ecdhCurve\",\n    \"dhparam\",\n    \"secureOptions\",\n    \"sessionIdContext\"\n];\nconst getSortedIndex = (array, value, compare)=>{\n    let low = 0;\n    let high = array.length;\n    while(low < high){\n        const mid = low + high >>> 1;\n        /* istanbul ignore next */ if (compare(array[mid], value)) {\n            // This never gets called because we use descending sort. Better to have this anyway.\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;\n};\nconst compareSessions = (a, b)=>{\n    return a.remoteSettings.maxConcurrentStreams > b.remoteSettings.maxConcurrentStreams;\n};\n// See https://tools.ietf.org/html/rfc8336\nconst closeCoveredSessions = (where, session)=>{\n    // Clients SHOULD NOT emit new requests on any connection whose Origin\n    // Set is a proper subset of another connection's Origin Set, and they\n    // SHOULD close it once all outstanding requests are satisfied.\n    for (const coveredSession of where){\n        if (// The set is a proper subset when its length is less than the other set.\n        coveredSession[kOriginSet].length < session[kOriginSet].length && // And the other set includes all elements of the subset.\n        coveredSession[kOriginSet].every((origin)=>session[kOriginSet].includes(origin)) && // Makes sure that the session can handle all requests from the covered session.\n        coveredSession[kCurrentStreamsCount] + session[kCurrentStreamsCount] <= session.remoteSettings.maxConcurrentStreams) {\n            // This allows pending requests to finish and prevents making new requests.\n            gracefullyClose(coveredSession);\n        }\n    }\n};\n// This is basically inverted `closeCoveredSessions(...)`.\nconst closeSessionIfCovered = (where, coveredSession)=>{\n    for (const session of where){\n        if (coveredSession[kOriginSet].length < session[kOriginSet].length && coveredSession[kOriginSet].every((origin)=>session[kOriginSet].includes(origin)) && coveredSession[kCurrentStreamsCount] + session[kCurrentStreamsCount] <= session.remoteSettings.maxConcurrentStreams) {\n            gracefullyClose(coveredSession);\n        }\n    }\n};\nconst getSessions = ({ agent, isFree })=>{\n    const result = {};\n    // eslint-disable-next-line guard-for-in\n    for(const normalizedOptions in agent.sessions){\n        const sessions = agent.sessions[normalizedOptions];\n        const filtered = sessions.filter((session)=>{\n            const result = session[Agent.kCurrentStreamsCount] < session.remoteSettings.maxConcurrentStreams;\n            return isFree ? result : !result;\n        });\n        if (filtered.length !== 0) {\n            result[normalizedOptions] = filtered;\n        }\n    }\n    return result;\n};\nconst gracefullyClose = (session)=>{\n    session[kGracefullyClosing] = true;\n    if (session[kCurrentStreamsCount] === 0) {\n        session.close();\n    }\n};\nclass Agent extends EventEmitter {\n    constructor({ timeout = 60000, maxSessions = Infinity, maxFreeSessions = 10, maxCachedTlsSessions = 100 } = {}){\n        super();\n        // A session is considered busy when its current streams count\n        // is equal to or greater than the `maxConcurrentStreams` value.\n        // A session is considered free when its current streams count\n        // is less than the `maxConcurrentStreams` value.\n        // SESSIONS[NORMALIZED_OPTIONS] = [];\n        this.sessions = {};\n        // The queue for creating new sessions. It looks like this:\n        // QUEUE[NORMALIZED_OPTIONS][NORMALIZED_ORIGIN] = ENTRY_FUNCTION\n        //\n        // The entry function has `listeners`, `completed` and `destroyed` properties.\n        // `listeners` is an array of objects containing `resolve` and `reject` functions.\n        // `completed` is a boolean. It's set to true after ENTRY_FUNCTION is executed.\n        // `destroyed` is a boolean. If it's set to true, the session will be destroyed if hasn't connected yet.\n        this.queue = {};\n        // Each session will use this timeout value.\n        this.timeout = timeout;\n        // Max sessions in total\n        this.maxSessions = maxSessions;\n        // Max free sessions in total\n        // TODO: decreasing `maxFreeSessions` should close some sessions\n        this.maxFreeSessions = maxFreeSessions;\n        this._freeSessionsCount = 0;\n        this._sessionsCount = 0;\n        // We don't support push streams by default.\n        this.settings = {\n            enablePush: false\n        };\n        // Reusing TLS sessions increases performance.\n        this.tlsSessionCache = new QuickLRU({\n            maxSize: maxCachedTlsSessions\n        });\n    }\n    static normalizeOrigin(url, servername) {\n        if (typeof url === \"string\") {\n            url = new URL(url);\n        }\n        if (servername && url.hostname !== servername) {\n            url.hostname = servername;\n        }\n        return url.origin;\n    }\n    normalizeOptions(options) {\n        let normalized = \"\";\n        if (options) {\n            for (const key of nameKeys){\n                if (options[key]) {\n                    normalized += `:${options[key]}`;\n                }\n            }\n        }\n        return normalized;\n    }\n    _tryToCreateNewSession(normalizedOptions, normalizedOrigin) {\n        if (!(normalizedOptions in this.queue) || !(normalizedOrigin in this.queue[normalizedOptions])) {\n            return;\n        }\n        const item = this.queue[normalizedOptions][normalizedOrigin];\n        // The entry function can be run only once.\n        // BUG: The session may be never created when:\n        // - the first condition is false AND\n        // - this function is never called with the same arguments in the future.\n        if (this._sessionsCount < this.maxSessions && !item.completed) {\n            item.completed = true;\n            item();\n        }\n    }\n    getSession(origin, options, listeners) {\n        return new Promise((resolve, reject)=>{\n            if (Array.isArray(listeners)) {\n                listeners = [\n                    ...listeners\n                ];\n                // Resolve the current promise ASAP, we're just moving the listeners.\n                // They will be executed at a different time.\n                resolve();\n            } else {\n                listeners = [\n                    {\n                        resolve,\n                        reject\n                    }\n                ];\n            }\n            const normalizedOptions = this.normalizeOptions(options);\n            const normalizedOrigin = Agent.normalizeOrigin(origin, options && options.servername);\n            if (normalizedOrigin === undefined) {\n                for (const { reject } of listeners){\n                    reject(new TypeError(\"The `origin` argument needs to be a string or an URL object\"));\n                }\n                return;\n            }\n            if (normalizedOptions in this.sessions) {\n                const sessions = this.sessions[normalizedOptions];\n                let maxConcurrentStreams = -1;\n                let currentStreamsCount = -1;\n                let optimalSession;\n                // We could just do this.sessions[normalizedOptions].find(...) but that isn't optimal.\n                // Additionally, we are looking for session which has biggest current pending streams count.\n                for (const session of sessions){\n                    const sessionMaxConcurrentStreams = session.remoteSettings.maxConcurrentStreams;\n                    if (sessionMaxConcurrentStreams < maxConcurrentStreams) {\n                        break;\n                    }\n                    if (session[kOriginSet].includes(normalizedOrigin)) {\n                        const sessionCurrentStreamsCount = session[kCurrentStreamsCount];\n                        if (sessionCurrentStreamsCount >= sessionMaxConcurrentStreams || session[kGracefullyClosing] || // Unfortunately the `close` event isn't called immediately,\n                        // so `session.destroyed` is `true`, but `session.closed` is `false`.\n                        session.destroyed) {\n                            continue;\n                        }\n                        // We only need set this once.\n                        if (!optimalSession) {\n                            maxConcurrentStreams = sessionMaxConcurrentStreams;\n                        }\n                        // We're looking for the session which has biggest current pending stream count,\n                        // in order to minimalize the amount of active sessions.\n                        if (sessionCurrentStreamsCount > currentStreamsCount) {\n                            optimalSession = session;\n                            currentStreamsCount = sessionCurrentStreamsCount;\n                        }\n                    }\n                }\n                if (optimalSession) {\n                    /* istanbul ignore next: safety check */ if (listeners.length !== 1) {\n                        for (const { reject } of listeners){\n                            const error = new Error(`Expected the length of listeners to be 1, got ${listeners.length}.\\n` + \"Please report this to https://github.com/szmarczak/http2-wrapper/\");\n                            reject(error);\n                        }\n                        return;\n                    }\n                    listeners[0].resolve(optimalSession);\n                    return;\n                }\n            }\n            if (normalizedOptions in this.queue) {\n                if (normalizedOrigin in this.queue[normalizedOptions]) {\n                    // There's already an item in the queue, just attach ourselves to it.\n                    this.queue[normalizedOptions][normalizedOrigin].listeners.push(...listeners);\n                    // This shouldn't be executed here.\n                    // See the comment inside _tryToCreateNewSession.\n                    this._tryToCreateNewSession(normalizedOptions, normalizedOrigin);\n                    return;\n                }\n            } else {\n                this.queue[normalizedOptions] = {};\n            }\n            // The entry must be removed from the queue IMMEDIATELY when:\n            // 1. the session connects successfully,\n            // 2. an error occurs.\n            const removeFromQueue = ()=>{\n                // Our entry can be replaced. We cannot remove the new one.\n                if (normalizedOptions in this.queue && this.queue[normalizedOptions][normalizedOrigin] === entry) {\n                    delete this.queue[normalizedOptions][normalizedOrigin];\n                    if (Object.keys(this.queue[normalizedOptions]).length === 0) {\n                        delete this.queue[normalizedOptions];\n                    }\n                }\n            };\n            // The main logic is here\n            const entry = ()=>{\n                const name = `${normalizedOrigin}:${normalizedOptions}`;\n                let receivedSettings = false;\n                try {\n                    const session = http2.connect(origin, {\n                        createConnection: this.createConnection,\n                        settings: this.settings,\n                        session: this.tlsSessionCache.get(name),\n                        ...options\n                    });\n                    session[kCurrentStreamsCount] = 0;\n                    session[kGracefullyClosing] = false;\n                    const isFree = ()=>session[kCurrentStreamsCount] < session.remoteSettings.maxConcurrentStreams;\n                    let wasFree = true;\n                    session.socket.once(\"session\", (tlsSession)=>{\n                        this.tlsSessionCache.set(name, tlsSession);\n                    });\n                    session.once(\"error\", (error)=>{\n                        // Listeners are empty when the session successfully connected.\n                        for (const { reject } of listeners){\n                            reject(error);\n                        }\n                        // The connection got broken, purge the cache.\n                        this.tlsSessionCache.delete(name);\n                    });\n                    session.setTimeout(this.timeout, ()=>{\n                        // Terminates all streams owned by this session.\n                        // TODO: Maybe the streams should have a \"Session timed out\" error?\n                        session.destroy();\n                    });\n                    session.once(\"close\", ()=>{\n                        if (receivedSettings) {\n                            // 1. If it wasn't free then no need to decrease because\n                            //    it has been decreased already in session.request().\n                            // 2. `stream.once('close')` won't increment the count\n                            //    because the session is already closed.\n                            if (wasFree) {\n                                this._freeSessionsCount--;\n                            }\n                            this._sessionsCount--;\n                            // This cannot be moved to the stream logic,\n                            // because there may be a session that hadn't made a single request.\n                            const where = this.sessions[normalizedOptions];\n                            where.splice(where.indexOf(session), 1);\n                            if (where.length === 0) {\n                                delete this.sessions[normalizedOptions];\n                            }\n                        } else {\n                            // Broken connection\n                            const error = new Error(\"Session closed without receiving a SETTINGS frame\");\n                            error.code = \"HTTP2WRAPPER_NOSETTINGS\";\n                            for (const { reject } of listeners){\n                                reject(error);\n                            }\n                            removeFromQueue();\n                        }\n                        // There may be another session awaiting.\n                        this._tryToCreateNewSession(normalizedOptions, normalizedOrigin);\n                    });\n                    // Iterates over the queue and processes listeners.\n                    const processListeners = ()=>{\n                        if (!(normalizedOptions in this.queue) || !isFree()) {\n                            return;\n                        }\n                        for (const origin of session[kOriginSet]){\n                            if (origin in this.queue[normalizedOptions]) {\n                                const { listeners } = this.queue[normalizedOptions][origin];\n                                // Prevents session overloading.\n                                while(listeners.length !== 0 && isFree()){\n                                    // We assume `resolve(...)` calls `request(...)` *directly*,\n                                    // otherwise the session will get overloaded.\n                                    listeners.shift().resolve(session);\n                                }\n                                const where = this.queue[normalizedOptions];\n                                if (where[origin].listeners.length === 0) {\n                                    delete where[origin];\n                                    if (Object.keys(where).length === 0) {\n                                        delete this.queue[normalizedOptions];\n                                        break;\n                                    }\n                                }\n                                // We're no longer free, no point in continuing.\n                                if (!isFree()) {\n                                    break;\n                                }\n                            }\n                        }\n                    };\n                    // The Origin Set cannot shrink. No need to check if it suddenly became covered by another one.\n                    session.on(\"origin\", ()=>{\n                        session[kOriginSet] = session.originSet;\n                        if (!isFree()) {\n                            // The session is full.\n                            return;\n                        }\n                        processListeners();\n                        // Close covered sessions (if possible).\n                        closeCoveredSessions(this.sessions[normalizedOptions], session);\n                    });\n                    session.once(\"remoteSettings\", ()=>{\n                        // Fix Node.js bug preventing the process from exiting\n                        session.ref();\n                        session.unref();\n                        this._sessionsCount++;\n                        // The Agent could have been destroyed already.\n                        if (entry.destroyed) {\n                            const error = new Error(\"Agent has been destroyed\");\n                            for (const listener of listeners){\n                                listener.reject(error);\n                            }\n                            session.destroy();\n                            return;\n                        }\n                        session[kOriginSet] = session.originSet;\n                        {\n                            const where = this.sessions;\n                            if (normalizedOptions in where) {\n                                const sessions = where[normalizedOptions];\n                                sessions.splice(getSortedIndex(sessions, session, compareSessions), 0, session);\n                            } else {\n                                where[normalizedOptions] = [\n                                    session\n                                ];\n                            }\n                        }\n                        this._freeSessionsCount += 1;\n                        receivedSettings = true;\n                        this.emit(\"session\", session);\n                        processListeners();\n                        removeFromQueue();\n                        // TODO: Close last recently used (or least used?) session\n                        if (session[kCurrentStreamsCount] === 0 && this._freeSessionsCount > this.maxFreeSessions) {\n                            session.close();\n                        }\n                        // Check if we haven't managed to execute all listeners.\n                        if (listeners.length !== 0) {\n                            // Request for a new session with predefined listeners.\n                            this.getSession(normalizedOrigin, options, listeners);\n                            listeners.length = 0;\n                        }\n                        // `session.remoteSettings.maxConcurrentStreams` might get increased\n                        session.on(\"remoteSettings\", ()=>{\n                            processListeners();\n                            // In case the Origin Set changes\n                            closeCoveredSessions(this.sessions[normalizedOptions], session);\n                        });\n                    });\n                    // Shim `session.request()` in order to catch all streams\n                    session[kRequest] = session.request;\n                    session.request = (headers, streamOptions)=>{\n                        if (session[kGracefullyClosing]) {\n                            throw new Error(\"The session is gracefully closing. No new streams are allowed.\");\n                        }\n                        const stream = session[kRequest](headers, streamOptions);\n                        // The process won't exit until the session is closed or all requests are gone.\n                        session.ref();\n                        ++session[kCurrentStreamsCount];\n                        if (session[kCurrentStreamsCount] === session.remoteSettings.maxConcurrentStreams) {\n                            this._freeSessionsCount--;\n                        }\n                        stream.once(\"close\", ()=>{\n                            wasFree = isFree();\n                            --session[kCurrentStreamsCount];\n                            if (!session.destroyed && !session.closed) {\n                                closeSessionIfCovered(this.sessions[normalizedOptions], session);\n                                if (isFree() && !session.closed) {\n                                    if (!wasFree) {\n                                        this._freeSessionsCount++;\n                                        wasFree = true;\n                                    }\n                                    const isEmpty = session[kCurrentStreamsCount] === 0;\n                                    if (isEmpty) {\n                                        session.unref();\n                                    }\n                                    if (isEmpty && (this._freeSessionsCount > this.maxFreeSessions || session[kGracefullyClosing])) {\n                                        session.close();\n                                    } else {\n                                        closeCoveredSessions(this.sessions[normalizedOptions], session);\n                                        processListeners();\n                                    }\n                                }\n                            }\n                        });\n                        return stream;\n                    };\n                } catch (error) {\n                    for (const listener of listeners){\n                        listener.reject(error);\n                    }\n                    removeFromQueue();\n                }\n            };\n            entry.listeners = listeners;\n            entry.completed = false;\n            entry.destroyed = false;\n            this.queue[normalizedOptions][normalizedOrigin] = entry;\n            this._tryToCreateNewSession(normalizedOptions, normalizedOrigin);\n        });\n    }\n    request(origin, options, headers, streamOptions) {\n        return new Promise((resolve, reject)=>{\n            this.getSession(origin, options, [\n                {\n                    reject,\n                    resolve: (session)=>{\n                        try {\n                            resolve(session.request(headers, streamOptions));\n                        } catch (error) {\n                            reject(error);\n                        }\n                    }\n                }\n            ]);\n        });\n    }\n    createConnection(origin, options) {\n        return Agent.connect(origin, options);\n    }\n    static connect(origin, options) {\n        options.ALPNProtocols = [\n            \"h2\"\n        ];\n        const port = origin.port || 443;\n        const host = origin.hostname || origin.host;\n        if (typeof options.servername === \"undefined\") {\n            options.servername = host;\n        }\n        return tls.connect(port, host, options);\n    }\n    closeFreeSessions() {\n        for (const sessions of Object.values(this.sessions)){\n            for (const session of sessions){\n                if (session[kCurrentStreamsCount] === 0) {\n                    session.close();\n                }\n            }\n        }\n    }\n    destroy(reason) {\n        for (const sessions of Object.values(this.sessions)){\n            for (const session of sessions){\n                session.destroy(reason);\n            }\n        }\n        for (const entriesOfAuthority of Object.values(this.queue)){\n            for (const entry of Object.values(entriesOfAuthority)){\n                entry.destroyed = true;\n            }\n        }\n        // New requests should NOT attach to destroyed sessions\n        this.queue = {};\n    }\n    get freeSessions() {\n        return getSessions({\n            agent: this,\n            isFree: true\n        });\n    }\n    get busySessions() {\n        return getSessions({\n            agent: this,\n            isFree: false\n        });\n    }\n}\nAgent.kCurrentStreamsCount = kCurrentStreamsCount;\nAgent.kGracefullyClosing = kGracefullyClosing;\nmodule.exports = {\n    Agent,\n    globalAgent: new Agent()\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swarm-js/node_modules/http2-wrapper/source/agent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/swarm-js/node_modules/http2-wrapper/source/auto.js":
/*!*************************************************************************!*\
  !*** ./node_modules/swarm-js/node_modules/http2-wrapper/source/auto.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst http = __webpack_require__(/*! http */ \"http\");\nconst https = __webpack_require__(/*! https */ \"https\");\nconst resolveALPN = __webpack_require__(/*! resolve-alpn */ \"(ssr)/./node_modules/resolve-alpn/index.js\");\nconst QuickLRU = __webpack_require__(/*! quick-lru */ \"(ssr)/./node_modules/quick-lru/index.js\");\nconst Http2ClientRequest = __webpack_require__(/*! ./client-request */ \"(ssr)/./node_modules/swarm-js/node_modules/http2-wrapper/source/client-request.js\");\nconst calculateServerName = __webpack_require__(/*! ./utils/calculate-server-name */ \"(ssr)/./node_modules/swarm-js/node_modules/http2-wrapper/source/utils/calculate-server-name.js\");\nconst urlToOptions = __webpack_require__(/*! ./utils/url-to-options */ \"(ssr)/./node_modules/swarm-js/node_modules/http2-wrapper/source/utils/url-to-options.js\");\nconst cache = new QuickLRU({\n    maxSize: 100\n});\nconst queue = new Map();\nconst installSocket = (agent, socket, options)=>{\n    socket._httpMessage = {\n        shouldKeepAlive: true\n    };\n    const onFree = ()=>{\n        agent.emit(\"free\", socket, options);\n    };\n    socket.on(\"free\", onFree);\n    const onClose = ()=>{\n        agent.removeSocket(socket, options);\n    };\n    socket.on(\"close\", onClose);\n    const onRemove = ()=>{\n        agent.removeSocket(socket, options);\n        socket.off(\"close\", onClose);\n        socket.off(\"free\", onFree);\n        socket.off(\"agentRemove\", onRemove);\n    };\n    socket.on(\"agentRemove\", onRemove);\n    agent.emit(\"free\", socket, options);\n};\nconst resolveProtocol = async (options)=>{\n    const name = `${options.host}:${options.port}:${options.ALPNProtocols.sort()}`;\n    if (!cache.has(name)) {\n        if (queue.has(name)) {\n            const result = await queue.get(name);\n            return result.alpnProtocol;\n        }\n        const { path, agent } = options;\n        options.path = options.socketPath;\n        const resultPromise = resolveALPN(options);\n        queue.set(name, resultPromise);\n        try {\n            const { socket, alpnProtocol } = await resultPromise;\n            cache.set(name, alpnProtocol);\n            options.path = path;\n            if (alpnProtocol === \"h2\") {\n                // https://github.com/nodejs/node/issues/33343\n                socket.destroy();\n            } else {\n                const { globalAgent } = https;\n                const defaultCreateConnection = https.Agent.prototype.createConnection;\n                if (agent) {\n                    if (agent.createConnection === defaultCreateConnection) {\n                        installSocket(agent, socket, options);\n                    } else {\n                        socket.destroy();\n                    }\n                } else if (globalAgent.createConnection === defaultCreateConnection) {\n                    installSocket(globalAgent, socket, options);\n                } else {\n                    socket.destroy();\n                }\n            }\n            queue.delete(name);\n            return alpnProtocol;\n        } catch (error) {\n            queue.delete(name);\n            throw error;\n        }\n    }\n    return cache.get(name);\n};\nmodule.exports = async (input, options, callback)=>{\n    if (typeof input === \"string\" || input instanceof URL) {\n        input = urlToOptions(new URL(input));\n    }\n    if (typeof options === \"function\") {\n        callback = options;\n        options = undefined;\n    }\n    options = {\n        ALPNProtocols: [\n            \"h2\",\n            \"http/1.1\"\n        ],\n        ...input,\n        ...options,\n        resolveSocket: true\n    };\n    if (!Array.isArray(options.ALPNProtocols) || options.ALPNProtocols.length === 0) {\n        throw new Error(\"The `ALPNProtocols` option must be an Array with at least one entry\");\n    }\n    options.protocol = options.protocol || \"https:\";\n    const isHttps = options.protocol === \"https:\";\n    options.host = options.hostname || options.host || \"localhost\";\n    options.session = options.tlsSession;\n    options.servername = options.servername || calculateServerName(options);\n    options.port = options.port || (isHttps ? 443 : 80);\n    options._defaultAgent = isHttps ? https.globalAgent : http.globalAgent;\n    const agents = options.agent;\n    if (agents) {\n        if (agents.addRequest) {\n            throw new Error(\"The `options.agent` object can contain only `http`, `https` or `http2` properties\");\n        }\n        options.agent = agents[isHttps ? \"https\" : \"http\"];\n    }\n    if (isHttps) {\n        const protocol = await resolveProtocol(options);\n        if (protocol === \"h2\") {\n            if (agents) {\n                options.agent = agents.http2;\n            }\n            return new Http2ClientRequest(options, callback);\n        }\n    }\n    return http.request(options, callback);\n};\nmodule.exports.protocolCache = cache;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swarm-js/node_modules/http2-wrapper/source/auto.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/swarm-js/node_modules/http2-wrapper/source/client-request.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/swarm-js/node_modules/http2-wrapper/source/client-request.js ***!
  \***********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst http2 = __webpack_require__(/*! http2 */ \"http2\");\nconst { Writable } = __webpack_require__(/*! stream */ \"stream\");\nconst { Agent, globalAgent } = __webpack_require__(/*! ./agent */ \"(ssr)/./node_modules/swarm-js/node_modules/http2-wrapper/source/agent.js\");\nconst IncomingMessage = __webpack_require__(/*! ./incoming-message */ \"(ssr)/./node_modules/swarm-js/node_modules/http2-wrapper/source/incoming-message.js\");\nconst urlToOptions = __webpack_require__(/*! ./utils/url-to-options */ \"(ssr)/./node_modules/swarm-js/node_modules/http2-wrapper/source/utils/url-to-options.js\");\nconst proxyEvents = __webpack_require__(/*! ./utils/proxy-events */ \"(ssr)/./node_modules/swarm-js/node_modules/http2-wrapper/source/utils/proxy-events.js\");\nconst isRequestPseudoHeader = __webpack_require__(/*! ./utils/is-request-pseudo-header */ \"(ssr)/./node_modules/swarm-js/node_modules/http2-wrapper/source/utils/is-request-pseudo-header.js\");\nconst { ERR_INVALID_ARG_TYPE, ERR_INVALID_PROTOCOL, ERR_HTTP_HEADERS_SENT, ERR_INVALID_HTTP_TOKEN, ERR_HTTP_INVALID_HEADER_VALUE, ERR_INVALID_CHAR } = __webpack_require__(/*! ./utils/errors */ \"(ssr)/./node_modules/swarm-js/node_modules/http2-wrapper/source/utils/errors.js\");\nconst { HTTP2_HEADER_STATUS, HTTP2_HEADER_METHOD, HTTP2_HEADER_PATH, HTTP2_METHOD_CONNECT } = http2.constants;\nconst kHeaders = Symbol(\"headers\");\nconst kOrigin = Symbol(\"origin\");\nconst kSession = Symbol(\"session\");\nconst kOptions = Symbol(\"options\");\nconst kFlushedHeaders = Symbol(\"flushedHeaders\");\nconst kJobs = Symbol(\"jobs\");\nconst isValidHttpToken = /^[\\^`\\-\\w!#$%&*+.|~]+$/;\nconst isInvalidHeaderValue = /[^\\t\\u0020-\\u007E\\u0080-\\u00FF]/;\nclass ClientRequest extends Writable {\n    constructor(input, options, callback){\n        super({\n            autoDestroy: false\n        });\n        const hasInput = typeof input === \"string\" || input instanceof URL;\n        if (hasInput) {\n            input = urlToOptions(input instanceof URL ? input : new URL(input));\n        }\n        if (typeof options === \"function\" || options === undefined) {\n            // (options, callback)\n            callback = options;\n            options = hasInput ? input : {\n                ...input\n            };\n        } else {\n            // (input, options, callback)\n            options = {\n                ...input,\n                ...options\n            };\n        }\n        if (options.h2session) {\n            this[kSession] = options.h2session;\n        } else if (options.agent === false) {\n            this.agent = new Agent({\n                maxFreeSessions: 0\n            });\n        } else if (typeof options.agent === \"undefined\" || options.agent === null) {\n            if (typeof options.createConnection === \"function\") {\n                // This is a workaround - we don't have to create the session on our own.\n                this.agent = new Agent({\n                    maxFreeSessions: 0\n                });\n                this.agent.createConnection = options.createConnection;\n            } else {\n                this.agent = globalAgent;\n            }\n        } else if (typeof options.agent.request === \"function\") {\n            this.agent = options.agent;\n        } else {\n            throw new ERR_INVALID_ARG_TYPE(\"options.agent\", [\n                \"Agent-like Object\",\n                \"undefined\",\n                \"false\"\n            ], options.agent);\n        }\n        if (options.protocol && options.protocol !== \"https:\") {\n            throw new ERR_INVALID_PROTOCOL(options.protocol, \"https:\");\n        }\n        const port = options.port || options.defaultPort || this.agent && this.agent.defaultPort || 443;\n        const host = options.hostname || options.host || \"localhost\";\n        // Don't enforce the origin via options. It may be changed in an Agent.\n        delete options.hostname;\n        delete options.host;\n        delete options.port;\n        const { timeout } = options;\n        options.timeout = undefined;\n        this[kHeaders] = Object.create(null);\n        this[kJobs] = [];\n        this.socket = null;\n        this.connection = null;\n        this.method = options.method || \"GET\";\n        this.path = options.path;\n        this.res = null;\n        this.aborted = false;\n        this.reusedSocket = false;\n        if (options.headers) {\n            for (const [header, value] of Object.entries(options.headers)){\n                this.setHeader(header, value);\n            }\n        }\n        if (options.auth && !(\"authorization\" in this[kHeaders])) {\n            this[kHeaders].authorization = \"Basic \" + Buffer.from(options.auth).toString(\"base64\");\n        }\n        options.session = options.tlsSession;\n        options.path = options.socketPath;\n        this[kOptions] = options;\n        // Clients that generate HTTP/2 requests directly SHOULD use the :authority pseudo-header field instead of the Host header field.\n        if (port === 443) {\n            this[kOrigin] = `https://${host}`;\n            if (!(\":authority\" in this[kHeaders])) {\n                this[kHeaders][\":authority\"] = host;\n            }\n        } else {\n            this[kOrigin] = `https://${host}:${port}`;\n            if (!(\":authority\" in this[kHeaders])) {\n                this[kHeaders][\":authority\"] = `${host}:${port}`;\n            }\n        }\n        if (timeout) {\n            this.setTimeout(timeout);\n        }\n        if (callback) {\n            this.once(\"response\", callback);\n        }\n        this[kFlushedHeaders] = false;\n    }\n    get method() {\n        return this[kHeaders][HTTP2_HEADER_METHOD];\n    }\n    set method(value) {\n        if (value) {\n            this[kHeaders][HTTP2_HEADER_METHOD] = value.toUpperCase();\n        }\n    }\n    get path() {\n        return this[kHeaders][HTTP2_HEADER_PATH];\n    }\n    set path(value) {\n        if (value) {\n            this[kHeaders][HTTP2_HEADER_PATH] = value;\n        }\n    }\n    get _mustNotHaveABody() {\n        return this.method === \"GET\" || this.method === \"HEAD\" || this.method === \"DELETE\";\n    }\n    _write(chunk, encoding, callback) {\n        // https://github.com/nodejs/node/blob/654df09ae0c5e17d1b52a900a545f0664d8c7627/lib/internal/http2/util.js#L148-L156\n        if (this._mustNotHaveABody) {\n            callback(new Error(\"The GET, HEAD and DELETE methods must NOT have a body\"));\n            /* istanbul ignore next: Node.js 12 throws directly */ return;\n        }\n        this.flushHeaders();\n        const callWrite = ()=>this._request.write(chunk, encoding, callback);\n        if (this._request) {\n            callWrite();\n        } else {\n            this[kJobs].push(callWrite);\n        }\n    }\n    _final(callback) {\n        if (this.destroyed) {\n            return;\n        }\n        this.flushHeaders();\n        const callEnd = ()=>{\n            // For GET, HEAD and DELETE\n            if (this._mustNotHaveABody) {\n                callback();\n                return;\n            }\n            this._request.end(callback);\n        };\n        if (this._request) {\n            callEnd();\n        } else {\n            this[kJobs].push(callEnd);\n        }\n    }\n    abort() {\n        if (this.res && this.res.complete) {\n            return;\n        }\n        if (!this.aborted) {\n            process.nextTick(()=>this.emit(\"abort\"));\n        }\n        this.aborted = true;\n        this.destroy();\n    }\n    _destroy(error, callback) {\n        if (this.res) {\n            this.res._dump();\n        }\n        if (this._request) {\n            this._request.destroy();\n        }\n        callback(error);\n    }\n    async flushHeaders() {\n        if (this[kFlushedHeaders] || this.destroyed) {\n            return;\n        }\n        this[kFlushedHeaders] = true;\n        const isConnectMethod = this.method === HTTP2_METHOD_CONNECT;\n        // The real magic is here\n        const onStream = (stream)=>{\n            this._request = stream;\n            if (this.destroyed) {\n                stream.destroy();\n                return;\n            }\n            // Forwards `timeout`, `continue`, `close` and `error` events to this instance.\n            if (!isConnectMethod) {\n                proxyEvents(stream, this, [\n                    \"timeout\",\n                    \"continue\",\n                    \"close\",\n                    \"error\"\n                ]);\n            }\n            // Wait for the `finish` event. We don't want to emit the `response` event\n            // before `request.end()` is called.\n            const waitForEnd = (fn)=>{\n                return (...args)=>{\n                    if (!this.writable && !this.destroyed) {\n                        fn(...args);\n                    } else {\n                        this.once(\"finish\", ()=>{\n                            fn(...args);\n                        });\n                    }\n                };\n            };\n            // This event tells we are ready to listen for the data.\n            stream.once(\"response\", waitForEnd((headers, flags, rawHeaders)=>{\n                // If we were to emit raw request stream, it would be as fast as the native approach.\n                // Note that wrapping the raw stream in a Proxy instance won't improve the performance (already tested it).\n                const response = new IncomingMessage(this.socket, stream.readableHighWaterMark);\n                this.res = response;\n                response.req = this;\n                response.statusCode = headers[HTTP2_HEADER_STATUS];\n                response.headers = headers;\n                response.rawHeaders = rawHeaders;\n                response.once(\"end\", ()=>{\n                    if (this.aborted) {\n                        response.aborted = true;\n                        response.emit(\"aborted\");\n                    } else {\n                        response.complete = true;\n                        // Has no effect, just be consistent with the Node.js behavior\n                        response.socket = null;\n                        response.connection = null;\n                    }\n                });\n                if (isConnectMethod) {\n                    response.upgrade = true;\n                    // The HTTP1 API says the socket is detached here,\n                    // but we can't do that so we pass the original HTTP2 request.\n                    if (this.emit(\"connect\", response, stream, Buffer.alloc(0))) {\n                        this.emit(\"close\");\n                    } else {\n                        // No listeners attached, destroy the original request.\n                        stream.destroy();\n                    }\n                } else {\n                    // Forwards data\n                    stream.on(\"data\", (chunk)=>{\n                        if (!response._dumped && !response.push(chunk)) {\n                            stream.pause();\n                        }\n                    });\n                    stream.once(\"end\", ()=>{\n                        response.push(null);\n                    });\n                    if (!this.emit(\"response\", response)) {\n                        // No listeners attached, dump the response.\n                        response._dump();\n                    }\n                }\n            }));\n            // Emits `information` event\n            stream.once(\"headers\", waitForEnd((headers)=>this.emit(\"information\", {\n                    statusCode: headers[HTTP2_HEADER_STATUS]\n                })));\n            stream.once(\"trailers\", waitForEnd((trailers, flags, rawTrailers)=>{\n                const { res } = this;\n                // Assigns trailers to the response object.\n                res.trailers = trailers;\n                res.rawTrailers = rawTrailers;\n            }));\n            const { socket } = stream.session;\n            this.socket = socket;\n            this.connection = socket;\n            for (const job of this[kJobs]){\n                job();\n            }\n            this.emit(\"socket\", this.socket);\n        };\n        // Makes a HTTP2 request\n        if (this[kSession]) {\n            try {\n                onStream(this[kSession].request(this[kHeaders]));\n            } catch (error) {\n                this.emit(\"error\", error);\n            }\n        } else {\n            this.reusedSocket = true;\n            try {\n                onStream(await this.agent.request(this[kOrigin], this[kOptions], this[kHeaders]));\n            } catch (error) {\n                this.emit(\"error\", error);\n            }\n        }\n    }\n    getHeader(name) {\n        if (typeof name !== \"string\") {\n            throw new ERR_INVALID_ARG_TYPE(\"name\", \"string\", name);\n        }\n        return this[kHeaders][name.toLowerCase()];\n    }\n    get headersSent() {\n        return this[kFlushedHeaders];\n    }\n    removeHeader(name) {\n        if (typeof name !== \"string\") {\n            throw new ERR_INVALID_ARG_TYPE(\"name\", \"string\", name);\n        }\n        if (this.headersSent) {\n            throw new ERR_HTTP_HEADERS_SENT(\"remove\");\n        }\n        delete this[kHeaders][name.toLowerCase()];\n    }\n    setHeader(name, value) {\n        if (this.headersSent) {\n            throw new ERR_HTTP_HEADERS_SENT(\"set\");\n        }\n        if (typeof name !== \"string\" || !isValidHttpToken.test(name) && !isRequestPseudoHeader(name)) {\n            throw new ERR_INVALID_HTTP_TOKEN(\"Header name\", name);\n        }\n        if (typeof value === \"undefined\") {\n            throw new ERR_HTTP_INVALID_HEADER_VALUE(value, name);\n        }\n        if (isInvalidHeaderValue.test(value)) {\n            throw new ERR_INVALID_CHAR(\"header content\", name);\n        }\n        this[kHeaders][name.toLowerCase()] = value;\n    }\n    setNoDelay() {\n    // HTTP2 sockets cannot be malformed, do nothing.\n    }\n    setSocketKeepAlive() {\n    // HTTP2 sockets cannot be malformed, do nothing.\n    }\n    setTimeout(ms, callback) {\n        const applyTimeout = ()=>this._request.setTimeout(ms, callback);\n        if (this._request) {\n            applyTimeout();\n        } else {\n            this[kJobs].push(applyTimeout);\n        }\n        return this;\n    }\n    get maxHeadersCount() {\n        if (!this.destroyed && this._request) {\n            return this._request.session.localSettings.maxHeaderListSize;\n        }\n        return undefined;\n    }\n    set maxHeadersCount(_value) {\n    // Updating HTTP2 settings would affect all requests, do nothing.\n    }\n}\nmodule.exports = ClientRequest;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swarm-js/node_modules/http2-wrapper/source/client-request.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/swarm-js/node_modules/http2-wrapper/source/incoming-message.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/swarm-js/node_modules/http2-wrapper/source/incoming-message.js ***!
  \*************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { Readable } = __webpack_require__(/*! stream */ \"stream\");\nclass IncomingMessage extends Readable {\n    constructor(socket, highWaterMark){\n        super({\n            highWaterMark,\n            autoDestroy: false\n        });\n        this.statusCode = null;\n        this.statusMessage = \"\";\n        this.httpVersion = \"2.0\";\n        this.httpVersionMajor = 2;\n        this.httpVersionMinor = 0;\n        this.headers = {};\n        this.trailers = {};\n        this.req = null;\n        this.aborted = false;\n        this.complete = false;\n        this.upgrade = null;\n        this.rawHeaders = [];\n        this.rawTrailers = [];\n        this.socket = socket;\n        this.connection = socket;\n        this._dumped = false;\n    }\n    _destroy(error) {\n        this.req._request.destroy(error);\n    }\n    setTimeout(ms, callback) {\n        this.req.setTimeout(ms, callback);\n        return this;\n    }\n    _dump() {\n        if (!this._dumped) {\n            this._dumped = true;\n            this.removeAllListeners(\"data\");\n            this.resume();\n        }\n    }\n    _read() {\n        if (this.req) {\n            this.req._request.resume();\n        }\n    }\n}\nmodule.exports = IncomingMessage;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dhcm0tanMvbm9kZV9tb2R1bGVzL2h0dHAyLXdyYXBwZXIvc291cmNlL2luY29taW5nLW1lc3NhZ2UuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxNQUFNLEVBQUNBLFFBQVEsRUFBQyxHQUFHQyxtQkFBT0EsQ0FBQztBQUUzQixNQUFNQyx3QkFBd0JGO0lBQzdCRyxZQUFZQyxNQUFNLEVBQUVDLGFBQWEsQ0FBRTtRQUNsQyxLQUFLLENBQUM7WUFDTEE7WUFDQUMsYUFBYTtRQUNkO1FBRUEsSUFBSSxDQUFDQyxVQUFVLEdBQUc7UUFDbEIsSUFBSSxDQUFDQyxhQUFhLEdBQUc7UUFDckIsSUFBSSxDQUFDQyxXQUFXLEdBQUc7UUFDbkIsSUFBSSxDQUFDQyxnQkFBZ0IsR0FBRztRQUN4QixJQUFJLENBQUNDLGdCQUFnQixHQUFHO1FBQ3hCLElBQUksQ0FBQ0MsT0FBTyxHQUFHLENBQUM7UUFDaEIsSUFBSSxDQUFDQyxRQUFRLEdBQUcsQ0FBQztRQUNqQixJQUFJLENBQUNDLEdBQUcsR0FBRztRQUVYLElBQUksQ0FBQ0MsT0FBTyxHQUFHO1FBQ2YsSUFBSSxDQUFDQyxRQUFRLEdBQUc7UUFDaEIsSUFBSSxDQUFDQyxPQUFPLEdBQUc7UUFFZixJQUFJLENBQUNDLFVBQVUsR0FBRyxFQUFFO1FBQ3BCLElBQUksQ0FBQ0MsV0FBVyxHQUFHLEVBQUU7UUFFckIsSUFBSSxDQUFDZixNQUFNLEdBQUdBO1FBQ2QsSUFBSSxDQUFDZ0IsVUFBVSxHQUFHaEI7UUFFbEIsSUFBSSxDQUFDaUIsT0FBTyxHQUFHO0lBQ2hCO0lBRUFDLFNBQVNDLEtBQUssRUFBRTtRQUNmLElBQUksQ0FBQ1QsR0FBRyxDQUFDVSxRQUFRLENBQUNDLE9BQU8sQ0FBQ0Y7SUFDM0I7SUFFQUcsV0FBV0MsRUFBRSxFQUFFQyxRQUFRLEVBQUU7UUFDeEIsSUFBSSxDQUFDZCxHQUFHLENBQUNZLFVBQVUsQ0FBQ0MsSUFBSUM7UUFDeEIsT0FBTyxJQUFJO0lBQ1o7SUFFQUMsUUFBUTtRQUNQLElBQUksQ0FBQyxJQUFJLENBQUNSLE9BQU8sRUFBRTtZQUNsQixJQUFJLENBQUNBLE9BQU8sR0FBRztZQUVmLElBQUksQ0FBQ1Msa0JBQWtCLENBQUM7WUFDeEIsSUFBSSxDQUFDQyxNQUFNO1FBQ1o7SUFDRDtJQUVBQyxRQUFRO1FBQ1AsSUFBSSxJQUFJLENBQUNsQixHQUFHLEVBQUU7WUFDYixJQUFJLENBQUNBLEdBQUcsQ0FBQ1UsUUFBUSxDQUFDTyxNQUFNO1FBQ3pCO0lBQ0Q7QUFDRDtBQUVBRSxPQUFPQyxPQUFPLEdBQUdoQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3N3YXJtLWpzL25vZGVfbW9kdWxlcy9odHRwMi13cmFwcGVyL3NvdXJjZS9pbmNvbWluZy1tZXNzYWdlLmpzP2ZjMmMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3Qge1JlYWRhYmxlfSA9IHJlcXVpcmUoJ3N0cmVhbScpO1xuXG5jbGFzcyBJbmNvbWluZ01lc3NhZ2UgZXh0ZW5kcyBSZWFkYWJsZSB7XG5cdGNvbnN0cnVjdG9yKHNvY2tldCwgaGlnaFdhdGVyTWFyaykge1xuXHRcdHN1cGVyKHtcblx0XHRcdGhpZ2hXYXRlck1hcmssXG5cdFx0XHRhdXRvRGVzdHJveTogZmFsc2Vcblx0XHR9KTtcblxuXHRcdHRoaXMuc3RhdHVzQ29kZSA9IG51bGw7XG5cdFx0dGhpcy5zdGF0dXNNZXNzYWdlID0gJyc7XG5cdFx0dGhpcy5odHRwVmVyc2lvbiA9ICcyLjAnO1xuXHRcdHRoaXMuaHR0cFZlcnNpb25NYWpvciA9IDI7XG5cdFx0dGhpcy5odHRwVmVyc2lvbk1pbm9yID0gMDtcblx0XHR0aGlzLmhlYWRlcnMgPSB7fTtcblx0XHR0aGlzLnRyYWlsZXJzID0ge307XG5cdFx0dGhpcy5yZXEgPSBudWxsO1xuXG5cdFx0dGhpcy5hYm9ydGVkID0gZmFsc2U7XG5cdFx0dGhpcy5jb21wbGV0ZSA9IGZhbHNlO1xuXHRcdHRoaXMudXBncmFkZSA9IG51bGw7XG5cblx0XHR0aGlzLnJhd0hlYWRlcnMgPSBbXTtcblx0XHR0aGlzLnJhd1RyYWlsZXJzID0gW107XG5cblx0XHR0aGlzLnNvY2tldCA9IHNvY2tldDtcblx0XHR0aGlzLmNvbm5lY3Rpb24gPSBzb2NrZXQ7XG5cblx0XHR0aGlzLl9kdW1wZWQgPSBmYWxzZTtcblx0fVxuXG5cdF9kZXN0cm95KGVycm9yKSB7XG5cdFx0dGhpcy5yZXEuX3JlcXVlc3QuZGVzdHJveShlcnJvcik7XG5cdH1cblxuXHRzZXRUaW1lb3V0KG1zLCBjYWxsYmFjaykge1xuXHRcdHRoaXMucmVxLnNldFRpbWVvdXQobXMsIGNhbGxiYWNrKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdF9kdW1wKCkge1xuXHRcdGlmICghdGhpcy5fZHVtcGVkKSB7XG5cdFx0XHR0aGlzLl9kdW1wZWQgPSB0cnVlO1xuXG5cdFx0XHR0aGlzLnJlbW92ZUFsbExpc3RlbmVycygnZGF0YScpO1xuXHRcdFx0dGhpcy5yZXN1bWUoKTtcblx0XHR9XG5cdH1cblxuXHRfcmVhZCgpIHtcblx0XHRpZiAodGhpcy5yZXEpIHtcblx0XHRcdHRoaXMucmVxLl9yZXF1ZXN0LnJlc3VtZSgpO1xuXHRcdH1cblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEluY29taW5nTWVzc2FnZTtcbiJdLCJuYW1lcyI6WyJSZWFkYWJsZSIsInJlcXVpcmUiLCJJbmNvbWluZ01lc3NhZ2UiLCJjb25zdHJ1Y3RvciIsInNvY2tldCIsImhpZ2hXYXRlck1hcmsiLCJhdXRvRGVzdHJveSIsInN0YXR1c0NvZGUiLCJzdGF0dXNNZXNzYWdlIiwiaHR0cFZlcnNpb24iLCJodHRwVmVyc2lvbk1ham9yIiwiaHR0cFZlcnNpb25NaW5vciIsImhlYWRlcnMiLCJ0cmFpbGVycyIsInJlcSIsImFib3J0ZWQiLCJjb21wbGV0ZSIsInVwZ3JhZGUiLCJyYXdIZWFkZXJzIiwicmF3VHJhaWxlcnMiLCJjb25uZWN0aW9uIiwiX2R1bXBlZCIsIl9kZXN0cm95IiwiZXJyb3IiLCJfcmVxdWVzdCIsImRlc3Ryb3kiLCJzZXRUaW1lb3V0IiwibXMiLCJjYWxsYmFjayIsIl9kdW1wIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwicmVzdW1lIiwiX3JlYWQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swarm-js/node_modules/http2-wrapper/source/incoming-message.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/swarm-js/node_modules/http2-wrapper/source/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/swarm-js/node_modules/http2-wrapper/source/index.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst http2 = __webpack_require__(/*! http2 */ \"http2\");\nconst agent = __webpack_require__(/*! ./agent */ \"(ssr)/./node_modules/swarm-js/node_modules/http2-wrapper/source/agent.js\");\nconst ClientRequest = __webpack_require__(/*! ./client-request */ \"(ssr)/./node_modules/swarm-js/node_modules/http2-wrapper/source/client-request.js\");\nconst IncomingMessage = __webpack_require__(/*! ./incoming-message */ \"(ssr)/./node_modules/swarm-js/node_modules/http2-wrapper/source/incoming-message.js\");\nconst auto = __webpack_require__(/*! ./auto */ \"(ssr)/./node_modules/swarm-js/node_modules/http2-wrapper/source/auto.js\");\nconst request = (url, options, callback)=>{\n    return new ClientRequest(url, options, callback);\n};\nconst get = (url, options, callback)=>{\n    // eslint-disable-next-line unicorn/prevent-abbreviations\n    const req = new ClientRequest(url, options, callback);\n    req.end();\n    return req;\n};\nmodule.exports = {\n    ...http2,\n    ClientRequest,\n    IncomingMessage,\n    ...agent,\n    request,\n    get,\n    auto\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dhcm0tanMvbm9kZV9tb2R1bGVzL2h0dHAyLXdyYXBwZXIvc291cmNlL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsTUFBTUEsUUFBUUMsbUJBQU9BLENBQUM7QUFDdEIsTUFBTUMsUUFBUUQsbUJBQU9BLENBQUM7QUFDdEIsTUFBTUUsZ0JBQWdCRixtQkFBT0EsQ0FBQztBQUM5QixNQUFNRyxrQkFBa0JILG1CQUFPQSxDQUFDO0FBQ2hDLE1BQU1JLE9BQU9KLG1CQUFPQSxDQUFDO0FBRXJCLE1BQU1LLFVBQVUsQ0FBQ0MsS0FBS0MsU0FBU0M7SUFDOUIsT0FBTyxJQUFJTixjQUFjSSxLQUFLQyxTQUFTQztBQUN4QztBQUVBLE1BQU1DLE1BQU0sQ0FBQ0gsS0FBS0MsU0FBU0M7SUFDMUIseURBQXlEO0lBQ3pELE1BQU1FLE1BQU0sSUFBSVIsY0FBY0ksS0FBS0MsU0FBU0M7SUFDNUNFLElBQUlDLEdBQUc7SUFFUCxPQUFPRDtBQUNSO0FBRUFFLE9BQU9DLE9BQU8sR0FBRztJQUNoQixHQUFHZCxLQUFLO0lBQ1JHO0lBQ0FDO0lBQ0EsR0FBR0YsS0FBSztJQUNSSTtJQUNBSTtJQUNBTDtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvc3dhcm0tanMvbm9kZV9tb2R1bGVzL2h0dHAyLXdyYXBwZXIvc291cmNlL2luZGV4LmpzP2VlMDgiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgaHR0cDIgPSByZXF1aXJlKCdodHRwMicpO1xuY29uc3QgYWdlbnQgPSByZXF1aXJlKCcuL2FnZW50Jyk7XG5jb25zdCBDbGllbnRSZXF1ZXN0ID0gcmVxdWlyZSgnLi9jbGllbnQtcmVxdWVzdCcpO1xuY29uc3QgSW5jb21pbmdNZXNzYWdlID0gcmVxdWlyZSgnLi9pbmNvbWluZy1tZXNzYWdlJyk7XG5jb25zdCBhdXRvID0gcmVxdWlyZSgnLi9hdXRvJyk7XG5cbmNvbnN0IHJlcXVlc3QgPSAodXJsLCBvcHRpb25zLCBjYWxsYmFjaykgPT4ge1xuXHRyZXR1cm4gbmV3IENsaWVudFJlcXVlc3QodXJsLCBvcHRpb25zLCBjYWxsYmFjayk7XG59O1xuXG5jb25zdCBnZXQgPSAodXJsLCBvcHRpb25zLCBjYWxsYmFjaykgPT4ge1xuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdW5pY29ybi9wcmV2ZW50LWFiYnJldmlhdGlvbnNcblx0Y29uc3QgcmVxID0gbmV3IENsaWVudFJlcXVlc3QodXJsLCBvcHRpb25zLCBjYWxsYmFjayk7XG5cdHJlcS5lbmQoKTtcblxuXHRyZXR1cm4gcmVxO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdC4uLmh0dHAyLFxuXHRDbGllbnRSZXF1ZXN0LFxuXHRJbmNvbWluZ01lc3NhZ2UsXG5cdC4uLmFnZW50LFxuXHRyZXF1ZXN0LFxuXHRnZXQsXG5cdGF1dG9cbn07XG4iXSwibmFtZXMiOlsiaHR0cDIiLCJyZXF1aXJlIiwiYWdlbnQiLCJDbGllbnRSZXF1ZXN0IiwiSW5jb21pbmdNZXNzYWdlIiwiYXV0byIsInJlcXVlc3QiLCJ1cmwiLCJvcHRpb25zIiwiY2FsbGJhY2siLCJnZXQiLCJyZXEiLCJlbmQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swarm-js/node_modules/http2-wrapper/source/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/swarm-js/node_modules/http2-wrapper/source/utils/calculate-server-name.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/swarm-js/node_modules/http2-wrapper/source/utils/calculate-server-name.js ***!
  \************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst net = __webpack_require__(/*! net */ \"net\");\n/* istanbul ignore file: https://github.com/nodejs/node/blob/v13.0.1/lib/_http_agent.js */ module.exports = (options)=>{\n    let servername = options.host;\n    const hostHeader = options.headers && options.headers.host;\n    if (hostHeader) {\n        if (hostHeader.startsWith(\"[\")) {\n            const index = hostHeader.indexOf(\"]\");\n            if (index === -1) {\n                servername = hostHeader;\n            } else {\n                servername = hostHeader.slice(1, -1);\n            }\n        } else {\n            servername = hostHeader.split(\":\", 1)[0];\n        }\n    }\n    if (net.isIP(servername)) {\n        return \"\";\n    }\n    return servername;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dhcm0tanMvbm9kZV9tb2R1bGVzL2h0dHAyLXdyYXBwZXIvc291cmNlL3V0aWxzL2NhbGN1bGF0ZS1zZXJ2ZXItbmFtZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBLE1BQU1BLE1BQU1DLG1CQUFPQSxDQUFDO0FBQ3BCLHdGQUF3RixHQUV4RkMsT0FBT0MsT0FBTyxHQUFHQyxDQUFBQTtJQUNoQixJQUFJQyxhQUFhRCxRQUFRRSxJQUFJO0lBQzdCLE1BQU1DLGFBQWFILFFBQVFJLE9BQU8sSUFBSUosUUFBUUksT0FBTyxDQUFDRixJQUFJO0lBRTFELElBQUlDLFlBQVk7UUFDZixJQUFJQSxXQUFXRSxVQUFVLENBQUMsTUFBTTtZQUMvQixNQUFNQyxRQUFRSCxXQUFXSSxPQUFPLENBQUM7WUFDakMsSUFBSUQsVUFBVSxDQUFDLEdBQUc7Z0JBQ2pCTCxhQUFhRTtZQUNkLE9BQU87Z0JBQ05GLGFBQWFFLFdBQVdLLEtBQUssQ0FBQyxHQUFHLENBQUM7WUFDbkM7UUFDRCxPQUFPO1lBQ05QLGFBQWFFLFdBQVdNLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFO1FBQ3pDO0lBQ0Q7SUFFQSxJQUFJYixJQUFJYyxJQUFJLENBQUNULGFBQWE7UUFDekIsT0FBTztJQUNSO0lBRUEsT0FBT0E7QUFDUiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3N3YXJtLWpzL25vZGVfbW9kdWxlcy9odHRwMi13cmFwcGVyL3NvdXJjZS91dGlscy9jYWxjdWxhdGUtc2VydmVyLW5hbWUuanM/OWU5NyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBuZXQgPSByZXF1aXJlKCduZXQnKTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBmaWxlOiBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvYmxvYi92MTMuMC4xL2xpYi9faHR0cF9hZ2VudC5qcyAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IG9wdGlvbnMgPT4ge1xuXHRsZXQgc2VydmVybmFtZSA9IG9wdGlvbnMuaG9zdDtcblx0Y29uc3QgaG9zdEhlYWRlciA9IG9wdGlvbnMuaGVhZGVycyAmJiBvcHRpb25zLmhlYWRlcnMuaG9zdDtcblxuXHRpZiAoaG9zdEhlYWRlcikge1xuXHRcdGlmIChob3N0SGVhZGVyLnN0YXJ0c1dpdGgoJ1snKSkge1xuXHRcdFx0Y29uc3QgaW5kZXggPSBob3N0SGVhZGVyLmluZGV4T2YoJ10nKTtcblx0XHRcdGlmIChpbmRleCA9PT0gLTEpIHtcblx0XHRcdFx0c2VydmVybmFtZSA9IGhvc3RIZWFkZXI7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZXJ2ZXJuYW1lID0gaG9zdEhlYWRlci5zbGljZSgxLCAtMSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNlcnZlcm5hbWUgPSBob3N0SGVhZGVyLnNwbGl0KCc6JywgMSlbMF07XG5cdFx0fVxuXHR9XG5cblx0aWYgKG5ldC5pc0lQKHNlcnZlcm5hbWUpKSB7XG5cdFx0cmV0dXJuICcnO1xuXHR9XG5cblx0cmV0dXJuIHNlcnZlcm5hbWU7XG59O1xuIl0sIm5hbWVzIjpbIm5ldCIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwib3B0aW9ucyIsInNlcnZlcm5hbWUiLCJob3N0IiwiaG9zdEhlYWRlciIsImhlYWRlcnMiLCJzdGFydHNXaXRoIiwiaW5kZXgiLCJpbmRleE9mIiwic2xpY2UiLCJzcGxpdCIsImlzSVAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swarm-js/node_modules/http2-wrapper/source/utils/calculate-server-name.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/swarm-js/node_modules/http2-wrapper/source/utils/errors.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/swarm-js/node_modules/http2-wrapper/source/utils/errors.js ***!
  \*********************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n/* istanbul ignore file: https://github.com/nodejs/node/blob/master/lib/internal/errors.js */ const makeError = (Base, key, getMessage)=>{\n    module.exports[key] = class NodeError extends Base {\n        constructor(...args){\n            super(typeof getMessage === \"string\" ? getMessage : getMessage(args));\n            this.name = `${super.name} [${key}]`;\n            this.code = key;\n        }\n    };\n};\nmakeError(TypeError, \"ERR_INVALID_ARG_TYPE\", (args)=>{\n    const type = args[0].includes(\".\") ? \"property\" : \"argument\";\n    let valid = args[1];\n    const isManyTypes = Array.isArray(valid);\n    if (isManyTypes) {\n        valid = `${valid.slice(0, -1).join(\", \")} or ${valid.slice(-1)}`;\n    }\n    return `The \"${args[0]}\" ${type} must be ${isManyTypes ? \"one of\" : \"of\"} type ${valid}. Received ${typeof args[2]}`;\n});\nmakeError(TypeError, \"ERR_INVALID_PROTOCOL\", (args)=>{\n    return `Protocol \"${args[0]}\" not supported. Expected \"${args[1]}\"`;\n});\nmakeError(Error, \"ERR_HTTP_HEADERS_SENT\", (args)=>{\n    return `Cannot ${args[0]} headers after they are sent to the client`;\n});\nmakeError(TypeError, \"ERR_INVALID_HTTP_TOKEN\", (args)=>{\n    return `${args[0]} must be a valid HTTP token [${args[1]}]`;\n});\nmakeError(TypeError, \"ERR_HTTP_INVALID_HEADER_VALUE\", (args)=>{\n    return `Invalid value \"${args[0]} for header \"${args[1]}\"`;\n});\nmakeError(TypeError, \"ERR_INVALID_CHAR\", (args)=>{\n    return `Invalid character in ${args[0]} [${args[1]}]`;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dhcm0tanMvbm9kZV9tb2R1bGVzL2h0dHAyLXdyYXBwZXIvc291cmNlL3V0aWxzL2Vycm9ycy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBLDJGQUEyRixHQUUzRixNQUFNQSxZQUFZLENBQUNDLE1BQU1DLEtBQUtDO0lBQzdCQyxPQUFPQyxPQUFPLENBQUNILElBQUksR0FBRyxNQUFNSSxrQkFBa0JMO1FBQzdDTSxZQUFZLEdBQUdDLElBQUksQ0FBRTtZQUNwQixLQUFLLENBQUMsT0FBT0wsZUFBZSxXQUFXQSxhQUFhQSxXQUFXSztZQUMvRCxJQUFJLENBQUNDLElBQUksR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDQSxLQUFLLEVBQUUsRUFBRVAsSUFBSSxDQUFDLENBQUM7WUFDcEMsSUFBSSxDQUFDUSxJQUFJLEdBQUdSO1FBQ2I7SUFDRDtBQUNEO0FBRUFGLFVBQVVXLFdBQVcsd0JBQXdCSCxDQUFBQTtJQUM1QyxNQUFNSSxPQUFPSixJQUFJLENBQUMsRUFBRSxDQUFDSyxRQUFRLENBQUMsT0FBTyxhQUFhO0lBRWxELElBQUlDLFFBQVFOLElBQUksQ0FBQyxFQUFFO0lBQ25CLE1BQU1PLGNBQWNDLE1BQU1DLE9BQU8sQ0FBQ0g7SUFFbEMsSUFBSUMsYUFBYTtRQUNoQkQsUUFBUSxDQUFDLEVBQUVBLE1BQU1JLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBR0MsSUFBSSxDQUFDLE1BQU0sSUFBSSxFQUFFTCxNQUFNSSxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUM7SUFDakU7SUFFQSxPQUFPLENBQUMsS0FBSyxFQUFFVixJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRUksS0FBSyxTQUFTLEVBQUVHLGNBQWMsV0FBVyxLQUFLLE1BQU0sRUFBRUQsTUFBTSxXQUFXLEVBQUUsT0FBT04sSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3JIO0FBRUFSLFVBQVVXLFdBQVcsd0JBQXdCSCxDQUFBQTtJQUM1QyxPQUFPLENBQUMsVUFBVSxFQUFFQSxJQUFJLENBQUMsRUFBRSxDQUFDLDJCQUEyQixFQUFFQSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNwRTtBQUVBUixVQUFVb0IsT0FBTyx5QkFBeUJaLENBQUFBO0lBQ3pDLE9BQU8sQ0FBQyxPQUFPLEVBQUVBLElBQUksQ0FBQyxFQUFFLENBQUMsMENBQTBDLENBQUM7QUFDckU7QUFFQVIsVUFBVVcsV0FBVywwQkFBMEJILENBQUFBO0lBQzlDLE9BQU8sQ0FBQyxFQUFFQSxJQUFJLENBQUMsRUFBRSxDQUFDLDZCQUE2QixFQUFFQSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUM1RDtBQUVBUixVQUFVVyxXQUFXLGlDQUFpQ0gsQ0FBQUE7SUFDckQsT0FBTyxDQUFDLGVBQWUsRUFBRUEsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUVBLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzNEO0FBRUFSLFVBQVVXLFdBQVcsb0JBQW9CSCxDQUFBQTtJQUN4QyxPQUFPLENBQUMscUJBQXFCLEVBQUVBLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFQSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUN0RCIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3N3YXJtLWpzL25vZGVfbW9kdWxlcy9odHRwMi13cmFwcGVyL3NvdXJjZS91dGlscy9lcnJvcnMuanM/ZTI5NiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vKiBpc3RhbmJ1bCBpZ25vcmUgZmlsZTogaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2Jsb2IvbWFzdGVyL2xpYi9pbnRlcm5hbC9lcnJvcnMuanMgKi9cblxuY29uc3QgbWFrZUVycm9yID0gKEJhc2UsIGtleSwgZ2V0TWVzc2FnZSkgPT4ge1xuXHRtb2R1bGUuZXhwb3J0c1trZXldID0gY2xhc3MgTm9kZUVycm9yIGV4dGVuZHMgQmFzZSB7XG5cdFx0Y29uc3RydWN0b3IoLi4uYXJncykge1xuXHRcdFx0c3VwZXIodHlwZW9mIGdldE1lc3NhZ2UgPT09ICdzdHJpbmcnID8gZ2V0TWVzc2FnZSA6IGdldE1lc3NhZ2UoYXJncykpO1xuXHRcdFx0dGhpcy5uYW1lID0gYCR7c3VwZXIubmFtZX0gWyR7a2V5fV1gO1xuXHRcdFx0dGhpcy5jb2RlID0ga2V5O1xuXHRcdH1cblx0fTtcbn07XG5cbm1ha2VFcnJvcihUeXBlRXJyb3IsICdFUlJfSU5WQUxJRF9BUkdfVFlQRScsIGFyZ3MgPT4ge1xuXHRjb25zdCB0eXBlID0gYXJnc1swXS5pbmNsdWRlcygnLicpID8gJ3Byb3BlcnR5JyA6ICdhcmd1bWVudCc7XG5cblx0bGV0IHZhbGlkID0gYXJnc1sxXTtcblx0Y29uc3QgaXNNYW55VHlwZXMgPSBBcnJheS5pc0FycmF5KHZhbGlkKTtcblxuXHRpZiAoaXNNYW55VHlwZXMpIHtcblx0XHR2YWxpZCA9IGAke3ZhbGlkLnNsaWNlKDAsIC0xKS5qb2luKCcsICcpfSBvciAke3ZhbGlkLnNsaWNlKC0xKX1gO1xuXHR9XG5cblx0cmV0dXJuIGBUaGUgXCIke2FyZ3NbMF19XCIgJHt0eXBlfSBtdXN0IGJlICR7aXNNYW55VHlwZXMgPyAnb25lIG9mJyA6ICdvZid9IHR5cGUgJHt2YWxpZH0uIFJlY2VpdmVkICR7dHlwZW9mIGFyZ3NbMl19YDtcbn0pO1xuXG5tYWtlRXJyb3IoVHlwZUVycm9yLCAnRVJSX0lOVkFMSURfUFJPVE9DT0wnLCBhcmdzID0+IHtcblx0cmV0dXJuIGBQcm90b2NvbCBcIiR7YXJnc1swXX1cIiBub3Qgc3VwcG9ydGVkLiBFeHBlY3RlZCBcIiR7YXJnc1sxXX1cImA7XG59KTtcblxubWFrZUVycm9yKEVycm9yLCAnRVJSX0hUVFBfSEVBREVSU19TRU5UJywgYXJncyA9PiB7XG5cdHJldHVybiBgQ2Fubm90ICR7YXJnc1swXX0gaGVhZGVycyBhZnRlciB0aGV5IGFyZSBzZW50IHRvIHRoZSBjbGllbnRgO1xufSk7XG5cbm1ha2VFcnJvcihUeXBlRXJyb3IsICdFUlJfSU5WQUxJRF9IVFRQX1RPS0VOJywgYXJncyA9PiB7XG5cdHJldHVybiBgJHthcmdzWzBdfSBtdXN0IGJlIGEgdmFsaWQgSFRUUCB0b2tlbiBbJHthcmdzWzFdfV1gO1xufSk7XG5cbm1ha2VFcnJvcihUeXBlRXJyb3IsICdFUlJfSFRUUF9JTlZBTElEX0hFQURFUl9WQUxVRScsIGFyZ3MgPT4ge1xuXHRyZXR1cm4gYEludmFsaWQgdmFsdWUgXCIke2FyZ3NbMF19IGZvciBoZWFkZXIgXCIke2FyZ3NbMV19XCJgO1xufSk7XG5cbm1ha2VFcnJvcihUeXBlRXJyb3IsICdFUlJfSU5WQUxJRF9DSEFSJywgYXJncyA9PiB7XG5cdHJldHVybiBgSW52YWxpZCBjaGFyYWN0ZXIgaW4gJHthcmdzWzBdfSBbJHthcmdzWzFdfV1gO1xufSk7XG4iXSwibmFtZXMiOlsibWFrZUVycm9yIiwiQmFzZSIsImtleSIsImdldE1lc3NhZ2UiLCJtb2R1bGUiLCJleHBvcnRzIiwiTm9kZUVycm9yIiwiY29uc3RydWN0b3IiLCJhcmdzIiwibmFtZSIsImNvZGUiLCJUeXBlRXJyb3IiLCJ0eXBlIiwiaW5jbHVkZXMiLCJ2YWxpZCIsImlzTWFueVR5cGVzIiwiQXJyYXkiLCJpc0FycmF5Iiwic2xpY2UiLCJqb2luIiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swarm-js/node_modules/http2-wrapper/source/utils/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/swarm-js/node_modules/http2-wrapper/source/utils/is-request-pseudo-header.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/swarm-js/node_modules/http2-wrapper/source/utils/is-request-pseudo-header.js ***!
  \***************************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\nmodule.exports = (header)=>{\n    switch(header){\n        case \":method\":\n        case \":scheme\":\n        case \":authority\":\n        case \":path\":\n            return true;\n        default:\n            return false;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dhcm0tanMvbm9kZV9tb2R1bGVzL2h0dHAyLXdyYXBwZXIvc291cmNlL3V0aWxzL2lzLXJlcXVlc3QtcHNldWRvLWhlYWRlci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSxPQUFPQyxPQUFPLEdBQUdDLENBQUFBO0lBQ2hCLE9BQVFBO1FBQ1AsS0FBSztRQUNMLEtBQUs7UUFDTCxLQUFLO1FBQ0wsS0FBSztZQUNKLE9BQU87UUFDUjtZQUNDLE9BQU87SUFDVDtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvc3dhcm0tanMvbm9kZV9tb2R1bGVzL2h0dHAyLXdyYXBwZXIvc291cmNlL3V0aWxzL2lzLXJlcXVlc3QtcHNldWRvLWhlYWRlci5qcz9iMTNmIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBoZWFkZXIgPT4ge1xuXHRzd2l0Y2ggKGhlYWRlcikge1xuXHRcdGNhc2UgJzptZXRob2QnOlxuXHRcdGNhc2UgJzpzY2hlbWUnOlxuXHRcdGNhc2UgJzphdXRob3JpdHknOlxuXHRcdGNhc2UgJzpwYXRoJzpcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImhlYWRlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swarm-js/node_modules/http2-wrapper/source/utils/is-request-pseudo-header.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/swarm-js/node_modules/http2-wrapper/source/utils/proxy-events.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/swarm-js/node_modules/http2-wrapper/source/utils/proxy-events.js ***!
  \***************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\nmodule.exports = (from, to, events)=>{\n    for (const event of events){\n        from.on(event, (...args)=>to.emit(event, ...args));\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dhcm0tanMvbm9kZV9tb2R1bGVzL2h0dHAyLXdyYXBwZXIvc291cmNlL3V0aWxzL3Byb3h5LWV2ZW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSxPQUFPQyxPQUFPLEdBQUcsQ0FBQ0MsTUFBTUMsSUFBSUM7SUFDM0IsS0FBSyxNQUFNQyxTQUFTRCxPQUFRO1FBQzNCRixLQUFLSSxFQUFFLENBQUNELE9BQU8sQ0FBQyxHQUFHRSxPQUFTSixHQUFHSyxJQUFJLENBQUNILFVBQVVFO0lBQy9DO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9zd2FybS1qcy9ub2RlX21vZHVsZXMvaHR0cDItd3JhcHBlci9zb3VyY2UvdXRpbHMvcHJveHktZXZlbnRzLmpzP2NlYTUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChmcm9tLCB0bywgZXZlbnRzKSA9PiB7XG5cdGZvciAoY29uc3QgZXZlbnQgb2YgZXZlbnRzKSB7XG5cdFx0ZnJvbS5vbihldmVudCwgKC4uLmFyZ3MpID0+IHRvLmVtaXQoZXZlbnQsIC4uLmFyZ3MpKTtcblx0fVxufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiZnJvbSIsInRvIiwiZXZlbnRzIiwiZXZlbnQiLCJvbiIsImFyZ3MiLCJlbWl0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swarm-js/node_modules/http2-wrapper/source/utils/proxy-events.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/swarm-js/node_modules/http2-wrapper/source/utils/url-to-options.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/swarm-js/node_modules/http2-wrapper/source/utils/url-to-options.js ***!
  \*****************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n/* istanbul ignore file: https://github.com/nodejs/node/blob/a91293d4d9ab403046ab5eb022332e4e3d249bd3/lib/internal/url.js#L1257 */ module.exports = (url)=>{\n    const options = {\n        protocol: url.protocol,\n        hostname: typeof url.hostname === \"string\" && url.hostname.startsWith(\"[\") ? url.hostname.slice(1, -1) : url.hostname,\n        host: url.host,\n        hash: url.hash,\n        search: url.search,\n        pathname: url.pathname,\n        href: url.href,\n        path: `${url.pathname || \"\"}${url.search || \"\"}`\n    };\n    if (typeof url.port === \"string\" && url.port.length !== 0) {\n        options.port = Number(url.port);\n    }\n    if (url.username || url.password) {\n        options.auth = `${url.username || \"\"}:${url.password || \"\"}`;\n    }\n    return options;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dhcm0tanMvbm9kZV9tb2R1bGVzL2h0dHAyLXdyYXBwZXIvc291cmNlL3V0aWxzL3VybC10by1vcHRpb25zLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsZ0lBQWdJLEdBRWhJQSxPQUFPQyxPQUFPLEdBQUdDLENBQUFBO0lBQ2hCLE1BQU1DLFVBQVU7UUFDZkMsVUFBVUYsSUFBSUUsUUFBUTtRQUN0QkMsVUFBVSxPQUFPSCxJQUFJRyxRQUFRLEtBQUssWUFBWUgsSUFBSUcsUUFBUSxDQUFDQyxVQUFVLENBQUMsT0FBT0osSUFBSUcsUUFBUSxDQUFDRSxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUtMLElBQUlHLFFBQVE7UUFDckhHLE1BQU1OLElBQUlNLElBQUk7UUFDZEMsTUFBTVAsSUFBSU8sSUFBSTtRQUNkQyxRQUFRUixJQUFJUSxNQUFNO1FBQ2xCQyxVQUFVVCxJQUFJUyxRQUFRO1FBQ3RCQyxNQUFNVixJQUFJVSxJQUFJO1FBQ2RDLE1BQU0sQ0FBQyxFQUFFWCxJQUFJUyxRQUFRLElBQUksR0FBRyxFQUFFVCxJQUFJUSxNQUFNLElBQUksR0FBRyxDQUFDO0lBQ2pEO0lBRUEsSUFBSSxPQUFPUixJQUFJWSxJQUFJLEtBQUssWUFBWVosSUFBSVksSUFBSSxDQUFDQyxNQUFNLEtBQUssR0FBRztRQUMxRFosUUFBUVcsSUFBSSxHQUFHRSxPQUFPZCxJQUFJWSxJQUFJO0lBQy9CO0lBRUEsSUFBSVosSUFBSWUsUUFBUSxJQUFJZixJQUFJZ0IsUUFBUSxFQUFFO1FBQ2pDZixRQUFRZ0IsSUFBSSxHQUFHLENBQUMsRUFBRWpCLElBQUllLFFBQVEsSUFBSSxHQUFHLENBQUMsRUFBRWYsSUFBSWdCLFFBQVEsSUFBSSxHQUFHLENBQUM7SUFDN0Q7SUFFQSxPQUFPZjtBQUNSIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvc3dhcm0tanMvbm9kZV9tb2R1bGVzL2h0dHAyLXdyYXBwZXIvc291cmNlL3V0aWxzL3VybC10by1vcHRpb25zLmpzPzZkOGUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuLyogaXN0YW5idWwgaWdub3JlIGZpbGU6IGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9ibG9iL2E5MTI5M2Q0ZDlhYjQwMzA0NmFiNWViMDIyMzMyZTRlM2QyNDliZDMvbGliL2ludGVybmFsL3VybC5qcyNMMTI1NyAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHVybCA9PiB7XG5cdGNvbnN0IG9wdGlvbnMgPSB7XG5cdFx0cHJvdG9jb2w6IHVybC5wcm90b2NvbCxcblx0XHRob3N0bmFtZTogdHlwZW9mIHVybC5ob3N0bmFtZSA9PT0gJ3N0cmluZycgJiYgdXJsLmhvc3RuYW1lLnN0YXJ0c1dpdGgoJ1snKSA/IHVybC5ob3N0bmFtZS5zbGljZSgxLCAtMSkgOiB1cmwuaG9zdG5hbWUsXG5cdFx0aG9zdDogdXJsLmhvc3QsXG5cdFx0aGFzaDogdXJsLmhhc2gsXG5cdFx0c2VhcmNoOiB1cmwuc2VhcmNoLFxuXHRcdHBhdGhuYW1lOiB1cmwucGF0aG5hbWUsXG5cdFx0aHJlZjogdXJsLmhyZWYsXG5cdFx0cGF0aDogYCR7dXJsLnBhdGhuYW1lIHx8ICcnfSR7dXJsLnNlYXJjaCB8fCAnJ31gXG5cdH07XG5cblx0aWYgKHR5cGVvZiB1cmwucG9ydCA9PT0gJ3N0cmluZycgJiYgdXJsLnBvcnQubGVuZ3RoICE9PSAwKSB7XG5cdFx0b3B0aW9ucy5wb3J0ID0gTnVtYmVyKHVybC5wb3J0KTtcblx0fVxuXG5cdGlmICh1cmwudXNlcm5hbWUgfHwgdXJsLnBhc3N3b3JkKSB7XG5cdFx0b3B0aW9ucy5hdXRoID0gYCR7dXJsLnVzZXJuYW1lIHx8ICcnfToke3VybC5wYXNzd29yZCB8fCAnJ31gO1xuXHR9XG5cblx0cmV0dXJuIG9wdGlvbnM7XG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJ1cmwiLCJvcHRpb25zIiwicHJvdG9jb2wiLCJob3N0bmFtZSIsInN0YXJ0c1dpdGgiLCJzbGljZSIsImhvc3QiLCJoYXNoIiwic2VhcmNoIiwicGF0aG5hbWUiLCJocmVmIiwicGF0aCIsInBvcnQiLCJsZW5ndGgiLCJOdW1iZXIiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwiYXV0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swarm-js/node_modules/http2-wrapper/source/utils/url-to-options.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/swarm-js/node_modules/lowercase-keys/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/swarm-js/node_modules/lowercase-keys/index.js ***!
  \********************************************************************/
/***/ ((module) => {

"use strict";
eval("\nmodule.exports = (object)=>{\n    const result = {};\n    for (const [key, value] of Object.entries(object)){\n        result[key.toLowerCase()] = value;\n    }\n    return result;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dhcm0tanMvbm9kZV9tb2R1bGVzL2xvd2VyY2FzZS1rZXlzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0FBLE9BQU9DLE9BQU8sR0FBR0MsQ0FBQUE7SUFDaEIsTUFBTUMsU0FBUyxDQUFDO0lBRWhCLEtBQUssTUFBTSxDQUFDQyxLQUFLQyxNQUFNLElBQUlDLE9BQU9DLE9BQU8sQ0FBQ0wsUUFBUztRQUNsREMsTUFBTSxDQUFDQyxJQUFJSSxXQUFXLEdBQUcsR0FBR0g7SUFDN0I7SUFFQSxPQUFPRjtBQUNSIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvc3dhcm0tanMvbm9kZV9tb2R1bGVzL2xvd2VyY2FzZS1rZXlzL2luZGV4LmpzP2FkNDUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSBvYmplY3QgPT4ge1xuXHRjb25zdCByZXN1bHQgPSB7fTtcblxuXHRmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhvYmplY3QpKSB7XG5cdFx0cmVzdWx0W2tleS50b0xvd2VyQ2FzZSgpXSA9IHZhbHVlO1xuXHR9XG5cblx0cmV0dXJuIHJlc3VsdDtcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIm9iamVjdCIsInJlc3VsdCIsImtleSIsInZhbHVlIiwiT2JqZWN0IiwiZW50cmllcyIsInRvTG93ZXJDYXNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swarm-js/node_modules/lowercase-keys/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/swarm-js/node_modules/p-cancelable/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/swarm-js/node_modules/p-cancelable/index.js ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
eval("\nclass CancelError extends Error {\n    constructor(reason){\n        super(reason || \"Promise was canceled\");\n        this.name = \"CancelError\";\n    }\n    get isCanceled() {\n        return true;\n    }\n}\nclass PCancelable {\n    static fn(userFn) {\n        return (...arguments_)=>{\n            return new PCancelable((resolve, reject, onCancel)=>{\n                arguments_.push(onCancel);\n                // eslint-disable-next-line promise/prefer-await-to-then\n                userFn(...arguments_).then(resolve, reject);\n            });\n        };\n    }\n    constructor(executor){\n        this._cancelHandlers = [];\n        this._isPending = true;\n        this._isCanceled = false;\n        this._rejectOnCancel = true;\n        this._promise = new Promise((resolve, reject)=>{\n            this._reject = reject;\n            const onResolve = (value)=>{\n                if (!this._isCanceled || !onCancel.shouldReject) {\n                    this._isPending = false;\n                    resolve(value);\n                }\n            };\n            const onReject = (error)=>{\n                this._isPending = false;\n                reject(error);\n            };\n            const onCancel = (handler)=>{\n                if (!this._isPending) {\n                    throw new Error(\"The `onCancel` handler was attached after the promise settled.\");\n                }\n                this._cancelHandlers.push(handler);\n            };\n            Object.defineProperties(onCancel, {\n                shouldReject: {\n                    get: ()=>this._rejectOnCancel,\n                    set: (boolean)=>{\n                        this._rejectOnCancel = boolean;\n                    }\n                }\n            });\n            return executor(onResolve, onReject, onCancel);\n        });\n    }\n    then(onFulfilled, onRejected) {\n        // eslint-disable-next-line promise/prefer-await-to-then\n        return this._promise.then(onFulfilled, onRejected);\n    }\n    catch(onRejected) {\n        return this._promise.catch(onRejected);\n    }\n    finally(onFinally) {\n        return this._promise.finally(onFinally);\n    }\n    cancel(reason) {\n        if (!this._isPending || this._isCanceled) {\n            return;\n        }\n        this._isCanceled = true;\n        if (this._cancelHandlers.length > 0) {\n            try {\n                for (const handler of this._cancelHandlers){\n                    handler();\n                }\n            } catch (error) {\n                this._reject(error);\n                return;\n            }\n        }\n        if (this._rejectOnCancel) {\n            this._reject(new CancelError(reason));\n        }\n    }\n    get isCanceled() {\n        return this._isCanceled;\n    }\n}\nObject.setPrototypeOf(PCancelable.prototype, Promise.prototype);\nmodule.exports = PCancelable;\nmodule.exports.CancelError = CancelError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dhcm0tanMvbm9kZV9tb2R1bGVzL3AtY2FuY2VsYWJsZS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLG9CQUFvQkM7SUFDekJDLFlBQVlDLE1BQU0sQ0FBRTtRQUNuQixLQUFLLENBQUNBLFVBQVU7UUFDaEIsSUFBSSxDQUFDQyxJQUFJLEdBQUc7SUFDYjtJQUVBLElBQUlDLGFBQWE7UUFDaEIsT0FBTztJQUNSO0FBQ0Q7QUFFQSxNQUFNQztJQUNMLE9BQU9DLEdBQUdDLE1BQU0sRUFBRTtRQUNqQixPQUFPLENBQUMsR0FBR0M7WUFDVixPQUFPLElBQUlILFlBQVksQ0FBQ0ksU0FBU0MsUUFBUUM7Z0JBQ3hDSCxXQUFXSSxJQUFJLENBQUNEO2dCQUNoQix3REFBd0Q7Z0JBQ3hESixVQUFVQyxZQUFZSyxJQUFJLENBQUNKLFNBQVNDO1lBQ3JDO1FBQ0Q7SUFDRDtJQUVBVCxZQUFZYSxRQUFRLENBQUU7UUFDckIsSUFBSSxDQUFDQyxlQUFlLEdBQUcsRUFBRTtRQUN6QixJQUFJLENBQUNDLFVBQVUsR0FBRztRQUNsQixJQUFJLENBQUNDLFdBQVcsR0FBRztRQUNuQixJQUFJLENBQUNDLGVBQWUsR0FBRztRQUV2QixJQUFJLENBQUNDLFFBQVEsR0FBRyxJQUFJQyxRQUFRLENBQUNYLFNBQVNDO1lBQ3JDLElBQUksQ0FBQ1csT0FBTyxHQUFHWDtZQUVmLE1BQU1ZLFlBQVlDLENBQUFBO2dCQUNqQixJQUFJLENBQUMsSUFBSSxDQUFDTixXQUFXLElBQUksQ0FBQ04sU0FBU2EsWUFBWSxFQUFFO29CQUNoRCxJQUFJLENBQUNSLFVBQVUsR0FBRztvQkFDbEJQLFFBQVFjO2dCQUNUO1lBQ0Q7WUFFQSxNQUFNRSxXQUFXQyxDQUFBQTtnQkFDaEIsSUFBSSxDQUFDVixVQUFVLEdBQUc7Z0JBQ2xCTixPQUFPZ0I7WUFDUjtZQUVBLE1BQU1mLFdBQVdnQixDQUFBQTtnQkFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQ1gsVUFBVSxFQUFFO29CQUNyQixNQUFNLElBQUloQixNQUFNO2dCQUNqQjtnQkFFQSxJQUFJLENBQUNlLGVBQWUsQ0FBQ0gsSUFBSSxDQUFDZTtZQUMzQjtZQUVBQyxPQUFPQyxnQkFBZ0IsQ0FBQ2xCLFVBQVU7Z0JBQ2pDYSxjQUFjO29CQUNiTSxLQUFLLElBQU0sSUFBSSxDQUFDWixlQUFlO29CQUMvQmEsS0FBS0MsQ0FBQUE7d0JBQ0osSUFBSSxDQUFDZCxlQUFlLEdBQUdjO29CQUN4QjtnQkFDRDtZQUNEO1lBRUEsT0FBT2xCLFNBQVNRLFdBQVdHLFVBQVVkO1FBQ3RDO0lBQ0Q7SUFFQUUsS0FBS29CLFdBQVcsRUFBRUMsVUFBVSxFQUFFO1FBQzdCLHdEQUF3RDtRQUN4RCxPQUFPLElBQUksQ0FBQ2YsUUFBUSxDQUFDTixJQUFJLENBQUNvQixhQUFhQztJQUN4QztJQUVBQyxNQUFNRCxVQUFVLEVBQUU7UUFDakIsT0FBTyxJQUFJLENBQUNmLFFBQVEsQ0FBQ2dCLEtBQUssQ0FBQ0Q7SUFDNUI7SUFFQUUsUUFBUUMsU0FBUyxFQUFFO1FBQ2xCLE9BQU8sSUFBSSxDQUFDbEIsUUFBUSxDQUFDaUIsT0FBTyxDQUFDQztJQUM5QjtJQUVBQyxPQUFPcEMsTUFBTSxFQUFFO1FBQ2QsSUFBSSxDQUFDLElBQUksQ0FBQ2MsVUFBVSxJQUFJLElBQUksQ0FBQ0MsV0FBVyxFQUFFO1lBQ3pDO1FBQ0Q7UUFFQSxJQUFJLENBQUNBLFdBQVcsR0FBRztRQUVuQixJQUFJLElBQUksQ0FBQ0YsZUFBZSxDQUFDd0IsTUFBTSxHQUFHLEdBQUc7WUFDcEMsSUFBSTtnQkFDSCxLQUFLLE1BQU1aLFdBQVcsSUFBSSxDQUFDWixlQUFlLENBQUU7b0JBQzNDWTtnQkFDRDtZQUNELEVBQUUsT0FBT0QsT0FBTztnQkFDZixJQUFJLENBQUNMLE9BQU8sQ0FBQ0s7Z0JBQ2I7WUFDRDtRQUNEO1FBRUEsSUFBSSxJQUFJLENBQUNSLGVBQWUsRUFBRTtZQUN6QixJQUFJLENBQUNHLE9BQU8sQ0FBQyxJQUFJdEIsWUFBWUc7UUFDOUI7SUFDRDtJQUVBLElBQUlFLGFBQWE7UUFDaEIsT0FBTyxJQUFJLENBQUNhLFdBQVc7SUFDeEI7QUFDRDtBQUVBVyxPQUFPWSxjQUFjLENBQUNuQyxZQUFZb0MsU0FBUyxFQUFFckIsUUFBUXFCLFNBQVM7QUFFOURDLE9BQU9DLE9BQU8sR0FBR3RDO0FBQ2pCcUMsMEJBQTBCLEdBQUczQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3N3YXJtLWpzL25vZGVfbW9kdWxlcy9wLWNhbmNlbGFibGUvaW5kZXguanM/MDBiNCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNsYXNzIENhbmNlbEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuXHRjb25zdHJ1Y3RvcihyZWFzb24pIHtcblx0XHRzdXBlcihyZWFzb24gfHwgJ1Byb21pc2Ugd2FzIGNhbmNlbGVkJyk7XG5cdFx0dGhpcy5uYW1lID0gJ0NhbmNlbEVycm9yJztcblx0fVxuXG5cdGdldCBpc0NhbmNlbGVkKCkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG59XG5cbmNsYXNzIFBDYW5jZWxhYmxlIHtcblx0c3RhdGljIGZuKHVzZXJGbikge1xuXHRcdHJldHVybiAoLi4uYXJndW1lbnRzXykgPT4ge1xuXHRcdFx0cmV0dXJuIG5ldyBQQ2FuY2VsYWJsZSgocmVzb2x2ZSwgcmVqZWN0LCBvbkNhbmNlbCkgPT4ge1xuXHRcdFx0XHRhcmd1bWVudHNfLnB1c2gob25DYW5jZWwpO1xuXHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJvbWlzZS9wcmVmZXItYXdhaXQtdG8tdGhlblxuXHRcdFx0XHR1c2VyRm4oLi4uYXJndW1lbnRzXykudGhlbihyZXNvbHZlLCByZWplY3QpO1xuXHRcdFx0fSk7XG5cdFx0fTtcblx0fVxuXG5cdGNvbnN0cnVjdG9yKGV4ZWN1dG9yKSB7XG5cdFx0dGhpcy5fY2FuY2VsSGFuZGxlcnMgPSBbXTtcblx0XHR0aGlzLl9pc1BlbmRpbmcgPSB0cnVlO1xuXHRcdHRoaXMuX2lzQ2FuY2VsZWQgPSBmYWxzZTtcblx0XHR0aGlzLl9yZWplY3RPbkNhbmNlbCA9IHRydWU7XG5cblx0XHR0aGlzLl9wcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdFx0dGhpcy5fcmVqZWN0ID0gcmVqZWN0O1xuXG5cdFx0XHRjb25zdCBvblJlc29sdmUgPSB2YWx1ZSA9PiB7XG5cdFx0XHRcdGlmICghdGhpcy5faXNDYW5jZWxlZCB8fCAhb25DYW5jZWwuc2hvdWxkUmVqZWN0KSB7XG5cdFx0XHRcdFx0dGhpcy5faXNQZW5kaW5nID0gZmFsc2U7XG5cdFx0XHRcdFx0cmVzb2x2ZSh2YWx1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRcdGNvbnN0IG9uUmVqZWN0ID0gZXJyb3IgPT4ge1xuXHRcdFx0XHR0aGlzLl9pc1BlbmRpbmcgPSBmYWxzZTtcblx0XHRcdFx0cmVqZWN0KGVycm9yKTtcblx0XHRcdH07XG5cblx0XHRcdGNvbnN0IG9uQ2FuY2VsID0gaGFuZGxlciA9PiB7XG5cdFx0XHRcdGlmICghdGhpcy5faXNQZW5kaW5nKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdUaGUgYG9uQ2FuY2VsYCBoYW5kbGVyIHdhcyBhdHRhY2hlZCBhZnRlciB0aGUgcHJvbWlzZSBzZXR0bGVkLicpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGhpcy5fY2FuY2VsSGFuZGxlcnMucHVzaChoYW5kbGVyKTtcblx0XHRcdH07XG5cblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKG9uQ2FuY2VsLCB7XG5cdFx0XHRcdHNob3VsZFJlamVjdDoge1xuXHRcdFx0XHRcdGdldDogKCkgPT4gdGhpcy5fcmVqZWN0T25DYW5jZWwsXG5cdFx0XHRcdFx0c2V0OiBib29sZWFuID0+IHtcblx0XHRcdFx0XHRcdHRoaXMuX3JlamVjdE9uQ2FuY2VsID0gYm9vbGVhbjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRyZXR1cm4gZXhlY3V0b3Iob25SZXNvbHZlLCBvblJlamVjdCwgb25DYW5jZWwpO1xuXHRcdH0pO1xuXHR9XG5cblx0dGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcm9taXNlL3ByZWZlci1hd2FpdC10by10aGVuXG5cdFx0cmV0dXJuIHRoaXMuX3Byb21pc2UudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCk7XG5cdH1cblxuXHRjYXRjaChvblJlamVjdGVkKSB7XG5cdFx0cmV0dXJuIHRoaXMuX3Byb21pc2UuY2F0Y2gob25SZWplY3RlZCk7XG5cdH1cblxuXHRmaW5hbGx5KG9uRmluYWxseSkge1xuXHRcdHJldHVybiB0aGlzLl9wcm9taXNlLmZpbmFsbHkob25GaW5hbGx5KTtcblx0fVxuXG5cdGNhbmNlbChyZWFzb24pIHtcblx0XHRpZiAoIXRoaXMuX2lzUGVuZGluZyB8fCB0aGlzLl9pc0NhbmNlbGVkKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dGhpcy5faXNDYW5jZWxlZCA9IHRydWU7XG5cblx0XHRpZiAodGhpcy5fY2FuY2VsSGFuZGxlcnMubGVuZ3RoID4gMCkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Zm9yIChjb25zdCBoYW5kbGVyIG9mIHRoaXMuX2NhbmNlbEhhbmRsZXJzKSB7XG5cdFx0XHRcdFx0aGFuZGxlcigpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0XHR0aGlzLl9yZWplY3QoZXJyb3IpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuX3JlamVjdE9uQ2FuY2VsKSB7XG5cdFx0XHR0aGlzLl9yZWplY3QobmV3IENhbmNlbEVycm9yKHJlYXNvbikpO1xuXHRcdH1cblx0fVxuXG5cdGdldCBpc0NhbmNlbGVkKCkge1xuXHRcdHJldHVybiB0aGlzLl9pc0NhbmNlbGVkO1xuXHR9XG59XG5cbk9iamVjdC5zZXRQcm90b3R5cGVPZihQQ2FuY2VsYWJsZS5wcm90b3R5cGUsIFByb21pc2UucHJvdG90eXBlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBQQ2FuY2VsYWJsZTtcbm1vZHVsZS5leHBvcnRzLkNhbmNlbEVycm9yID0gQ2FuY2VsRXJyb3I7XG4iXSwibmFtZXMiOlsiQ2FuY2VsRXJyb3IiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwicmVhc29uIiwibmFtZSIsImlzQ2FuY2VsZWQiLCJQQ2FuY2VsYWJsZSIsImZuIiwidXNlckZuIiwiYXJndW1lbnRzXyIsInJlc29sdmUiLCJyZWplY3QiLCJvbkNhbmNlbCIsInB1c2giLCJ0aGVuIiwiZXhlY3V0b3IiLCJfY2FuY2VsSGFuZGxlcnMiLCJfaXNQZW5kaW5nIiwiX2lzQ2FuY2VsZWQiLCJfcmVqZWN0T25DYW5jZWwiLCJfcHJvbWlzZSIsIlByb21pc2UiLCJfcmVqZWN0Iiwib25SZXNvbHZlIiwidmFsdWUiLCJzaG91bGRSZWplY3QiLCJvblJlamVjdCIsImVycm9yIiwiaGFuZGxlciIsIk9iamVjdCIsImRlZmluZVByb3BlcnRpZXMiLCJnZXQiLCJzZXQiLCJib29sZWFuIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwiY2F0Y2giLCJmaW5hbGx5Iiwib25GaW5hbGx5IiwiY2FuY2VsIiwibGVuZ3RoIiwic2V0UHJvdG90eXBlT2YiLCJwcm90b3R5cGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swarm-js/node_modules/p-cancelable/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/swarm-js/archives/archives.json":
/*!******************************************************!*\
  !*** ./node_modules/swarm-js/archives/archives.json ***!
  \******************************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"windows-amd64":{"archive":"swarm-windows-amd64-1.6.7.exe","binaryMD5":"c2d827dc4553d9b91a7d6c1d5a6140fd","archiveMD5":"059196d21548060a18a12e17cc0ee59a"},"linux-amd64":{"archive":"swarm-linux-amd64-1.6.7","binaryMD5":"85002d79b8ebc2d2f2f10fb198636a81","archiveMD5":"3e8874299ab8c0e3043d70ebb6673879"},"linux-386":{"archive":"swarm-linux-386-1.6.7","binaryMD5":"35bc2ab976f60f96a2cede117e0df19d","archiveMD5":"7868a86c9cbdf8ac7ac2e5682b4ce40f"},"darwin-amd64":{"archive":"swarm-darwin-amd64-1.6.7","binaryMD5":"c499b186645229260dd6ab685dd58f07","archiveMD5":"0794d111e5018eac3b657bcb29851121"},"linux-arm5":{"archive":"swarm-linux-arm5-1.6.7","binaryMD5":"516fcd85246c905529442cd9b689c12f","archiveMD5":"47312708d417cb196b07ba0af1d3abb4"},"linux-arm6":{"archive":"swarm-linux-arm6-1.6.7","binaryMD5":"82ff7bdbe388b4a190f4101c5150d3b4","archiveMD5":"350276de7bb175a15c314cfc4cb7f8fd"},"linux-mips":{"archive":"swarm-linux-mips-1.6.7","binaryMD5":"e1e95280441c0ca35633927792ef5317","archiveMD5":"8fb4b64e94cd73aa718db787b9d4c53e"},"linux-arm7":{"archive":"swarm-linux-arm7-1.6.7","binaryMD5":"bfc0b4d1c86d8a975af052fc7854bdd3","archiveMD5":"4378641d8e1e1fbb947f941c8fca8613"},"linux-arm64":{"archive":"swarm-linux-arm64-1.6.7","binaryMD5":"bbac21a6c6fa8208f67ca4123d3f948a","archiveMD5":"4e503160327c5fbcca0414f17c54e5ee"},"linux-mipsle":{"archive":"swarm-linux-mipsle-1.6.7","binaryMD5":"a82f191b2f9d2c470d0273219c820657","archiveMD5":"3016bdb6d237ae654c0cdf36fe85dc7c"},"windows-386":{"archive":"swarm-windows-386-1.6.7.exe","binaryMD5":"ce0b34640642e58068ae5a359faef102","archiveMD5":"640aede4da08a3a9d8a6ac0434ba7c0f"},"linux-mips64":{"archive":"swarm-linux-mips64-1.6.7","binaryMD5":"9da967664f384817adb5083fd1ffe8f1","archiveMD5":"357a33be470f8f89ba2619957a08deff"},"linux-mips64le":{"archive":"swarm-linux-mips64le-1.6.7","binaryMD5":"ec1abcf7b216e87645ec83954d8344cd","archiveMD5":"a81fd0158190d99813c738ffa4f87627"}}');

/***/ })

};
;