"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/normalize-url";
exports.ids = ["vendor-chunks/normalize-url"];
exports.modules = {

/***/ "(ssr)/./node_modules/normalize-url/index.js":
/*!*********************************************!*\
  !*** ./node_modules/normalize-url/index.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n// https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\nconst DATA_URL_DEFAULT_MIME_TYPE = \"text/plain\";\nconst DATA_URL_DEFAULT_CHARSET = \"us-ascii\";\nconst testParameter = (name, filters)=>{\n    return filters.some((filter)=>filter instanceof RegExp ? filter.test(name) : filter === name);\n};\nconst normalizeDataURL = (urlString, { stripHash })=>{\n    const match = /^data:(?<type>[^,]*?),(?<data>[^#]*?)(?:#(?<hash>.*))?$/.exec(urlString);\n    if (!match) {\n        throw new Error(`Invalid URL: ${urlString}`);\n    }\n    let { type, data, hash } = match.groups;\n    const mediaType = type.split(\";\");\n    hash = stripHash ? \"\" : hash;\n    let isBase64 = false;\n    if (mediaType[mediaType.length - 1] === \"base64\") {\n        mediaType.pop();\n        isBase64 = true;\n    }\n    // Lowercase MIME type\n    const mimeType = (mediaType.shift() || \"\").toLowerCase();\n    const attributes = mediaType.map((attribute)=>{\n        let [key, value = \"\"] = attribute.split(\"=\").map((string)=>string.trim());\n        // Lowercase `charset`\n        if (key === \"charset\") {\n            value = value.toLowerCase();\n            if (value === DATA_URL_DEFAULT_CHARSET) {\n                return \"\";\n            }\n        }\n        return `${key}${value ? `=${value}` : \"\"}`;\n    }).filter(Boolean);\n    const normalizedMediaType = [\n        ...attributes\n    ];\n    if (isBase64) {\n        normalizedMediaType.push(\"base64\");\n    }\n    if (normalizedMediaType.length !== 0 || mimeType && mimeType !== DATA_URL_DEFAULT_MIME_TYPE) {\n        normalizedMediaType.unshift(mimeType);\n    }\n    return `data:${normalizedMediaType.join(\";\")},${isBase64 ? data.trim() : data}${hash ? `#${hash}` : \"\"}`;\n};\nconst normalizeUrl = (urlString, options)=>{\n    options = {\n        defaultProtocol: \"http:\",\n        normalizeProtocol: true,\n        forceHttp: false,\n        forceHttps: false,\n        stripAuthentication: true,\n        stripHash: false,\n        stripTextFragment: true,\n        stripWWW: true,\n        removeQueryParameters: [\n            /^utm_\\w+/i\n        ],\n        removeTrailingSlash: true,\n        removeSingleSlash: true,\n        removeDirectoryIndex: false,\n        sortQueryParameters: true,\n        ...options\n    };\n    urlString = urlString.trim();\n    // Data URL\n    if (/^data:/i.test(urlString)) {\n        return normalizeDataURL(urlString, options);\n    }\n    if (/^view-source:/i.test(urlString)) {\n        throw new Error(\"`view-source:` is not supported as it is a non-standard protocol\");\n    }\n    const hasRelativeProtocol = urlString.startsWith(\"//\");\n    const isRelativeUrl = !hasRelativeProtocol && /^\\.*\\//.test(urlString);\n    // Prepend protocol\n    if (!isRelativeUrl) {\n        urlString = urlString.replace(/^(?!(?:\\w+:)?\\/\\/)|^\\/\\//, options.defaultProtocol);\n    }\n    const urlObj = new URL(urlString);\n    if (options.forceHttp && options.forceHttps) {\n        throw new Error(\"The `forceHttp` and `forceHttps` options cannot be used together\");\n    }\n    if (options.forceHttp && urlObj.protocol === \"https:\") {\n        urlObj.protocol = \"http:\";\n    }\n    if (options.forceHttps && urlObj.protocol === \"http:\") {\n        urlObj.protocol = \"https:\";\n    }\n    // Remove auth\n    if (options.stripAuthentication) {\n        urlObj.username = \"\";\n        urlObj.password = \"\";\n    }\n    // Remove hash\n    if (options.stripHash) {\n        urlObj.hash = \"\";\n    } else if (options.stripTextFragment) {\n        urlObj.hash = urlObj.hash.replace(/#?:~:text.*?$/i, \"\");\n    }\n    // Remove duplicate slashes if not preceded by a protocol\n    if (urlObj.pathname) {\n        urlObj.pathname = urlObj.pathname.replace(/(?<!\\b(?:[a-z][a-z\\d+\\-.]{1,50}:))\\/{2,}/g, \"/\");\n    }\n    // Decode URI octets\n    if (urlObj.pathname) {\n        try {\n            urlObj.pathname = decodeURI(urlObj.pathname);\n        } catch (_) {}\n    }\n    // Remove directory index\n    if (options.removeDirectoryIndex === true) {\n        options.removeDirectoryIndex = [\n            /^index\\.[a-z]+$/\n        ];\n    }\n    if (Array.isArray(options.removeDirectoryIndex) && options.removeDirectoryIndex.length > 0) {\n        let pathComponents = urlObj.pathname.split(\"/\");\n        const lastComponent = pathComponents[pathComponents.length - 1];\n        if (testParameter(lastComponent, options.removeDirectoryIndex)) {\n            pathComponents = pathComponents.slice(0, pathComponents.length - 1);\n            urlObj.pathname = pathComponents.slice(1).join(\"/\") + \"/\";\n        }\n    }\n    if (urlObj.hostname) {\n        // Remove trailing dot\n        urlObj.hostname = urlObj.hostname.replace(/\\.$/, \"\");\n        // Remove `www.`\n        if (options.stripWWW && /^www\\.(?!www\\.)(?:[a-z\\-\\d]{1,63})\\.(?:[a-z.\\-\\d]{2,63})$/.test(urlObj.hostname)) {\n            // Each label should be max 63 at length (min: 1).\n            // Source: https://en.wikipedia.org/wiki/Hostname#Restrictions_on_valid_host_names\n            // Each TLD should be up to 63 characters long (min: 2).\n            // It is technically possible to have a single character TLD, but none currently exist.\n            urlObj.hostname = urlObj.hostname.replace(/^www\\./, \"\");\n        }\n    }\n    // Remove query unwanted parameters\n    if (Array.isArray(options.removeQueryParameters)) {\n        for (const key of [\n            ...urlObj.searchParams.keys()\n        ]){\n            if (testParameter(key, options.removeQueryParameters)) {\n                urlObj.searchParams.delete(key);\n            }\n        }\n    }\n    if (options.removeQueryParameters === true) {\n        urlObj.search = \"\";\n    }\n    // Sort query parameters\n    if (options.sortQueryParameters) {\n        urlObj.searchParams.sort();\n    }\n    if (options.removeTrailingSlash) {\n        urlObj.pathname = urlObj.pathname.replace(/\\/$/, \"\");\n    }\n    const oldUrlString = urlString;\n    // Take advantage of many of the Node `url` normalizations\n    urlString = urlObj.toString();\n    if (!options.removeSingleSlash && urlObj.pathname === \"/\" && !oldUrlString.endsWith(\"/\") && urlObj.hash === \"\") {\n        urlString = urlString.replace(/\\/$/, \"\");\n    }\n    // Remove ending `/` unless removeSingleSlash is false\n    if ((options.removeTrailingSlash || urlObj.pathname === \"/\") && urlObj.hash === \"\" && options.removeSingleSlash) {\n        urlString = urlString.replace(/\\/$/, \"\");\n    }\n    // Restore relative protocol, if applicable\n    if (hasRelativeProtocol && !options.normalizeProtocol) {\n        urlString = urlString.replace(/^http:\\/\\//, \"//\");\n    }\n    // Remove http/https\n    if (options.stripProtocol) {\n        urlString = urlString.replace(/^(?:https?:)?\\/\\//, \"\");\n    }\n    return urlString;\n};\nmodule.exports = normalizeUrl;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/normalize-url/index.js\n");

/***/ })

};
;