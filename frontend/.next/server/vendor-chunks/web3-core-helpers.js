"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/web3-core-helpers";
exports.ids = ["vendor-chunks/web3-core-helpers"];
exports.modules = {

/***/ "(ssr)/./node_modules/web3-core-helpers/lib/errors.js":
/*!******************************************************!*\
  !*** ./node_modules/web3-core-helpers/lib/errors.js ***!
  \******************************************************/
/***/ ((module) => {

eval("/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ /**\n * @file errors.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */ \nmodule.exports = {\n    ErrorResponse: function(result) {\n        var message = !!result && !!result.error && !!result.error.message ? result.error.message : JSON.stringify(result);\n        var data = !!result.error && !!result.error.data ? result.error.data : null;\n        var err = new Error(\"Returned error: \" + message);\n        err.data = data;\n        return err;\n    },\n    InvalidNumberOfParams: function(got, expected, method) {\n        return new Error('Invalid number of parameters for \"' + method + '\". Got ' + got + \" expected \" + expected + \"!\");\n    },\n    InvalidConnection: function(host, event) {\n        return this.ConnectionError(\"CONNECTION ERROR: Couldn't connect to node \" + host + \".\", event);\n    },\n    InvalidProvider: function() {\n        return new Error(\"Provider not set or invalid\");\n    },\n    InvalidResponse: function(result) {\n        var message = !!result && !!result.error && !!result.error.message ? result.error.message : \"Invalid JSON RPC response: \" + JSON.stringify(result);\n        return new Error(message);\n    },\n    ConnectionTimeout: function(ms) {\n        return new Error(\"CONNECTION TIMEOUT: timeout of \" + ms + \" ms achived\");\n    },\n    ConnectionNotOpenError: function(event) {\n        return this.ConnectionError(\"connection not open on send()\", event);\n    },\n    ConnectionCloseError: function(event) {\n        if (typeof event === \"object\" && event.code && event.reason) {\n            return this.ConnectionError(\"CONNECTION ERROR: The connection got closed with \" + \"the close code `\" + event.code + \"` and the following \" + \"reason string `\" + event.reason + \"`\", event);\n        }\n        return new Error(\"CONNECTION ERROR: The connection closed unexpectedly\");\n    },\n    MaxAttemptsReachedOnReconnectingError: function() {\n        return new Error(\"Maximum number of reconnect attempts reached!\");\n    },\n    PendingRequestsOnReconnectingError: function() {\n        return new Error(\"CONNECTION ERROR: Provider started to reconnect before the response got received!\");\n    },\n    ConnectionError: function(msg, event) {\n        const error = new Error(msg);\n        if (event) {\n            error.code = event.code;\n            error.reason = event.reason;\n            if (event.description) {\n                error.description = event.description;\n            }\n        }\n        return error;\n    },\n    RevertInstructionError: function(reason, signature) {\n        var error = new Error(\"Your request got reverted with the following reason string: \" + reason);\n        error.reason = reason;\n        error.signature = signature;\n        return error;\n    },\n    TransactionRevertInstructionError: function(reason, signature, receipt) {\n        var error = new Error(\"Transaction has been reverted by the EVM:\\n\" + JSON.stringify(receipt, null, 2));\n        error.reason = reason;\n        error.signature = signature;\n        error.receipt = receipt;\n        return error;\n    },\n    TransactionError: function(message, receipt) {\n        var error = new Error(message);\n        error.receipt = receipt;\n        return error;\n    },\n    NoContractAddressFoundError: function(receipt) {\n        return this.TransactionError(\"The transaction receipt didn't contain a contract address.\", receipt);\n    },\n    ContractCodeNotStoredError: function(receipt) {\n        return this.TransactionError(\"The contract code couldn't be stored, please check your gas limit.\", receipt);\n    },\n    TransactionRevertedWithoutReasonError: function(receipt) {\n        return this.TransactionError(\"Transaction has been reverted by the EVM:\\n\" + JSON.stringify(receipt, null, 2), receipt);\n    },\n    TransactionOutOfGasError: function(receipt) {\n        return this.TransactionError(\"Transaction ran out of gas. Please provide more gas:\\n\" + JSON.stringify(receipt, null, 2), receipt);\n    },\n    ResolverMethodMissingError: function(address, name) {\n        return new Error(\"The resolver at \" + address + 'does not implement requested method: \"' + name + '\".');\n    },\n    ContractMissingABIError: function() {\n        return new Error(\"You must provide the json interface of the contract when instantiating a contract object.\");\n    },\n    ContractOnceRequiresCallbackError: function() {\n        return new Error(\"Once requires a callback as the second parameter.\");\n    },\n    ContractEventDoesNotExistError: function(eventName) {\n        return new Error('Event \"' + eventName + \"\\\" doesn't exist in this contract.\");\n    },\n    ContractReservedEventError: function(type) {\n        return new Error('The event \"' + type + \"\\\" is a reserved event name, you can't use it.\");\n    },\n    ContractMissingDeployDataError: function() {\n        return new Error('No \"data\" specified in neither the given options, nor the default options.');\n    },\n    ContractNoAddressDefinedError: function() {\n        return new Error(\"This contract object doesn't have address set yet, please set an address first.\");\n    },\n    ContractNoFromAddressDefinedError: function() {\n        return new Error('No \"from\" address specified in neither the given options, nor the default options.');\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-core-helpers/lib/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-core-helpers/lib/formatters.js":
/*!**********************************************************!*\
  !*** ./node_modules/web3-core-helpers/lib/formatters.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ /**\n * @file formatters.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */ \nvar utils = __webpack_require__(/*! web3-utils */ \"(ssr)/./node_modules/web3-utils/lib/index.js\");\nvar Iban = __webpack_require__(/*! web3-eth-iban */ \"(ssr)/./node_modules/web3-core-helpers/node_modules/web3-eth-iban/lib/index.js\");\n/**\n * Will format the given storage key array values to hex strings.\n *\n * @method inputStorageKeysFormatter\n *\n * @param {Array<Number|String|BN|BigNumber>} keys\n *\n * @returns {Array<String>}\n */ var inputStorageKeysFormatter = function(keys) {\n    return keys.map(utils.numberToHex);\n};\n/**\n * Will format the given proof response from the node.\n *\n * @method outputProofFormatter\n *\n * @param {object} proof\n *\n * @returns {object}\n */ var outputProofFormatter = function(proof) {\n    proof.address = utils.toChecksumAddress(proof.address);\n    proof.nonce = utils.hexToNumberString(proof.nonce);\n    proof.balance = utils.hexToNumberString(proof.balance);\n    return proof;\n};\n/**\n * Should the format output to a big number\n *\n * @method outputBigNumberFormatter\n *\n * @param {String|Number|BigNumber|BN} number\n *\n * @returns {BN} object\n */ var outputBigNumberFormatter = function(number) {\n    return utils.toBN(number).toString(10);\n};\n/**\n * Returns true if the given blockNumber is 'latest', 'pending', 'earliest, 'finalized' or 'safe'\n *\n * @method isPredefinedBlockNumber\n *\n * @param {String} blockNumber\n *\n * @returns {Boolean}\n */ var isPredefinedBlockNumber = function(blockNumber) {\n    return [\n        \"latest\",\n        \"pending\",\n        \"earliest\",\n        \"finalized\",\n        \"safe\"\n    ].includes(blockNumber);\n};\n/**\n * Returns the given block number as hex string or does return the defaultBlock property of the current module\n *\n * @method inputDefaultBlockNumberFormatter\n *\n * @param {String|Number|BN|BigNumber} blockNumber\n *\n * @returns {String}\n */ var inputDefaultBlockNumberFormatter = function(blockNumber) {\n    if (this && (blockNumber === undefined || blockNumber === null)) {\n        return inputBlockNumberFormatter(this.defaultBlock);\n    }\n    return inputBlockNumberFormatter(blockNumber);\n};\n/**\n * Returns the given block number as hex string or the predefined block number 'latest', 'pending', 'earliest', 'finalized', 'safe', 'genesis'\n *\n * @param {String|Number|BN|BigNumber} blockNumber\n *\n * @returns {String}\n */ var inputBlockNumberFormatter = function(blockNumber) {\n    if (blockNumber === undefined) {\n        return undefined;\n    }\n    if (isPredefinedBlockNumber(blockNumber)) {\n        return blockNumber;\n    }\n    if (blockNumber === \"genesis\") {\n        return \"0x0\";\n    }\n    return utils.isHexStrict(blockNumber) ? typeof blockNumber === \"string\" ? blockNumber.toLowerCase() : blockNumber : utils.numberToHex(blockNumber);\n};\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method _txInputFormatter\n * @param {Object} transaction options\n * @returns object\n */ var _txInputFormatter = function(options) {\n    if (options.to) {\n        options.to = inputAddressFormatter(options.to);\n    }\n    if (options.data && options.input) {\n        throw new Error('You can\\'t have \"data\" and \"input\" as properties of transactions at the same time, please use either \"data\" or \"input\" instead.');\n    }\n    if (!options.data && options.input) {\n        options.data = options.input;\n        delete options.input;\n    }\n    if (options.data && !options.data.startsWith(\"0x\")) {\n        options.data = \"0x\" + options.data;\n    }\n    if (options.data && !utils.isHex(options.data)) {\n        throw new Error(\"The data field must be HEX encoded data.\");\n    }\n    // allow both\n    if (options.gas || options.gasLimit) {\n        options.gas = options.gas || options.gasLimit;\n    }\n    if (options.maxPriorityFeePerGas || options.maxFeePerGas) {\n        delete options.gasPrice;\n    }\n    [\n        \"gasPrice\",\n        \"gas\",\n        \"value\",\n        \"maxPriorityFeePerGas\",\n        \"maxFeePerGas\",\n        \"nonce\",\n        \"type\"\n    ].filter(function(key) {\n        return options[key] !== undefined;\n    }).forEach(function(key) {\n        options[key] = utils.numberToHex(options[key]);\n    });\n    return options;\n};\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputCallFormatter\n * @param {Object} transaction options\n * @returns object\n */ var inputCallFormatter = function(options) {\n    options = _txInputFormatter(options);\n    var from = options.from || (this ? this.defaultAccount : null);\n    if (from) {\n        options.from = inputAddressFormatter(from);\n    }\n    return options;\n};\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputTransactionFormatter\n * @param {Object} options\n * @returns object\n */ var inputTransactionFormatter = function(options) {\n    options = _txInputFormatter(options);\n    // check from, only if not number, or object\n    if (!(typeof options.from === \"number\") && !(!!options.from && typeof options.from === \"object\")) {\n        options.from = options.from || (this ? this.defaultAccount : null);\n        if (!options.from && !(typeof options.from === \"number\")) {\n            throw new Error('The send transactions \"from\" field must be defined!');\n        }\n        options.from = inputAddressFormatter(options.from);\n    }\n    return options;\n};\n/**\n * Hex encodes the data passed to eth_sign and personal_sign\n *\n * @method inputSignFormatter\n * @param {String} data\n * @returns {String}\n */ var inputSignFormatter = function(data) {\n    return utils.isHexStrict(data) ? data : utils.utf8ToHex(data);\n};\n/**\n * Formats the output of a transaction to its proper values\n *\n * @method outputTransactionFormatter\n * @param {Object} tx\n * @returns {Object}\n */ var outputTransactionFormatter = function(tx, hexFormat) {\n    if (!hexFormat) {\n        if (tx.blockNumber !== null) tx.blockNumber = utils.hexToNumber(tx.blockNumber);\n        if (tx.transactionIndex !== null) tx.transactionIndex = utils.hexToNumber(tx.transactionIndex);\n        tx.nonce = utils.hexToNumber(tx.nonce);\n        tx.gas = utils.hexToNumber(tx.gas);\n        if (tx.type) tx.type = utils.hexToNumber(tx.type);\n    }\n    if (tx.gasPrice) tx.gasPrice = outputBigNumberFormatter(tx.gasPrice);\n    if (tx.maxFeePerGas) tx.maxFeePerGas = outputBigNumberFormatter(tx.maxFeePerGas);\n    if (tx.maxPriorityFeePerGas) tx.maxPriorityFeePerGas = outputBigNumberFormatter(tx.maxPriorityFeePerGas);\n    tx.value = outputBigNumberFormatter(tx.value);\n    if (tx.to && utils.isAddress(tx.to)) {\n        tx.to = utils.toChecksumAddress(tx.to);\n    } else {\n        tx.to = null; // set to `null` if invalid address\n    }\n    if (tx.from) {\n        tx.from = utils.toChecksumAddress(tx.from);\n    }\n    return tx;\n};\n/**\n * Formats the output of a transaction receipt to its proper values\n *\n * @method outputTransactionReceiptFormatter\n * @param {Object} receipt\n * @returns {Object}\n */ var outputTransactionReceiptFormatter = function(receipt) {\n    if (typeof receipt !== \"object\") {\n        throw new Error(\"Received receipt is invalid: \" + receipt);\n    }\n    if (!this.hexFormat) {\n        if (receipt.blockNumber !== null) receipt.blockNumber = utils.hexToNumber(receipt.blockNumber);\n        if (receipt.transactionIndex !== null) receipt.transactionIndex = utils.hexToNumber(receipt.transactionIndex);\n        receipt.cumulativeGasUsed = utils.hexToNumber(receipt.cumulativeGasUsed);\n        receipt.gasUsed = utils.hexToNumber(receipt.gasUsed);\n        if (receipt.effectiveGasPrice) {\n            receipt.effectiveGasPrice = utils.hexToNumber(receipt.effectiveGasPrice);\n        }\n    }\n    if (Array.isArray(receipt.logs)) {\n        receipt.logs = receipt.logs.map(outputLogFormatter);\n    }\n    if (receipt.contractAddress) {\n        receipt.contractAddress = utils.toChecksumAddress(receipt.contractAddress);\n    }\n    if (typeof receipt.status !== \"undefined\" && receipt.status !== null) {\n        receipt.status = Boolean(parseInt(receipt.status));\n    }\n    return receipt;\n};\n/**\n * Formats the output of a block to its proper values\n *\n * @method outputBlockFormatter\n * @param {Object} block\n * @returns {Object}\n */ var outputBlockFormatter = function(block, hexFormat) {\n    if (!hexFormat) {\n        // transform to number\n        block.gasLimit = utils.hexToNumber(block.gasLimit);\n        block.gasUsed = utils.hexToNumber(block.gasUsed);\n        block.size = utils.hexToNumber(block.size);\n        block.timestamp = utils.hexToNumber(block.timestamp);\n        if (block.number !== null) block.number = utils.hexToNumber(block.number);\n    }\n    if (block.difficulty) block.difficulty = outputBigNumberFormatter(block.difficulty);\n    if (block.totalDifficulty) block.totalDifficulty = outputBigNumberFormatter(block.totalDifficulty);\n    if (Array.isArray(block.transactions)) {\n        block.transactions.forEach(function(item) {\n            if (!(typeof item === \"string\")) return outputTransactionFormatter(item, hexFormat);\n        });\n    }\n    if (block.miner) block.miner = utils.toChecksumAddress(block.miner);\n    if (block.baseFeePerGas) block.baseFeePerGas = utils.hexToNumber(block.baseFeePerGas);\n    return block;\n};\n/**\n * Formats the input of a log\n *\n * @method inputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n */ var inputLogFormatter = function(options) {\n    var toTopic = function(value) {\n        if (value === null || typeof value === \"undefined\") return null;\n        value = String(value);\n        if (value.indexOf(\"0x\") === 0) return value;\n        else return utils.fromUtf8(value);\n    };\n    if (options === undefined) options = {};\n    // If options !== undefined, don't blow out existing data\n    if (options.fromBlock === undefined) options = {\n        ...options,\n        fromBlock: \"latest\"\n    };\n    if (options.fromBlock || options.fromBlock === 0) options.fromBlock = inputBlockNumberFormatter(options.fromBlock);\n    if (options.toBlock || options.toBlock === 0) options.toBlock = inputBlockNumberFormatter(options.toBlock);\n    // make sure topics, get converted to hex\n    options.topics = options.topics || [];\n    options.topics = options.topics.map(function(topic) {\n        return Array.isArray(topic) ? topic.map(toTopic) : toTopic(topic);\n    });\n    toTopic = null;\n    if (options.address) {\n        options.address = Array.isArray(options.address) ? options.address.map(function(addr) {\n            return inputAddressFormatter(addr);\n        }) : inputAddressFormatter(options.address);\n    }\n    return options;\n};\n/**\n * Formats the output of a log\n *\n * @method outputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n */ var outputLogFormatter = function(log) {\n    // generate a custom log id\n    if (typeof log.blockHash === \"string\" && typeof log.transactionHash === \"string\" && typeof log.logIndex === \"string\") {\n        var shaId = utils.sha3(log.blockHash.replace(\"0x\", \"\") + log.transactionHash.replace(\"0x\", \"\") + log.logIndex.replace(\"0x\", \"\"));\n        log.id = \"log_\" + shaId.replace(\"0x\", \"\").slice(0, 8);\n    } else if (!log.id) {\n        log.id = null;\n    }\n    if (log.blockNumber !== null) log.blockNumber = utils.hexToNumber(log.blockNumber);\n    if (log.transactionIndex !== null) log.transactionIndex = utils.hexToNumber(log.transactionIndex);\n    if (log.logIndex !== null) log.logIndex = utils.hexToNumber(log.logIndex);\n    if (log.address) {\n        log.address = utils.toChecksumAddress(log.address);\n    }\n    return log;\n};\n/**\n * Formats the input of a whisper post and converts all values to HEX\n *\n * @method inputPostFormatter\n * @param {Object} transaction object\n * @returns {Object}\n */ var inputPostFormatter = function(post) {\n    // post.payload = utils.toHex(post.payload);\n    if (post.ttl) post.ttl = utils.numberToHex(post.ttl);\n    if (post.workToProve) post.workToProve = utils.numberToHex(post.workToProve);\n    if (post.priority) post.priority = utils.numberToHex(post.priority);\n    // fallback\n    if (!Array.isArray(post.topics)) {\n        post.topics = post.topics ? [\n            post.topics\n        ] : [];\n    }\n    // format the following options\n    post.topics = post.topics.map(function(topic) {\n        // convert only if not hex\n        return topic.indexOf(\"0x\") === 0 ? topic : utils.fromUtf8(topic);\n    });\n    return post;\n};\n/**\n * Formats the output of a received post message\n *\n * @method outputPostFormatter\n * @param {Object}\n * @returns {Object}\n */ var outputPostFormatter = function(post) {\n    post.expiry = utils.hexToNumber(post.expiry);\n    post.sent = utils.hexToNumber(post.sent);\n    post.ttl = utils.hexToNumber(post.ttl);\n    post.workProved = utils.hexToNumber(post.workProved);\n    // post.payloadRaw = post.payload;\n    // post.payload = utils.hexToAscii(post.payload);\n    // if (utils.isJson(post.payload)) {\n    //     post.payload = JSON.parse(post.payload);\n    // }\n    // format the following options\n    if (!post.topics) {\n        post.topics = [];\n    }\n    post.topics = post.topics.map(function(topic) {\n        return utils.toUtf8(topic);\n    });\n    return post;\n};\nvar inputAddressFormatter = function(address) {\n    var iban = new Iban(address);\n    if (iban.isValid() && iban.isDirect()) {\n        return iban.toAddress().toLowerCase();\n    } else if (utils.isAddress(address)) {\n        return \"0x\" + address.toLowerCase().replace(\"0x\", \"\");\n    }\n    throw new Error(`Provided address ${address} is invalid, the capitalization checksum test failed, or it's an indirect IBAN address which can't be converted.`);\n};\nvar outputSyncingFormatter = function(result) {\n    result.startingBlock = utils.hexToNumber(result.startingBlock);\n    result.currentBlock = utils.hexToNumber(result.currentBlock);\n    result.highestBlock = utils.hexToNumber(result.highestBlock);\n    if (result.knownStates) {\n        result.knownStates = utils.hexToNumber(result.knownStates);\n        result.pulledStates = utils.hexToNumber(result.pulledStates);\n    }\n    return result;\n};\nmodule.exports = {\n    inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,\n    inputBlockNumberFormatter: inputBlockNumberFormatter,\n    inputCallFormatter: inputCallFormatter,\n    inputTransactionFormatter: inputTransactionFormatter,\n    inputAddressFormatter: inputAddressFormatter,\n    inputPostFormatter: inputPostFormatter,\n    inputLogFormatter: inputLogFormatter,\n    inputSignFormatter: inputSignFormatter,\n    inputStorageKeysFormatter: inputStorageKeysFormatter,\n    outputProofFormatter: outputProofFormatter,\n    outputBigNumberFormatter: outputBigNumberFormatter,\n    outputTransactionFormatter: outputTransactionFormatter,\n    outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,\n    outputBlockFormatter: outputBlockFormatter,\n    outputLogFormatter: outputLogFormatter,\n    outputPostFormatter: outputPostFormatter,\n    outputSyncingFormatter: outputSyncingFormatter\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-core-helpers/lib/formatters.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-core-helpers/lib/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/web3-core-helpers/lib/index.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ /**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */ \nvar errors = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/web3-core-helpers/lib/errors.js\");\nvar formatters = __webpack_require__(/*! ./formatters */ \"(ssr)/./node_modules/web3-core-helpers/lib/formatters.js\");\nmodule.exports = {\n    errors: errors,\n    formatters: formatters\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1jb3JlLWhlbHBlcnMvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7QUFlQSxHQUNBOzs7O0NBSUMsR0FDWTtBQUNiLElBQUlBLFNBQVNDLG1CQUFPQSxDQUFDO0FBQ3JCLElBQUlDLGFBQWFELG1CQUFPQSxDQUFDO0FBQ3pCRSxPQUFPQyxPQUFPLEdBQUc7SUFDYkosUUFBUUE7SUFDUkUsWUFBWUE7QUFDaEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy93ZWIzLWNvcmUtaGVscGVycy9saWIvaW5kZXguanM/ZTIzZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICAgIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHdlYjMuanMuXG5cbiAgICB3ZWIzLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAgICB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG5cbiAgICB3ZWIzLmpzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gICAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAgICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gICAgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG5cbiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAgICBhbG9uZyB3aXRoIHdlYjMuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4qL1xuLyoqXG4gKiBAZmlsZSBpbmRleC5qc1xuICogQGF1dGhvciBGYWJpYW4gVm9nZWxzdGVsbGVyIDxmYWJpYW5AZXRoZXJldW0ub3JnPlxuICogQGRhdGUgMjAxN1xuICovXG5cInVzZSBzdHJpY3RcIjtcbnZhciBlcnJvcnMgPSByZXF1aXJlKCcuL2Vycm9ycycpO1xudmFyIGZvcm1hdHRlcnMgPSByZXF1aXJlKCcuL2Zvcm1hdHRlcnMnKTtcbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGVycm9yczogZXJyb3JzLFxuICAgIGZvcm1hdHRlcnM6IGZvcm1hdHRlcnNcbn07XG4iXSwibmFtZXMiOlsiZXJyb3JzIiwicmVxdWlyZSIsImZvcm1hdHRlcnMiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-core-helpers/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-core-helpers/node_modules/web3-eth-iban/lib/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/web3-core-helpers/node_modules/web3-eth-iban/lib/index.js ***!
  \********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ /**\n * @file iban.js\n *\n * Details: https://github.com/ethereum/wiki/wiki/ICAP:-Inter-exchange-Client-Address-Protocol\n *\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2015\n */ \nconst utils = __webpack_require__(/*! web3-utils */ \"(ssr)/./node_modules/web3-utils/lib/index.js\");\nconst BigNumber = __webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/bn.js/lib/bn.js\");\nconst leftPad = function(string, bytes) {\n    let result = string;\n    while(result.length < bytes * 2){\n        result = \"0\" + result;\n    }\n    return result;\n};\n/**\n * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to\n * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.\n *\n * @method iso13616Prepare\n * @param {String} iban the IBAN\n * @returns {String} the prepared IBAN\n */ const iso13616Prepare = function(iban) {\n    const A = \"A\".charCodeAt(0);\n    const Z = \"Z\".charCodeAt(0);\n    iban = iban.toUpperCase();\n    iban = iban.slice(4) + iban.slice(0, 4);\n    return iban.split(\"\").map(function(n) {\n        const code = n.charCodeAt(0);\n        if (code >= A && code <= Z) {\n            // A = 10, B = 11, ... Z = 35\n            return code - A + 10;\n        } else {\n            return n;\n        }\n    }).join(\"\");\n};\n/**\n * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.\n *\n * @method mod9710\n * @param {String} iban\n * @returns {Number}\n */ const mod9710 = function(iban) {\n    let remainder = iban;\n    let block;\n    while(remainder.length > 2){\n        block = remainder.slice(0, 9);\n        remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);\n    }\n    return parseInt(remainder, 10) % 97;\n};\n/**\n * This prototype should be used to create iban object from iban correct string\n *\n * @param {String} iban\n */ class Iban {\n    constructor(iban){\n        this._iban = iban;\n    }\n    /**\n     * This method should be used to create an ethereum address from a direct iban address\n     *\n     * @method toAddress\n     * @param {String} iban address\n     * @return {String} the ethereum address\n     */ static toAddress(ib) {\n        ib = new Iban(ib);\n        if (!ib.isDirect()) {\n            throw new Error(\"IBAN is indirect and can't be converted\");\n        }\n        return ib.toAddress();\n    }\n    /**\n     * This method should be used to create iban address from an ethereum address\n     *\n     * @method toIban\n     * @param {String} address\n     * @return {String} the IBAN address\n     */ static toIban(address) {\n        return Iban.fromAddress(address).toString();\n    }\n    /**\n     * This method should be used to create iban object from an ethereum address\n     *\n     * @method fromAddress\n     * @param {String} address\n     * @return {Iban} the IBAN object\n     */ static fromAddress(address) {\n        if (!utils.isAddress(address)) {\n            throw new Error(\"Provided address is not a valid address: \" + address);\n        }\n        address = address.replace(\"0x\", \"\").replace(\"0X\", \"\");\n        const asBn = new BigNumber(address, 16);\n        const base36 = asBn.toString(36);\n        const padded = leftPad(base36, 15);\n        return Iban.fromBban(padded.toUpperCase());\n    }\n    /**\n     * Convert the passed BBAN to an IBAN for this country specification.\n     * Please note that <i>\"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account\"</i>.\n     * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits\n     *\n     * @method fromBban\n     * @param {String} bban the BBAN to convert to IBAN\n     * @returns {Iban} the IBAN object\n     */ static fromBban(bban) {\n        const countryCode = \"XE\";\n        const remainder = mod9710(iso13616Prepare(countryCode + \"00\" + bban));\n        const checkDigit = (\"0\" + (98 - remainder)).slice(-2);\n        return new Iban(countryCode + checkDigit + bban);\n    }\n    /**\n     * Should be used to create IBAN object for given institution and identifier\n     *\n     * @method createIndirect\n     * @param {Object} options, required options are \"institution\" and \"identifier\"\n     * @return {Iban} the IBAN object\n     */ static createIndirect(options) {\n        return Iban.fromBban(\"ETH\" + options.institution + options.identifier);\n    }\n    /**\n     * This method should be used to check if given string is valid iban object\n     *\n     * @method isValid\n     * @param {String} iban string\n     * @return {Boolean} true if it is valid IBAN\n     */ static isValid(iban) {\n        const i = new Iban(iban);\n        return i.isValid();\n    }\n    /**\n     * Should be called to check if iban is correct\n     *\n     * @method isValid\n     * @returns {Boolean} true if it is, otherwise false\n     */ isValid() {\n        return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) && mod9710(iso13616Prepare(this._iban)) === 1;\n    }\n    /**\n     * Should be called to check if iban number is direct\n     *\n     * @method isDirect\n     * @returns {Boolean} true if it is, otherwise false\n     */ isDirect() {\n        return this._iban.length === 34 || this._iban.length === 35;\n    }\n    /**\n     * Should be called to check if iban number if indirect\n     *\n     * @method isIndirect\n     * @returns {Boolean} true if it is, otherwise false\n     */ isIndirect() {\n        return this._iban.length === 20;\n    }\n    /**\n     * Should be called to get iban checksum\n     * Uses the mod-97-10 checksumming protocol (ISO/IEC 7064:2003)\n     *\n     * @method checksum\n     * @returns {String} checksum\n     */ checksum() {\n        return this._iban.slice(2, 4);\n    }\n    /**\n     * Should be called to get institution identifier\n     * eg. XREG\n     *\n     * @method institution\n     * @returns {String} institution identifier\n     */ institution() {\n        return this.isIndirect() ? this._iban.slice(7, 11) : \"\";\n    }\n    /**\n     * Should be called to get client identifier within institution\n     * eg. GAVOFYORK\n     *\n     * @method client\n     * @returns {String} client identifier\n     */ client() {\n        return this.isIndirect() ? this._iban.slice(11) : \"\";\n    }\n    /**\n     * Should be called to get client direct address\n     *\n     * @method toAddress\n     * @returns {String} ethereum address\n     */ toAddress() {\n        if (this.isDirect()) {\n            const base36 = this._iban.slice(4);\n            const asBn = new BigNumber(base36, 36);\n            return utils.toChecksumAddress(asBn.toString(16, 20));\n        }\n        return \"\";\n    }\n    toString() {\n        return this._iban;\n    }\n}\nmodule.exports = Iban;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-core-helpers/node_modules/web3-eth-iban/lib/index.js\n");

/***/ })

};
;