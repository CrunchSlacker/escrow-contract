"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/minipass";
exports.ids = ["vendor-chunks/minipass"];
exports.modules = {

/***/ "(ssr)/./node_modules/minipass/index.js":
/*!****************************************!*\
  !*** ./node_modules/minipass/index.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst EE = __webpack_require__(/*! events */ \"events\");\nconst Yallist = __webpack_require__(/*! yallist */ \"(ssr)/./node_modules/minipass/node_modules/yallist/yallist.js\");\nconst SD = (__webpack_require__(/*! string_decoder */ \"string_decoder\").StringDecoder);\nconst EOF = Symbol(\"EOF\");\nconst MAYBE_EMIT_END = Symbol(\"maybeEmitEnd\");\nconst EMITTED_END = Symbol(\"emittedEnd\");\nconst EMITTING_END = Symbol(\"emittingEnd\");\nconst CLOSED = Symbol(\"closed\");\nconst READ = Symbol(\"read\");\nconst FLUSH = Symbol(\"flush\");\nconst FLUSHCHUNK = Symbol(\"flushChunk\");\nconst ENCODING = Symbol(\"encoding\");\nconst DECODER = Symbol(\"decoder\");\nconst FLOWING = Symbol(\"flowing\");\nconst PAUSED = Symbol(\"paused\");\nconst RESUME = Symbol(\"resume\");\nconst BUFFERLENGTH = Symbol(\"bufferLength\");\nconst BUFFERPUSH = Symbol(\"bufferPush\");\nconst BUFFERSHIFT = Symbol(\"bufferShift\");\nconst OBJECTMODE = Symbol(\"objectMode\");\nconst DESTROYED = Symbol(\"destroyed\");\n// TODO remove when Node v8 support drops\nconst doIter = global._MP_NO_ITERATOR_SYMBOLS_ !== \"1\";\nconst ASYNCITERATOR = doIter && Symbol.asyncIterator || Symbol(\"asyncIterator not implemented\");\nconst ITERATOR = doIter && Symbol.iterator || Symbol(\"iterator not implemented\");\n// Buffer in node 4.x < 4.5.0 doesn't have working Buffer.from\n// or Buffer.alloc, and Buffer in node 10 deprecated the ctor.\n// .M, this is fine .\\^/M..\nconst B = Buffer.alloc ? Buffer : /* istanbul ignore next */ (__webpack_require__(/*! safe-buffer */ \"(ssr)/./node_modules/safe-buffer/index.js\").Buffer);\n// events that mean 'the stream is over'\n// these are treated specially, and re-emitted\n// if they are listened for after emitting.\nconst isEndish = (ev)=>ev === \"end\" || ev === \"finish\" || ev === \"prefinish\";\nconst isArrayBuffer = (b)=>b instanceof ArrayBuffer || typeof b === \"object\" && b.constructor && b.constructor.name === \"ArrayBuffer\" && b.byteLength >= 0;\nconst isArrayBufferView = (b)=>!B.isBuffer(b) && ArrayBuffer.isView(b);\nmodule.exports = class Minipass extends EE {\n    constructor(options){\n        super();\n        this[FLOWING] = false;\n        // whether we're explicitly paused\n        this[PAUSED] = false;\n        this.pipes = new Yallist();\n        this.buffer = new Yallist();\n        this[OBJECTMODE] = options && options.objectMode || false;\n        if (this[OBJECTMODE]) this[ENCODING] = null;\n        else this[ENCODING] = options && options.encoding || null;\n        if (this[ENCODING] === \"buffer\") this[ENCODING] = null;\n        this[DECODER] = this[ENCODING] ? new SD(this[ENCODING]) : null;\n        this[EOF] = false;\n        this[EMITTED_END] = false;\n        this[EMITTING_END] = false;\n        this[CLOSED] = false;\n        this.writable = true;\n        this.readable = true;\n        this[BUFFERLENGTH] = 0;\n        this[DESTROYED] = false;\n    }\n    get bufferLength() {\n        return this[BUFFERLENGTH];\n    }\n    get encoding() {\n        return this[ENCODING];\n    }\n    set encoding(enc) {\n        if (this[OBJECTMODE]) throw new Error(\"cannot set encoding in objectMode\");\n        if (this[ENCODING] && enc !== this[ENCODING] && (this[DECODER] && this[DECODER].lastNeed || this[BUFFERLENGTH])) throw new Error(\"cannot change encoding\");\n        if (this[ENCODING] !== enc) {\n            this[DECODER] = enc ? new SD(enc) : null;\n            if (this.buffer.length) this.buffer = this.buffer.map((chunk)=>this[DECODER].write(chunk));\n        }\n        this[ENCODING] = enc;\n    }\n    setEncoding(enc) {\n        this.encoding = enc;\n    }\n    get objectMode() {\n        return this[OBJECTMODE];\n    }\n    set objectMode(ॐ) {\n        this[OBJECTMODE] = this[OBJECTMODE] || !!ॐ;\n    }\n    write(chunk, encoding, cb) {\n        if (this[EOF]) throw new Error(\"write after end\");\n        if (this[DESTROYED]) {\n            this.emit(\"error\", Object.assign(new Error(\"Cannot call write after a stream was destroyed\"), {\n                code: \"ERR_STREAM_DESTROYED\"\n            }));\n            return true;\n        }\n        if (typeof encoding === \"function\") cb = encoding, encoding = \"utf8\";\n        if (!encoding) encoding = \"utf8\";\n        // convert array buffers and typed array views into buffers\n        // at some point in the future, we may want to do the opposite!\n        // leave strings and buffers as-is\n        // anything else switches us into object mode\n        if (!this[OBJECTMODE] && !B.isBuffer(chunk)) {\n            if (isArrayBufferView(chunk)) chunk = B.from(chunk.buffer, chunk.byteOffset, chunk.byteLength);\n            else if (isArrayBuffer(chunk)) chunk = B.from(chunk);\n            else if (typeof chunk !== \"string\") // use the setter so we throw if we have encoding set\n            this.objectMode = true;\n        }\n        // this ensures at this point that the chunk is a buffer or string\n        // don't buffer it up or send it to the decoder\n        if (!this.objectMode && !chunk.length) {\n            const ret = this.flowing;\n            if (this[BUFFERLENGTH] !== 0) this.emit(\"readable\");\n            if (cb) cb();\n            return ret;\n        }\n        // fast-path writing strings of same encoding to a stream with\n        // an empty buffer, skipping the buffer/decoder dance\n        if (typeof chunk === \"string\" && !this[OBJECTMODE] && // unless it is a string already ready for us to use\n        !(encoding === this[ENCODING] && !this[DECODER].lastNeed)) {\n            chunk = B.from(chunk, encoding);\n        }\n        if (B.isBuffer(chunk) && this[ENCODING]) chunk = this[DECODER].write(chunk);\n        try {\n            return this.flowing ? (this.emit(\"data\", chunk), this.flowing) : (this[BUFFERPUSH](chunk), false);\n        } finally{\n            if (this[BUFFERLENGTH] !== 0) this.emit(\"readable\");\n            if (cb) cb();\n        }\n    }\n    read(n) {\n        if (this[DESTROYED]) return null;\n        try {\n            if (this[BUFFERLENGTH] === 0 || n === 0 || n > this[BUFFERLENGTH]) return null;\n            if (this[OBJECTMODE]) n = null;\n            if (this.buffer.length > 1 && !this[OBJECTMODE]) {\n                if (this.encoding) this.buffer = new Yallist([\n                    Array.from(this.buffer).join(\"\")\n                ]);\n                else this.buffer = new Yallist([\n                    B.concat(Array.from(this.buffer), this[BUFFERLENGTH])\n                ]);\n            }\n            return this[READ](n || null, this.buffer.head.value);\n        } finally{\n            this[MAYBE_EMIT_END]();\n        }\n    }\n    [READ](n, chunk) {\n        if (n === chunk.length || n === null) this[BUFFERSHIFT]();\n        else {\n            this.buffer.head.value = chunk.slice(n);\n            chunk = chunk.slice(0, n);\n            this[BUFFERLENGTH] -= n;\n        }\n        this.emit(\"data\", chunk);\n        if (!this.buffer.length && !this[EOF]) this.emit(\"drain\");\n        return chunk;\n    }\n    end(chunk, encoding, cb) {\n        if (typeof chunk === \"function\") cb = chunk, chunk = null;\n        if (typeof encoding === \"function\") cb = encoding, encoding = \"utf8\";\n        if (chunk) this.write(chunk, encoding);\n        if (cb) this.once(\"end\", cb);\n        this[EOF] = true;\n        this.writable = false;\n        // if we haven't written anything, then go ahead and emit,\n        // even if we're not reading.\n        // we'll re-emit if a new 'end' listener is added anyway.\n        // This makes MP more suitable to write-only use cases.\n        if (this.flowing || !this[PAUSED]) this[MAYBE_EMIT_END]();\n        return this;\n    }\n    // don't let the internal resume be overwritten\n    [RESUME]() {\n        if (this[DESTROYED]) return;\n        this[PAUSED] = false;\n        this[FLOWING] = true;\n        this.emit(\"resume\");\n        if (this.buffer.length) this[FLUSH]();\n        else if (this[EOF]) this[MAYBE_EMIT_END]();\n        else this.emit(\"drain\");\n    }\n    resume() {\n        return this[RESUME]();\n    }\n    pause() {\n        this[FLOWING] = false;\n        this[PAUSED] = true;\n    }\n    get destroyed() {\n        return this[DESTROYED];\n    }\n    get flowing() {\n        return this[FLOWING];\n    }\n    get paused() {\n        return this[PAUSED];\n    }\n    [BUFFERPUSH](chunk) {\n        if (this[OBJECTMODE]) this[BUFFERLENGTH] += 1;\n        else this[BUFFERLENGTH] += chunk.length;\n        return this.buffer.push(chunk);\n    }\n    [BUFFERSHIFT]() {\n        if (this.buffer.length) {\n            if (this[OBJECTMODE]) this[BUFFERLENGTH] -= 1;\n            else this[BUFFERLENGTH] -= this.buffer.head.value.length;\n        }\n        return this.buffer.shift();\n    }\n    [FLUSH]() {\n        do {}while (this[FLUSHCHUNK](this[BUFFERSHIFT]()));\n        if (!this.buffer.length && !this[EOF]) this.emit(\"drain\");\n    }\n    [FLUSHCHUNK](chunk) {\n        return chunk ? (this.emit(\"data\", chunk), this.flowing) : false;\n    }\n    pipe(dest, opts) {\n        if (this[DESTROYED]) return;\n        const ended = this[EMITTED_END];\n        opts = opts || {};\n        if (dest === process.stdout || dest === process.stderr) opts.end = false;\n        else opts.end = opts.end !== false;\n        const p = {\n            dest: dest,\n            opts: opts,\n            ondrain: (_)=>this[RESUME]()\n        };\n        this.pipes.push(p);\n        dest.on(\"drain\", p.ondrain);\n        this[RESUME]();\n        // piping an ended stream ends immediately\n        if (ended && p.opts.end) p.dest.end();\n        return dest;\n    }\n    addListener(ev, fn) {\n        return this.on(ev, fn);\n    }\n    on(ev, fn) {\n        try {\n            return super.on(ev, fn);\n        } finally{\n            if (ev === \"data\" && !this.pipes.length && !this.flowing) this[RESUME]();\n            else if (isEndish(ev) && this[EMITTED_END]) {\n                super.emit(ev);\n                this.removeAllListeners(ev);\n            }\n        }\n    }\n    get emittedEnd() {\n        return this[EMITTED_END];\n    }\n    [MAYBE_EMIT_END]() {\n        if (!this[EMITTING_END] && !this[EMITTED_END] && !this[DESTROYED] && this.buffer.length === 0 && this[EOF]) {\n            this[EMITTING_END] = true;\n            this.emit(\"end\");\n            this.emit(\"prefinish\");\n            this.emit(\"finish\");\n            if (this[CLOSED]) this.emit(\"close\");\n            this[EMITTING_END] = false;\n        }\n    }\n    emit(ev, data) {\n        // error and close are only events allowed after calling destroy()\n        if (ev !== \"error\" && ev !== \"close\" && ev !== DESTROYED && this[DESTROYED]) return;\n        else if (ev === \"data\") {\n            if (!data) return;\n            if (this.pipes.length) this.pipes.forEach((p)=>p.dest.write(data) === false && this.pause());\n        } else if (ev === \"end\") {\n            // only actual end gets this treatment\n            if (this[EMITTED_END] === true) return;\n            this[EMITTED_END] = true;\n            this.readable = false;\n            if (this[DECODER]) {\n                data = this[DECODER].end();\n                if (data) {\n                    this.pipes.forEach((p)=>p.dest.write(data));\n                    super.emit(\"data\", data);\n                }\n            }\n            this.pipes.forEach((p)=>{\n                p.dest.removeListener(\"drain\", p.ondrain);\n                if (p.opts.end) p.dest.end();\n            });\n        } else if (ev === \"close\") {\n            this[CLOSED] = true;\n            // don't emit close before 'end' and 'finish'\n            if (!this[EMITTED_END] && !this[DESTROYED]) return;\n        }\n        // TODO: replace with a spread operator when Node v4 support drops\n        const args = new Array(arguments.length);\n        args[0] = ev;\n        args[1] = data;\n        if (arguments.length > 2) {\n            for(let i = 2; i < arguments.length; i++){\n                args[i] = arguments[i];\n            }\n        }\n        try {\n            return super.emit.apply(this, args);\n        } finally{\n            if (!isEndish(ev)) this[MAYBE_EMIT_END]();\n            else this.removeAllListeners(ev);\n        }\n    }\n    // const all = await stream.collect()\n    collect() {\n        const buf = [];\n        buf.dataLength = 0;\n        this.on(\"data\", (c)=>{\n            buf.push(c);\n            buf.dataLength += c.length;\n        });\n        return this.promise().then(()=>buf);\n    }\n    // const data = await stream.concat()\n    concat() {\n        return this[OBJECTMODE] ? Promise.reject(new Error(\"cannot concat in objectMode\")) : this.collect().then((buf)=>this[OBJECTMODE] ? Promise.reject(new Error(\"cannot concat in objectMode\")) : this[ENCODING] ? buf.join(\"\") : B.concat(buf, buf.dataLength));\n    }\n    // stream.promise().then(() => done, er => emitted error)\n    promise() {\n        return new Promise((resolve, reject)=>{\n            this.on(DESTROYED, ()=>reject(new Error(\"stream destroyed\")));\n            this.on(\"end\", ()=>resolve());\n            this.on(\"error\", (er)=>reject(er));\n        });\n    }\n    // for await (let chunk of stream)\n    [ASYNCITERATOR]() {\n        const next = ()=>{\n            const res = this.read();\n            if (res !== null) return Promise.resolve({\n                done: false,\n                value: res\n            });\n            if (this[EOF]) return Promise.resolve({\n                done: true\n            });\n            let resolve = null;\n            let reject = null;\n            const onerr = (er)=>{\n                this.removeListener(\"data\", ondata);\n                this.removeListener(\"end\", onend);\n                reject(er);\n            };\n            const ondata = (value)=>{\n                this.removeListener(\"error\", onerr);\n                this.removeListener(\"end\", onend);\n                this.pause();\n                resolve({\n                    value: value,\n                    done: !!this[EOF]\n                });\n            };\n            const onend = ()=>{\n                this.removeListener(\"error\", onerr);\n                this.removeListener(\"data\", ondata);\n                resolve({\n                    done: true\n                });\n            };\n            const ondestroy = ()=>onerr(new Error(\"stream destroyed\"));\n            return new Promise((res, rej)=>{\n                reject = rej;\n                resolve = res;\n                this.once(DESTROYED, ondestroy);\n                this.once(\"error\", onerr);\n                this.once(\"end\", onend);\n                this.once(\"data\", ondata);\n            });\n        };\n        return {\n            next\n        };\n    }\n    // for (let chunk of stream)\n    [ITERATOR]() {\n        const next = ()=>{\n            const value = this.read();\n            const done = value === null;\n            return {\n                value,\n                done\n            };\n        };\n        return {\n            next\n        };\n    }\n    destroy(er) {\n        if (this[DESTROYED]) {\n            if (er) this.emit(\"error\", er);\n            else this.emit(DESTROYED);\n            return this;\n        }\n        this[DESTROYED] = true;\n        // throw away all buffered data, it's never coming out\n        this.buffer = new Yallist();\n        this[BUFFERLENGTH] = 0;\n        if (typeof this.close === \"function\" && !this[CLOSED]) this.close();\n        if (er) this.emit(\"error\", er);\n        else this.emit(DESTROYED);\n        return this;\n    }\n    static isStream(s) {\n        return !!s && (s instanceof Minipass || s instanceof EE && (typeof s.pipe === \"function\" || // readable\n        typeof s.write === \"function\" && typeof s.end === \"function\" // writable\n        ));\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/minipass/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/minipass/node_modules/yallist/iterator.js":
/*!****************************************************************!*\
  !*** ./node_modules/minipass/node_modules/yallist/iterator.js ***!
  \****************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = function(Yallist) {\n    Yallist.prototype[Symbol.iterator] = function*() {\n        for(let walker = this.head; walker; walker = walker.next){\n            yield walker.value;\n        }\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbWluaXBhc3Mvbm9kZV9tb2R1bGVzL3lhbGxpc3QvaXRlcmF0b3IuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQUEsT0FBT0MsT0FBTyxHQUFHLFNBQVVDLE9BQU87SUFDaENBLFFBQVFDLFNBQVMsQ0FBQ0MsT0FBT0MsUUFBUSxDQUFDLEdBQUc7UUFDbkMsSUFBSyxJQUFJQyxTQUFTLElBQUksQ0FBQ0MsSUFBSSxFQUFFRCxRQUFRQSxTQUFTQSxPQUFPRSxJQUFJLENBQUU7WUFDekQsTUFBTUYsT0FBT0csS0FBSztRQUNwQjtJQUNGO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9taW5pcGFzcy9ub2RlX21vZHVsZXMveWFsbGlzdC9pdGVyYXRvci5qcz8xMDA4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoWWFsbGlzdCkge1xuICBZYWxsaXN0LnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24qICgpIHtcbiAgICBmb3IgKGxldCB3YWxrZXIgPSB0aGlzLmhlYWQ7IHdhbGtlcjsgd2Fsa2VyID0gd2Fsa2VyLm5leHQpIHtcbiAgICAgIHlpZWxkIHdhbGtlci52YWx1ZVxuICAgIH1cbiAgfVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJZYWxsaXN0IiwicHJvdG90eXBlIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJ3YWxrZXIiLCJoZWFkIiwibmV4dCIsInZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/minipass/node_modules/yallist/iterator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/minipass/node_modules/yallist/yallist.js":
/*!***************************************************************!*\
  !*** ./node_modules/minipass/node_modules/yallist/yallist.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = Yallist;\nYallist.Node = Node;\nYallist.create = Yallist;\nfunction Yallist(list) {\n    var self = this;\n    if (!(self instanceof Yallist)) {\n        self = new Yallist();\n    }\n    self.tail = null;\n    self.head = null;\n    self.length = 0;\n    if (list && typeof list.forEach === \"function\") {\n        list.forEach(function(item) {\n            self.push(item);\n        });\n    } else if (arguments.length > 0) {\n        for(var i = 0, l = arguments.length; i < l; i++){\n            self.push(arguments[i]);\n        }\n    }\n    return self;\n}\nYallist.prototype.removeNode = function(node) {\n    if (node.list !== this) {\n        throw new Error(\"removing node which does not belong to this list\");\n    }\n    var next = node.next;\n    var prev = node.prev;\n    if (next) {\n        next.prev = prev;\n    }\n    if (prev) {\n        prev.next = next;\n    }\n    if (node === this.head) {\n        this.head = next;\n    }\n    if (node === this.tail) {\n        this.tail = prev;\n    }\n    node.list.length--;\n    node.next = null;\n    node.prev = null;\n    node.list = null;\n    return next;\n};\nYallist.prototype.unshiftNode = function(node) {\n    if (node === this.head) {\n        return;\n    }\n    if (node.list) {\n        node.list.removeNode(node);\n    }\n    var head = this.head;\n    node.list = this;\n    node.next = head;\n    if (head) {\n        head.prev = node;\n    }\n    this.head = node;\n    if (!this.tail) {\n        this.tail = node;\n    }\n    this.length++;\n};\nYallist.prototype.pushNode = function(node) {\n    if (node === this.tail) {\n        return;\n    }\n    if (node.list) {\n        node.list.removeNode(node);\n    }\n    var tail = this.tail;\n    node.list = this;\n    node.prev = tail;\n    if (tail) {\n        tail.next = node;\n    }\n    this.tail = node;\n    if (!this.head) {\n        this.head = node;\n    }\n    this.length++;\n};\nYallist.prototype.push = function() {\n    for(var i = 0, l = arguments.length; i < l; i++){\n        push(this, arguments[i]);\n    }\n    return this.length;\n};\nYallist.prototype.unshift = function() {\n    for(var i = 0, l = arguments.length; i < l; i++){\n        unshift(this, arguments[i]);\n    }\n    return this.length;\n};\nYallist.prototype.pop = function() {\n    if (!this.tail) {\n        return undefined;\n    }\n    var res = this.tail.value;\n    this.tail = this.tail.prev;\n    if (this.tail) {\n        this.tail.next = null;\n    } else {\n        this.head = null;\n    }\n    this.length--;\n    return res;\n};\nYallist.prototype.shift = function() {\n    if (!this.head) {\n        return undefined;\n    }\n    var res = this.head.value;\n    this.head = this.head.next;\n    if (this.head) {\n        this.head.prev = null;\n    } else {\n        this.tail = null;\n    }\n    this.length--;\n    return res;\n};\nYallist.prototype.forEach = function(fn, thisp) {\n    thisp = thisp || this;\n    for(var walker = this.head, i = 0; walker !== null; i++){\n        fn.call(thisp, walker.value, i, this);\n        walker = walker.next;\n    }\n};\nYallist.prototype.forEachReverse = function(fn, thisp) {\n    thisp = thisp || this;\n    for(var walker = this.tail, i = this.length - 1; walker !== null; i--){\n        fn.call(thisp, walker.value, i, this);\n        walker = walker.prev;\n    }\n};\nYallist.prototype.get = function(n) {\n    for(var i = 0, walker = this.head; walker !== null && i < n; i++){\n        // abort out of the list early if we hit a cycle\n        walker = walker.next;\n    }\n    if (i === n && walker !== null) {\n        return walker.value;\n    }\n};\nYallist.prototype.getReverse = function(n) {\n    for(var i = 0, walker = this.tail; walker !== null && i < n; i++){\n        // abort out of the list early if we hit a cycle\n        walker = walker.prev;\n    }\n    if (i === n && walker !== null) {\n        return walker.value;\n    }\n};\nYallist.prototype.map = function(fn, thisp) {\n    thisp = thisp || this;\n    var res = new Yallist();\n    for(var walker = this.head; walker !== null;){\n        res.push(fn.call(thisp, walker.value, this));\n        walker = walker.next;\n    }\n    return res;\n};\nYallist.prototype.mapReverse = function(fn, thisp) {\n    thisp = thisp || this;\n    var res = new Yallist();\n    for(var walker = this.tail; walker !== null;){\n        res.push(fn.call(thisp, walker.value, this));\n        walker = walker.prev;\n    }\n    return res;\n};\nYallist.prototype.reduce = function(fn, initial) {\n    var acc;\n    var walker = this.head;\n    if (arguments.length > 1) {\n        acc = initial;\n    } else if (this.head) {\n        walker = this.head.next;\n        acc = this.head.value;\n    } else {\n        throw new TypeError(\"Reduce of empty list with no initial value\");\n    }\n    for(var i = 0; walker !== null; i++){\n        acc = fn(acc, walker.value, i);\n        walker = walker.next;\n    }\n    return acc;\n};\nYallist.prototype.reduceReverse = function(fn, initial) {\n    var acc;\n    var walker = this.tail;\n    if (arguments.length > 1) {\n        acc = initial;\n    } else if (this.tail) {\n        walker = this.tail.prev;\n        acc = this.tail.value;\n    } else {\n        throw new TypeError(\"Reduce of empty list with no initial value\");\n    }\n    for(var i = this.length - 1; walker !== null; i--){\n        acc = fn(acc, walker.value, i);\n        walker = walker.prev;\n    }\n    return acc;\n};\nYallist.prototype.toArray = function() {\n    var arr = new Array(this.length);\n    for(var i = 0, walker = this.head; walker !== null; i++){\n        arr[i] = walker.value;\n        walker = walker.next;\n    }\n    return arr;\n};\nYallist.prototype.toArrayReverse = function() {\n    var arr = new Array(this.length);\n    for(var i = 0, walker = this.tail; walker !== null; i++){\n        arr[i] = walker.value;\n        walker = walker.prev;\n    }\n    return arr;\n};\nYallist.prototype.slice = function(from, to) {\n    to = to || this.length;\n    if (to < 0) {\n        to += this.length;\n    }\n    from = from || 0;\n    if (from < 0) {\n        from += this.length;\n    }\n    var ret = new Yallist();\n    if (to < from || to < 0) {\n        return ret;\n    }\n    if (from < 0) {\n        from = 0;\n    }\n    if (to > this.length) {\n        to = this.length;\n    }\n    for(var i = 0, walker = this.head; walker !== null && i < from; i++){\n        walker = walker.next;\n    }\n    for(; walker !== null && i < to; i++, walker = walker.next){\n        ret.push(walker.value);\n    }\n    return ret;\n};\nYallist.prototype.sliceReverse = function(from, to) {\n    to = to || this.length;\n    if (to < 0) {\n        to += this.length;\n    }\n    from = from || 0;\n    if (from < 0) {\n        from += this.length;\n    }\n    var ret = new Yallist();\n    if (to < from || to < 0) {\n        return ret;\n    }\n    if (from < 0) {\n        from = 0;\n    }\n    if (to > this.length) {\n        to = this.length;\n    }\n    for(var i = this.length, walker = this.tail; walker !== null && i > to; i--){\n        walker = walker.prev;\n    }\n    for(; walker !== null && i > from; i--, walker = walker.prev){\n        ret.push(walker.value);\n    }\n    return ret;\n};\nYallist.prototype.splice = function(start, deleteCount /*, ...nodes */ ) {\n    if (start > this.length) {\n        start = this.length - 1;\n    }\n    if (start < 0) {\n        start = this.length + start;\n    }\n    for(var i = 0, walker = this.head; walker !== null && i < start; i++){\n        walker = walker.next;\n    }\n    var ret = [];\n    for(var i = 0; walker && i < deleteCount; i++){\n        ret.push(walker.value);\n        walker = this.removeNode(walker);\n    }\n    if (walker === null) {\n        walker = this.tail;\n    }\n    if (walker !== this.head && walker !== this.tail) {\n        walker = walker.prev;\n    }\n    for(var i = 2; i < arguments.length; i++){\n        walker = insert(this, walker, arguments[i]);\n    }\n    return ret;\n};\nYallist.prototype.reverse = function() {\n    var head = this.head;\n    var tail = this.tail;\n    for(var walker = head; walker !== null; walker = walker.prev){\n        var p = walker.prev;\n        walker.prev = walker.next;\n        walker.next = p;\n    }\n    this.head = tail;\n    this.tail = head;\n    return this;\n};\nfunction insert(self, node, value) {\n    var inserted = node === self.head ? new Node(value, null, node, self) : new Node(value, node, node.next, self);\n    if (inserted.next === null) {\n        self.tail = inserted;\n    }\n    if (inserted.prev === null) {\n        self.head = inserted;\n    }\n    self.length++;\n    return inserted;\n}\nfunction push(self, item) {\n    self.tail = new Node(item, self.tail, null, self);\n    if (!self.head) {\n        self.head = self.tail;\n    }\n    self.length++;\n}\nfunction unshift(self, item) {\n    self.head = new Node(item, null, self.head, self);\n    if (!self.tail) {\n        self.tail = self.head;\n    }\n    self.length++;\n}\nfunction Node(value, prev, next, list) {\n    if (!(this instanceof Node)) {\n        return new Node(value, prev, next, list);\n    }\n    this.list = list;\n    this.value = value;\n    if (prev) {\n        prev.next = this;\n        this.prev = prev;\n    } else {\n        this.prev = null;\n    }\n    if (next) {\n        next.prev = this;\n        this.next = next;\n    } else {\n        this.next = null;\n    }\n}\ntry {\n    // add if support for Symbol.iterator is present\n    __webpack_require__(/*! ./iterator.js */ \"(ssr)/./node_modules/minipass/node_modules/yallist/iterator.js\")(Yallist);\n} catch (er) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/minipass/node_modules/yallist/yallist.js\n");

/***/ })

};
;