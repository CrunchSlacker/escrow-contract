/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/web3-core-requestmanager";
exports.ids = ["vendor-chunks/web3-core-requestmanager"];
exports.modules = {

/***/ "(ssr)/./node_modules/web3-core-requestmanager/lib/batch.js":
/*!************************************************************!*\
  !*** ./node_modules/web3-core-requestmanager/lib/batch.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ /**\n * @file batch.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */ \nvar Jsonrpc = __webpack_require__(/*! ./jsonrpc */ \"(ssr)/./node_modules/web3-core-requestmanager/lib/jsonrpc.js\");\nvar errors = (__webpack_require__(/*! web3-core-helpers */ \"(ssr)/./node_modules/web3-core-helpers/lib/index.js\").errors);\nvar Batch = function(requestManager) {\n    this.requestManager = requestManager;\n    this.requests = [];\n};\n/**\n * Should be called to add create new request to batch request\n *\n * @method add\n * @param {Object} jsonrpc requet object\n */ Batch.prototype.add = function(request) {\n    this.requests.push(request);\n};\n/**\n * Should be called to execute batch request\n *\n * @method execute\n */ Batch.prototype.execute = function() {\n    var requests = this.requests;\n    var sortResponses = this._sortResponses.bind(this);\n    this.requestManager.sendBatch(requests, function(err, results) {\n        results = sortResponses(results);\n        requests.map(function(request, index) {\n            return results[index] || {};\n        }).forEach(function(result, index) {\n            if (requests[index].callback) {\n                if (result && result.error) {\n                    return requests[index].callback(errors.ErrorResponse(result));\n                }\n                if (!Jsonrpc.isValidResponse(result)) {\n                    return requests[index].callback(errors.InvalidResponse(result));\n                }\n                try {\n                    requests[index].callback(null, requests[index].format ? requests[index].format(result.result) : result.result);\n                } catch (err) {\n                    requests[index].callback(err);\n                }\n            }\n        });\n    });\n};\n// Sort responses\nBatch.prototype._sortResponses = function(responses) {\n    return (responses || []).sort((a, b)=>a.id - b.id);\n};\nmodule.exports = Batch;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1jb3JlLXJlcXVlc3RtYW5hZ2VyL2xpYi9iYXRjaC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0FBZUEsR0FDQTs7OztDQUlDLEdBQ1k7QUFDYixJQUFJQSxVQUFVQyxtQkFBT0EsQ0FBQztBQUN0QixJQUFJQyxTQUFTRCw0R0FBbUM7QUFDaEQsSUFBSUUsUUFBUSxTQUFVQyxjQUFjO0lBQ2hDLElBQUksQ0FBQ0EsY0FBYyxHQUFHQTtJQUN0QixJQUFJLENBQUNDLFFBQVEsR0FBRyxFQUFFO0FBQ3RCO0FBQ0E7Ozs7O0NBS0MsR0FDREYsTUFBTUcsU0FBUyxDQUFDQyxHQUFHLEdBQUcsU0FBVUMsT0FBTztJQUNuQyxJQUFJLENBQUNILFFBQVEsQ0FBQ0ksSUFBSSxDQUFDRDtBQUN2QjtBQUNBOzs7O0NBSUMsR0FDREwsTUFBTUcsU0FBUyxDQUFDSSxPQUFPLEdBQUc7SUFDdEIsSUFBSUwsV0FBVyxJQUFJLENBQUNBLFFBQVE7SUFDNUIsSUFBSU0sZ0JBQWdCLElBQUksQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUMsSUFBSTtJQUNqRCxJQUFJLENBQUNULGNBQWMsQ0FBQ1UsU0FBUyxDQUFDVCxVQUFVLFNBQVVVLEdBQUcsRUFBRUMsT0FBTztRQUMxREEsVUFBVUwsY0FBY0s7UUFDeEJYLFNBQVNZLEdBQUcsQ0FBQyxTQUFVVCxPQUFPLEVBQUVVLEtBQUs7WUFDakMsT0FBT0YsT0FBTyxDQUFDRSxNQUFNLElBQUksQ0FBQztRQUM5QixHQUFHQyxPQUFPLENBQUMsU0FBVUMsTUFBTSxFQUFFRixLQUFLO1lBQzlCLElBQUliLFFBQVEsQ0FBQ2EsTUFBTSxDQUFDRyxRQUFRLEVBQUU7Z0JBQzFCLElBQUlELFVBQVVBLE9BQU9FLEtBQUssRUFBRTtvQkFDeEIsT0FBT2pCLFFBQVEsQ0FBQ2EsTUFBTSxDQUFDRyxRQUFRLENBQUNuQixPQUFPcUIsYUFBYSxDQUFDSDtnQkFDekQ7Z0JBQ0EsSUFBSSxDQUFDcEIsUUFBUXdCLGVBQWUsQ0FBQ0osU0FBUztvQkFDbEMsT0FBT2YsUUFBUSxDQUFDYSxNQUFNLENBQUNHLFFBQVEsQ0FBQ25CLE9BQU91QixlQUFlLENBQUNMO2dCQUMzRDtnQkFDQSxJQUFJO29CQUNBZixRQUFRLENBQUNhLE1BQU0sQ0FBQ0csUUFBUSxDQUFDLE1BQU1oQixRQUFRLENBQUNhLE1BQU0sQ0FBQ1EsTUFBTSxHQUFHckIsUUFBUSxDQUFDYSxNQUFNLENBQUNRLE1BQU0sQ0FBQ04sT0FBT0EsTUFBTSxJQUFJQSxPQUFPQSxNQUFNO2dCQUNqSCxFQUNBLE9BQU9MLEtBQUs7b0JBQ1JWLFFBQVEsQ0FBQ2EsTUFBTSxDQUFDRyxRQUFRLENBQUNOO2dCQUM3QjtZQUNKO1FBQ0o7SUFDSjtBQUNKO0FBQ0EsaUJBQWlCO0FBQ2pCWixNQUFNRyxTQUFTLENBQUNNLGNBQWMsR0FBRyxTQUFVZSxTQUFTO0lBQ2hELE9BQU8sQ0FBQ0EsYUFBYSxFQUFFLEVBQUVDLElBQUksQ0FBQyxDQUFDQyxHQUFHQyxJQUFNRCxFQUFFRSxFQUFFLEdBQUdELEVBQUVDLEVBQUU7QUFDdkQ7QUFDQUMsT0FBT0MsT0FBTyxHQUFHOUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy93ZWIzLWNvcmUtcmVxdWVzdG1hbmFnZXIvbGliL2JhdGNoLmpzPzg2NzAiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAgICBUaGlzIGZpbGUgaXMgcGFydCBvZiB3ZWIzLmpzLlxuXG4gICAgd2ViMy5qcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gICAgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAgICAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuXG4gICAgd2ViMy5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICAgIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICAgIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuXG4gICAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gICAgYWxvbmcgd2l0aCB3ZWIzLmpzLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuKi9cbi8qKlxuICogQGZpbGUgYmF0Y2guanNcbiAqIEBhdXRob3IgTWFyZWsgS290ZXdpY3ogPG1hcmVrQGV0aGRldi5jb20+XG4gKiBAZGF0ZSAyMDE1XG4gKi9cblwidXNlIHN0cmljdFwiO1xudmFyIEpzb25ycGMgPSByZXF1aXJlKCcuL2pzb25ycGMnKTtcbnZhciBlcnJvcnMgPSByZXF1aXJlKCd3ZWIzLWNvcmUtaGVscGVycycpLmVycm9ycztcbnZhciBCYXRjaCA9IGZ1bmN0aW9uIChyZXF1ZXN0TWFuYWdlcikge1xuICAgIHRoaXMucmVxdWVzdE1hbmFnZXIgPSByZXF1ZXN0TWFuYWdlcjtcbiAgICB0aGlzLnJlcXVlc3RzID0gW107XG59O1xuLyoqXG4gKiBTaG91bGQgYmUgY2FsbGVkIHRvIGFkZCBjcmVhdGUgbmV3IHJlcXVlc3QgdG8gYmF0Y2ggcmVxdWVzdFxuICpcbiAqIEBtZXRob2QgYWRkXG4gKiBAcGFyYW0ge09iamVjdH0ganNvbnJwYyByZXF1ZXQgb2JqZWN0XG4gKi9cbkJhdGNoLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAocmVxdWVzdCkge1xuICAgIHRoaXMucmVxdWVzdHMucHVzaChyZXF1ZXN0KTtcbn07XG4vKipcbiAqIFNob3VsZCBiZSBjYWxsZWQgdG8gZXhlY3V0ZSBiYXRjaCByZXF1ZXN0XG4gKlxuICogQG1ldGhvZCBleGVjdXRlXG4gKi9cbkJhdGNoLnByb3RvdHlwZS5leGVjdXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXF1ZXN0cyA9IHRoaXMucmVxdWVzdHM7XG4gICAgdmFyIHNvcnRSZXNwb25zZXMgPSB0aGlzLl9zb3J0UmVzcG9uc2VzLmJpbmQodGhpcyk7XG4gICAgdGhpcy5yZXF1ZXN0TWFuYWdlci5zZW5kQmF0Y2gocmVxdWVzdHMsIGZ1bmN0aW9uIChlcnIsIHJlc3VsdHMpIHtcbiAgICAgICAgcmVzdWx0cyA9IHNvcnRSZXNwb25zZXMocmVzdWx0cyk7XG4gICAgICAgIHJlcXVlc3RzLm1hcChmdW5jdGlvbiAocmVxdWVzdCwgaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHRzW2luZGV4XSB8fCB7fTtcbiAgICAgICAgfSkuZm9yRWFjaChmdW5jdGlvbiAocmVzdWx0LCBpbmRleCkge1xuICAgICAgICAgICAgaWYgKHJlcXVlc3RzW2luZGV4XS5jYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgJiYgcmVzdWx0LmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXF1ZXN0c1tpbmRleF0uY2FsbGJhY2soZXJyb3JzLkVycm9yUmVzcG9uc2UocmVzdWx0KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghSnNvbnJwYy5pc1ZhbGlkUmVzcG9uc2UocmVzdWx0KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVxdWVzdHNbaW5kZXhdLmNhbGxiYWNrKGVycm9ycy5JbnZhbGlkUmVzcG9uc2UocmVzdWx0KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RzW2luZGV4XS5jYWxsYmFjayhudWxsLCByZXF1ZXN0c1tpbmRleF0uZm9ybWF0ID8gcmVxdWVzdHNbaW5kZXhdLmZvcm1hdChyZXN1bHQucmVzdWx0KSA6IHJlc3VsdC5yZXN1bHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RzW2luZGV4XS5jYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59O1xuLy8gU29ydCByZXNwb25zZXNcbkJhdGNoLnByb3RvdHlwZS5fc29ydFJlc3BvbnNlcyA9IGZ1bmN0aW9uIChyZXNwb25zZXMpIHtcbiAgICByZXR1cm4gKHJlc3BvbnNlcyB8fCBbXSkuc29ydCgoYSwgYikgPT4gYS5pZCAtIGIuaWQpO1xufTtcbm1vZHVsZS5leHBvcnRzID0gQmF0Y2g7XG4iXSwibmFtZXMiOlsiSnNvbnJwYyIsInJlcXVpcmUiLCJlcnJvcnMiLCJCYXRjaCIsInJlcXVlc3RNYW5hZ2VyIiwicmVxdWVzdHMiLCJwcm90b3R5cGUiLCJhZGQiLCJyZXF1ZXN0IiwicHVzaCIsImV4ZWN1dGUiLCJzb3J0UmVzcG9uc2VzIiwiX3NvcnRSZXNwb25zZXMiLCJiaW5kIiwic2VuZEJhdGNoIiwiZXJyIiwicmVzdWx0cyIsIm1hcCIsImluZGV4IiwiZm9yRWFjaCIsInJlc3VsdCIsImNhbGxiYWNrIiwiZXJyb3IiLCJFcnJvclJlc3BvbnNlIiwiaXNWYWxpZFJlc3BvbnNlIiwiSW52YWxpZFJlc3BvbnNlIiwiZm9ybWF0IiwicmVzcG9uc2VzIiwic29ydCIsImEiLCJiIiwiaWQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-core-requestmanager/lib/batch.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-core-requestmanager/lib/givenProvider.js":
/*!********************************************************************!*\
  !*** ./node_modules/web3-core-requestmanager/lib/givenProvider.js ***!
  \********************************************************************/
/***/ ((module) => {

"use strict";
eval("/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */ /**\n * @file givenProvider.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */ \nvar givenProvider = null;\n// ADD GIVEN PROVIDER\n/* jshint ignore:start */ var global = typeof globalThis === \"object\" ? globalThis : undefined;\nif (!global) {\n    try {\n        global = Function(\"return this\")();\n    } catch (e) {\n        global = self;\n    }\n}\n// EIP-1193: window.ethereum\nif (typeof global.ethereum !== \"undefined\") {\n    givenProvider = global.ethereum;\n// Legacy web3.currentProvider\n} else if (typeof global.web3 !== \"undefined\" && global.web3.currentProvider) {\n    if (global.web3.currentProvider.sendAsync) {\n        global.web3.currentProvider.send = global.web3.currentProvider.sendAsync;\n        delete global.web3.currentProvider.sendAsync;\n    }\n    // if connection is 'ipcProviderWrapper', add subscription support\n    if (!global.web3.currentProvider.on && global.web3.currentProvider.connection && global.web3.currentProvider.connection.constructor.name === \"ipcProviderWrapper\") {\n        global.web3.currentProvider.on = function(type, callback) {\n            if (typeof callback !== \"function\") throw new Error(\"The second parameter callback must be a function.\");\n            switch(type){\n                case \"data\":\n                    this.connection.on(\"data\", function(data) {\n                        var result = \"\";\n                        data = data.toString();\n                        try {\n                            result = JSON.parse(data);\n                        } catch (e) {\n                            return callback(new Error(\"Couldn't parse response data\" + data));\n                        }\n                        // notification\n                        if (!result.id && result.method.indexOf(\"_subscription\") !== -1) {\n                            callback(null, result);\n                        }\n                    });\n                    break;\n                default:\n                    this.connection.on(type, callback);\n                    break;\n            }\n        };\n    }\n    givenProvider = global.web3.currentProvider;\n}\n/* jshint ignore:end */ module.exports = givenProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1jb3JlLXJlcXVlc3RtYW5hZ2VyL2xpYi9naXZlblByb3ZpZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Q0FlQyxHQUNEOzs7O0NBSUMsR0FDWTtBQUNiLElBQUlBLGdCQUFnQjtBQUNwQixxQkFBcUI7QUFDckIsdUJBQXVCLEdBQ3ZCLElBQUlDLFNBQVMsT0FBT0MsZUFBZSxXQUFXQSxhQUFhQztBQUMzRCxJQUFJLENBQUNGLFFBQVE7SUFDVCxJQUFJO1FBQ0FBLFNBQVNHLFNBQVM7SUFDdEIsRUFDQSxPQUFPQyxHQUFHO1FBQ05KLFNBQVNLO0lBQ2I7QUFDSjtBQUNBLDRCQUE0QjtBQUM1QixJQUFJLE9BQU9MLE9BQU9NLFFBQVEsS0FBSyxhQUFhO0lBQ3hDUCxnQkFBZ0JDLE9BQU9NLFFBQVE7QUFDL0IsOEJBQThCO0FBQ2xDLE9BQ0ssSUFBSSxPQUFPTixPQUFPTyxJQUFJLEtBQUssZUFBZVAsT0FBT08sSUFBSSxDQUFDQyxlQUFlLEVBQUU7SUFDeEUsSUFBSVIsT0FBT08sSUFBSSxDQUFDQyxlQUFlLENBQUNDLFNBQVMsRUFBRTtRQUN2Q1QsT0FBT08sSUFBSSxDQUFDQyxlQUFlLENBQUNFLElBQUksR0FBR1YsT0FBT08sSUFBSSxDQUFDQyxlQUFlLENBQUNDLFNBQVM7UUFDeEUsT0FBT1QsT0FBT08sSUFBSSxDQUFDQyxlQUFlLENBQUNDLFNBQVM7SUFDaEQ7SUFDQSxrRUFBa0U7SUFDbEUsSUFBSSxDQUFDVCxPQUFPTyxJQUFJLENBQUNDLGVBQWUsQ0FBQ0csRUFBRSxJQUMvQlgsT0FBT08sSUFBSSxDQUFDQyxlQUFlLENBQUNJLFVBQVUsSUFDdENaLE9BQU9PLElBQUksQ0FBQ0MsZUFBZSxDQUFDSSxVQUFVLENBQUNDLFdBQVcsQ0FBQ0MsSUFBSSxLQUFLLHNCQUFzQjtRQUNsRmQsT0FBT08sSUFBSSxDQUFDQyxlQUFlLENBQUNHLEVBQUUsR0FBRyxTQUFVSSxJQUFJLEVBQUVDLFFBQVE7WUFDckQsSUFBSSxPQUFPQSxhQUFhLFlBQ3BCLE1BQU0sSUFBSUMsTUFBTTtZQUNwQixPQUFRRjtnQkFDSixLQUFLO29CQUNELElBQUksQ0FBQ0gsVUFBVSxDQUFDRCxFQUFFLENBQUMsUUFBUSxTQUFVTyxJQUFJO3dCQUNyQyxJQUFJQyxTQUFTO3dCQUNiRCxPQUFPQSxLQUFLRSxRQUFRO3dCQUNwQixJQUFJOzRCQUNBRCxTQUFTRSxLQUFLQyxLQUFLLENBQUNKO3dCQUN4QixFQUNBLE9BQU9kLEdBQUc7NEJBQ04sT0FBT1ksU0FBUyxJQUFJQyxNQUFNLGlDQUFrQ0M7d0JBQ2hFO3dCQUNBLGVBQWU7d0JBQ2YsSUFBSSxDQUFDQyxPQUFPSSxFQUFFLElBQUlKLE9BQU9LLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDLHFCQUFxQixDQUFDLEdBQUc7NEJBQzdEVCxTQUFTLE1BQU1HO3dCQUNuQjtvQkFDSjtvQkFDQTtnQkFDSjtvQkFDSSxJQUFJLENBQUNQLFVBQVUsQ0FBQ0QsRUFBRSxDQUFDSSxNQUFNQztvQkFDekI7WUFDUjtRQUNKO0lBQ0o7SUFDQWpCLGdCQUFnQkMsT0FBT08sSUFBSSxDQUFDQyxlQUFlO0FBQy9DO0FBQ0EscUJBQXFCLEdBQ3JCa0IsT0FBT0MsT0FBTyxHQUFHNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy93ZWIzLWNvcmUtcmVxdWVzdG1hbmFnZXIvbGliL2dpdmVuUHJvdmlkZXIuanM/YjNhMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHdlYjMuanMuXG5cbiB3ZWIzLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG5cbiB3ZWIzLmpzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG5cbiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiBhbG9uZyB3aXRoIHdlYjMuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKi9cbi8qKlxuICogQGZpbGUgZ2l2ZW5Qcm92aWRlci5qc1xuICogQGF1dGhvciBGYWJpYW4gVm9nZWxzdGVsbGVyIDxmYWJpYW5AZXRoZXJldW0ub3JnPlxuICogQGRhdGUgMjAxN1xuICovXG5cInVzZSBzdHJpY3RcIjtcbnZhciBnaXZlblByb3ZpZGVyID0gbnVsbDtcbi8vIEFERCBHSVZFTiBQUk9WSURFUlxuLyoganNoaW50IGlnbm9yZTpzdGFydCAqL1xudmFyIGdsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JyA/IGdsb2JhbFRoaXMgOiB1bmRlZmluZWQ7XG5pZiAoIWdsb2JhbCkge1xuICAgIHRyeSB7XG4gICAgICAgIGdsb2JhbCA9IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGdsb2JhbCA9IHNlbGY7XG4gICAgfVxufVxuLy8gRUlQLTExOTM6IHdpbmRvdy5ldGhlcmV1bVxuaWYgKHR5cGVvZiBnbG9iYWwuZXRoZXJldW0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgZ2l2ZW5Qcm92aWRlciA9IGdsb2JhbC5ldGhlcmV1bTtcbiAgICAvLyBMZWdhY3kgd2ViMy5jdXJyZW50UHJvdmlkZXJcbn1cbmVsc2UgaWYgKHR5cGVvZiBnbG9iYWwud2ViMyAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2xvYmFsLndlYjMuY3VycmVudFByb3ZpZGVyKSB7XG4gICAgaWYgKGdsb2JhbC53ZWIzLmN1cnJlbnRQcm92aWRlci5zZW5kQXN5bmMpIHtcbiAgICAgICAgZ2xvYmFsLndlYjMuY3VycmVudFByb3ZpZGVyLnNlbmQgPSBnbG9iYWwud2ViMy5jdXJyZW50UHJvdmlkZXIuc2VuZEFzeW5jO1xuICAgICAgICBkZWxldGUgZ2xvYmFsLndlYjMuY3VycmVudFByb3ZpZGVyLnNlbmRBc3luYztcbiAgICB9XG4gICAgLy8gaWYgY29ubmVjdGlvbiBpcyAnaXBjUHJvdmlkZXJXcmFwcGVyJywgYWRkIHN1YnNjcmlwdGlvbiBzdXBwb3J0XG4gICAgaWYgKCFnbG9iYWwud2ViMy5jdXJyZW50UHJvdmlkZXIub24gJiZcbiAgICAgICAgZ2xvYmFsLndlYjMuY3VycmVudFByb3ZpZGVyLmNvbm5lY3Rpb24gJiZcbiAgICAgICAgZ2xvYmFsLndlYjMuY3VycmVudFByb3ZpZGVyLmNvbm5lY3Rpb24uY29uc3RydWN0b3IubmFtZSA9PT0gJ2lwY1Byb3ZpZGVyV3JhcHBlcicpIHtcbiAgICAgICAgZ2xvYmFsLndlYjMuY3VycmVudFByb3ZpZGVyLm9uID0gZnVuY3Rpb24gKHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHNlY29uZCBwYXJhbWV0ZXIgY2FsbGJhY2sgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnZGF0YSc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvbi5vbignZGF0YScsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gZGF0YS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobmV3IEVycm9yKCdDb3VsZG5cXCd0IHBhcnNlIHJlc3BvbnNlIGRhdGEnICsgZGF0YSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbm90aWZpY2F0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJlc3VsdC5pZCAmJiByZXN1bHQubWV0aG9kLmluZGV4T2YoJ19zdWJzY3JpcHRpb24nKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uLm9uKHR5cGUsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuICAgIGdpdmVuUHJvdmlkZXIgPSBnbG9iYWwud2ViMy5jdXJyZW50UHJvdmlkZXI7XG59XG4vKiBqc2hpbnQgaWdub3JlOmVuZCAqL1xubW9kdWxlLmV4cG9ydHMgPSBnaXZlblByb3ZpZGVyO1xuIl0sIm5hbWVzIjpbImdpdmVuUHJvdmlkZXIiLCJnbG9iYWwiLCJnbG9iYWxUaGlzIiwidW5kZWZpbmVkIiwiRnVuY3Rpb24iLCJlIiwic2VsZiIsImV0aGVyZXVtIiwid2ViMyIsImN1cnJlbnRQcm92aWRlciIsInNlbmRBc3luYyIsInNlbmQiLCJvbiIsImNvbm5lY3Rpb24iLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJ0eXBlIiwiY2FsbGJhY2siLCJFcnJvciIsImRhdGEiLCJyZXN1bHQiLCJ0b1N0cmluZyIsIkpTT04iLCJwYXJzZSIsImlkIiwibWV0aG9kIiwiaW5kZXhPZiIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-core-requestmanager/lib/givenProvider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-core-requestmanager/lib/index.js":
/*!************************************************************!*\
  !*** ./node_modules/web3-core-requestmanager/lib/index.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*\n    This file is part of web3.js.\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ /**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */ \nconst { callbackify } = __webpack_require__(/*! util */ \"util\");\nvar errors = (__webpack_require__(/*! web3-core-helpers */ \"(ssr)/./node_modules/web3-core-helpers/lib/index.js\").errors);\nvar Jsonrpc = __webpack_require__(/*! ./jsonrpc.js */ \"(ssr)/./node_modules/web3-core-requestmanager/lib/jsonrpc.js\");\nvar BatchManager = __webpack_require__(/*! ./batch.js */ \"(ssr)/./node_modules/web3-core-requestmanager/lib/batch.js\");\nvar givenProvider = __webpack_require__(/*! ./givenProvider.js */ \"(ssr)/./node_modules/web3-core-requestmanager/lib/givenProvider.js\");\n/**\n * It's responsible for passing messages to providers\n * It's also responsible for polling the ethereum node for incoming messages\n * Default poll timeout is 1 second\n * Singleton\n *\n * @param {string|Object}provider\n * @param {Net.Socket} net\n *\n * @constructor\n */ var RequestManager = function RequestManager(provider, net) {\n    this.provider = null;\n    this.providers = RequestManager.providers;\n    this.setProvider(provider, net);\n    this.subscriptions = new Map();\n};\nRequestManager.givenProvider = givenProvider;\nRequestManager.providers = {\n    WebsocketProvider: __webpack_require__(/*! web3-providers-ws */ \"(ssr)/./node_modules/web3-core-requestmanager/node_modules/web3-providers-ws/lib/index.js\"),\n    HttpProvider: __webpack_require__(/*! web3-providers-http */ \"(ssr)/./node_modules/web3-core-requestmanager/node_modules/web3-providers-http/lib/index.js\"),\n    IpcProvider: __webpack_require__(/*! web3-providers-ipc */ \"(ssr)/./node_modules/web3-core-requestmanager/node_modules/web3-providers-ipc/lib/index.js\")\n};\n/**\n * Should be used to set provider of request manager\n *\n * @method setProvider\n *\n * @param {Object} provider\n * @param {net.Socket} net\n *\n * @returns void\n */ RequestManager.prototype.setProvider = function(provider, net) {\n    var _this = this;\n    // autodetect provider\n    if (provider && typeof provider === \"string\" && this.providers) {\n        // HTTP\n        if (/^http(s)?:\\/\\//i.test(provider)) {\n            provider = new this.providers.HttpProvider(provider);\n        // WS\n        } else if (/^ws(s)?:\\/\\//i.test(provider)) {\n            provider = new this.providers.WebsocketProvider(provider);\n        // IPC\n        } else if (provider && typeof net === \"object\" && typeof net.connect === \"function\") {\n            provider = new this.providers.IpcProvider(provider, net);\n        } else if (provider) {\n            throw new Error(\"Can't autodetect provider for \\\"\" + provider + '\"');\n        }\n    }\n    // reset the old one before changing, if still connected\n    if (this.provider && this.provider.connected) this.clearSubscriptions();\n    this.provider = provider || null;\n    // listen to incoming notifications\n    if (this.provider && this.provider.on) {\n        if (typeof provider.request === \"function\") {\n            this.provider.on(\"message\", function(payload) {\n                if (payload && payload.type === \"eth_subscription\" && payload.data) {\n                    const data = payload.data;\n                    if (data.subscription && _this.subscriptions.has(data.subscription)) {\n                        _this.subscriptions.get(data.subscription).callback(null, data.result);\n                    }\n                }\n            });\n        } else {\n            this.provider.on(\"data\", function data(result, deprecatedResult) {\n                result = result || deprecatedResult; // this is for possible old providers, which may had the error first handler\n                // if result is a subscription, call callback for that subscription\n                if (result.method && result.params && result.params.subscription && _this.subscriptions.has(result.params.subscription)) {\n                    _this.subscriptions.get(result.params.subscription).callback(null, result.params.result);\n                }\n            });\n        }\n        // resubscribe if the provider has reconnected\n        this.provider.on(\"connect\", function connect() {\n            _this.subscriptions.forEach(function(subscription) {\n                subscription.subscription.resubscribe();\n            });\n        });\n        // notify all subscriptions about the error condition\n        this.provider.on(\"error\", function error(error) {\n            _this.subscriptions.forEach(function(subscription) {\n                subscription.callback(error);\n            });\n        });\n        // notify all subscriptions about bad close conditions\n        const disconnect = function disconnect(event) {\n            if (!_this._isCleanCloseEvent(event) || _this._isIpcCloseError(event)) {\n                _this.subscriptions.forEach(function(subscription) {\n                    subscription.callback(errors.ConnectionCloseError(event));\n                    _this.subscriptions.delete(subscription.subscription.id);\n                });\n                if (_this.provider && _this.provider.emit) {\n                    _this.provider.emit(\"error\", errors.ConnectionCloseError(event));\n                }\n            }\n            if (_this.provider && _this.provider.emit) {\n                _this.provider.emit(\"end\", event);\n            }\n        };\n        this.provider.on(\"disconnect\", disconnect);\n    // TODO add end, timeout??\n    }\n};\n/**\n * Asynchronously send request to provider.\n * Prefers to use the `request` method available on the provider as specified in [EIP-1193](https://eips.ethereum.org/EIPS/eip-1193).\n * If `request` is not available, falls back to `sendAsync` and `send` respectively.\n * @method send\n * @param {Object} data\n * @param {Function} callback\n */ RequestManager.prototype.send = function(data, callback) {\n    callback = callback || function() {};\n    if (!this.provider) {\n        return callback(errors.InvalidProvider());\n    }\n    const { method, params } = data;\n    const jsonrpcPayload = Jsonrpc.toPayload(method, params);\n    const jsonrpcResultCallback = this._jsonrpcResultCallback(callback, jsonrpcPayload);\n    if (this.provider.request) {\n        const callbackRequest = callbackify(this.provider.request.bind(this.provider));\n        const requestArgs = {\n            method,\n            params\n        };\n        callbackRequest(requestArgs, callback);\n    } else if (this.provider.sendAsync) {\n        this.provider.sendAsync(jsonrpcPayload, jsonrpcResultCallback);\n    } else if (this.provider.send) {\n        this.provider.send(jsonrpcPayload, jsonrpcResultCallback);\n    } else {\n        throw new Error(\"Provider does not have a request or send method to use.\");\n    }\n};\n/**\n * Asynchronously send batch request.\n * Only works if provider supports batch methods through `sendAsync` or `send`.\n * @method sendBatch\n * @param {Array} data - array of payload objects\n * @param {Function} callback\n */ RequestManager.prototype.sendBatch = function(data, callback) {\n    if (!this.provider) {\n        return callback(errors.InvalidProvider());\n    }\n    var payload = Jsonrpc.toBatchPayload(data);\n    this.provider[this.provider.sendAsync ? \"sendAsync\" : \"send\"](payload, function(err, results) {\n        if (err) {\n            return callback(err);\n        }\n        if (!Array.isArray(results)) {\n            return callback(errors.InvalidResponse(results));\n        }\n        callback(null, results);\n    });\n};\n/**\n * Waits for notifications\n *\n * @method addSubscription\n * @param {Subscription} subscription         the subscription\n * @param {String} type         the subscription namespace (eth, personal, etc)\n * @param {Function} callback   the callback to call for incoming notifications\n */ RequestManager.prototype.addSubscription = function(subscription, callback) {\n    if (this.provider.on) {\n        this.subscriptions.set(subscription.id, {\n            callback: callback,\n            subscription: subscription\n        });\n    } else {\n        throw new Error(\"The provider doesn't support subscriptions: \" + this.provider.constructor.name);\n    }\n};\n/**\n * Waits for notifications\n *\n * @method removeSubscription\n * @param {String} id           the subscription id\n * @param {Function} callback   fired once the subscription is removed\n */ RequestManager.prototype.removeSubscription = function(id, callback) {\n    if (this.subscriptions.has(id)) {\n        var type = this.subscriptions.get(id).subscription.options.type;\n        // remove subscription first to avoid reentry\n        this.subscriptions.delete(id);\n        // then, try to actually unsubscribe\n        this.send({\n            method: type + \"_unsubscribe\",\n            params: [\n                id\n            ]\n        }, callback);\n        return;\n    }\n    if (typeof callback === \"function\") {\n        // call the callback if the subscription was already removed\n        callback(null);\n    }\n};\n/**\n * Should be called to reset the subscriptions\n *\n * @method reset\n *\n * @returns {boolean}\n */ RequestManager.prototype.clearSubscriptions = function(keepIsSyncing) {\n    try {\n        var _this = this;\n        // uninstall all subscriptions\n        if (this.subscriptions.size > 0) {\n            this.subscriptions.forEach(function(value, id) {\n                if (!keepIsSyncing || value.name !== \"syncing\") _this.removeSubscription(id);\n            });\n        }\n        //  reset notification callbacks etc.\n        if (this.provider.reset) this.provider.reset();\n        return true;\n    } catch (e) {\n        throw new Error(`Error while clearing subscriptions: ${e}`);\n    }\n};\n/**\n * Evaluates WS close event\n *\n * @method _isCleanClose\n *\n * @param {CloseEvent | boolean} event WS close event or exception flag\n *\n * @returns {boolean}\n */ RequestManager.prototype._isCleanCloseEvent = function(event) {\n    return typeof event === \"object\" && ([\n        1000\n    ].includes(event.code) || event.wasClean === true);\n};\n/**\n * Detects Ipc close error. The node.net module emits ('close', isException)\n *\n * @method _isIpcCloseError\n *\n * @param {CloseEvent | boolean} event WS close event or exception flag\n *\n * @returns {boolean}\n */ RequestManager.prototype._isIpcCloseError = function(event) {\n    return typeof event === \"boolean\" && event;\n};\n/**\n * The jsonrpc result callback for RequestManager.send\n *\n * @method _jsonrpcResultCallback\n *\n * @param {Function} callback the callback to use\n * @param {Object} payload the jsonrpc payload\n *\n * @returns {Function} return callback of form (err, result)\n *\n */ RequestManager.prototype._jsonrpcResultCallback = function(callback, payload) {\n    return function(err, result) {\n        if (result && result.id && payload.id !== result.id) {\n            return callback(new Error(`Wrong response id ${result.id} (expected: ${payload.id}) in ${JSON.stringify(payload)}`));\n        }\n        if (err) {\n            return callback(err);\n        }\n        if (result && result.error) {\n            return callback(errors.ErrorResponse(result));\n        }\n        if (!Jsonrpc.isValidResponse(result)) {\n            return callback(errors.InvalidResponse(result));\n        }\n        callback(null, result.result);\n    };\n};\nmodule.exports = {\n    Manager: RequestManager,\n    BatchManager: BatchManager\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-core-requestmanager/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-core-requestmanager/lib/jsonrpc.js":
/*!**************************************************************!*\
  !*** ./node_modules/web3-core-requestmanager/lib/jsonrpc.js ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
eval("/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ /** @file jsonrpc.js\n * @authors:\n *   Fabian Vogelsteller <fabian@ethereum.org>\n *   Marek Kotewicz <marek@ethdev.com>\n *   Aaron Kumavis <aaron@kumavis.me>\n * @date 2015\n */ \n// Initialize Jsonrpc as a simple object with utility functions.\nvar Jsonrpc = {\n    // This is the starting counter for the Jsonrpc.id.\n    // Pick a random number between 0 and the maximum safe integer\n    messageId: Math.floor(Math.random() * Number.MAX_SAFE_INTEGER)\n};\n/**\n * Should be called to valid json create payload object\n *\n * @method toPayload\n * @param {Function} method of jsonrpc call, required\n * @param {Array} params, an array of method params, optional\n * @returns {Object} valid jsonrpc payload object\n */ Jsonrpc.toPayload = function(method, params) {\n    if (!method) {\n        throw new Error('JSONRPC method should be specified for params: \"' + JSON.stringify(params) + '\"!');\n    }\n    if (Jsonrpc.messageId === Number.MAX_SAFE_INTEGER) {\n        // if the maximum safe integer has been reached, restart from a random number\n        Jsonrpc.messageId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n    } else {\n        // advance message ID\n        Jsonrpc.messageId++;\n    }\n    return {\n        jsonrpc: \"2.0\",\n        id: Jsonrpc.messageId,\n        method: method,\n        params: params || []\n    };\n};\n/**\n * Should be called to check if jsonrpc response is valid\n *\n * @method isValidResponse\n * @param {Object}\n * @returns {Boolean} true if response is valid, otherwise false\n */ Jsonrpc.isValidResponse = function(response) {\n    return Array.isArray(response) ? response.every(validateSingleMessage) : validateSingleMessage(response);\n    function validateSingleMessage(message) {\n        return !!message && !message.error && message.jsonrpc === \"2.0\" && (typeof message.id === \"number\" || typeof message.id === \"string\") && message.result !== undefined; // only undefined is not valid json object\n    }\n};\n/**\n * Should be called to create batch payload object\n *\n * @method toBatchPayload\n * @param {Array} messages, an array of objects with method (required) and params (optional) fields\n * @returns {Array} batch payload\n */ Jsonrpc.toBatchPayload = function(messages) {\n    return messages.map(function(message) {\n        return Jsonrpc.toPayload(message.method, message.params);\n    });\n};\nmodule.exports = Jsonrpc;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1jb3JlLXJlcXVlc3RtYW5hZ2VyL2xpYi9qc29ucnBjLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7QUFlQSxHQUNBOzs7Ozs7Q0FNQyxHQUNZO0FBQ2IsZ0VBQWdFO0FBQ2hFLElBQUlBLFVBQVU7SUFDVixtREFBbUQ7SUFDbkQsOERBQThEO0lBQzlEQyxXQUFXQyxLQUFLQyxLQUFLLENBQUNELEtBQUtFLE1BQU0sS0FBS0MsT0FBT0MsZ0JBQWdCO0FBQ2pFO0FBQ0E7Ozs7Ozs7Q0FPQyxHQUNETixRQUFRTyxTQUFTLEdBQUcsU0FBVUMsTUFBTSxFQUFFQyxNQUFNO0lBQ3hDLElBQUksQ0FBQ0QsUUFBUTtRQUNULE1BQU0sSUFBSUUsTUFBTSxxREFBcURDLEtBQUtDLFNBQVMsQ0FBQ0gsVUFBVTtJQUNsRztJQUNBLElBQUlULFFBQVFDLFNBQVMsS0FBS0ksT0FBT0MsZ0JBQWdCLEVBQUU7UUFDL0MsNkVBQTZFO1FBQzdFTixRQUFRQyxTQUFTLEdBQUdDLEtBQUtDLEtBQUssQ0FBQ0QsS0FBS0UsTUFBTSxLQUFLQyxPQUFPQyxnQkFBZ0I7SUFDMUUsT0FDSztRQUNELHFCQUFxQjtRQUNyQk4sUUFBUUMsU0FBUztJQUNyQjtJQUNBLE9BQU87UUFDSFksU0FBUztRQUNUQyxJQUFJZCxRQUFRQyxTQUFTO1FBQ3JCTyxRQUFRQTtRQUNSQyxRQUFRQSxVQUFVLEVBQUU7SUFDeEI7QUFDSjtBQUNBOzs7Ozs7Q0FNQyxHQUNEVCxRQUFRZSxlQUFlLEdBQUcsU0FBVUMsUUFBUTtJQUN4QyxPQUFPQyxNQUFNQyxPQUFPLENBQUNGLFlBQVlBLFNBQVNHLEtBQUssQ0FBQ0MseUJBQXlCQSxzQkFBc0JKO0lBQy9GLFNBQVNJLHNCQUFzQkMsT0FBTztRQUNsQyxPQUFPLENBQUMsQ0FBQ0EsV0FDTCxDQUFDQSxRQUFRQyxLQUFLLElBQ2RELFFBQVFSLE9BQU8sS0FBSyxTQUNuQixRQUFPUSxRQUFRUCxFQUFFLEtBQUssWUFBWSxPQUFPTyxRQUFRUCxFQUFFLEtBQUssUUFBTyxLQUNoRU8sUUFBUUUsTUFBTSxLQUFLQyxXQUFXLDBDQUEwQztJQUNoRjtBQUNKO0FBQ0E7Ozs7OztDQU1DLEdBQ0R4QixRQUFReUIsY0FBYyxHQUFHLFNBQVVDLFFBQVE7SUFDdkMsT0FBT0EsU0FBU0MsR0FBRyxDQUFDLFNBQVVOLE9BQU87UUFDakMsT0FBT3JCLFFBQVFPLFNBQVMsQ0FBQ2MsUUFBUWIsTUFBTSxFQUFFYSxRQUFRWixNQUFNO0lBQzNEO0FBQ0o7QUFDQW1CLE9BQU9DLE9BQU8sR0FBRzdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvd2ViMy1jb3JlLXJlcXVlc3RtYW5hZ2VyL2xpYi9qc29ucnBjLmpzP2Y3OWIiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAgICBUaGlzIGZpbGUgaXMgcGFydCBvZiB3ZWIzLmpzLlxuXG4gICAgd2ViMy5qcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gICAgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAgICAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuXG4gICAgd2ViMy5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICAgIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICAgIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuXG4gICAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gICAgYWxvbmcgd2l0aCB3ZWIzLmpzLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuKi9cbi8qKiBAZmlsZSBqc29ucnBjLmpzXG4gKiBAYXV0aG9yczpcbiAqICAgRmFiaWFuIFZvZ2Vsc3RlbGxlciA8ZmFiaWFuQGV0aGVyZXVtLm9yZz5cbiAqICAgTWFyZWsgS290ZXdpY3ogPG1hcmVrQGV0aGRldi5jb20+XG4gKiAgIEFhcm9uIEt1bWF2aXMgPGFhcm9uQGt1bWF2aXMubWU+XG4gKiBAZGF0ZSAyMDE1XG4gKi9cblwidXNlIHN0cmljdFwiO1xuLy8gSW5pdGlhbGl6ZSBKc29ucnBjIGFzIGEgc2ltcGxlIG9iamVjdCB3aXRoIHV0aWxpdHkgZnVuY3Rpb25zLlxudmFyIEpzb25ycGMgPSB7XG4gICAgLy8gVGhpcyBpcyB0aGUgc3RhcnRpbmcgY291bnRlciBmb3IgdGhlIEpzb25ycGMuaWQuXG4gICAgLy8gUGljayBhIHJhbmRvbSBudW1iZXIgYmV0d2VlbiAwIGFuZCB0aGUgbWF4aW11bSBzYWZlIGludGVnZXJcbiAgICBtZXNzYWdlSWQ6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKVxufTtcbi8qKlxuICogU2hvdWxkIGJlIGNhbGxlZCB0byB2YWxpZCBqc29uIGNyZWF0ZSBwYXlsb2FkIG9iamVjdFxuICpcbiAqIEBtZXRob2QgdG9QYXlsb2FkXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBtZXRob2Qgb2YganNvbnJwYyBjYWxsLCByZXF1aXJlZFxuICogQHBhcmFtIHtBcnJheX0gcGFyYW1zLCBhbiBhcnJheSBvZiBtZXRob2QgcGFyYW1zLCBvcHRpb25hbFxuICogQHJldHVybnMge09iamVjdH0gdmFsaWQganNvbnJwYyBwYXlsb2FkIG9iamVjdFxuICovXG5Kc29ucnBjLnRvUGF5bG9hZCA9IGZ1bmN0aW9uIChtZXRob2QsIHBhcmFtcykge1xuICAgIGlmICghbWV0aG9kKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSlNPTlJQQyBtZXRob2Qgc2hvdWxkIGJlIHNwZWNpZmllZCBmb3IgcGFyYW1zOiBcIicgKyBKU09OLnN0cmluZ2lmeShwYXJhbXMpICsgJ1wiIScpO1xuICAgIH1cbiAgICBpZiAoSnNvbnJwYy5tZXNzYWdlSWQgPT09IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKSB7XG4gICAgICAgIC8vIGlmIHRoZSBtYXhpbXVtIHNhZmUgaW50ZWdlciBoYXMgYmVlbiByZWFjaGVkLCByZXN0YXJ0IGZyb20gYSByYW5kb20gbnVtYmVyXG4gICAgICAgIEpzb25ycGMubWVzc2FnZUlkID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gYWR2YW5jZSBtZXNzYWdlIElEXG4gICAgICAgIEpzb25ycGMubWVzc2FnZUlkKys7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGpzb25ycGM6ICcyLjAnLFxuICAgICAgICBpZDogSnNvbnJwYy5tZXNzYWdlSWQsXG4gICAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgICBwYXJhbXM6IHBhcmFtcyB8fCBbXVxuICAgIH07XG59O1xuLyoqXG4gKiBTaG91bGQgYmUgY2FsbGVkIHRvIGNoZWNrIGlmIGpzb25ycGMgcmVzcG9uc2UgaXMgdmFsaWRcbiAqXG4gKiBAbWV0aG9kIGlzVmFsaWRSZXNwb25zZVxuICogQHBhcmFtIHtPYmplY3R9XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdHJ1ZSBpZiByZXNwb25zZSBpcyB2YWxpZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbkpzb25ycGMuaXNWYWxpZFJlc3BvbnNlID0gZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkocmVzcG9uc2UpID8gcmVzcG9uc2UuZXZlcnkodmFsaWRhdGVTaW5nbGVNZXNzYWdlKSA6IHZhbGlkYXRlU2luZ2xlTWVzc2FnZShyZXNwb25zZSk7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGVTaW5nbGVNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuICEhbWVzc2FnZSAmJlxuICAgICAgICAgICAgIW1lc3NhZ2UuZXJyb3IgJiZcbiAgICAgICAgICAgIG1lc3NhZ2UuanNvbnJwYyA9PT0gJzIuMCcgJiZcbiAgICAgICAgICAgICh0eXBlb2YgbWVzc2FnZS5pZCA9PT0gJ251bWJlcicgfHwgdHlwZW9mIG1lc3NhZ2UuaWQgPT09ICdzdHJpbmcnKSAmJlxuICAgICAgICAgICAgbWVzc2FnZS5yZXN1bHQgIT09IHVuZGVmaW5lZDsgLy8gb25seSB1bmRlZmluZWQgaXMgbm90IHZhbGlkIGpzb24gb2JqZWN0XG4gICAgfVxufTtcbi8qKlxuICogU2hvdWxkIGJlIGNhbGxlZCB0byBjcmVhdGUgYmF0Y2ggcGF5bG9hZCBvYmplY3RcbiAqXG4gKiBAbWV0aG9kIHRvQmF0Y2hQYXlsb2FkXG4gKiBAcGFyYW0ge0FycmF5fSBtZXNzYWdlcywgYW4gYXJyYXkgb2Ygb2JqZWN0cyB3aXRoIG1ldGhvZCAocmVxdWlyZWQpIGFuZCBwYXJhbXMgKG9wdGlvbmFsKSBmaWVsZHNcbiAqIEByZXR1cm5zIHtBcnJheX0gYmF0Y2ggcGF5bG9hZFxuICovXG5Kc29ucnBjLnRvQmF0Y2hQYXlsb2FkID0gZnVuY3Rpb24gKG1lc3NhZ2VzKSB7XG4gICAgcmV0dXJuIG1lc3NhZ2VzLm1hcChmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gSnNvbnJwYy50b1BheWxvYWQobWVzc2FnZS5tZXRob2QsIG1lc3NhZ2UucGFyYW1zKTtcbiAgICB9KTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IEpzb25ycGM7XG4iXSwibmFtZXMiOlsiSnNvbnJwYyIsIm1lc3NhZ2VJZCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsIk51bWJlciIsIk1BWF9TQUZFX0lOVEVHRVIiLCJ0b1BheWxvYWQiLCJtZXRob2QiLCJwYXJhbXMiLCJFcnJvciIsIkpTT04iLCJzdHJpbmdpZnkiLCJqc29ucnBjIiwiaWQiLCJpc1ZhbGlkUmVzcG9uc2UiLCJyZXNwb25zZSIsIkFycmF5IiwiaXNBcnJheSIsImV2ZXJ5IiwidmFsaWRhdGVTaW5nbGVNZXNzYWdlIiwibWVzc2FnZSIsImVycm9yIiwicmVzdWx0IiwidW5kZWZpbmVkIiwidG9CYXRjaFBheWxvYWQiLCJtZXNzYWdlcyIsIm1hcCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-core-requestmanager/lib/jsonrpc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-core-requestmanager/node_modules/eventemitter3/index.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/web3-core-requestmanager/node_modules/eventemitter3/index.js ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
eval("\nvar has = Object.prototype.hasOwnProperty, prefix = \"~\";\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */ function Events() {}\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n    Events.prototype = Object.create(null);\n    //\n    // This hack is needed because the `__proto__` property is still inherited in\n    // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n    //\n    if (!new Events().__proto__) prefix = false;\n}\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */ function EE(fn, context, once) {\n    this.fn = fn;\n    this.context = context;\n    this.once = once || false;\n}\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */ function addListener(emitter, event, fn, context, once) {\n    if (typeof fn !== \"function\") {\n        throw new TypeError(\"The listener must be a function\");\n    }\n    var listener = new EE(fn, context || emitter, once), evt = prefix ? prefix + event : event;\n    if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n    else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n    else emitter._events[evt] = [\n        emitter._events[evt],\n        listener\n    ];\n    return emitter;\n}\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */ function clearEvent(emitter, evt) {\n    if (--emitter._eventsCount === 0) emitter._events = new Events();\n    else delete emitter._events[evt];\n}\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */ function EventEmitter() {\n    this._events = new Events();\n    this._eventsCount = 0;\n}\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */ EventEmitter.prototype.eventNames = function eventNames() {\n    var names = [], events, name;\n    if (this._eventsCount === 0) return names;\n    for(name in events = this._events){\n        if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n    }\n    if (Object.getOwnPropertySymbols) {\n        return names.concat(Object.getOwnPropertySymbols(events));\n    }\n    return names;\n};\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */ EventEmitter.prototype.listeners = function listeners(event) {\n    var evt = prefix ? prefix + event : event, handlers = this._events[evt];\n    if (!handlers) return [];\n    if (handlers.fn) return [\n        handlers.fn\n    ];\n    for(var i = 0, l = handlers.length, ee = new Array(l); i < l; i++){\n        ee[i] = handlers[i].fn;\n    }\n    return ee;\n};\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */ EventEmitter.prototype.listenerCount = function listenerCount(event) {\n    var evt = prefix ? prefix + event : event, listeners = this._events[evt];\n    if (!listeners) return 0;\n    if (listeners.fn) return 1;\n    return listeners.length;\n};\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */ EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n    var evt = prefix ? prefix + event : event;\n    if (!this._events[evt]) return false;\n    var listeners = this._events[evt], len = arguments.length, args, i;\n    if (listeners.fn) {\n        if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n        switch(len){\n            case 1:\n                return listeners.fn.call(listeners.context), true;\n            case 2:\n                return listeners.fn.call(listeners.context, a1), true;\n            case 3:\n                return listeners.fn.call(listeners.context, a1, a2), true;\n            case 4:\n                return listeners.fn.call(listeners.context, a1, a2, a3), true;\n            case 5:\n                return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n            case 6:\n                return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n        }\n        for(i = 1, args = new Array(len - 1); i < len; i++){\n            args[i - 1] = arguments[i];\n        }\n        listeners.fn.apply(listeners.context, args);\n    } else {\n        var length = listeners.length, j;\n        for(i = 0; i < length; i++){\n            if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n            switch(len){\n                case 1:\n                    listeners[i].fn.call(listeners[i].context);\n                    break;\n                case 2:\n                    listeners[i].fn.call(listeners[i].context, a1);\n                    break;\n                case 3:\n                    listeners[i].fn.call(listeners[i].context, a1, a2);\n                    break;\n                case 4:\n                    listeners[i].fn.call(listeners[i].context, a1, a2, a3);\n                    break;\n                default:\n                    if (!args) for(j = 1, args = new Array(len - 1); j < len; j++){\n                        args[j - 1] = arguments[j];\n                    }\n                    listeners[i].fn.apply(listeners[i].context, args);\n            }\n        }\n    }\n    return true;\n};\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */ EventEmitter.prototype.on = function on(event, fn, context) {\n    return addListener(this, event, fn, context, false);\n};\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */ EventEmitter.prototype.once = function once(event, fn, context) {\n    return addListener(this, event, fn, context, true);\n};\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */ EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n    var evt = prefix ? prefix + event : event;\n    if (!this._events[evt]) return this;\n    if (!fn) {\n        clearEvent(this, evt);\n        return this;\n    }\n    var listeners = this._events[evt];\n    if (listeners.fn) {\n        if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {\n            clearEvent(this, evt);\n        }\n    } else {\n        for(var i = 0, events = [], length = listeners.length; i < length; i++){\n            if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {\n                events.push(listeners[i]);\n            }\n        }\n        //\n        // Reset the array, or remove it completely if we have no more listeners.\n        //\n        if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n        else clearEvent(this, evt);\n    }\n    return this;\n};\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */ EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n    var evt;\n    if (event) {\n        evt = prefix ? prefix + event : event;\n        if (this._events[evt]) clearEvent(this, evt);\n    } else {\n        this._events = new Events();\n        this._eventsCount = 0;\n    }\n    return this;\n};\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n//\n// Expose the module.\n//\nif (true) {\n    module.exports = EventEmitter;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-core-requestmanager/node_modules/eventemitter3/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-core-requestmanager/node_modules/web3-providers-http/lib/index.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/web3-core-requestmanager/node_modules/web3-providers-http/lib/index.js ***!
  \*********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ /** @file httpprovider.js\n * @authors:\n *   Marek Kotewicz <marek@parity.io>\n *   Marian Oancea\n *   Fabian Vogelsteller <fabian@ethereum.org>\n *   AyanamiTech <ayanami0330@protonmail.com>\n * @date 2015\n */ var errors = (__webpack_require__(/*! web3-core-helpers */ \"(ssr)/./node_modules/web3-core-helpers/lib/index.js\").errors);\nvar fetch = __webpack_require__(/*! cross-fetch */ \"(ssr)/./node_modules/cross-fetch/dist/node-ponyfill.js\");\nvar http = __webpack_require__(/*! http */ \"http\");\nvar https = __webpack_require__(/*! https */ \"https\");\n// Apply missing polyfill for IE\n(__webpack_require__(/*! es6-promise */ \"(ssr)/./node_modules/es6-promise/dist/es6-promise.js\").polyfill)();\n// import abortController if abortController is not included in node\nif (typeof global !== \"undefined\" && !global.AbortController) {\n    __webpack_require__(/*! abortcontroller-polyfill/dist/polyfill-patch-fetch */ \"(ssr)/./node_modules/abortcontroller-polyfill/dist/polyfill-patch-fetch.js\");\n}\n/**\n * HttpProvider should be used to send rpc calls over http\n */ var HttpProvider = function HttpProvider(host, options) {\n    options = options || {};\n    this.withCredentials = options.withCredentials;\n    this.timeout = options.timeout || 0;\n    this.headers = options.headers;\n    this.agent = options.agent;\n    this.forceGlobalFetch = options.forceGlobalFetch || false;\n    this.connected = false;\n    // keepAlive is true unless explicitly set to false\n    const keepAlive = options.keepAlive !== false;\n    this.host = host || \"http://localhost:8545\";\n    if (!this.agent) {\n        if (this.host.substring(0, 5) === \"https\") {\n            this.httpsAgent = new https.Agent({\n                keepAlive\n            });\n        } else {\n            this.httpAgent = new http.Agent({\n                keepAlive\n            });\n        }\n    }\n};\n/**\n * Should be used to make async request\n *\n * @method send\n * @param {Object} payload\n * @param {Function} callback triggered on end with (err, result)\n */ HttpProvider.prototype.send = function(payload, callback) {\n    var options = {\n        method: \"POST\",\n        body: JSON.stringify(payload)\n    };\n    var headers = {};\n    var controller;\n    var fetchFunc = this.forceGlobalFetch ? globalThis.fetch : fetch;\n    if (typeof AbortController !== \"undefined\") {\n        controller = new AbortController();\n    } else if (false) {}\n    if (typeof controller !== \"undefined\") {\n        options.signal = controller.signal;\n    }\n    // the current runtime is node\n    if (typeof XMLHttpRequest === \"undefined\") {\n        // https://github.com/node-fetch/node-fetch#custom-agent\n        var agents = {\n            httpsAgent: this.httpsAgent,\n            httpAgent: this.httpAgent\n        };\n        if (this.agent) {\n            agents.httpsAgent = this.agent.https;\n            agents.httpAgent = this.agent.http;\n        }\n        if (this.host.substring(0, 5) === \"https\") {\n            options.agent = agents.httpsAgent;\n        } else {\n            options.agent = agents.httpAgent;\n        }\n    }\n    if (this.headers) {\n        this.headers.forEach(function(header) {\n            headers[header.name] = header.value;\n        });\n    }\n    // Default headers\n    if (!headers[\"Content-Type\"]) {\n        headers[\"Content-Type\"] = \"application/json\";\n    }\n    // As the Fetch API supports the credentials as following options 'include', 'omit', 'same-origin'\n    // https://developer.mozilla.org/en-US/docs/Web/API/fetch#credentials\n    // To avoid breaking change in 1.x we override this value based on boolean option.\n    if (this.withCredentials) {\n        options.credentials = \"include\";\n    } else {\n        options.credentials = \"omit\";\n    }\n    options.headers = headers;\n    if (this.timeout > 0 && typeof controller !== \"undefined\") {\n        this.timeoutId = setTimeout(function() {\n            controller.abort();\n        }, this.timeout);\n    }\n    var success = function(response) {\n        if (this.timeoutId !== undefined) {\n            clearTimeout(this.timeoutId);\n        }\n        // Response is a stream data so should be awaited for json response\n        response.json().then(function(data) {\n            callback(null, data);\n        }, function() {\n            response.text().then(function(text) {\n                callback(errors.InvalidResponse(text));\n            }, function() {\n                callback(errors.InvalidResponse(\"\"));\n            });\n        });\n    };\n    var failed = function(error) {\n        if (this.timeoutId !== undefined) {\n            clearTimeout(this.timeoutId);\n        }\n        if (error.name === \"AbortError\") {\n            callback(errors.ConnectionTimeout(this.timeout));\n            return;\n        }\n        callback(errors.InvalidConnection(this.host, error));\n    };\n    fetchFunc(this.host, options).then(success.bind(this), failed.bind(this));\n};\nHttpProvider.prototype.disconnect = function() {\n//NO OP\n};\n/**\n * Returns the desired boolean.\n *\n * @method supportsSubscriptions\n * @returns {boolean}\n */ HttpProvider.prototype.supportsSubscriptions = function() {\n    return false;\n};\nmodule.exports = HttpProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-core-requestmanager/node_modules/web3-providers-http/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-core-requestmanager/node_modules/web3-providers-ipc/lib/index.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/web3-core-requestmanager/node_modules/web3-providers-ipc/lib/index.js ***!
  \********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ /** @file index.js\n * @authors:\n *   Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */ \nvar errors = (__webpack_require__(/*! web3-core-helpers */ \"(ssr)/./node_modules/web3-core-helpers/lib/index.js\").errors);\nvar oboe = __webpack_require__(/*! oboe */ \"(ssr)/./node_modules/oboe/dist/oboe-node.js\");\nvar IpcProvider = function IpcProvider(path, net) {\n    var _this = this;\n    this.responseCallbacks = {};\n    this.notificationCallbacks = [];\n    this.path = path;\n    this.connected = false;\n    this.connection = net.connect({\n        path: this.path\n    });\n    this.addDefaultEvents();\n    // LISTEN FOR CONNECTION RESPONSES\n    var callback = function(result) {\n        /*jshint maxcomplexity: 6 */ var id = null;\n        // get the id which matches the returned id\n        if (Array.isArray(result)) {\n            result.forEach(function(load) {\n                if (_this.responseCallbacks[load.id]) id = load.id;\n            });\n        } else {\n            id = result.id;\n        }\n        // notification\n        if (!id && result.method.indexOf(\"_subscription\") !== -1) {\n            _this.notificationCallbacks.forEach(function(callback) {\n                if (typeof callback === \"function\") callback(result);\n            });\n        // fire the callback\n        } else if (_this.responseCallbacks[id]) {\n            _this.responseCallbacks[id](null, result);\n            delete _this.responseCallbacks[id];\n        }\n    };\n    // use oboe.js for Sockets\n    if (net.constructor.name === \"Socket\") {\n        oboe(this.connection).done(callback);\n    } else {\n        this.connection.on(\"data\", function(data) {\n            _this._parseResponse(data.toString()).forEach(callback);\n        });\n    }\n};\n/**\nWill add the error and end event to timeout existing calls\n\n@method addDefaultEvents\n*/ IpcProvider.prototype.addDefaultEvents = function() {\n    var _this = this;\n    this.connection.on(\"connect\", function() {\n        _this.connected = true;\n    });\n    this.connection.on(\"close\", function() {\n        _this.connected = false;\n    });\n    this.connection.on(\"error\", function() {\n        _this._timeout();\n    });\n    this.connection.on(\"end\", function() {\n        _this._timeout();\n    });\n    this.connection.on(\"timeout\", function() {\n        _this._timeout();\n    });\n};\n/**\n Will parse the response and make an array out of it.\n\n NOTE, this exists for backwards compatibility reasons.\n\n @method _parseResponse\n @param {String} data\n */ IpcProvider.prototype._parseResponse = function(data) {\n    var _this = this, returnValues = [];\n    // DE-CHUNKER\n    var dechunkedData = data.replace(/\\}[\\n\\r]?\\{/g, \"}|--|{\") // }{\n    .replace(/\\}\\][\\n\\r]?\\[\\{/g, \"}]|--|[{\") // }][{\n    .replace(/\\}[\\n\\r]?\\[\\{/g, \"}|--|[{\") // }[{\n    .replace(/\\}\\][\\n\\r]?\\{/g, \"}]|--|{\") // }]{\n    .split(\"|--|\");\n    dechunkedData.forEach(function(data) {\n        // prepend the last chunk\n        if (_this.lastChunk) data = _this.lastChunk + data;\n        var result = null;\n        try {\n            result = JSON.parse(data);\n        } catch (e) {\n            _this.lastChunk = data;\n            // start timeout to cancel all requests\n            clearTimeout(_this.lastChunkTimeout);\n            _this.lastChunkTimeout = setTimeout(function() {\n                _this._timeout();\n                throw errors.InvalidResponse(data);\n            }, 1000 * 15);\n            return;\n        }\n        // cancel timeout and set chunk to null\n        clearTimeout(_this.lastChunkTimeout);\n        _this.lastChunk = null;\n        if (result) returnValues.push(result);\n    });\n    return returnValues;\n};\n/**\nGet the adds a callback to the responseCallbacks object,\nwhich will be called if a response matching the response Id will arrive.\n\n@method _addResponseCallback\n*/ IpcProvider.prototype._addResponseCallback = function(payload, callback) {\n    var id = payload.id || payload[0].id;\n    var method = payload.method || payload[0].method;\n    this.responseCallbacks[id] = callback;\n    this.responseCallbacks[id].method = method;\n};\n/**\nTimeout all requests when the end/error event is fired\n\n@method _timeout\n*/ IpcProvider.prototype._timeout = function() {\n    for(var key in this.responseCallbacks){\n        if (this.responseCallbacks.hasOwnProperty(key)) {\n            this.responseCallbacks[key](errors.InvalidConnection(\"on IPC\"));\n            delete this.responseCallbacks[key];\n        }\n    }\n};\n/**\n Try to reconnect\n\n @method reconnect\n */ IpcProvider.prototype.reconnect = function() {\n    this.connection.connect({\n        path: this.path\n    });\n};\nIpcProvider.prototype.send = function(payload, callback) {\n    // try reconnect, when connection is gone\n    if (!this.connection.writable) this.connection.connect({\n        path: this.path\n    });\n    this.connection.write(JSON.stringify(payload));\n    this._addResponseCallback(payload, callback);\n};\n/**\nSubscribes to provider events.provider\n\n@method on\n@param {String} type    'notification', 'connect', 'error', 'end' or 'data'\n@param {Function} callback   the callback to call\n*/ IpcProvider.prototype.on = function(type, callback) {\n    if (typeof callback !== \"function\") throw new Error(\"The second parameter callback must be a function.\");\n    switch(type){\n        case \"data\":\n            this.notificationCallbacks.push(callback);\n            break;\n        // adds error, end, timeout, connect\n        default:\n            this.connection.on(type, callback);\n            break;\n    }\n};\n/**\n Subscribes to provider events.provider\n\n @method on\n @param {String} type    'connect', 'error', 'end' or 'data'\n @param {Function} callback   the callback to call\n */ IpcProvider.prototype.once = function(type, callback) {\n    if (typeof callback !== \"function\") throw new Error(\"The second parameter callback must be a function.\");\n    this.connection.once(type, callback);\n};\n/**\nRemoves event listener\n\n@method removeListener\n@param {String} type    'data', 'connect', 'error', 'end' or 'data'\n@param {Function} callback   the callback to call\n*/ IpcProvider.prototype.removeListener = function(type, callback) {\n    var _this = this;\n    switch(type){\n        case \"data\":\n            this.notificationCallbacks.forEach(function(cb, index) {\n                if (cb === callback) _this.notificationCallbacks.splice(index, 1);\n            });\n            break;\n        default:\n            this.connection.removeListener(type, callback);\n            break;\n    }\n};\n/**\nRemoves all event listeners\n\n@method removeAllListeners\n@param {String} type    'data', 'connect', 'error', 'end' or 'data'\n*/ IpcProvider.prototype.removeAllListeners = function(type) {\n    switch(type){\n        case \"data\":\n            this.notificationCallbacks = [];\n            break;\n        default:\n            this.connection.removeAllListeners(type);\n            break;\n    }\n};\n/**\nResets the providers, clears all callbacks\n\n@method reset\n*/ IpcProvider.prototype.reset = function() {\n    this._timeout();\n    this.notificationCallbacks = [];\n    this.connection.removeAllListeners(\"error\");\n    this.connection.removeAllListeners(\"end\");\n    this.connection.removeAllListeners(\"timeout\");\n    this.addDefaultEvents();\n};\n/**\n * Returns the desired boolean.\n *\n * @method supportsSubscriptions\n * @returns {boolean}\n */ IpcProvider.prototype.supportsSubscriptions = function() {\n    return true;\n};\nmodule.exports = IpcProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-core-requestmanager/node_modules/web3-providers-ipc/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-core-requestmanager/node_modules/web3-providers-ws/lib/helpers.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/web3-core-requestmanager/node_modules/web3-providers-ws/lib/helpers.js ***!
  \*********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var isNode = Object.prototype.toString.call(typeof process !== \"undefined\" ? process : 0) === \"[object process]\";\nvar isRN = typeof navigator !== \"undefined\" && navigator.product === \"ReactNative\";\nvar _btoa = null;\nvar helpers = null;\nif (isNode || isRN) {\n    _btoa = function(str) {\n        return Buffer.from(str).toString(\"base64\");\n    };\n    var url = __webpack_require__(/*! url */ \"url\");\n    if (url.URL) {\n        // Use the new Node 6+ API for parsing URLs that supports username/password\n        var newURL = url.URL;\n        helpers = function(url) {\n            return new newURL(url);\n        };\n    } else {\n        // Web3 supports Node.js 5, so fall back to the legacy URL API if necessary\n        helpers = (__webpack_require__(/*! url */ \"url\").parse);\n    }\n} else {\n    _btoa = btoa.bind(typeof globalThis === \"object\" ? globalThis : self);\n    helpers = function(url) {\n        return new URL(url);\n    };\n}\nmodule.exports = {\n    parseURL: helpers,\n    btoa: _btoa\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1jb3JlLXJlcXVlc3RtYW5hZ2VyL25vZGVfbW9kdWxlcy93ZWIzLXByb3ZpZGVycy13cy9saWIvaGVscGVycy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxTQUFTQyxPQUFPQyxTQUFTLENBQUNDLFFBQVEsQ0FBQ0MsSUFBSSxDQUFDLE9BQU9DLFlBQVksY0FBY0EsVUFBVSxPQUFPO0FBQzlGLElBQUlDLE9BQU8sT0FBT0MsY0FBYyxlQUFlQSxVQUFVQyxPQUFPLEtBQUs7QUFDckUsSUFBSUMsUUFBUTtBQUNaLElBQUlDLFVBQVU7QUFDZCxJQUFJVixVQUFVTSxNQUFNO0lBQ2hCRyxRQUFRLFNBQVVFLEdBQUc7UUFDakIsT0FBT0MsT0FBT0MsSUFBSSxDQUFDRixLQUFLUixRQUFRLENBQUM7SUFDckM7SUFDQSxJQUFJVyxNQUFNQyxtQkFBT0EsQ0FBQztJQUNsQixJQUFJRCxJQUFJRSxHQUFHLEVBQUU7UUFDVCwyRUFBMkU7UUFDM0UsSUFBSUMsU0FBU0gsSUFBSUUsR0FBRztRQUNwQk4sVUFBVSxTQUFVSSxHQUFHO1lBQ25CLE9BQU8sSUFBSUcsT0FBT0g7UUFDdEI7SUFDSixPQUNLO1FBQ0QsMkVBQTJFO1FBQzNFSixVQUFVSyw2Q0FBb0I7SUFDbEM7QUFDSixPQUNLO0lBQ0ROLFFBQVFVLEtBQUtDLElBQUksQ0FBQyxPQUFPQyxlQUFlLFdBQVdBLGFBQWFDO0lBQ2hFWixVQUFVLFNBQVVJLEdBQUc7UUFDbkIsT0FBTyxJQUFJRSxJQUFJRjtJQUNuQjtBQUNKO0FBQ0FTLE9BQU9DLE9BQU8sR0FBRztJQUNiQyxVQUFVZjtJQUNWUyxNQUFNVjtBQUNWIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvd2ViMy1jb3JlLXJlcXVlc3RtYW5hZ2VyL25vZGVfbW9kdWxlcy93ZWIzLXByb3ZpZGVycy13cy9saWIvaGVscGVycy5qcz9mMzdjIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBpc05vZGUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnID8gcHJvY2VzcyA6IDApID09PSAnW29iamVjdCBwcm9jZXNzXSc7XG52YXIgaXNSTiA9IHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnUmVhY3ROYXRpdmUnO1xudmFyIF9idG9hID0gbnVsbDtcbnZhciBoZWxwZXJzID0gbnVsbDtcbmlmIChpc05vZGUgfHwgaXNSTikge1xuICAgIF9idG9hID0gZnVuY3Rpb24gKHN0cikge1xuICAgICAgICByZXR1cm4gQnVmZmVyLmZyb20oc3RyKS50b1N0cmluZygnYmFzZTY0Jyk7XG4gICAgfTtcbiAgICB2YXIgdXJsID0gcmVxdWlyZSgndXJsJyk7XG4gICAgaWYgKHVybC5VUkwpIHtcbiAgICAgICAgLy8gVXNlIHRoZSBuZXcgTm9kZSA2KyBBUEkgZm9yIHBhcnNpbmcgVVJMcyB0aGF0IHN1cHBvcnRzIHVzZXJuYW1lL3Bhc3N3b3JkXG4gICAgICAgIHZhciBuZXdVUkwgPSB1cmwuVVJMO1xuICAgICAgICBoZWxwZXJzID0gZnVuY3Rpb24gKHVybCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBuZXdVUkwodXJsKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIFdlYjMgc3VwcG9ydHMgTm9kZS5qcyA1LCBzbyBmYWxsIGJhY2sgdG8gdGhlIGxlZ2FjeSBVUkwgQVBJIGlmIG5lY2Vzc2FyeVxuICAgICAgICBoZWxwZXJzID0gcmVxdWlyZSgndXJsJykucGFyc2U7XG4gICAgfVxufVxuZWxzZSB7XG4gICAgX2J0b2EgPSBidG9hLmJpbmQodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnID8gZ2xvYmFsVGhpcyA6IHNlbGYpO1xuICAgIGhlbHBlcnMgPSBmdW5jdGlvbiAodXJsKSB7XG4gICAgICAgIHJldHVybiBuZXcgVVJMKHVybCk7XG4gICAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIHBhcnNlVVJMOiBoZWxwZXJzLFxuICAgIGJ0b2E6IF9idG9hXG59O1xuIl0sIm5hbWVzIjpbImlzTm9kZSIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsInByb2Nlc3MiLCJpc1JOIiwibmF2aWdhdG9yIiwicHJvZHVjdCIsIl9idG9hIiwiaGVscGVycyIsInN0ciIsIkJ1ZmZlciIsImZyb20iLCJ1cmwiLCJyZXF1aXJlIiwiVVJMIiwibmV3VVJMIiwicGFyc2UiLCJidG9hIiwiYmluZCIsImdsb2JhbFRoaXMiLCJzZWxmIiwibW9kdWxlIiwiZXhwb3J0cyIsInBhcnNlVVJMIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-core-requestmanager/node_modules/web3-providers-ws/lib/helpers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-core-requestmanager/node_modules/web3-providers-ws/lib/index.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/web3-core-requestmanager/node_modules/web3-providers-ws/lib/index.js ***!
  \*******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */ /**\n * @file WebsocketProvider.js\n * @authors: Samuel Furter <samuel@ethereum.org>, Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2019\n */ \nvar EventEmitter = __webpack_require__(/*! eventemitter3 */ \"(ssr)/./node_modules/web3-core-requestmanager/node_modules/eventemitter3/index.js\");\nvar helpers = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/web3-core-requestmanager/node_modules/web3-providers-ws/lib/helpers.js\");\nvar errors = (__webpack_require__(/*! web3-core-helpers */ \"(ssr)/./node_modules/web3-core-helpers/lib/index.js\").errors);\nvar Ws = (__webpack_require__(/*! websocket */ \"(ssr)/./node_modules/websocket/index.js\").w3cwebsocket);\n/**\n * @param {string} url\n * @param {Object} options\n *\n * @constructor\n */ var WebsocketProvider = function WebsocketProvider(url, options) {\n    EventEmitter.call(this);\n    options = options || {};\n    this.url = url;\n    this._customTimeout = options.timeout || 1000 * 15;\n    this.headers = options.headers || {};\n    this.protocol = options.protocol || undefined;\n    this.reconnectOptions = Object.assign({\n        auto: false,\n        delay: 5000,\n        maxAttempts: false,\n        onTimeout: false\n    }, options.reconnect);\n    this.clientConfig = options.clientConfig || undefined; // Allow a custom client configuration\n    this.requestOptions = options.requestOptions || undefined; // Allow a custom request options (https://github.com/theturtle32/WebSocket-Node/blob/master/docs/WebSocketClient.md#connectrequesturl-requestedprotocols-origin-headers-requestoptions)\n    this.DATA = \"data\";\n    this.CLOSE = \"close\";\n    this.ERROR = \"error\";\n    this.CONNECT = \"connect\";\n    this.RECONNECT = \"reconnect\";\n    this.connection = null;\n    this.requestQueue = new Map();\n    this.responseQueue = new Map();\n    this.reconnectAttempts = 0;\n    this.reconnecting = false;\n    this.connectFailedDescription = null;\n    // The w3cwebsocket implementation does not support Basic Auth\n    // username/password in the URL. So generate the basic auth header, and\n    // pass through with any additional headers supplied in constructor\n    var parsedURL = helpers.parseURL(url);\n    if (parsedURL.username && parsedURL.password) {\n        this.headers.authorization = \"Basic \" + helpers.btoa(parsedURL.username + \":\" + parsedURL.password);\n    }\n    // When all node core implementations that do not have the\n    // WHATWG compatible URL parser go out of service this line can be removed.\n    if (parsedURL.auth) {\n        this.headers.authorization = \"Basic \" + helpers.btoa(parsedURL.auth);\n    }\n    // make property `connected` which will return the current connection status\n    Object.defineProperty(this, \"connected\", {\n        get: function() {\n            return this.connection && this.connection.readyState === this.connection.OPEN;\n        },\n        enumerable: true\n    });\n    this.connect();\n};\n// Inherit from EventEmitter\nWebsocketProvider.prototype = Object.create(EventEmitter.prototype);\nWebsocketProvider.prototype.constructor = WebsocketProvider;\n/**\n * Connects to the configured node\n *\n * @method connect\n *\n * @returns {void}\n */ WebsocketProvider.prototype.connect = function() {\n    this.connection = new Ws(this.url, this.protocol, undefined, this.headers, this.requestOptions, this.clientConfig);\n    this._addSocketListeners();\n};\n/**\n * Listener for the `data` event of the underlying WebSocket object\n *\n * @method _onMessage\n *\n * @returns {void}\n */ WebsocketProvider.prototype._onMessage = function(e) {\n    var _this = this;\n    this._parseResponse(typeof e.data === \"string\" ? e.data : \"\").forEach(function(result) {\n        if (result.method && result.method.indexOf(\"_subscription\") !== -1) {\n            _this.emit(_this.DATA, result);\n            return;\n        }\n        var id = result.id;\n        // get the id which matches the returned id\n        if (Array.isArray(result)) {\n            id = result[0].id;\n        }\n        if (_this.responseQueue.has(id)) {\n            if (_this.responseQueue.get(id).callback !== undefined) {\n                _this.responseQueue.get(id).callback(false, result);\n            }\n            _this.responseQueue.delete(id);\n        }\n    });\n};\n/**\n * Listener for the `open` event of the underlying WebSocket object\n *\n * @method _onConnect\n *\n * @returns {void}\n */ WebsocketProvider.prototype._onConnect = function() {\n    this.emit(this.CONNECT);\n    this.reconnectAttempts = 0;\n    this.reconnecting = false;\n    if (this.requestQueue.size > 0) {\n        var _this = this;\n        this.requestQueue.forEach(function(request, key) {\n            _this.send(request.payload, request.callback);\n            _this.requestQueue.delete(key);\n        });\n    }\n};\nWebsocketProvider.prototype._onConnectFailed = function(event) {\n    this.connectFailedDescription = event.toString().split(\"\\n\")[0];\n    var _this = this;\n    if (this.connectFailedDescription) {\n        event.description = this.connectFailedDescription;\n        this.connectFailedDescription = null; // clean the message, so it won't be used in the next connection\n    }\n    event.code = 1006;\n    event.reason = \"connection failed\";\n    if (this.reconnectOptions.auto && (![\n        1000,\n        1001\n    ].includes(event.code) || event.wasClean === false)) {\n        this.reconnect();\n        return;\n    }\n    this.emit(this.ERROR, event);\n    if (this.requestQueue.size > 0) {\n        this.requestQueue.forEach(function(request, key) {\n            request.callback(errors.ConnectionNotOpenError(event));\n            _this.requestQueue.delete(key);\n        });\n    }\n    if (this.responseQueue.size > 0) {\n        this.responseQueue.forEach(function(request, key) {\n            request.callback(errors.InvalidConnection(\"on WS\", event));\n            _this.responseQueue.delete(key);\n        });\n    }\n    //clean connection on our own\n    if (this.connection._connection) {\n        this.connection._connection.removeAllListeners();\n    }\n    this.connection._client.removeAllListeners();\n    this.connection._readyState = 3; // set readyState to CLOSED\n    this.emit(this.CLOSE, event);\n};\n/**\n * Listener for the `close` event of the underlying WebSocket object\n *\n * @method _onClose\n *\n * @returns {void}\n */ WebsocketProvider.prototype._onClose = function(event) {\n    var _this = this;\n    if (this.reconnectOptions.auto && (![\n        1000,\n        1001\n    ].includes(event.code) || event.wasClean === false)) {\n        this.reconnect();\n        return;\n    }\n    this.emit(this.CLOSE, event);\n    if (this.requestQueue.size > 0) {\n        this.requestQueue.forEach(function(request, key) {\n            request.callback(errors.ConnectionNotOpenError(event));\n            _this.requestQueue.delete(key);\n        });\n    }\n    if (this.responseQueue.size > 0) {\n        this.responseQueue.forEach(function(request, key) {\n            request.callback(errors.InvalidConnection(\"on WS\", event));\n            _this.responseQueue.delete(key);\n        });\n    }\n    this._removeSocketListeners();\n    this.removeAllListeners();\n};\n/**\n * Will add the required socket listeners\n *\n * @method _addSocketListeners\n *\n * @returns {void}\n */ WebsocketProvider.prototype._addSocketListeners = function() {\n    this.connection.addEventListener(\"message\", this._onMessage.bind(this));\n    this.connection.addEventListener(\"open\", this._onConnect.bind(this));\n    this.connection.addEventListener(\"close\", this._onClose.bind(this));\n    if (this.connection._client) {\n        this.connection._client.removeAllListeners(\"connectFailed\"); //Override the internal listeners, so they don't trigger a `close` event. We want to trigger `_onClose` manually with a description.\n        this.connection._client.on(\"connectFailed\", this._onConnectFailed.bind(this));\n    }\n};\n/**\n * Will remove all socket listeners\n *\n * @method _removeSocketListeners\n *\n * @returns {void}\n */ WebsocketProvider.prototype._removeSocketListeners = function() {\n    this.connection.removeEventListener(\"message\", this._onMessage);\n    this.connection.removeEventListener(\"open\", this._onConnect);\n    this.connection.removeEventListener(\"close\", this._onClose);\n    if (this.connection._connection) this.connection._client.removeListener(\"connectFailed\", this._onConnectFailed);\n};\n/**\n * Will parse the response and make an array out of it.\n *\n * @method _parseResponse\n *\n * @param {String} data\n *\n * @returns {Array}\n */ WebsocketProvider.prototype._parseResponse = function(data) {\n    var _this = this, returnValues = [];\n    // DE-CHUNKER\n    var dechunkedData = data.replace(/\\}[\\n\\r]?\\{/g, \"}|--|{\") // }{\n    .replace(/\\}\\][\\n\\r]?\\[\\{/g, \"}]|--|[{\") // }][{\n    .replace(/\\}[\\n\\r]?\\[\\{/g, \"}|--|[{\") // }[{\n    .replace(/\\}\\][\\n\\r]?\\{/g, \"}]|--|{\") // }]{\n    .split(\"|--|\");\n    dechunkedData.forEach(function(data) {\n        // prepend the last chunk\n        if (_this.lastChunk) data = _this.lastChunk + data;\n        var result = null;\n        try {\n            result = JSON.parse(data);\n        } catch (e) {\n            _this.lastChunk = data;\n            // start timeout to cancel all requests\n            clearTimeout(_this.lastChunkTimeout);\n            _this.lastChunkTimeout = setTimeout(function() {\n                if (_this.reconnectOptions.auto && _this.reconnectOptions.onTimeout) {\n                    _this.reconnect();\n                    return;\n                }\n                _this.emit(_this.ERROR, errors.ConnectionTimeout(_this._customTimeout));\n                if (_this.requestQueue.size > 0) {\n                    _this.requestQueue.forEach(function(request, key) {\n                        request.callback(errors.ConnectionTimeout(_this._customTimeout));\n                        _this.requestQueue.delete(key);\n                    });\n                }\n            }, _this._customTimeout);\n            return;\n        }\n        // cancel timeout and set chunk to null\n        clearTimeout(_this.lastChunkTimeout);\n        _this.lastChunk = null;\n        if (result) returnValues.push(result);\n    });\n    return returnValues;\n};\n/**\n * Does check if the provider is connecting and will add it to the queue or will send it directly\n *\n * @method send\n *\n * @param {Object} payload\n * @param {Function} callback\n *\n * @returns {void}\n */ WebsocketProvider.prototype.send = function(payload, callback) {\n    var _this = this;\n    var id = payload.id;\n    var request = {\n        payload: payload,\n        callback: callback\n    };\n    if (Array.isArray(payload)) {\n        id = payload[0].id;\n    }\n    if (this.connection.readyState === this.connection.CONNECTING || this.reconnecting) {\n        this.requestQueue.set(id, request);\n        return;\n    }\n    if (this.connection.readyState !== this.connection.OPEN) {\n        this.requestQueue.delete(id);\n        this.emit(this.ERROR, errors.ConnectionNotOpenError());\n        request.callback(errors.ConnectionNotOpenError());\n        return;\n    }\n    this.responseQueue.set(id, request);\n    this.requestQueue.delete(id);\n    try {\n        this.connection.send(JSON.stringify(request.payload));\n    } catch (error) {\n        request.callback(error);\n        _this.responseQueue.delete(id);\n    }\n};\n/**\n * Resets the providers, clears all callbacks\n *\n * @method reset\n *\n * @returns {void}\n */ WebsocketProvider.prototype.reset = function() {\n    this.responseQueue.clear();\n    this.requestQueue.clear();\n    this.removeAllListeners();\n    this._removeSocketListeners();\n    this._addSocketListeners();\n};\n/**\n * Closes the current connection with the given code and reason arguments\n *\n * @method disconnect\n *\n * @param {number} code\n * @param {string} reason\n *\n * @returns {void}\n */ WebsocketProvider.prototype.disconnect = function(code, reason) {\n    this._removeSocketListeners();\n    this.connection.close(code || 1000, reason);\n};\n/**\n * Returns the desired boolean.\n *\n * @method supportsSubscriptions\n *\n * @returns {boolean}\n */ WebsocketProvider.prototype.supportsSubscriptions = function() {\n    return true;\n};\n/**\n * Removes the listeners and reconnects to the socket.\n *\n * @method reconnect\n *\n * @returns {void}\n */ WebsocketProvider.prototype.reconnect = function() {\n    var _this = this;\n    this.reconnecting = true;\n    if (this.responseQueue.size > 0) {\n        this.responseQueue.forEach(function(request, key) {\n            try {\n                _this.responseQueue.delete(key);\n                request.callback(errors.PendingRequestsOnReconnectingError());\n            } catch (e) {\n                console.error(\"Error encountered in reconnect: \", e);\n            }\n        });\n    }\n    if (!this.reconnectOptions.maxAttempts || this.reconnectAttempts < this.reconnectOptions.maxAttempts) {\n        setTimeout(function() {\n            _this.reconnectAttempts++;\n            _this._removeSocketListeners();\n            _this.emit(_this.RECONNECT, _this.reconnectAttempts);\n            _this.connect();\n        }, this.reconnectOptions.delay);\n        return;\n    }\n    this.emit(this.ERROR, errors.MaxAttemptsReachedOnReconnectingError());\n    this.reconnecting = false;\n    if (this.requestQueue.size > 0) {\n        this.requestQueue.forEach(function(request, key) {\n            request.callback(errors.MaxAttemptsReachedOnReconnectingError());\n            _this.requestQueue.delete(key);\n        });\n    }\n};\nmodule.exports = WebsocketProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-core-requestmanager/node_modules/web3-providers-ws/lib/index.js\n");

/***/ })

};
;