/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/minizlib";
exports.ids = ["vendor-chunks/minizlib"];
exports.modules = {

/***/ "(ssr)/./node_modules/minizlib/constants.js":
/*!********************************************!*\
  !*** ./node_modules/minizlib/constants.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Update with any zlib constants that are added or changed in the future.\n// Node v6 didn't export this, so we just hard code the version and rely\n// on all the other hard-coded values from zlib v4736.  When node v6\n// support drops, we can just export the realZlibConstants object.\nconst realZlibConstants = (__webpack_require__(/*! zlib */ \"zlib\").constants) || /* istanbul ignore next */ {\n    ZLIB_VERNUM: 4736\n};\nmodule.exports = Object.freeze(Object.assign(Object.create(null), {\n    Z_NO_FLUSH: 0,\n    Z_PARTIAL_FLUSH: 1,\n    Z_SYNC_FLUSH: 2,\n    Z_FULL_FLUSH: 3,\n    Z_FINISH: 4,\n    Z_BLOCK: 5,\n    Z_OK: 0,\n    Z_STREAM_END: 1,\n    Z_NEED_DICT: 2,\n    Z_ERRNO: -1,\n    Z_STREAM_ERROR: -2,\n    Z_DATA_ERROR: -3,\n    Z_MEM_ERROR: -4,\n    Z_BUF_ERROR: -5,\n    Z_VERSION_ERROR: -6,\n    Z_NO_COMPRESSION: 0,\n    Z_BEST_SPEED: 1,\n    Z_BEST_COMPRESSION: 9,\n    Z_DEFAULT_COMPRESSION: -1,\n    Z_FILTERED: 1,\n    Z_HUFFMAN_ONLY: 2,\n    Z_RLE: 3,\n    Z_FIXED: 4,\n    Z_DEFAULT_STRATEGY: 0,\n    DEFLATE: 1,\n    INFLATE: 2,\n    GZIP: 3,\n    GUNZIP: 4,\n    DEFLATERAW: 5,\n    INFLATERAW: 6,\n    UNZIP: 7,\n    BROTLI_DECODE: 8,\n    BROTLI_ENCODE: 9,\n    Z_MIN_WINDOWBITS: 8,\n    Z_MAX_WINDOWBITS: 15,\n    Z_DEFAULT_WINDOWBITS: 15,\n    Z_MIN_CHUNK: 64,\n    Z_MAX_CHUNK: Infinity,\n    Z_DEFAULT_CHUNK: 16384,\n    Z_MIN_MEMLEVEL: 1,\n    Z_MAX_MEMLEVEL: 9,\n    Z_DEFAULT_MEMLEVEL: 8,\n    Z_MIN_LEVEL: -1,\n    Z_MAX_LEVEL: 9,\n    Z_DEFAULT_LEVEL: -1,\n    BROTLI_OPERATION_PROCESS: 0,\n    BROTLI_OPERATION_FLUSH: 1,\n    BROTLI_OPERATION_FINISH: 2,\n    BROTLI_OPERATION_EMIT_METADATA: 3,\n    BROTLI_MODE_GENERIC: 0,\n    BROTLI_MODE_TEXT: 1,\n    BROTLI_MODE_FONT: 2,\n    BROTLI_DEFAULT_MODE: 0,\n    BROTLI_MIN_QUALITY: 0,\n    BROTLI_MAX_QUALITY: 11,\n    BROTLI_DEFAULT_QUALITY: 11,\n    BROTLI_MIN_WINDOW_BITS: 10,\n    BROTLI_MAX_WINDOW_BITS: 24,\n    BROTLI_LARGE_MAX_WINDOW_BITS: 30,\n    BROTLI_DEFAULT_WINDOW: 22,\n    BROTLI_MIN_INPUT_BLOCK_BITS: 16,\n    BROTLI_MAX_INPUT_BLOCK_BITS: 24,\n    BROTLI_PARAM_MODE: 0,\n    BROTLI_PARAM_QUALITY: 1,\n    BROTLI_PARAM_LGWIN: 2,\n    BROTLI_PARAM_LGBLOCK: 3,\n    BROTLI_PARAM_DISABLE_LITERAL_CONTEXT_MODELING: 4,\n    BROTLI_PARAM_SIZE_HINT: 5,\n    BROTLI_PARAM_LARGE_WINDOW: 6,\n    BROTLI_PARAM_NPOSTFIX: 7,\n    BROTLI_PARAM_NDIRECT: 8,\n    BROTLI_DECODER_RESULT_ERROR: 0,\n    BROTLI_DECODER_RESULT_SUCCESS: 1,\n    BROTLI_DECODER_RESULT_NEEDS_MORE_INPUT: 2,\n    BROTLI_DECODER_RESULT_NEEDS_MORE_OUTPUT: 3,\n    BROTLI_DECODER_PARAM_DISABLE_RING_BUFFER_REALLOCATION: 0,\n    BROTLI_DECODER_PARAM_LARGE_WINDOW: 1,\n    BROTLI_DECODER_NO_ERROR: 0,\n    BROTLI_DECODER_SUCCESS: 1,\n    BROTLI_DECODER_NEEDS_MORE_INPUT: 2,\n    BROTLI_DECODER_NEEDS_MORE_OUTPUT: 3,\n    BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_NIBBLE: -1,\n    BROTLI_DECODER_ERROR_FORMAT_RESERVED: -2,\n    BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_META_NIBBLE: -3,\n    BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_ALPHABET: -4,\n    BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_SAME: -5,\n    BROTLI_DECODER_ERROR_FORMAT_CL_SPACE: -6,\n    BROTLI_DECODER_ERROR_FORMAT_HUFFMAN_SPACE: -7,\n    BROTLI_DECODER_ERROR_FORMAT_CONTEXT_MAP_REPEAT: -8,\n    BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_1: -9,\n    BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_2: -10,\n    BROTLI_DECODER_ERROR_FORMAT_TRANSFORM: -11,\n    BROTLI_DECODER_ERROR_FORMAT_DICTIONARY: -12,\n    BROTLI_DECODER_ERROR_FORMAT_WINDOW_BITS: -13,\n    BROTLI_DECODER_ERROR_FORMAT_PADDING_1: -14,\n    BROTLI_DECODER_ERROR_FORMAT_PADDING_2: -15,\n    BROTLI_DECODER_ERROR_FORMAT_DISTANCE: -16,\n    BROTLI_DECODER_ERROR_DICTIONARY_NOT_SET: -19,\n    BROTLI_DECODER_ERROR_INVALID_ARGUMENTS: -20,\n    BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MODES: -21,\n    BROTLI_DECODER_ERROR_ALLOC_TREE_GROUPS: -22,\n    BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MAP: -25,\n    BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_1: -26,\n    BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_2: -27,\n    BROTLI_DECODER_ERROR_ALLOC_BLOCK_TYPE_TREES: -30,\n    BROTLI_DECODER_ERROR_UNREACHABLE: -31\n}, realZlibConstants));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/minizlib/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/minizlib/index.js":
/*!****************************************!*\
  !*** ./node_modules/minizlib/index.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nconst assert = __webpack_require__(/*! assert */ \"assert\");\nconst Buffer = (__webpack_require__(/*! buffer */ \"buffer\").Buffer);\nconst realZlib = __webpack_require__(/*! zlib */ \"zlib\");\nconst constants = exports.constants = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/minizlib/constants.js\");\nconst Minipass = __webpack_require__(/*! minipass */ \"(ssr)/./node_modules/minipass/index.js\");\nconst OriginalBufferConcat = Buffer.concat;\nclass ZlibError extends Error {\n    constructor(err){\n        super(\"zlib: \" + err.message);\n        this.code = err.code;\n        this.errno = err.errno;\n        /* istanbul ignore if */ if (!this.code) this.code = \"ZLIB_ERROR\";\n        this.message = \"zlib: \" + err.message;\n        Error.captureStackTrace(this, this.constructor);\n    }\n    get name() {\n        return \"ZlibError\";\n    }\n}\n// the Zlib class they all inherit from\n// This thing manages the queue of requests, and returns\n// true or false if there is anything in the queue when\n// you call the .write() method.\nconst _opts = Symbol(\"opts\");\nconst _flushFlag = Symbol(\"flushFlag\");\nconst _finishFlushFlag = Symbol(\"finishFlushFlag\");\nconst _fullFlushFlag = Symbol(\"fullFlushFlag\");\nconst _handle = Symbol(\"handle\");\nconst _onError = Symbol(\"onError\");\nconst _sawError = Symbol(\"sawError\");\nconst _level = Symbol(\"level\");\nconst _strategy = Symbol(\"strategy\");\nconst _ended = Symbol(\"ended\");\nconst _defaultFullFlush = Symbol(\"_defaultFullFlush\");\nclass ZlibBase extends Minipass {\n    constructor(opts, mode){\n        if (!opts || typeof opts !== \"object\") throw new TypeError(\"invalid options for ZlibBase constructor\");\n        super(opts);\n        this[_ended] = false;\n        this[_opts] = opts;\n        this[_flushFlag] = opts.flush;\n        this[_finishFlushFlag] = opts.finishFlush;\n        // this will throw if any options are invalid for the class selected\n        try {\n            this[_handle] = new realZlib[mode](opts);\n        } catch (er) {\n            // make sure that all errors get decorated properly\n            throw new ZlibError(er);\n        }\n        this[_onError] = (err)=>{\n            this[_sawError] = true;\n            // there is no way to cleanly recover.\n            // continuing only obscures problems.\n            this.close();\n            this.emit(\"error\", err);\n        };\n        this[_handle].on(\"error\", (er)=>this[_onError](new ZlibError(er)));\n        this.once(\"end\", ()=>this.close);\n    }\n    close() {\n        if (this[_handle]) {\n            this[_handle].close();\n            this[_handle] = null;\n            this.emit(\"close\");\n        }\n    }\n    reset() {\n        if (!this[_sawError]) {\n            assert(this[_handle], \"zlib binding closed\");\n            return this[_handle].reset();\n        }\n    }\n    flush(flushFlag) {\n        if (this.ended) return;\n        if (typeof flushFlag !== \"number\") flushFlag = this[_fullFlushFlag];\n        this.write(Object.assign(Buffer.alloc(0), {\n            [_flushFlag]: flushFlag\n        }));\n    }\n    end(chunk, encoding, cb) {\n        if (chunk) this.write(chunk, encoding);\n        this.flush(this[_finishFlushFlag]);\n        this[_ended] = true;\n        return super.end(null, null, cb);\n    }\n    get ended() {\n        return this[_ended];\n    }\n    write(chunk, encoding, cb) {\n        // process the chunk using the sync process\n        // then super.write() all the outputted chunks\n        if (typeof encoding === \"function\") cb = encoding, encoding = \"utf8\";\n        if (typeof chunk === \"string\") chunk = Buffer.from(chunk, encoding);\n        if (this[_sawError]) return;\n        assert(this[_handle], \"zlib binding closed\");\n        // _processChunk tries to .close() the native handle after it's done, so we\n        // intercept that by temporarily making it a no-op.\n        const nativeHandle = this[_handle]._handle;\n        const originalNativeClose = nativeHandle.close;\n        nativeHandle.close = ()=>{};\n        const originalClose = this[_handle].close;\n        this[_handle].close = ()=>{};\n        // It also calls `Buffer.concat()` at the end, which may be convenient\n        // for some, but which we are not interested in as it slows us down.\n        Buffer.concat = (args)=>args;\n        let result;\n        try {\n            const flushFlag = typeof chunk[_flushFlag] === \"number\" ? chunk[_flushFlag] : this[_flushFlag];\n            result = this[_handle]._processChunk(chunk, flushFlag);\n            // if we don't throw, reset it back how it was\n            Buffer.concat = OriginalBufferConcat;\n        } catch (err) {\n            // or if we do, put Buffer.concat() back before we emit error\n            // Error events call into user code, which may call Buffer.concat()\n            Buffer.concat = OriginalBufferConcat;\n            this[_onError](new ZlibError(err));\n        } finally{\n            if (this[_handle]) {\n                // Core zlib resets `_handle` to null after attempting to close the\n                // native handle. Our no-op handler prevented actual closure, but we\n                // need to restore the `._handle` property.\n                this[_handle]._handle = nativeHandle;\n                nativeHandle.close = originalNativeClose;\n                this[_handle].close = originalClose;\n                // `_processChunk()` adds an 'error' listener. If we don't remove it\n                // after each call, these handlers start piling up.\n                this[_handle].removeAllListeners(\"error\");\n            }\n        }\n        let writeReturn;\n        if (result) {\n            if (Array.isArray(result) && result.length > 0) {\n                // The first buffer is always `handle._outBuffer`, which would be\n                // re-used for later invocations; so, we always have to copy that one.\n                writeReturn = super.write(Buffer.from(result[0]));\n                for(let i = 1; i < result.length; i++){\n                    writeReturn = super.write(result[i]);\n                }\n            } else {\n                writeReturn = super.write(Buffer.from(result));\n            }\n        }\n        if (cb) cb();\n        return writeReturn;\n    }\n}\nclass Zlib extends ZlibBase {\n    constructor(opts, mode){\n        opts = opts || {};\n        opts.flush = opts.flush || constants.Z_NO_FLUSH;\n        opts.finishFlush = opts.finishFlush || constants.Z_FINISH;\n        super(opts, mode);\n        this[_fullFlushFlag] = constants.Z_FULL_FLUSH;\n        this[_level] = opts.level;\n        this[_strategy] = opts.strategy;\n    }\n    params(level, strategy) {\n        if (this[_sawError]) return;\n        if (!this[_handle]) throw new Error(\"cannot switch params when binding is closed\");\n        // no way to test this without also not supporting params at all\n        /* istanbul ignore if */ if (!this[_handle].params) throw new Error(\"not supported in this implementation\");\n        if (this[_level] !== level || this[_strategy] !== strategy) {\n            this.flush(constants.Z_SYNC_FLUSH);\n            assert(this[_handle], \"zlib binding closed\");\n            // .params() calls .flush(), but the latter is always async in the\n            // core zlib. We override .flush() temporarily to intercept that and\n            // flush synchronously.\n            const origFlush = this[_handle].flush;\n            this[_handle].flush = (flushFlag, cb)=>{\n                this.flush(flushFlag);\n                cb();\n            };\n            try {\n                this[_handle].params(level, strategy);\n            } finally{\n                this[_handle].flush = origFlush;\n            }\n            /* istanbul ignore else */ if (this[_handle]) {\n                this[_level] = level;\n                this[_strategy] = strategy;\n            }\n        }\n    }\n}\n// minimal 2-byte header\nclass Deflate extends Zlib {\n    constructor(opts){\n        super(opts, \"Deflate\");\n    }\n}\nclass Inflate extends Zlib {\n    constructor(opts){\n        super(opts, \"Inflate\");\n    }\n}\n// gzip - bigger header, same deflate compression\nclass Gzip extends Zlib {\n    constructor(opts){\n        super(opts, \"Gzip\");\n    }\n}\nclass Gunzip extends Zlib {\n    constructor(opts){\n        super(opts, \"Gunzip\");\n    }\n}\n// raw - no header\nclass DeflateRaw extends Zlib {\n    constructor(opts){\n        super(opts, \"DeflateRaw\");\n    }\n}\nclass InflateRaw extends Zlib {\n    constructor(opts){\n        super(opts, \"InflateRaw\");\n    }\n}\n// auto-detect header.\nclass Unzip extends Zlib {\n    constructor(opts){\n        super(opts, \"Unzip\");\n    }\n}\nclass Brotli extends ZlibBase {\n    constructor(opts, mode){\n        opts = opts || {};\n        opts.flush = opts.flush || constants.BROTLI_OPERATION_PROCESS;\n        opts.finishFlush = opts.finishFlush || constants.BROTLI_OPERATION_FINISH;\n        super(opts, mode);\n        this[_fullFlushFlag] = constants.BROTLI_OPERATION_FLUSH;\n    }\n}\nclass BrotliCompress extends Brotli {\n    constructor(opts){\n        super(opts, \"BrotliCompress\");\n    }\n}\nclass BrotliDecompress extends Brotli {\n    constructor(opts){\n        super(opts, \"BrotliDecompress\");\n    }\n}\nexports.Deflate = Deflate;\nexports.Inflate = Inflate;\nexports.Gzip = Gzip;\nexports.Gunzip = Gunzip;\nexports.DeflateRaw = DeflateRaw;\nexports.InflateRaw = InflateRaw;\nexports.Unzip = Unzip;\n/* istanbul ignore else */ if (typeof realZlib.BrotliCompress === \"function\") {\n    exports.BrotliCompress = BrotliCompress;\n    exports.BrotliDecompress = BrotliDecompress;\n} else {\n    exports.BrotliCompress = exports.BrotliDecompress = class {\n        constructor(){\n            throw new Error(\"Brotli is not supported in this version of Node.js\");\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/minizlib/index.js\n");

/***/ })

};
;