/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@alch";
exports.ids = ["vendor-chunks/@alch"];
exports.modules = {

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/alchemy-apis/types.js":
/*!************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/dist/esm/alchemy-apis/types.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AssetTransfersCategory: () => (/* binding */ AssetTransfersCategory),\n/* harmony export */   AssetTransfersOrder: () => (/* binding */ AssetTransfersOrder),\n/* harmony export */   NftFilters: () => (/* binding */ NftFilters)\n/* harmony export */ });\nvar AssetTransfersCategory;\n(function(AssetTransfersCategory) {\n    AssetTransfersCategory[\"EXTERNAL\"] = \"external\";\n    AssetTransfersCategory[\"INTERNAL\"] = \"internal\";\n    AssetTransfersCategory[\"TOKEN\"] = \"token\";\n    AssetTransfersCategory[\"ERC20\"] = \"erc20\";\n    AssetTransfersCategory[\"ERC721\"] = \"erc721\";\n    AssetTransfersCategory[\"ERC1155\"] = \"erc1155\";\n    AssetTransfersCategory[\"SPECIALNFT\"] = \"specialnft\";\n})(AssetTransfersCategory || (AssetTransfersCategory = {}));\nvar AssetTransfersOrder;\n(function(AssetTransfersOrder) {\n    AssetTransfersOrder[\"ASCENDING\"] = \"asc\";\n    AssetTransfersOrder[\"DESCENDING\"] = \"desc\";\n})(AssetTransfersOrder || (AssetTransfersOrder = {}));\nvar NftFilters;\n(function(NftFilters) {\n    NftFilters[\"SPAM\"] = \"SPAM\";\n})(NftFilters || (NftFilters = {})); //# sourceMappingURL=types.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL2Rpc3QvZXNtL2FsY2hlbXktYXBpcy90eXBlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBTyxJQUFJQSx1QkFBdUI7QUFDakMsVUFBVUEsc0JBQXNCO0lBQzdCQSxzQkFBc0IsQ0FBQyxXQUFXLEdBQUc7SUFDckNBLHNCQUFzQixDQUFDLFdBQVcsR0FBRztJQUNyQ0Esc0JBQXNCLENBQUMsUUFBUSxHQUFHO0lBQ2xDQSxzQkFBc0IsQ0FBQyxRQUFRLEdBQUc7SUFDbENBLHNCQUFzQixDQUFDLFNBQVMsR0FBRztJQUNuQ0Esc0JBQXNCLENBQUMsVUFBVSxHQUFHO0lBQ3BDQSxzQkFBc0IsQ0FBQyxhQUFhLEdBQUc7QUFDM0MsR0FBR0EsMEJBQTJCQSxDQUFBQSx5QkFBeUIsQ0FBQztBQUNqRCxJQUFJQyxvQkFBb0I7QUFDOUIsVUFBVUEsbUJBQW1CO0lBQzFCQSxtQkFBbUIsQ0FBQyxZQUFZLEdBQUc7SUFDbkNBLG1CQUFtQixDQUFDLGFBQWEsR0FBRztBQUN4QyxHQUFHQSx1QkFBd0JBLENBQUFBLHNCQUFzQixDQUFDO0FBQzNDLElBQUlDLFdBQVc7QUFDckIsVUFBVUEsVUFBVTtJQUNqQkEsVUFBVSxDQUFDLE9BQU8sR0FBRztBQUN6QixHQUFHQSxjQUFlQSxDQUFBQSxhQUFhLENBQUMsS0FDaEMsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL2Rpc3QvZXNtL2FsY2hlbXktYXBpcy90eXBlcy5qcz83YzQ1Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB2YXIgQXNzZXRUcmFuc2ZlcnNDYXRlZ29yeTtcbihmdW5jdGlvbiAoQXNzZXRUcmFuc2ZlcnNDYXRlZ29yeSkge1xuICAgIEFzc2V0VHJhbnNmZXJzQ2F0ZWdvcnlbXCJFWFRFUk5BTFwiXSA9IFwiZXh0ZXJuYWxcIjtcbiAgICBBc3NldFRyYW5zZmVyc0NhdGVnb3J5W1wiSU5URVJOQUxcIl0gPSBcImludGVybmFsXCI7XG4gICAgQXNzZXRUcmFuc2ZlcnNDYXRlZ29yeVtcIlRPS0VOXCJdID0gXCJ0b2tlblwiO1xuICAgIEFzc2V0VHJhbnNmZXJzQ2F0ZWdvcnlbXCJFUkMyMFwiXSA9IFwiZXJjMjBcIjtcbiAgICBBc3NldFRyYW5zZmVyc0NhdGVnb3J5W1wiRVJDNzIxXCJdID0gXCJlcmM3MjFcIjtcbiAgICBBc3NldFRyYW5zZmVyc0NhdGVnb3J5W1wiRVJDMTE1NVwiXSA9IFwiZXJjMTE1NVwiO1xuICAgIEFzc2V0VHJhbnNmZXJzQ2F0ZWdvcnlbXCJTUEVDSUFMTkZUXCJdID0gXCJzcGVjaWFsbmZ0XCI7XG59KShBc3NldFRyYW5zZmVyc0NhdGVnb3J5IHx8IChBc3NldFRyYW5zZmVyc0NhdGVnb3J5ID0ge30pKTtcbmV4cG9ydCB2YXIgQXNzZXRUcmFuc2ZlcnNPcmRlcjtcbihmdW5jdGlvbiAoQXNzZXRUcmFuc2ZlcnNPcmRlcikge1xuICAgIEFzc2V0VHJhbnNmZXJzT3JkZXJbXCJBU0NFTkRJTkdcIl0gPSBcImFzY1wiO1xuICAgIEFzc2V0VHJhbnNmZXJzT3JkZXJbXCJERVNDRU5ESU5HXCJdID0gXCJkZXNjXCI7XG59KShBc3NldFRyYW5zZmVyc09yZGVyIHx8IChBc3NldFRyYW5zZmVyc09yZGVyID0ge30pKTtcbmV4cG9ydCB2YXIgTmZ0RmlsdGVycztcbihmdW5jdGlvbiAoTmZ0RmlsdGVycykge1xuICAgIE5mdEZpbHRlcnNbXCJTUEFNXCJdID0gXCJTUEFNXCI7XG59KShOZnRGaWx0ZXJzIHx8IChOZnRGaWx0ZXJzID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6WyJBc3NldFRyYW5zZmVyc0NhdGVnb3J5IiwiQXNzZXRUcmFuc2ZlcnNPcmRlciIsIk5mdEZpbHRlcnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/alchemy-apis/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/dist/esm/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AssetTransfersCategory: () => (/* reexport safe */ _alchemy_apis_types__WEBPACK_IMPORTED_MODULE_4__.AssetTransfersCategory),\n/* harmony export */   AssetTransfersOrder: () => (/* reexport safe */ _alchemy_apis_types__WEBPACK_IMPORTED_MODULE_4__.AssetTransfersOrder),\n/* harmony export */   NftFilters: () => (/* reexport safe */ _alchemy_apis_types__WEBPACK_IMPORTED_MODULE_4__.NftFilters),\n/* harmony export */   createAlchemyWeb3: () => (/* binding */ createAlchemyWeb3)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var web3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! web3 */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3/lib/index.js\");\n/* harmony import */ var web3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(web3__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var web3_core_subscriptions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! web3-core-subscriptions */ \"(ssr)/./node_modules/web3-core-subscriptions/lib/index.js\");\n/* harmony import */ var web3_core_subscriptions__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(web3_core_subscriptions__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var web3_eth_abi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! web3-eth-abi */ \"(ssr)/./node_modules/web3-eth-abi/lib/index.js\");\n/* harmony import */ var web3_eth_abi__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(web3_eth_abi__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var web3_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! web3-utils */ \"(ssr)/./node_modules/web3-utils/lib/index.js\");\n/* harmony import */ var web3_utils__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(web3_utils__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _util_hex__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./util/hex */ \"(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/util/hex.js\");\n/* harmony import */ var _util_promises__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./util/promises */ \"(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/util/promises.js\");\n/* harmony import */ var _web3_adapter_alchemyContext__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./web3-adapter/alchemyContext */ \"(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/alchemyContext.js\");\n/* harmony import */ var _web3_adapter_customRPC__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./web3-adapter/customRPC */ \"(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/customRPC.js\");\n/* harmony import */ var _web3_adapter_eth_maxPriorityFeePerGas__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./web3-adapter/eth_maxPriorityFeePerGas */ \"(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/eth_maxPriorityFeePerGas.js\");\n/* harmony import */ var _web3_adapter_eth_PrivateTransactions__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./web3-adapter/eth_PrivateTransactions */ \"(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/eth_PrivateTransactions.js\");\n/* harmony import */ var _alchemy_apis_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./alchemy-apis/types */ \"(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/alchemy-apis/types.js\");\n\n\n\n\n\n\n\n\n\n\n\n\nvar DEFAULT_MAX_RETRIES = 3;\nvar DEFAULT_RETRY_INTERVAL = 1000;\nvar DEFAULT_RETRY_JITTER = 250;\nvar DEFAULT_CONTRACT_ADDRESS = \"DEFAULT_TOKENS\";\nfunction createAlchemyWeb3(alchemyUrl, config) {\n    var fullConfig = fillInConfigDefaults(config);\n    var _a = (0,_web3_adapter_alchemyContext__WEBPACK_IMPORTED_MODULE_5__.makeAlchemyContext)(alchemyUrl, fullConfig), provider = _a.provider, jsonRpcSenders = _a.jsonRpcSenders, restSender = _a.restSender, setWriteProvider = _a.setWriteProvider;\n    var alchemyWeb3 = new (web3__WEBPACK_IMPORTED_MODULE_0___default())(provider);\n    alchemyWeb3.setProvider = function() {\n        throw new Error(\"setProvider is not supported in Alchemy Web3. To change the provider used for writes, use setWriteProvider() instead.\");\n    };\n    alchemyWeb3.setWriteProvider = setWriteProvider;\n    function getNfts(params, callback) {\n        return callAlchemyRestEndpoint({\n            restSender: restSender,\n            callback: callback,\n            params: params,\n            path: \"getNFTs\"\n        });\n    }\n    alchemyWeb3.alchemy = {\n        getTokenAllowance: function(params, callback) {\n            return callAlchemyJsonRpcMethod({\n                jsonRpcSenders: jsonRpcSenders,\n                callback: callback,\n                method: \"alchemy_getTokenAllowance\",\n                params: [\n                    params\n                ]\n            });\n        },\n        getTokenBalances: function(address, contractAddresses, callback) {\n            return callAlchemyJsonRpcMethod({\n                jsonRpcSenders: jsonRpcSenders,\n                callback: callback,\n                method: \"alchemy_getTokenBalances\",\n                params: [\n                    address,\n                    contractAddresses || DEFAULT_CONTRACT_ADDRESS\n                ],\n                processResponse: processTokenBalanceResponse\n            });\n        },\n        getTokenMetadata: function(address, callback) {\n            return callAlchemyJsonRpcMethod({\n                jsonRpcSenders: jsonRpcSenders,\n                callback: callback,\n                params: [\n                    address\n                ],\n                method: \"alchemy_getTokenMetadata\"\n            });\n        },\n        getAssetTransfers: function(params, callback) {\n            return callAlchemyJsonRpcMethod({\n                jsonRpcSenders: jsonRpcSenders,\n                callback: callback,\n                params: [\n                    (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, params), {\n                        fromBlock: params.fromBlock != null ? (0,_util_hex__WEBPACK_IMPORTED_MODULE_7__.formatBlock)(params.fromBlock) : undefined,\n                        toBlock: params.toBlock != null ? (0,_util_hex__WEBPACK_IMPORTED_MODULE_7__.formatBlock)(params.toBlock) : undefined,\n                        maxCount: params.maxCount != null ? (0,web3_utils__WEBPACK_IMPORTED_MODULE_3__.toHex)(params.maxCount) : undefined\n                    })\n                ],\n                method: \"alchemy_getAssetTransfers\"\n            });\n        },\n        getNftMetadata: function(params, callback) {\n            return callAlchemyRestEndpoint({\n                restSender: restSender,\n                callback: callback,\n                params: params,\n                path: \"getNFTMetadata\"\n            });\n        },\n        getNfts: getNfts,\n        getTransactionReceipts: function(params, callback) {\n            return callAlchemyJsonRpcMethod({\n                jsonRpcSenders: jsonRpcSenders,\n                callback: callback,\n                method: \"alchemy_getTransactionReceipts\",\n                params: [\n                    params\n                ]\n            });\n        }\n    };\n    patchSubscriptions(alchemyWeb3);\n    (0,_web3_adapter_customRPC__WEBPACK_IMPORTED_MODULE_8__.patchEnableCustomRPC)(alchemyWeb3);\n    (0,_web3_adapter_eth_maxPriorityFeePerGas__WEBPACK_IMPORTED_MODULE_9__.patchEthMaxPriorityFeePerGasMethod)(alchemyWeb3);\n    (0,_web3_adapter_eth_PrivateTransactions__WEBPACK_IMPORTED_MODULE_10__.patchEthPrivateTransactionMethods)(alchemyWeb3);\n    return alchemyWeb3;\n}\nfunction fillInConfigDefaults(_a) {\n    var _b = _a === void 0 ? {} : _a, _c = _b.writeProvider, writeProvider = _c === void 0 ? getWindowProvider() : _c, _d = _b.jsonRpcSenderMiddlewares, jsonRpcSenderMiddlewares = _d === void 0 ? [] : _d, _e = _b.maxRetries, maxRetries = _e === void 0 ? DEFAULT_MAX_RETRIES : _e, _f = _b.retryInterval, retryInterval = _f === void 0 ? DEFAULT_RETRY_INTERVAL : _f, _g = _b.retryJitter, retryJitter = _g === void 0 ? DEFAULT_RETRY_JITTER : _g;\n    return {\n        writeProvider: writeProvider,\n        jsonRpcSenderMiddlewares: jsonRpcSenderMiddlewares,\n        maxRetries: maxRetries,\n        retryInterval: retryInterval,\n        retryJitter: retryJitter\n    };\n}\nfunction getWindowProvider() {\n    return  false ? 0 : null;\n}\nfunction callAlchemyJsonRpcMethod(_a) {\n    var _this = this;\n    var jsonRpcSenders = _a.jsonRpcSenders, method = _a.method, params = _a.params, _b = _a.callback, callback = _b === void 0 ? noop : _b, _c = _a.processResponse, processResponse = _c === void 0 ? identity : _c;\n    var promise = function() {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(_this, void 0, void 0, function() {\n            var result;\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__generator)(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            jsonRpcSenders.send(method, params)\n                        ];\n                    case 1:\n                        result = _a.sent();\n                        return [\n                            2 /*return*/ ,\n                            processResponse(result)\n                        ];\n                }\n            });\n        });\n    }();\n    (0,_util_promises__WEBPACK_IMPORTED_MODULE_11__.callWhenDone)(promise, callback);\n    return promise;\n}\nfunction callAlchemyRestEndpoint(_a) {\n    var _this = this;\n    var restSender = _a.restSender, path = _a.path, params = _a.params, _b = _a.callback, callback = _b === void 0 ? noop : _b, _c = _a.processResponse, processResponse = _c === void 0 ? identity : _c;\n    var fixedParams = fixArrayQueryParams(params);\n    var promise = function() {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(_this, void 0, void 0, function() {\n            var result;\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__generator)(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            restSender.sendRestPayload(path, fixedParams)\n                        ];\n                    case 1:\n                        result = _a.sent();\n                        return [\n                            2 /*return*/ ,\n                            processResponse(result)\n                        ];\n                }\n            });\n        });\n    }();\n    (0,_util_promises__WEBPACK_IMPORTED_MODULE_11__.callWhenDone)(promise, callback);\n    return promise;\n}\nfunction processTokenBalanceResponse(rawResponse) {\n    // Convert token balance fields from hex-string to decimal-string.\n    var fixedTokenBalances = rawResponse.tokenBalances.map(function(balance) {\n        return balance.tokenBalance != null ? (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, balance), {\n            tokenBalance: web3_eth_abi__WEBPACK_IMPORTED_MODULE_2___default().decodeParameter(\"uint256\", balance.tokenBalance)\n        }) : balance;\n    });\n    return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, rawResponse), {\n        tokenBalances: fixedTokenBalances\n    });\n}\n/**\n * Updates Web3's internal subscription architecture to also handle Alchemy\n * specific subscriptions. This is to handle alternate namings of the existing\n * subscription endpoints, but the officially documented interfaces are\n * specified in the AlchemyEth interface.\n */ function patchSubscriptions(web3) {\n    var eth = web3.eth;\n    var oldSubscribe = eth.subscribe.bind(eth);\n    eth.subscribe = function(type) {\n        var rest = [];\n        for(var _i = 1; _i < arguments.length; _i++){\n            rest[_i - 1] = arguments[_i];\n        }\n        if (type === \"alchemy_fullPendingTransactions\" || type === \"alchemy_newFullPendingTransactions\") {\n            console.warn(\"This method is now deprecated. Please use `alchemy_pendingTransactions` instead.\");\n            return suppressNoSubscriptionExistsWarning(function() {\n                return oldSubscribe.apply(void 0, (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__spreadArray)([\n                    \"alchemy_newFullPendingTransactions\"\n                ], (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__read)(rest)));\n            });\n        }\n        if (type === \"alchemy_filteredNewFullPendingTransactions\" || type === \"alchemy_filteredPendingTransactions\" || type === \"alchemy_filteredFullPendingTransactions\") {\n            console.warn(\"This method is now deprecated. Please use `alchemy_pendingTransactions` instead.\");\n            return suppressNoSubscriptionExistsWarning(function() {\n                return oldSubscribe.apply(void 0, (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__spreadArray)([\n                    \"alchemy_filteredNewFullPendingTransactions\"\n                ], (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__read)(rest)));\n            });\n        }\n        if (type === \"alchemy_pendingTransactions\") {\n            return suppressNoSubscriptionExistsWarning(function() {\n                return oldSubscribe.apply(void 0, (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__spreadArray)([\n                    \"alchemy_pendingTransactions\"\n                ], (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__read)(rest)));\n            });\n        }\n        return oldSubscribe.apply(void 0, (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__spreadArray)([\n            type\n        ], (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__read)(rest)));\n    };\n}\n/**\n * VERY hacky wrapper to suppress a spurious warning when subscribing to an\n * Alchemy subscription that isn't built into Web3.\n */ function suppressNoSubscriptionExistsWarning(f) {\n    var oldConsoleWarn = console.warn;\n    console.warn = function() {\n        var args = [];\n        for(var _i = 0; _i < arguments.length; _i++){\n            args[_i] = arguments[_i];\n        }\n        if (typeof args[0] === \"string\" && args[0].includes(\" doesn't exist. Subscribing anyway.\")) {\n            return;\n        }\n        return oldConsoleWarn.apply(console, args);\n    };\n    try {\n        return f();\n    } finally{\n        console.warn = oldConsoleWarn;\n    }\n}\n/**\n * Another VERY hacky monkeypatch to make sure that we can take extra parameters to certain alchemy subscriptions\n * I hate doing this, but the other option is to fork web3-core and I think for now this is better\n */ var subscription = (web3_core_subscriptions__WEBPACK_IMPORTED_MODULE_1___default().subscription);\nvar oldSubscriptionPrototypeValidateArgs = subscription.prototype._validateArgs;\nsubscription.prototype._validateArgs = function(args) {\n    if ([\n        \"alchemy_filteredNewFullPendingTransactions\",\n        \"alchemy_filteredPendingTransactions\",\n        \"alchemy_filteredFullPendingTransactions\",\n        \"alchemy_pendingTransactions\"\n    ].includes(this.subscriptionMethod)) {\n    // This particular subscription type is allowed to have additional parameters\n    } else {\n        if ([\n            \"alchemy_fullPendingTransactions\",\n            \"alchemy_newFullPendingTransactions\"\n        ].includes(this.subscriptionMethod)) {\n            if (this.options.subscription) {\n                this.options.subscription.subscriptionName = this.subscriptionMethod;\n            }\n        }\n        var validator = oldSubscriptionPrototypeValidateArgs.bind(this);\n        validator(args);\n    }\n};\nfunction noop() {\n// Nothing.\n}\nfunction identity(x) {\n    return x;\n}\n/**\n * Alchemy's APIs receive multivalued params via keys with `[]` at the end.\n * Update any query params whose values are arrays to match this convention.\n */ function fixArrayQueryParams(params) {\n    var result = {};\n    Object.keys(params).forEach(function(key) {\n        var value = params[key];\n        var fixedKey = Array.isArray(value) ? toArrayKey(key) : key;\n        result[fixedKey] = value;\n    });\n    return result;\n}\nfunction toArrayKey(key) {\n    return endsWith(key, \"[]\") ? key : key + \"[]\";\n}\n/**\n * Like `String#endsWith`, for older environments.\n */ function endsWith(s, ending) {\n    var index = s.lastIndexOf(ending);\n    return index >= 0 && index === s.length - ending.length;\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/subscriptions/subscriptionBackfill.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/dist/esm/subscriptions/subscriptionBackfill.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dedupeLogs: () => (/* binding */ dedupeLogs),\n/* harmony export */   dedupeNewHeads: () => (/* binding */ dedupeNewHeads),\n/* harmony export */   makeBackfiller: () => (/* binding */ makeBackfiller)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _util_hex__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/hex */ \"(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/util/hex.js\");\n/* harmony import */ var _util_promises__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/promises */ \"(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/util/promises.js\");\n\n\n\n/**\n * The maximum number of blocks to backfill. If more than this many blocks have\n * been missed, then we'll sadly miss data, but we want to make sure we don't\n * end up requesting thousands of blocks if somebody left their laptop closed\n * for a week.\n */ var MAX_BACKFILL_BLOCKS = 120;\n/**\n * The maximum number of requests that can be included in a single batch request.\n * This value is enforced by the backend.\n */ var MAX_BATCH_SIZE = 10;\nfunction makeBackfiller(jsonRpcSenders) {\n    return {\n        getNewHeadsBackfill: getNewHeadsBackfill,\n        getLogsBackfill: getLogsBackfill\n    };\n    function getNewHeadsBackfill(isCancelled, previousHeads, fromBlockNumber) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function() {\n            var toBlockNumber, lastSeenBlockNumber, minBlockNumber, reorgHeads, intermediateHeads;\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        (0,_util_promises__WEBPACK_IMPORTED_MODULE_1__.throwIfCancelled)(isCancelled);\n                        return [\n                            4 /*yield*/ ,\n                            getBlockNumber()\n                        ];\n                    case 1:\n                        toBlockNumber = _a.sent();\n                        (0,_util_promises__WEBPACK_IMPORTED_MODULE_1__.throwIfCancelled)(isCancelled);\n                        if (previousHeads.length === 0) {\n                            return [\n                                2 /*return*/ ,\n                                getHeadEventsInRange(Math.max(fromBlockNumber, toBlockNumber - MAX_BACKFILL_BLOCKS) + 1, toBlockNumber + 1)\n                            ];\n                        }\n                        lastSeenBlockNumber = (0,_util_hex__WEBPACK_IMPORTED_MODULE_2__.fromHex)(previousHeads[previousHeads.length - 1].number);\n                        minBlockNumber = Math.max(0, lastSeenBlockNumber - MAX_BACKFILL_BLOCKS);\n                        if (lastSeenBlockNumber < minBlockNumber) {\n                            return [\n                                2 /*return*/ ,\n                                getHeadEventsInRange(minBlockNumber, toBlockNumber + 1)\n                            ];\n                        }\n                        return [\n                            4 /*yield*/ ,\n                            getReorgHeads(isCancelled, previousHeads)\n                        ];\n                    case 2:\n                        reorgHeads = _a.sent();\n                        (0,_util_promises__WEBPACK_IMPORTED_MODULE_1__.throwIfCancelled)(isCancelled);\n                        return [\n                            4 /*yield*/ ,\n                            getHeadEventsInRange(lastSeenBlockNumber + 1, toBlockNumber + 1)\n                        ];\n                    case 3:\n                        intermediateHeads = _a.sent();\n                        (0,_util_promises__WEBPACK_IMPORTED_MODULE_1__.throwIfCancelled)(isCancelled);\n                        return [\n                            2 /*return*/ ,\n                            (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([], (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(reorgHeads)), (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(intermediateHeads))\n                        ];\n                }\n            });\n        });\n    }\n    function getReorgHeads(isCancelled, previousHeads) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function() {\n            var result, i, oldEvent, blockHead;\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        result = [];\n                        i = previousHeads.length - 1;\n                        _a.label = 1;\n                    case 1:\n                        if (!(i >= 0)) return [\n                            3 /*break*/ ,\n                            4\n                        ];\n                        oldEvent = previousHeads[i];\n                        return [\n                            4 /*yield*/ ,\n                            getBlockByNumber((0,_util_hex__WEBPACK_IMPORTED_MODULE_2__.fromHex)(oldEvent.number))\n                        ];\n                    case 2:\n                        blockHead = _a.sent();\n                        (0,_util_promises__WEBPACK_IMPORTED_MODULE_1__.throwIfCancelled)(isCancelled);\n                        if (oldEvent.hash === blockHead.hash) {\n                            return [\n                                3 /*break*/ ,\n                                4\n                            ];\n                        }\n                        result.push(toNewHeadsEvent(blockHead));\n                        _a.label = 3;\n                    case 3:\n                        i--;\n                        return [\n                            3 /*break*/ ,\n                            1\n                        ];\n                    case 4:\n                        return [\n                            2 /*return*/ ,\n                            result.reverse()\n                        ];\n                }\n            });\n        });\n    }\n    function getHeadEventsInRange(fromBlockInclusive, toBlockExclusive) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function() {\n            var batchParts, headEventBatches, i, batchedBlockHeads, blockHeads;\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        if (fromBlockInclusive >= toBlockExclusive) {\n                            return [\n                                2 /*return*/ ,\n                                []\n                            ];\n                        }\n                        batchParts = [];\n                        headEventBatches = [];\n                        for(i = fromBlockInclusive; i < toBlockExclusive; i++){\n                            batchParts.push({\n                                method: \"eth_getBlockByNumber\",\n                                params: [\n                                    (0,_util_hex__WEBPACK_IMPORTED_MODULE_2__.toHex)(i),\n                                    false\n                                ]\n                            });\n                            if (batchParts.length % MAX_BATCH_SIZE === 0) {\n                                headEventBatches.push(jsonRpcSenders.sendBatch(batchParts));\n                                batchParts = [];\n                            }\n                        }\n                        if (batchParts.length > 0) {\n                            headEventBatches.push(jsonRpcSenders.sendBatch(batchParts));\n                        }\n                        return [\n                            4 /*yield*/ ,\n                            Promise.all(headEventBatches)\n                        ];\n                    case 1:\n                        batchedBlockHeads = _a.sent();\n                        blockHeads = batchedBlockHeads.reduce(function(acc, batch) {\n                            return acc.concat(batch);\n                        }, []);\n                        return [\n                            2 /*return*/ ,\n                            blockHeads.map(toNewHeadsEvent)\n                        ];\n                }\n            });\n        });\n    }\n    function getBlockByNumber(blockNumber) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function() {\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function(_a) {\n                return [\n                    2 /*return*/ ,\n                    jsonRpcSenders.send(\"eth_getBlockByNumber\", [\n                        (0,_util_hex__WEBPACK_IMPORTED_MODULE_2__.toHex)(blockNumber),\n                        false\n                    ])\n                ];\n            });\n        });\n    }\n    function getLogsBackfill(isCancelled, filter, previousLogs, fromBlockNumber) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function() {\n            var toBlockNumber, lastSeenBlockNumber, minBlockNumber, commonAncestorNumber, removedLogs, addedLogs;\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        (0,_util_promises__WEBPACK_IMPORTED_MODULE_1__.throwIfCancelled)(isCancelled);\n                        return [\n                            4 /*yield*/ ,\n                            getBlockNumber()\n                        ];\n                    case 1:\n                        toBlockNumber = _a.sent();\n                        (0,_util_promises__WEBPACK_IMPORTED_MODULE_1__.throwIfCancelled)(isCancelled);\n                        if (previousLogs.length === 0) {\n                            return [\n                                2 /*return*/ ,\n                                getLogsInRange(filter, Math.max(fromBlockNumber, toBlockNumber - MAX_BACKFILL_BLOCKS) + 1, toBlockNumber + 1)\n                            ];\n                        }\n                        lastSeenBlockNumber = (0,_util_hex__WEBPACK_IMPORTED_MODULE_2__.fromHex)(previousLogs[previousLogs.length - 1].blockNumber);\n                        minBlockNumber = Math.max(0, lastSeenBlockNumber - MAX_BACKFILL_BLOCKS);\n                        if (lastSeenBlockNumber < minBlockNumber) {\n                            return [\n                                2 /*return*/ ,\n                                getLogsInRange(filter, minBlockNumber, toBlockNumber + 1)\n                            ];\n                        }\n                        return [\n                            4 /*yield*/ ,\n                            getCommonAncestorNumber(isCancelled, previousLogs)\n                        ];\n                    case 2:\n                        commonAncestorNumber = _a.sent();\n                        (0,_util_promises__WEBPACK_IMPORTED_MODULE_1__.throwIfCancelled)(isCancelled);\n                        removedLogs = previousLogs.filter(function(log) {\n                            return (0,_util_hex__WEBPACK_IMPORTED_MODULE_2__.fromHex)(log.blockNumber) > commonAncestorNumber;\n                        }).map(function(log) {\n                            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, log), {\n                                removed: true\n                            });\n                        });\n                        return [\n                            4 /*yield*/ ,\n                            getLogsInRange(filter, commonAncestorNumber + 1, toBlockNumber + 1)\n                        ];\n                    case 3:\n                        addedLogs = _a.sent();\n                        (0,_util_promises__WEBPACK_IMPORTED_MODULE_1__.throwIfCancelled)(isCancelled);\n                        return [\n                            2 /*return*/ ,\n                            (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([], (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(removedLogs)), (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(addedLogs))\n                        ];\n                }\n            });\n        });\n    }\n    function getCommonAncestorNumber(isCancelled, previousLogs) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function() {\n            var i, _a, blockHash, blockNumber, hash;\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function(_b) {\n                switch(_b.label){\n                    case 0:\n                        i = previousLogs.length - 1;\n                        _b.label = 1;\n                    case 1:\n                        if (!(i >= 0)) return [\n                            3 /*break*/ ,\n                            4\n                        ];\n                        _a = previousLogs[i], blockHash = _a.blockHash, blockNumber = _a.blockNumber;\n                        return [\n                            4 /*yield*/ ,\n                            getBlockByNumber((0,_util_hex__WEBPACK_IMPORTED_MODULE_2__.fromHex)(blockNumber))\n                        ];\n                    case 2:\n                        hash = _b.sent().hash;\n                        (0,_util_promises__WEBPACK_IMPORTED_MODULE_1__.throwIfCancelled)(isCancelled);\n                        if (blockHash === hash) {\n                            return [\n                                2 /*return*/ ,\n                                (0,_util_hex__WEBPACK_IMPORTED_MODULE_2__.fromHex)(blockNumber)\n                            ];\n                        }\n                        _b.label = 3;\n                    case 3:\n                        i--;\n                        return [\n                            3 /*break*/ ,\n                            1\n                        ];\n                    case 4:\n                        return [\n                            2 /*return*/ ,\n                            Number.NEGATIVE_INFINITY\n                        ];\n                }\n            });\n        });\n    }\n    function getLogsInRange(filter, fromBlockInclusive, toBlockExclusive) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function() {\n            var rangeFilter;\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function(_a) {\n                if (fromBlockInclusive >= toBlockExclusive) {\n                    return [\n                        2 /*return*/ ,\n                        []\n                    ];\n                }\n                rangeFilter = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, filter), {\n                    fromBlock: (0,_util_hex__WEBPACK_IMPORTED_MODULE_2__.toHex)(fromBlockInclusive),\n                    toBlock: (0,_util_hex__WEBPACK_IMPORTED_MODULE_2__.toHex)(toBlockExclusive - 1)\n                });\n                return [\n                    2 /*return*/ ,\n                    jsonRpcSenders.send(\"eth_getLogs\", [\n                        rangeFilter\n                    ])\n                ];\n            });\n        });\n    }\n    function getBlockNumber() {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function() {\n            var blockNumberHex;\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            jsonRpcSenders.send(\"eth_blockNumber\")\n                        ];\n                    case 1:\n                        blockNumberHex = _a.sent();\n                        return [\n                            2 /*return*/ ,\n                            (0,_util_hex__WEBPACK_IMPORTED_MODULE_2__.fromHex)(blockNumberHex)\n                        ];\n                }\n            });\n        });\n    }\n}\nfunction toNewHeadsEvent(head) {\n    var result = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, head);\n    delete result.totalDifficulty;\n    delete result.transactions;\n    delete result.uncles;\n    return result;\n}\nfunction dedupeNewHeads(events) {\n    return dedupe(events, function(event) {\n        return event.hash;\n    });\n}\nfunction dedupeLogs(events) {\n    return dedupe(events, function(event) {\n        return event.blockHash + \"/\" + event.logIndex;\n    });\n}\nfunction dedupe(items, getKey) {\n    var keysSeen = new Set();\n    var result = [];\n    items.forEach(function(item) {\n        var key = getKey(item);\n        if (!keysSeen.has(key)) {\n            keysSeen.add(key);\n            result.push(item);\n        }\n    });\n    return result;\n} //# sourceMappingURL=subscriptionBackfill.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL2Rpc3QvZXNtL3N1YnNjcmlwdGlvbnMvc3Vic2NyaXB0aW9uQmFja2ZpbGwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQWdGO0FBQ25DO0FBQ087QUFDcEQ7Ozs7O0NBS0MsR0FDRCxJQUFJUSxzQkFBc0I7QUFDMUI7OztDQUdDLEdBQ0QsSUFBSUMsaUJBQWlCO0FBQ2QsU0FBU0MsZUFBZUMsY0FBYztJQUN6QyxPQUFPO1FBQUVDLHFCQUFxQkE7UUFBcUJDLGlCQUFpQkE7SUFBZ0I7SUFDcEYsU0FBU0Qsb0JBQW9CRSxXQUFXLEVBQUVDLGFBQWEsRUFBRUMsZUFBZTtRQUNwRSxPQUFPZixnREFBU0EsQ0FBQyxJQUFJLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRztZQUNuQyxJQUFJZ0IsZUFBZUMscUJBQXFCQyxnQkFBZ0JDLFlBQVlDO1lBQ3BFLE9BQU9uQixrREFBV0EsQ0FBQyxJQUFJLEVBQUUsU0FBVW9CLEVBQUU7Z0JBQ2pDLE9BQVFBLEdBQUdDLEtBQUs7b0JBQ1osS0FBSzt3QkFDRGhCLGdFQUFnQkEsQ0FBQ087d0JBQ2pCLE9BQU87NEJBQUMsRUFBRSxPQUFPOzRCQUFJVTt5QkFBaUI7b0JBQzFDLEtBQUs7d0JBQ0RQLGdCQUFnQkssR0FBR0csSUFBSTt3QkFDdkJsQixnRUFBZ0JBLENBQUNPO3dCQUNqQixJQUFJQyxjQUFjVyxNQUFNLEtBQUssR0FBRzs0QkFDNUIsT0FBTztnQ0FBQyxFQUFFLFFBQVE7Z0NBQUlDLHFCQUFxQkMsS0FBS0MsR0FBRyxDQUFDYixpQkFBaUJDLGdCQUFnQlQsdUJBQXVCLEdBQUdTLGdCQUFnQjs2QkFBRzt3QkFDdEk7d0JBQ0FDLHNCQUFzQmIsa0RBQU9BLENBQUNVLGFBQWEsQ0FBQ0EsY0FBY1csTUFBTSxHQUFHLEVBQUUsQ0FBQ0ksTUFBTTt3QkFDNUVYLGlCQUFpQlMsS0FBS0MsR0FBRyxDQUFDLEdBQUdYLHNCQUFzQlY7d0JBQ25ELElBQUlVLHNCQUFzQkMsZ0JBQWdCOzRCQUN0QyxPQUFPO2dDQUFDLEVBQUUsUUFBUTtnQ0FBSVEscUJBQXFCUixnQkFBZ0JGLGdCQUFnQjs2QkFBRzt3QkFDbEY7d0JBQ0EsT0FBTzs0QkFBQyxFQUFFLE9BQU87NEJBQUljLGNBQWNqQixhQUFhQzt5QkFBZTtvQkFDbkUsS0FBSzt3QkFDREssYUFBYUUsR0FBR0csSUFBSTt3QkFDcEJsQixnRUFBZ0JBLENBQUNPO3dCQUNqQixPQUFPOzRCQUFDLEVBQUUsT0FBTzs0QkFBSWEscUJBQXFCVCxzQkFBc0IsR0FBR0QsZ0JBQWdCO3lCQUFHO29CQUMxRixLQUFLO3dCQUNESSxvQkFBb0JDLEdBQUdHLElBQUk7d0JBQzNCbEIsZ0VBQWdCQSxDQUFDTzt3QkFDakIsT0FBTzs0QkFBQyxFQUFFLFFBQVE7NEJBQUlWLG9EQUFhQSxDQUFDQSxvREFBYUEsQ0FBQyxFQUFFLEVBQUVELDZDQUFNQSxDQUFDaUIsY0FBY2pCLDZDQUFNQSxDQUFDa0I7eUJBQW9CO2dCQUM5RztZQUNKO1FBQ0o7SUFDSjtJQUNBLFNBQVNVLGNBQWNqQixXQUFXLEVBQUVDLGFBQWE7UUFDN0MsT0FBT2QsZ0RBQVNBLENBQUMsSUFBSSxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUc7WUFDbkMsSUFBSStCLFFBQVFDLEdBQUdDLFVBQVVDO1lBQ3pCLE9BQU9qQyxrREFBV0EsQ0FBQyxJQUFJLEVBQUUsU0FBVW9CLEVBQUU7Z0JBQ2pDLE9BQVFBLEdBQUdDLEtBQUs7b0JBQ1osS0FBSzt3QkFDRFMsU0FBUyxFQUFFO3dCQUNYQyxJQUFJbEIsY0FBY1csTUFBTSxHQUFHO3dCQUMzQkosR0FBR0MsS0FBSyxHQUFHO29CQUNmLEtBQUs7d0JBQ0QsSUFBSSxDQUFFVSxDQUFBQSxLQUFLLElBQUksT0FBTzs0QkFBQyxFQUFFLE9BQU87NEJBQUk7eUJBQUU7d0JBQ3RDQyxXQUFXbkIsYUFBYSxDQUFDa0IsRUFBRTt3QkFDM0IsT0FBTzs0QkFBQyxFQUFFLE9BQU87NEJBQUlHLGlCQUFpQi9CLGtEQUFPQSxDQUFDNkIsU0FBU0osTUFBTTt5QkFBRztvQkFDcEUsS0FBSzt3QkFDREssWUFBWWIsR0FBR0csSUFBSTt3QkFDbkJsQixnRUFBZ0JBLENBQUNPO3dCQUNqQixJQUFJb0IsU0FBU0csSUFBSSxLQUFLRixVQUFVRSxJQUFJLEVBQUU7NEJBQ2xDLE9BQU87Z0NBQUMsRUFBRSxPQUFPO2dDQUFJOzZCQUFFO3dCQUMzQjt3QkFDQUwsT0FBT00sSUFBSSxDQUFDQyxnQkFBZ0JKO3dCQUM1QmIsR0FBR0MsS0FBSyxHQUFHO29CQUNmLEtBQUs7d0JBQ0RVO3dCQUNBLE9BQU87NEJBQUMsRUFBRSxPQUFPOzRCQUFJO3lCQUFFO29CQUMzQixLQUFLO3dCQUFHLE9BQU87NEJBQUMsRUFBRSxRQUFROzRCQUFJRCxPQUFPUSxPQUFPO3lCQUFHO2dCQUNuRDtZQUNKO1FBQ0o7SUFDSjtJQUNBLFNBQVNiLHFCQUFxQmMsa0JBQWtCLEVBQUVDLGdCQUFnQjtRQUM5RCxPQUFPekMsZ0RBQVNBLENBQUMsSUFBSSxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUc7WUFDbkMsSUFBSTBDLFlBQVlDLGtCQUFrQlgsR0FBR1ksbUJBQW1CQztZQUN4RCxPQUFPNUMsa0RBQVdBLENBQUMsSUFBSSxFQUFFLFNBQVVvQixFQUFFO2dCQUNqQyxPQUFRQSxHQUFHQyxLQUFLO29CQUNaLEtBQUs7d0JBQ0QsSUFBSWtCLHNCQUFzQkMsa0JBQWtCOzRCQUN4QyxPQUFPO2dDQUFDLEVBQUUsUUFBUTtnQ0FBSSxFQUFFOzZCQUFDO3dCQUM3Qjt3QkFDQUMsYUFBYSxFQUFFO3dCQUNmQyxtQkFBbUIsRUFBRTt3QkFDckIsSUFBS1gsSUFBSVEsb0JBQW9CUixJQUFJUyxrQkFBa0JULElBQUs7NEJBQ3BEVSxXQUFXTCxJQUFJLENBQUM7Z0NBQ1pTLFFBQVE7Z0NBQ1JDLFFBQVE7b0NBQUMxQyxnREFBS0EsQ0FBQzJCO29DQUFJO2lDQUFNOzRCQUM3Qjs0QkFDQSxJQUFJVSxXQUFXakIsTUFBTSxHQUFHakIsbUJBQW1CLEdBQUc7Z0NBQzFDbUMsaUJBQWlCTixJQUFJLENBQUMzQixlQUFlc0MsU0FBUyxDQUFDTjtnQ0FDL0NBLGFBQWEsRUFBRTs0QkFDbkI7d0JBQ0o7d0JBQ0EsSUFBSUEsV0FBV2pCLE1BQU0sR0FBRyxHQUFHOzRCQUN2QmtCLGlCQUFpQk4sSUFBSSxDQUFDM0IsZUFBZXNDLFNBQVMsQ0FBQ047d0JBQ25EO3dCQUNBLE9BQU87NEJBQUMsRUFBRSxPQUFPOzRCQUFJTyxRQUFRQyxHQUFHLENBQUNQO3lCQUFrQjtvQkFDdkQsS0FBSzt3QkFDREMsb0JBQW9CdkIsR0FBR0csSUFBSTt3QkFDM0JxQixhQUFhRCxrQkFBa0JPLE1BQU0sQ0FBQyxTQUFVQyxHQUFHLEVBQUVDLEtBQUs7NEJBQUksT0FBT0QsSUFBSUUsTUFBTSxDQUFDRDt3QkFBUSxHQUFHLEVBQUU7d0JBQzdGLE9BQU87NEJBQUMsRUFBRSxRQUFROzRCQUFJUixXQUFXVSxHQUFHLENBQUNqQjt5QkFBaUI7Z0JBQzlEO1lBQ0o7UUFDSjtJQUNKO0lBQ0EsU0FBU0gsaUJBQWlCcUIsV0FBVztRQUNqQyxPQUFPeEQsZ0RBQVNBLENBQUMsSUFBSSxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUc7WUFDbkMsT0FBT0Msa0RBQVdBLENBQUMsSUFBSSxFQUFFLFNBQVVvQixFQUFFO2dCQUNqQyxPQUFPO29CQUFDLEVBQUUsUUFBUTtvQkFBSVgsZUFBZStDLElBQUksQ0FBQyx3QkFBd0I7d0JBQzFEcEQsZ0RBQUtBLENBQUNtRDt3QkFDTjtxQkFDSDtpQkFBRTtZQUNYO1FBQ0o7SUFDSjtJQUNBLFNBQVM1QyxnQkFBZ0JDLFdBQVcsRUFBRTZDLE1BQU0sRUFBRUMsWUFBWSxFQUFFNUMsZUFBZTtRQUN2RSxPQUFPZixnREFBU0EsQ0FBQyxJQUFJLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRztZQUNuQyxJQUFJZ0IsZUFBZUMscUJBQXFCQyxnQkFBZ0IwQyxzQkFBc0JDLGFBQWFDO1lBQzNGLE9BQU83RCxrREFBV0EsQ0FBQyxJQUFJLEVBQUUsU0FBVW9CLEVBQUU7Z0JBQ2pDLE9BQVFBLEdBQUdDLEtBQUs7b0JBQ1osS0FBSzt3QkFDRGhCLGdFQUFnQkEsQ0FBQ087d0JBQ2pCLE9BQU87NEJBQUMsRUFBRSxPQUFPOzRCQUFJVTt5QkFBaUI7b0JBQzFDLEtBQUs7d0JBQ0RQLGdCQUFnQkssR0FBR0csSUFBSTt3QkFDdkJsQixnRUFBZ0JBLENBQUNPO3dCQUNqQixJQUFJOEMsYUFBYWxDLE1BQU0sS0FBSyxHQUFHOzRCQUMzQixPQUFPO2dDQUFDLEVBQUUsUUFBUTtnQ0FBSXNDLGVBQWVMLFFBQVEvQixLQUFLQyxHQUFHLENBQUNiLGlCQUFpQkMsZ0JBQWdCVCx1QkFBdUIsR0FBR1MsZ0JBQWdCOzZCQUFHO3dCQUN4STt3QkFDQUMsc0JBQXNCYixrREFBT0EsQ0FBQ3VELFlBQVksQ0FBQ0EsYUFBYWxDLE1BQU0sR0FBRyxFQUFFLENBQUMrQixXQUFXO3dCQUMvRXRDLGlCQUFpQlMsS0FBS0MsR0FBRyxDQUFDLEdBQUdYLHNCQUFzQlY7d0JBQ25ELElBQUlVLHNCQUFzQkMsZ0JBQWdCOzRCQUN0QyxPQUFPO2dDQUFDLEVBQUUsUUFBUTtnQ0FBSTZDLGVBQWVMLFFBQVF4QyxnQkFBZ0JGLGdCQUFnQjs2QkFBRzt3QkFDcEY7d0JBQ0EsT0FBTzs0QkFBQyxFQUFFLE9BQU87NEJBQUlnRCx3QkFBd0JuRCxhQUFhOEM7eUJBQWM7b0JBQzVFLEtBQUs7d0JBQ0RDLHVCQUF1QnZDLEdBQUdHLElBQUk7d0JBQzlCbEIsZ0VBQWdCQSxDQUFDTzt3QkFDakJnRCxjQUFjRixhQUNURCxNQUFNLENBQUMsU0FBVU8sR0FBRzs0QkFBSSxPQUFPN0Qsa0RBQU9BLENBQUM2RCxJQUFJVCxXQUFXLElBQUlJO3dCQUFzQixHQUNoRkwsR0FBRyxDQUFDLFNBQVVVLEdBQUc7NEJBQUksT0FBUWxFLCtDQUFRQSxDQUFDQSwrQ0FBUUEsQ0FBQyxDQUFDLEdBQUdrRSxNQUFNO2dDQUFFQyxTQUFTOzRCQUFLO3dCQUFLO3dCQUNuRixPQUFPOzRCQUFDLEVBQUUsT0FBTzs0QkFBSUgsZUFBZUwsUUFBUUUsdUJBQXVCLEdBQUc1QyxnQkFBZ0I7eUJBQUc7b0JBQzdGLEtBQUs7d0JBQ0Q4QyxZQUFZekMsR0FBR0csSUFBSTt3QkFDbkJsQixnRUFBZ0JBLENBQUNPO3dCQUNqQixPQUFPOzRCQUFDLEVBQUUsUUFBUTs0QkFBSVYsb0RBQWFBLENBQUNBLG9EQUFhQSxDQUFDLEVBQUUsRUFBRUQsNkNBQU1BLENBQUMyRCxlQUFlM0QsNkNBQU1BLENBQUM0RDt5QkFBWTtnQkFDdkc7WUFDSjtRQUNKO0lBQ0o7SUFDQSxTQUFTRSx3QkFBd0JuRCxXQUFXLEVBQUU4QyxZQUFZO1FBQ3RELE9BQU8zRCxnREFBU0EsQ0FBQyxJQUFJLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRztZQUNuQyxJQUFJZ0MsR0FBR1gsSUFBSThDLFdBQVdYLGFBQWFwQjtZQUNuQyxPQUFPbkMsa0RBQVdBLENBQUMsSUFBSSxFQUFFLFNBQVVtRSxFQUFFO2dCQUNqQyxPQUFRQSxHQUFHOUMsS0FBSztvQkFDWixLQUFLO3dCQUNEVSxJQUFJMkIsYUFBYWxDLE1BQU0sR0FBRzt3QkFDMUIyQyxHQUFHOUMsS0FBSyxHQUFHO29CQUNmLEtBQUs7d0JBQ0QsSUFBSSxDQUFFVSxDQUFBQSxLQUFLLElBQUksT0FBTzs0QkFBQyxFQUFFLE9BQU87NEJBQUk7eUJBQUU7d0JBQ3RDWCxLQUFLc0MsWUFBWSxDQUFDM0IsRUFBRSxFQUFFbUMsWUFBWTlDLEdBQUc4QyxTQUFTLEVBQUVYLGNBQWNuQyxHQUFHbUMsV0FBVzt3QkFDNUUsT0FBTzs0QkFBQyxFQUFFLE9BQU87NEJBQUlyQixpQkFBaUIvQixrREFBT0EsQ0FBQ29EO3lCQUFjO29CQUNoRSxLQUFLO3dCQUNEcEIsT0FBTyxHQUFJWixJQUFJLEdBQUlZLElBQUk7d0JBQ3ZCOUIsZ0VBQWdCQSxDQUFDTzt3QkFDakIsSUFBSXNELGNBQWMvQixNQUFNOzRCQUNwQixPQUFPO2dDQUFDLEVBQUUsUUFBUTtnQ0FBSWhDLGtEQUFPQSxDQUFDb0Q7NkJBQWE7d0JBQy9DO3dCQUNBWSxHQUFHOUMsS0FBSyxHQUFHO29CQUNmLEtBQUs7d0JBQ0RVO3dCQUNBLE9BQU87NEJBQUMsRUFBRSxPQUFPOzRCQUFJO3lCQUFFO29CQUMzQixLQUFLO3dCQUFHLE9BQU87NEJBQUMsRUFBRSxRQUFROzRCQUFJcUMsT0FBT0MsaUJBQWlCO3lCQUFDO2dCQUMzRDtZQUNKO1FBQ0o7SUFDSjtJQUNBLFNBQVNQLGVBQWVMLE1BQU0sRUFBRWxCLGtCQUFrQixFQUFFQyxnQkFBZ0I7UUFDaEUsT0FBT3pDLGdEQUFTQSxDQUFDLElBQUksRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHO1lBQ25DLElBQUl1RTtZQUNKLE9BQU90RSxrREFBV0EsQ0FBQyxJQUFJLEVBQUUsU0FBVW9CLEVBQUU7Z0JBQ2pDLElBQUltQixzQkFBc0JDLGtCQUFrQjtvQkFDeEMsT0FBTzt3QkFBQyxFQUFFLFFBQVE7d0JBQUksRUFBRTtxQkFBQztnQkFDN0I7Z0JBQ0E4QixjQUFjeEUsK0NBQVFBLENBQUNBLCtDQUFRQSxDQUFDLENBQUMsR0FBRzJELFNBQVM7b0JBQUVjLFdBQVduRSxnREFBS0EsQ0FBQ21DO29CQUFxQmlDLFNBQVNwRSxnREFBS0EsQ0FBQ29DLG1CQUFtQjtnQkFBRztnQkFDMUgsT0FBTztvQkFBQyxFQUFFLFFBQVE7b0JBQUkvQixlQUFlK0MsSUFBSSxDQUFDLGVBQWU7d0JBQUNjO3FCQUFZO2lCQUFFO1lBQzVFO1FBQ0o7SUFDSjtJQUNBLFNBQVNoRDtRQUNMLE9BQU92QixnREFBU0EsQ0FBQyxJQUFJLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRztZQUNuQyxJQUFJMEU7WUFDSixPQUFPekUsa0RBQVdBLENBQUMsSUFBSSxFQUFFLFNBQVVvQixFQUFFO2dCQUNqQyxPQUFRQSxHQUFHQyxLQUFLO29CQUNaLEtBQUs7d0JBQUcsT0FBTzs0QkFBQyxFQUFFLE9BQU87NEJBQUlaLGVBQWUrQyxJQUFJLENBQUM7eUJBQW1CO29CQUNwRSxLQUFLO3dCQUNEaUIsaUJBQWlCckQsR0FBR0csSUFBSTt3QkFDeEIsT0FBTzs0QkFBQyxFQUFFLFFBQVE7NEJBQUlwQixrREFBT0EsQ0FBQ3NFO3lCQUFnQjtnQkFDdEQ7WUFDSjtRQUNKO0lBQ0o7QUFDSjtBQUNBLFNBQVNwQyxnQkFBZ0JxQyxJQUFJO0lBQ3pCLElBQUk1QyxTQUFTaEMsK0NBQVFBLENBQUMsQ0FBQyxHQUFHNEU7SUFDMUIsT0FBTzVDLE9BQU82QyxlQUFlO0lBQzdCLE9BQU83QyxPQUFPOEMsWUFBWTtJQUMxQixPQUFPOUMsT0FBTytDLE1BQU07SUFDcEIsT0FBTy9DO0FBQ1g7QUFDTyxTQUFTZ0QsZUFBZUMsTUFBTTtJQUNqQyxPQUFPQyxPQUFPRCxRQUFRLFNBQVVFLEtBQUs7UUFBSSxPQUFPQSxNQUFNOUMsSUFBSTtJQUFFO0FBQ2hFO0FBQ08sU0FBUytDLFdBQVdILE1BQU07SUFDN0IsT0FBT0MsT0FBT0QsUUFBUSxTQUFVRSxLQUFLO1FBQUksT0FBT0EsTUFBTWYsU0FBUyxHQUFHLE1BQU1lLE1BQU1FLFFBQVE7SUFBRTtBQUM1RjtBQUNBLFNBQVNILE9BQU9JLEtBQUssRUFBRUMsTUFBTTtJQUN6QixJQUFJQyxXQUFXLElBQUlDO0lBQ25CLElBQUl6RCxTQUFTLEVBQUU7SUFDZnNELE1BQU1JLE9BQU8sQ0FBQyxTQUFVQyxJQUFJO1FBQ3hCLElBQUlDLE1BQU1MLE9BQU9JO1FBQ2pCLElBQUksQ0FBQ0gsU0FBU0ssR0FBRyxDQUFDRCxNQUFNO1lBQ3BCSixTQUFTTSxHQUFHLENBQUNGO1lBQ2I1RCxPQUFPTSxJQUFJLENBQUNxRDtRQUNoQjtJQUNKO0lBQ0EsT0FBTzNEO0FBQ1gsRUFDQSxnREFBZ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AYWxjaC9hbGNoZW15LXdlYjMvZGlzdC9lc20vc3Vic2NyaXB0aW9ucy9zdWJzY3JpcHRpb25CYWNrZmlsbC5qcz85Njc1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fYXNzaWduLCBfX2F3YWl0ZXIsIF9fZ2VuZXJhdG9yLCBfX3JlYWQsIF9fc3ByZWFkQXJyYXkgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGZyb21IZXgsIHRvSGV4IH0gZnJvbSBcIi4uL3V0aWwvaGV4XCI7XG5pbXBvcnQgeyB0aHJvd0lmQ2FuY2VsbGVkIH0gZnJvbSBcIi4uL3V0aWwvcHJvbWlzZXNcIjtcbi8qKlxuICogVGhlIG1heGltdW0gbnVtYmVyIG9mIGJsb2NrcyB0byBiYWNrZmlsbC4gSWYgbW9yZSB0aGFuIHRoaXMgbWFueSBibG9ja3MgaGF2ZVxuICogYmVlbiBtaXNzZWQsIHRoZW4gd2UnbGwgc2FkbHkgbWlzcyBkYXRhLCBidXQgd2Ugd2FudCB0byBtYWtlIHN1cmUgd2UgZG9uJ3RcbiAqIGVuZCB1cCByZXF1ZXN0aW5nIHRob3VzYW5kcyBvZiBibG9ja3MgaWYgc29tZWJvZHkgbGVmdCB0aGVpciBsYXB0b3AgY2xvc2VkXG4gKiBmb3IgYSB3ZWVrLlxuICovXG52YXIgTUFYX0JBQ0tGSUxMX0JMT0NLUyA9IDEyMDtcbi8qKlxuICogVGhlIG1heGltdW0gbnVtYmVyIG9mIHJlcXVlc3RzIHRoYXQgY2FuIGJlIGluY2x1ZGVkIGluIGEgc2luZ2xlIGJhdGNoIHJlcXVlc3QuXG4gKiBUaGlzIHZhbHVlIGlzIGVuZm9yY2VkIGJ5IHRoZSBiYWNrZW5kLlxuICovXG52YXIgTUFYX0JBVENIX1NJWkUgPSAxMDtcbmV4cG9ydCBmdW5jdGlvbiBtYWtlQmFja2ZpbGxlcihqc29uUnBjU2VuZGVycykge1xuICAgIHJldHVybiB7IGdldE5ld0hlYWRzQmFja2ZpbGw6IGdldE5ld0hlYWRzQmFja2ZpbGwsIGdldExvZ3NCYWNrZmlsbDogZ2V0TG9nc0JhY2tmaWxsIH07XG4gICAgZnVuY3Rpb24gZ2V0TmV3SGVhZHNCYWNrZmlsbChpc0NhbmNlbGxlZCwgcHJldmlvdXNIZWFkcywgZnJvbUJsb2NrTnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB0b0Jsb2NrTnVtYmVyLCBsYXN0U2VlbkJsb2NrTnVtYmVyLCBtaW5CbG9ja051bWJlciwgcmVvcmdIZWFkcywgaW50ZXJtZWRpYXRlSGVhZHM7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvd0lmQ2FuY2VsbGVkKGlzQ2FuY2VsbGVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGdldEJsb2NrTnVtYmVyKCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICB0b0Jsb2NrTnVtYmVyID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3dJZkNhbmNlbGxlZChpc0NhbmNlbGxlZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJldmlvdXNIZWFkcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZ2V0SGVhZEV2ZW50c0luUmFuZ2UoTWF0aC5tYXgoZnJvbUJsb2NrTnVtYmVyLCB0b0Jsb2NrTnVtYmVyIC0gTUFYX0JBQ0tGSUxMX0JMT0NLUykgKyAxLCB0b0Jsb2NrTnVtYmVyICsgMSldO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFNlZW5CbG9ja051bWJlciA9IGZyb21IZXgocHJldmlvdXNIZWFkc1twcmV2aW91c0hlYWRzLmxlbmd0aCAtIDFdLm51bWJlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5CbG9ja051bWJlciA9IE1hdGgubWF4KDAsIGxhc3RTZWVuQmxvY2tOdW1iZXIgLSBNQVhfQkFDS0ZJTExfQkxPQ0tTKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXN0U2VlbkJsb2NrTnVtYmVyIDwgbWluQmxvY2tOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZ2V0SGVhZEV2ZW50c0luUmFuZ2UobWluQmxvY2tOdW1iZXIsIHRvQmxvY2tOdW1iZXIgKyAxKV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBnZXRSZW9yZ0hlYWRzKGlzQ2FuY2VsbGVkLCBwcmV2aW91c0hlYWRzKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlb3JnSGVhZHMgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvd0lmQ2FuY2VsbGVkKGlzQ2FuY2VsbGVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGdldEhlYWRFdmVudHNJblJhbmdlKGxhc3RTZWVuQmxvY2tOdW1iZXIgKyAxLCB0b0Jsb2NrTnVtYmVyICsgMSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnRlcm1lZGlhdGVIZWFkcyA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93SWZDYW5jZWxsZWQoaXNDYW5jZWxsZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIF9fc3ByZWFkQXJyYXkoX19zcHJlYWRBcnJheShbXSwgX19yZWFkKHJlb3JnSGVhZHMpKSwgX19yZWFkKGludGVybWVkaWF0ZUhlYWRzKSldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0UmVvcmdIZWFkcyhpc0NhbmNlbGxlZCwgcHJldmlvdXNIZWFkcykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0LCBpLCBvbGRFdmVudCwgYmxvY2tIZWFkO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBpID0gcHJldmlvdXNIZWFkcy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAxO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShpID49IDApKSByZXR1cm4gWzMgLypicmVhayovLCA0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9sZEV2ZW50ID0gcHJldmlvdXNIZWFkc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGdldEJsb2NrQnlOdW1iZXIoZnJvbUhleChvbGRFdmVudC5udW1iZXIpKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrSGVhZCA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93SWZDYW5jZWxsZWQoaXNDYW5jZWxsZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9sZEV2ZW50Lmhhc2ggPT09IGJsb2NrSGVhZC5oYXNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh0b05ld0hlYWRzRXZlbnQoYmxvY2tIZWFkKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDM7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGktLTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDFdO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbMiAvKnJldHVybiovLCByZXN1bHQucmV2ZXJzZSgpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldEhlYWRFdmVudHNJblJhbmdlKGZyb21CbG9ja0luY2x1c2l2ZSwgdG9CbG9ja0V4Y2x1c2l2ZSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYmF0Y2hQYXJ0cywgaGVhZEV2ZW50QmF0Y2hlcywgaSwgYmF0Y2hlZEJsb2NrSGVhZHMsIGJsb2NrSGVhZHM7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZnJvbUJsb2NrSW5jbHVzaXZlID49IHRvQmxvY2tFeGNsdXNpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgW11dO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYmF0Y2hQYXJ0cyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZEV2ZW50QmF0Y2hlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gZnJvbUJsb2NrSW5jbHVzaXZlOyBpIDwgdG9CbG9ja0V4Y2x1c2l2ZTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmF0Y2hQYXJ0cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBcImV0aF9nZXRCbG9ja0J5TnVtYmVyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtczogW3RvSGV4KGkpLCBmYWxzZV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJhdGNoUGFydHMubGVuZ3RoICUgTUFYX0JBVENIX1NJWkUgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZEV2ZW50QmF0Y2hlcy5wdXNoKGpzb25ScGNTZW5kZXJzLnNlbmRCYXRjaChiYXRjaFBhcnRzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhdGNoUGFydHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYmF0Y2hQYXJ0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZEV2ZW50QmF0Y2hlcy5wdXNoKGpzb25ScGNTZW5kZXJzLnNlbmRCYXRjaChiYXRjaFBhcnRzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBQcm9taXNlLmFsbChoZWFkRXZlbnRCYXRjaGVzKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhdGNoZWRCbG9ja0hlYWRzID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2tIZWFkcyA9IGJhdGNoZWRCbG9ja0hlYWRzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBiYXRjaCkgeyByZXR1cm4gYWNjLmNvbmNhdChiYXRjaCk7IH0sIFtdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBibG9ja0hlYWRzLm1hcCh0b05ld0hlYWRzRXZlbnQpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldEJsb2NrQnlOdW1iZXIoYmxvY2tOdW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBqc29uUnBjU2VuZGVycy5zZW5kKFwiZXRoX2dldEJsb2NrQnlOdW1iZXJcIiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9IZXgoYmxvY2tOdW1iZXIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIF0pXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0TG9nc0JhY2tmaWxsKGlzQ2FuY2VsbGVkLCBmaWx0ZXIsIHByZXZpb3VzTG9ncywgZnJvbUJsb2NrTnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB0b0Jsb2NrTnVtYmVyLCBsYXN0U2VlbkJsb2NrTnVtYmVyLCBtaW5CbG9ja051bWJlciwgY29tbW9uQW5jZXN0b3JOdW1iZXIsIHJlbW92ZWRMb2dzLCBhZGRlZExvZ3M7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvd0lmQ2FuY2VsbGVkKGlzQ2FuY2VsbGVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGdldEJsb2NrTnVtYmVyKCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICB0b0Jsb2NrTnVtYmVyID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3dJZkNhbmNlbGxlZChpc0NhbmNlbGxlZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJldmlvdXNMb2dzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBnZXRMb2dzSW5SYW5nZShmaWx0ZXIsIE1hdGgubWF4KGZyb21CbG9ja051bWJlciwgdG9CbG9ja051bWJlciAtIE1BWF9CQUNLRklMTF9CTE9DS1MpICsgMSwgdG9CbG9ja051bWJlciArIDEpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RTZWVuQmxvY2tOdW1iZXIgPSBmcm9tSGV4KHByZXZpb3VzTG9nc1twcmV2aW91c0xvZ3MubGVuZ3RoIC0gMV0uYmxvY2tOdW1iZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluQmxvY2tOdW1iZXIgPSBNYXRoLm1heCgwLCBsYXN0U2VlbkJsb2NrTnVtYmVyIC0gTUFYX0JBQ0tGSUxMX0JMT0NLUyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGFzdFNlZW5CbG9ja051bWJlciA8IG1pbkJsb2NrTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGdldExvZ3NJblJhbmdlKGZpbHRlciwgbWluQmxvY2tOdW1iZXIsIHRvQmxvY2tOdW1iZXIgKyAxKV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBnZXRDb21tb25BbmNlc3Rvck51bWJlcihpc0NhbmNlbGxlZCwgcHJldmlvdXNMb2dzKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1vbkFuY2VzdG9yTnVtYmVyID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3dJZkNhbmNlbGxlZChpc0NhbmNlbGxlZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVkTG9ncyA9IHByZXZpb3VzTG9nc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGxvZykgeyByZXR1cm4gZnJvbUhleChsb2cuYmxvY2tOdW1iZXIpID4gY29tbW9uQW5jZXN0b3JOdW1iZXI7IH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAobG9nKSB7IHJldHVybiAoX19hc3NpZ24oX19hc3NpZ24oe30sIGxvZyksIHsgcmVtb3ZlZDogdHJ1ZSB9KSk7IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgZ2V0TG9nc0luUmFuZ2UoZmlsdGVyLCBjb21tb25BbmNlc3Rvck51bWJlciArIDEsIHRvQmxvY2tOdW1iZXIgKyAxKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZGVkTG9ncyA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93SWZDYW5jZWxsZWQoaXNDYW5jZWxsZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIF9fc3ByZWFkQXJyYXkoX19zcHJlYWRBcnJheShbXSwgX19yZWFkKHJlbW92ZWRMb2dzKSksIF9fcmVhZChhZGRlZExvZ3MpKV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRDb21tb25BbmNlc3Rvck51bWJlcihpc0NhbmNlbGxlZCwgcHJldmlvdXNMb2dzKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBpLCBfYSwgYmxvY2tIYXNoLCBibG9ja051bWJlciwgaGFzaDtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBwcmV2aW91c0xvZ3MubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoaSA+PSAwKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IHByZXZpb3VzTG9nc1tpXSwgYmxvY2tIYXNoID0gX2EuYmxvY2tIYXNoLCBibG9ja051bWJlciA9IF9hLmJsb2NrTnVtYmVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgZ2V0QmxvY2tCeU51bWJlcihmcm9tSGV4KGJsb2NrTnVtYmVyKSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNoID0gKF9iLnNlbnQoKSkuaGFzaDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93SWZDYW5jZWxsZWQoaXNDYW5jZWxsZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJsb2NrSGFzaCA9PT0gaGFzaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBmcm9tSGV4KGJsb2NrTnVtYmVyKV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDM7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGktLTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDFdO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbMiAvKnJldHVybiovLCBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0TG9nc0luUmFuZ2UoZmlsdGVyLCBmcm9tQmxvY2tJbmNsdXNpdmUsIHRvQmxvY2tFeGNsdXNpdmUpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJhbmdlRmlsdGVyO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIGlmIChmcm9tQmxvY2tJbmNsdXNpdmUgPj0gdG9CbG9ja0V4Y2x1c2l2ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgW11dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByYW5nZUZpbHRlciA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBmaWx0ZXIpLCB7IGZyb21CbG9jazogdG9IZXgoZnJvbUJsb2NrSW5jbHVzaXZlKSwgdG9CbG9jazogdG9IZXgodG9CbG9ja0V4Y2x1c2l2ZSAtIDEpIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBqc29uUnBjU2VuZGVycy5zZW5kKFwiZXRoX2dldExvZ3NcIiwgW3JhbmdlRmlsdGVyXSldO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRCbG9ja051bWJlcigpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGJsb2NrTnVtYmVySGV4O1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCBqc29uUnBjU2VuZGVycy5zZW5kKFwiZXRoX2Jsb2NrTnVtYmVyXCIpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2tOdW1iZXJIZXggPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZnJvbUhleChibG9ja051bWJlckhleCldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5mdW5jdGlvbiB0b05ld0hlYWRzRXZlbnQoaGVhZCkge1xuICAgIHZhciByZXN1bHQgPSBfX2Fzc2lnbih7fSwgaGVhZCk7XG4gICAgZGVsZXRlIHJlc3VsdC50b3RhbERpZmZpY3VsdHk7XG4gICAgZGVsZXRlIHJlc3VsdC50cmFuc2FjdGlvbnM7XG4gICAgZGVsZXRlIHJlc3VsdC51bmNsZXM7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBkZWR1cGVOZXdIZWFkcyhldmVudHMpIHtcbiAgICByZXR1cm4gZGVkdXBlKGV2ZW50cywgZnVuY3Rpb24gKGV2ZW50KSB7IHJldHVybiBldmVudC5oYXNoOyB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBkZWR1cGVMb2dzKGV2ZW50cykge1xuICAgIHJldHVybiBkZWR1cGUoZXZlbnRzLCBmdW5jdGlvbiAoZXZlbnQpIHsgcmV0dXJuIGV2ZW50LmJsb2NrSGFzaCArIFwiL1wiICsgZXZlbnQubG9nSW5kZXg7IH0pO1xufVxuZnVuY3Rpb24gZGVkdXBlKGl0ZW1zLCBnZXRLZXkpIHtcbiAgICB2YXIga2V5c1NlZW4gPSBuZXcgU2V0KCk7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIGl0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgdmFyIGtleSA9IGdldEtleShpdGVtKTtcbiAgICAgICAgaWYgKCFrZXlzU2Vlbi5oYXMoa2V5KSkge1xuICAgICAgICAgICAga2V5c1NlZW4uYWRkKGtleSk7XG4gICAgICAgICAgICByZXN1bHQucHVzaChpdGVtKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdWJzY3JpcHRpb25CYWNrZmlsbC5qcy5tYXAiXSwibmFtZXMiOlsiX19hc3NpZ24iLCJfX2F3YWl0ZXIiLCJfX2dlbmVyYXRvciIsIl9fcmVhZCIsIl9fc3ByZWFkQXJyYXkiLCJmcm9tSGV4IiwidG9IZXgiLCJ0aHJvd0lmQ2FuY2VsbGVkIiwiTUFYX0JBQ0tGSUxMX0JMT0NLUyIsIk1BWF9CQVRDSF9TSVpFIiwibWFrZUJhY2tmaWxsZXIiLCJqc29uUnBjU2VuZGVycyIsImdldE5ld0hlYWRzQmFja2ZpbGwiLCJnZXRMb2dzQmFja2ZpbGwiLCJpc0NhbmNlbGxlZCIsInByZXZpb3VzSGVhZHMiLCJmcm9tQmxvY2tOdW1iZXIiLCJ0b0Jsb2NrTnVtYmVyIiwibGFzdFNlZW5CbG9ja051bWJlciIsIm1pbkJsb2NrTnVtYmVyIiwicmVvcmdIZWFkcyIsImludGVybWVkaWF0ZUhlYWRzIiwiX2EiLCJsYWJlbCIsImdldEJsb2NrTnVtYmVyIiwic2VudCIsImxlbmd0aCIsImdldEhlYWRFdmVudHNJblJhbmdlIiwiTWF0aCIsIm1heCIsIm51bWJlciIsImdldFJlb3JnSGVhZHMiLCJyZXN1bHQiLCJpIiwib2xkRXZlbnQiLCJibG9ja0hlYWQiLCJnZXRCbG9ja0J5TnVtYmVyIiwiaGFzaCIsInB1c2giLCJ0b05ld0hlYWRzRXZlbnQiLCJyZXZlcnNlIiwiZnJvbUJsb2NrSW5jbHVzaXZlIiwidG9CbG9ja0V4Y2x1c2l2ZSIsImJhdGNoUGFydHMiLCJoZWFkRXZlbnRCYXRjaGVzIiwiYmF0Y2hlZEJsb2NrSGVhZHMiLCJibG9ja0hlYWRzIiwibWV0aG9kIiwicGFyYW1zIiwic2VuZEJhdGNoIiwiUHJvbWlzZSIsImFsbCIsInJlZHVjZSIsImFjYyIsImJhdGNoIiwiY29uY2F0IiwibWFwIiwiYmxvY2tOdW1iZXIiLCJzZW5kIiwiZmlsdGVyIiwicHJldmlvdXNMb2dzIiwiY29tbW9uQW5jZXN0b3JOdW1iZXIiLCJyZW1vdmVkTG9ncyIsImFkZGVkTG9ncyIsImdldExvZ3NJblJhbmdlIiwiZ2V0Q29tbW9uQW5jZXN0b3JOdW1iZXIiLCJsb2ciLCJyZW1vdmVkIiwiYmxvY2tIYXNoIiwiX2IiLCJOdW1iZXIiLCJORUdBVElWRV9JTkZJTklUWSIsInJhbmdlRmlsdGVyIiwiZnJvbUJsb2NrIiwidG9CbG9jayIsImJsb2NrTnVtYmVySGV4IiwiaGVhZCIsInRvdGFsRGlmZmljdWx0eSIsInRyYW5zYWN0aW9ucyIsInVuY2xlcyIsImRlZHVwZU5ld0hlYWRzIiwiZXZlbnRzIiwiZGVkdXBlIiwiZXZlbnQiLCJkZWR1cGVMb2dzIiwibG9nSW5kZXgiLCJpdGVtcyIsImdldEtleSIsImtleXNTZWVuIiwiU2V0IiwiZm9yRWFjaCIsIml0ZW0iLCJrZXkiLCJoYXMiLCJhZGQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/subscriptions/subscriptionBackfill.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/types.js":
/*!***********************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/dist/esm/types.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isResponse: () => (/* binding */ isResponse),\n/* harmony export */   isSubscriptionEvent: () => (/* binding */ isSubscriptionEvent)\n/* harmony export */ });\n// The JSON-RPC types in Web3 definitions aren't quite right. Use these instead.\nfunction isResponse(message) {\n    return Array.isArray(message) || message.jsonrpc === \"2.0\" && message.id !== undefined;\n}\nfunction isSubscriptionEvent(message) {\n    return !isResponse(message);\n} //# sourceMappingURL=types.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL2Rpc3QvZXNtL3R5cGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsZ0ZBQWdGO0FBQ3pFLFNBQVNBLFdBQVdDLE9BQU87SUFDOUIsT0FBUUMsTUFBTUMsT0FBTyxDQUFDRixZQUNqQkEsUUFBUUcsT0FBTyxLQUFLLFNBQVNILFFBQVFJLEVBQUUsS0FBS0M7QUFDckQ7QUFDTyxTQUFTQyxvQkFBb0JOLE9BQU87SUFDdkMsT0FBTyxDQUFDRCxXQUFXQztBQUN2QixFQUNBLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BhbGNoL2FsY2hlbXktd2ViMy9kaXN0L2VzbS90eXBlcy5qcz80NjU3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoZSBKU09OLVJQQyB0eXBlcyBpbiBXZWIzIGRlZmluaXRpb25zIGFyZW4ndCBxdWl0ZSByaWdodC4gVXNlIHRoZXNlIGluc3RlYWQuXG5leHBvcnQgZnVuY3Rpb24gaXNSZXNwb25zZShtZXNzYWdlKSB7XG4gICAgcmV0dXJuIChBcnJheS5pc0FycmF5KG1lc3NhZ2UpIHx8XG4gICAgICAgIChtZXNzYWdlLmpzb25ycGMgPT09IFwiMi4wXCIgJiYgbWVzc2FnZS5pZCAhPT0gdW5kZWZpbmVkKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNTdWJzY3JpcHRpb25FdmVudChtZXNzYWdlKSB7XG4gICAgcmV0dXJuICFpc1Jlc3BvbnNlKG1lc3NhZ2UpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIl0sIm5hbWVzIjpbImlzUmVzcG9uc2UiLCJtZXNzYWdlIiwiQXJyYXkiLCJpc0FycmF5IiwianNvbnJwYyIsImlkIiwidW5kZWZpbmVkIiwiaXNTdWJzY3JpcHRpb25FdmVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/util/hex.js":
/*!**************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/dist/esm/util/hex.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatBlock: () => (/* binding */ formatBlock),\n/* harmony export */   fromHex: () => (/* binding */ fromHex),\n/* harmony export */   toHex: () => (/* binding */ toHex)\n/* harmony export */ });\nfunction toHex(n) {\n    return \"0x\" + n.toString(16);\n}\nfunction fromHex(hexString) {\n    return Number.parseInt(hexString, 16);\n}\nfunction formatBlock(block) {\n    if (typeof block === \"string\") {\n        return block;\n    } else if (typeof block === \"number\" && Number.isInteger(block)) {\n        return toHex(block);\n    }\n    return block.toString();\n} //# sourceMappingURL=hex.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL2Rpc3QvZXNtL3V0aWwvaGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFPLFNBQVNBLE1BQU1DLENBQUM7SUFDbkIsT0FBTyxPQUFPQSxFQUFFQyxRQUFRLENBQUM7QUFDN0I7QUFDTyxTQUFTQyxRQUFRQyxTQUFTO0lBQzdCLE9BQU9DLE9BQU9DLFFBQVEsQ0FBQ0YsV0FBVztBQUN0QztBQUNPLFNBQVNHLFlBQVlDLEtBQUs7SUFDN0IsSUFBSSxPQUFPQSxVQUFVLFVBQVU7UUFDM0IsT0FBT0E7SUFDWCxPQUNLLElBQUksT0FBT0EsVUFBVSxZQUFZSCxPQUFPSSxTQUFTLENBQUNELFFBQVE7UUFDM0QsT0FBT1IsTUFBTVE7SUFDakI7SUFDQSxPQUFPQSxNQUFNTixRQUFRO0FBQ3pCLEVBQ0EsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL2Rpc3QvZXNtL3V0aWwvaGV4LmpzP2ZlNWMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIHRvSGV4KG4pIHtcbiAgICByZXR1cm4gXCIweFwiICsgbi50b1N0cmluZygxNik7XG59XG5leHBvcnQgZnVuY3Rpb24gZnJvbUhleChoZXhTdHJpbmcpIHtcbiAgICByZXR1cm4gTnVtYmVyLnBhcnNlSW50KGhleFN0cmluZywgMTYpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdEJsb2NrKGJsb2NrKSB7XG4gICAgaWYgKHR5cGVvZiBibG9jayA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gYmxvY2s7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBibG9jayA9PT0gXCJudW1iZXJcIiAmJiBOdW1iZXIuaXNJbnRlZ2VyKGJsb2NrKSkge1xuICAgICAgICByZXR1cm4gdG9IZXgoYmxvY2spO1xuICAgIH1cbiAgICByZXR1cm4gYmxvY2sudG9TdHJpbmcoKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhleC5qcy5tYXAiXSwibmFtZXMiOlsidG9IZXgiLCJuIiwidG9TdHJpbmciLCJmcm9tSGV4IiwiaGV4U3RyaW5nIiwiTnVtYmVyIiwicGFyc2VJbnQiLCJmb3JtYXRCbG9jayIsImJsb2NrIiwiaXNJbnRlZ2VyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/util/hex.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/util/jsonRpc.js":
/*!******************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/dist/esm/util/jsonRpc.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   makeJsonRpcPayloadFactory: () => (/* binding */ makeJsonRpcPayloadFactory),\n/* harmony export */   makeJsonRpcSenders: () => (/* binding */ makeJsonRpcSenders),\n/* harmony export */   makeResponse: () => (/* binding */ makeResponse)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n\nfunction makeJsonRpcPayloadFactory() {\n    var nextId = 0;\n    return function(method, params) {\n        return {\n            method: method,\n            params: params,\n            jsonrpc: \"2.0\",\n            id: \"alc-web3:\" + nextId++\n        };\n    };\n}\nfunction makeJsonRpcSenders(sendJsonRpcPayload, makeJsonRpcPayload) {\n    var _this = this;\n    var send = function(method, params) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(_this, void 0, void 0, function() {\n            var response;\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            sendJsonRpcPayload(makeJsonRpcPayload(method, params))\n                        ];\n                    case 1:\n                        response = _a.sent();\n                        if (response.error) {\n                            throw new Error(response.error.message);\n                        }\n                        return [\n                            2 /*return*/ ,\n                            response.result\n                        ];\n                }\n            });\n        });\n    };\n    function sendBatch(parts) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function() {\n            var payload, response, message, errorResponse;\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        payload = parts.map(function(_a) {\n                            var method = _a.method, params = _a.params;\n                            return makeJsonRpcPayload(method, params);\n                        });\n                        return [\n                            4 /*yield*/ ,\n                            sendJsonRpcPayload(payload)\n                        ];\n                    case 1:\n                        response = _a.sent();\n                        if (!Array.isArray(response)) {\n                            message = response.error ? response.error.message : \"Batch request failed\";\n                            throw new Error(message);\n                        }\n                        errorResponse = response.find(function(r) {\n                            return !!r.error;\n                        });\n                        if (errorResponse) {\n                            throw new Error(errorResponse.error.message);\n                        }\n                        // The ids are ascending numbers because that's what Payload Factories do.\n                        return [\n                            2 /*return*/ ,\n                            response.sort(function(r1, r2) {\n                                return r1.id - r2.id;\n                            }).map(function(r) {\n                                return r.result;\n                            })\n                        ];\n                }\n            });\n        });\n    }\n    return {\n        send: send,\n        sendBatch: sendBatch\n    };\n}\nfunction makeResponse(id, result) {\n    return {\n        jsonrpc: \"2.0\",\n        id: id,\n        result: result\n    };\n} //# sourceMappingURL=jsonRpc.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL2Rpc3QvZXNtL3V0aWwvanNvblJwYy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQStDO0FBQ3hDLFNBQVNFO0lBQ1osSUFBSUMsU0FBUztJQUNiLE9BQU8sU0FBVUMsTUFBTSxFQUFFQyxNQUFNO1FBQUksT0FBUTtZQUN2Q0QsUUFBUUE7WUFDUkMsUUFBUUE7WUFDUkMsU0FBUztZQUNUQyxJQUFJLGNBQWNKO1FBQ3RCO0lBQUk7QUFDUjtBQUNPLFNBQVNLLG1CQUFtQkMsa0JBQWtCLEVBQUVDLGtCQUFrQjtJQUNyRSxJQUFJQyxRQUFRLElBQUk7SUFDaEIsSUFBSUMsT0FBTyxTQUFVUixNQUFNLEVBQUVDLE1BQU07UUFBSSxPQUFPTCxnREFBU0EsQ0FBQ1csT0FBTyxLQUFLLEdBQUcsS0FBSyxHQUFHO1lBQzNFLElBQUlFO1lBQ0osT0FBT1osa0RBQVdBLENBQUMsSUFBSSxFQUFFLFNBQVVhLEVBQUU7Z0JBQ2pDLE9BQVFBLEdBQUdDLEtBQUs7b0JBQ1osS0FBSzt3QkFBRyxPQUFPOzRCQUFDLEVBQUUsT0FBTzs0QkFBSU4sbUJBQW1CQyxtQkFBbUJOLFFBQVFDO3lCQUFTO29CQUNwRixLQUFLO3dCQUNEUSxXQUFXQyxHQUFHRSxJQUFJO3dCQUNsQixJQUFJSCxTQUFTSSxLQUFLLEVBQUU7NEJBQ2hCLE1BQU0sSUFBSUMsTUFBTUwsU0FBU0ksS0FBSyxDQUFDRSxPQUFPO3dCQUMxQzt3QkFDQSxPQUFPOzRCQUFDLEVBQUUsUUFBUTs0QkFBSU4sU0FBU08sTUFBTTt5QkFBQztnQkFDOUM7WUFDSjtRQUNKO0lBQUk7SUFDSixTQUFTQyxVQUFVQyxLQUFLO1FBQ3BCLE9BQU90QixnREFBU0EsQ0FBQyxJQUFJLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRztZQUNuQyxJQUFJdUIsU0FBU1YsVUFBVU0sU0FBU0s7WUFDaEMsT0FBT3ZCLGtEQUFXQSxDQUFDLElBQUksRUFBRSxTQUFVYSxFQUFFO2dCQUNqQyxPQUFRQSxHQUFHQyxLQUFLO29CQUNaLEtBQUs7d0JBQ0RRLFVBQVVELE1BQU1HLEdBQUcsQ0FBQyxTQUFVWCxFQUFFOzRCQUM1QixJQUFJVixTQUFTVSxHQUFHVixNQUFNLEVBQUVDLFNBQVNTLEdBQUdULE1BQU07NEJBQzFDLE9BQU9LLG1CQUFtQk4sUUFBUUM7d0JBQ3RDO3dCQUNBLE9BQU87NEJBQUMsRUFBRSxPQUFPOzRCQUFJSSxtQkFBbUJjO3lCQUFTO29CQUNyRCxLQUFLO3dCQUNEVixXQUFXQyxHQUFHRSxJQUFJO3dCQUNsQixJQUFJLENBQUNVLE1BQU1DLE9BQU8sQ0FBQ2QsV0FBVzs0QkFDMUJNLFVBQVVOLFNBQVNJLEtBQUssR0FDbEJKLFNBQVNJLEtBQUssQ0FBQ0UsT0FBTyxHQUN0Qjs0QkFDTixNQUFNLElBQUlELE1BQU1DO3dCQUNwQjt3QkFDQUssZ0JBQWdCWCxTQUFTZSxJQUFJLENBQUMsU0FBVUMsQ0FBQzs0QkFBSSxPQUFPLENBQUMsQ0FBQ0EsRUFBRVosS0FBSzt3QkFBRTt3QkFDL0QsSUFBSU8sZUFBZTs0QkFDZixNQUFNLElBQUlOLE1BQU1NLGNBQWNQLEtBQUssQ0FBQ0UsT0FBTzt3QkFDL0M7d0JBQ0EsMEVBQTBFO3dCQUMxRSxPQUFPOzRCQUFDLEVBQUUsUUFBUTs0QkFBSU4sU0FDYmlCLElBQUksQ0FBQyxTQUFVQyxFQUFFLEVBQUVDLEVBQUU7Z0NBQUksT0FBT0QsR0FBR3hCLEVBQUUsR0FBR3lCLEdBQUd6QixFQUFFOzRCQUFFLEdBQy9Da0IsR0FBRyxDQUFDLFNBQVVJLENBQUM7Z0NBQUksT0FBT0EsRUFBRVQsTUFBTTs0QkFBRTt5QkFBRztnQkFDeEQ7WUFDSjtRQUNKO0lBQ0o7SUFDQSxPQUFPO1FBQUVSLE1BQU1BO1FBQU1TLFdBQVdBO0lBQVU7QUFDOUM7QUFDTyxTQUFTWSxhQUFhMUIsRUFBRSxFQUFFYSxNQUFNO0lBQ25DLE9BQU87UUFBRWQsU0FBUztRQUFPQyxJQUFJQTtRQUFJYSxRQUFRQTtJQUFPO0FBQ3BELEVBQ0EsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL2Rpc3QvZXNtL3V0aWwvanNvblJwYy5qcz9iNWM4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fYXdhaXRlciwgX19nZW5lcmF0b3IgfSBmcm9tIFwidHNsaWJcIjtcbmV4cG9ydCBmdW5jdGlvbiBtYWtlSnNvblJwY1BheWxvYWRGYWN0b3J5KCkge1xuICAgIHZhciBuZXh0SWQgPSAwO1xuICAgIHJldHVybiBmdW5jdGlvbiAobWV0aG9kLCBwYXJhbXMpIHsgcmV0dXJuICh7XG4gICAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgICBwYXJhbXM6IHBhcmFtcyxcbiAgICAgICAganNvbnJwYzogXCIyLjBcIixcbiAgICAgICAgaWQ6IFwiYWxjLXdlYjM6XCIgKyBuZXh0SWQrKyxcbiAgICB9KTsgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtYWtlSnNvblJwY1NlbmRlcnMoc2VuZEpzb25ScGNQYXlsb2FkLCBtYWtlSnNvblJwY1BheWxvYWQpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHZhciBzZW5kID0gZnVuY3Rpb24gKG1ldGhvZCwgcGFyYW1zKSB7IHJldHVybiBfX2F3YWl0ZXIoX3RoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciByZXNwb25zZTtcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgc2VuZEpzb25ScGNQYXlsb2FkKG1ha2VKc29uUnBjUGF5bG9hZChtZXRob2QsIHBhcmFtcykpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZXNwb25zZS5lcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgcmVzcG9uc2UucmVzdWx0XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7IH07XG4gICAgZnVuY3Rpb24gc2VuZEJhdGNoKHBhcnRzKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBwYXlsb2FkLCByZXNwb25zZSwgbWVzc2FnZSwgZXJyb3JSZXNwb25zZTtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHBheWxvYWQgPSBwYXJ0cy5tYXAoZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1ldGhvZCA9IF9hLm1ldGhvZCwgcGFyYW1zID0gX2EucGFyYW1zO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtYWtlSnNvblJwY1BheWxvYWQobWV0aG9kLCBwYXJhbXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBzZW5kSnNvblJwY1BheWxvYWQocGF5bG9hZCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShyZXNwb25zZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gcmVzcG9uc2UuZXJyb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyByZXNwb25zZS5lcnJvci5tZXNzYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogXCJCYXRjaCByZXF1ZXN0IGZhaWxlZFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yUmVzcG9uc2UgPSByZXNwb25zZS5maW5kKGZ1bmN0aW9uIChyKSB7IHJldHVybiAhIXIuZXJyb3I7IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yUmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JSZXNwb25zZS5lcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBpZHMgYXJlIGFzY2VuZGluZyBudW1iZXJzIGJlY2F1c2UgdGhhdCdzIHdoYXQgUGF5bG9hZCBGYWN0b3JpZXMgZG8uXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgcmVzcG9uc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNvcnQoZnVuY3Rpb24gKHIxLCByMikgeyByZXR1cm4gcjEuaWQgLSByMi5pZDsgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAocikgeyByZXR1cm4gci5yZXN1bHQ7IH0pXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB7IHNlbmQ6IHNlbmQsIHNlbmRCYXRjaDogc2VuZEJhdGNoIH07XG59XG5leHBvcnQgZnVuY3Rpb24gbWFrZVJlc3BvbnNlKGlkLCByZXN1bHQpIHtcbiAgICByZXR1cm4geyBqc29ucnBjOiBcIjIuMFwiLCBpZDogaWQsIHJlc3VsdDogcmVzdWx0IH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1qc29uUnBjLmpzLm1hcCJdLCJuYW1lcyI6WyJfX2F3YWl0ZXIiLCJfX2dlbmVyYXRvciIsIm1ha2VKc29uUnBjUGF5bG9hZEZhY3RvcnkiLCJuZXh0SWQiLCJtZXRob2QiLCJwYXJhbXMiLCJqc29ucnBjIiwiaWQiLCJtYWtlSnNvblJwY1NlbmRlcnMiLCJzZW5kSnNvblJwY1BheWxvYWQiLCJtYWtlSnNvblJwY1BheWxvYWQiLCJfdGhpcyIsInNlbmQiLCJyZXNwb25zZSIsIl9hIiwibGFiZWwiLCJzZW50IiwiZXJyb3IiLCJFcnJvciIsIm1lc3NhZ2UiLCJyZXN1bHQiLCJzZW5kQmF0Y2giLCJwYXJ0cyIsInBheWxvYWQiLCJlcnJvclJlc3BvbnNlIiwibWFwIiwiQXJyYXkiLCJpc0FycmF5IiwiZmluZCIsInIiLCJzb3J0IiwicjEiLCJyMiIsIm1ha2VSZXNwb25zZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/util/jsonRpc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/util/promises.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/dist/esm/util/promises.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CANCELLED: () => (/* binding */ CANCELLED),\n/* harmony export */   callWhenDone: () => (/* binding */ callWhenDone),\n/* harmony export */   delay: () => (/* binding */ delay),\n/* harmony export */   makeCancelToken: () => (/* binding */ makeCancelToken),\n/* harmony export */   promisify: () => (/* binding */ promisify),\n/* harmony export */   throwIfCancelled: () => (/* binding */ throwIfCancelled),\n/* harmony export */   withBackoffRetries: () => (/* binding */ withBackoffRetries),\n/* harmony export */   withTimeout: () => (/* binding */ withTimeout)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n\n/**\n * Helper for converting functions which take a callback as their final argument\n * to functions which return a promise.\n */ function promisify(f) {\n    return new Promise(function(resolve, reject) {\n        return f(function(error, result) {\n            if (error != null) {\n                reject(error);\n            } else {\n                resolve(result);\n            }\n        });\n    });\n}\n/**\n * Helper for converting functions which return a promise to functions which\n * take a callback as their final argument.\n */ function callWhenDone(promise, callback) {\n    promise.then(function(result) {\n        callback(null, result);\n    }, function(error) {\n        callback(error);\n    });\n}\nfunction delay(ms) {\n    return new Promise(function(resolve) {\n        return setTimeout(resolve, ms);\n    });\n}\nfunction withTimeout(promise, ms) {\n    return Promise.race([\n        promise,\n        new Promise(function(_, reject) {\n            return setTimeout(function() {\n                return reject(new Error(\"Timeout\"));\n            }, ms);\n        })\n    ]);\n}\nvar MIN_RETRY_DELAY = 1000;\nvar RETRY_BACKOFF_FACTOR = 2;\nvar MAX_RETRY_DELAY = 30000;\nfunction withBackoffRetries(f, retryCount, shouldRetry) {\n    if (shouldRetry === void 0) {\n        shouldRetry = function() {\n            return true;\n        };\n    }\n    return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function() {\n        var nextWaitTime, i, error_1;\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function(_a) {\n            switch(_a.label){\n                case 0:\n                    nextWaitTime = 0;\n                    i = 0;\n                    _a.label = 1;\n                case 1:\n                    if (false) {}\n                    _a.label = 2;\n                case 2:\n                    _a.trys.push([\n                        2,\n                        4,\n                        ,\n                        6\n                    ]);\n                    return [\n                        4 /*yield*/ ,\n                        f()\n                    ];\n                case 3:\n                    return [\n                        2 /*return*/ ,\n                        _a.sent()\n                    ];\n                case 4:\n                    error_1 = _a.sent();\n                    i++;\n                    if (i >= retryCount || !shouldRetry(error_1)) {\n                        throw error_1;\n                    }\n                    return [\n                        4 /*yield*/ ,\n                        delay(nextWaitTime)\n                    ];\n                case 5:\n                    _a.sent();\n                    if (!shouldRetry(error_1)) {\n                        throw error_1;\n                    }\n                    nextWaitTime = nextWaitTime === 0 ? MIN_RETRY_DELAY : Math.min(MAX_RETRY_DELAY, RETRY_BACKOFF_FACTOR * nextWaitTime);\n                    return [\n                        3 /*break*/ ,\n                        6\n                    ];\n                case 6:\n                    return [\n                        3 /*break*/ ,\n                        1\n                    ];\n                case 7:\n                    return [\n                        2 /*return*/ \n                    ];\n            }\n        });\n    });\n}\nfunction makeCancelToken() {\n    var cancelled = false;\n    return {\n        cancel: function() {\n            return cancelled = true;\n        },\n        isCancelled: function() {\n            return cancelled;\n        }\n    };\n}\nfunction throwIfCancelled(isCancelled) {\n    if (isCancelled()) {\n        throw CANCELLED;\n    }\n}\nvar CANCELLED = new Error(\"Cancelled\"); //# sourceMappingURL=promises.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL2Rpc3QvZXNtL3V0aWwvcHJvbWlzZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQStDO0FBQy9DOzs7Q0FHQyxHQUNNLFNBQVNFLFVBQVVDLENBQUM7SUFDdkIsT0FBTyxJQUFJQyxRQUFRLFNBQVVDLE9BQU8sRUFBRUMsTUFBTTtRQUN4QyxPQUFPSCxFQUFFLFNBQVVJLEtBQUssRUFBRUMsTUFBTTtZQUM1QixJQUFJRCxTQUFTLE1BQU07Z0JBQ2ZELE9BQU9DO1lBQ1gsT0FDSztnQkFDREYsUUFBUUc7WUFDWjtRQUNKO0lBQ0o7QUFDSjtBQUNBOzs7Q0FHQyxHQUNNLFNBQVNDLGFBQWFDLE9BQU8sRUFBRUMsUUFBUTtJQUMxQ0QsUUFBUUUsSUFBSSxDQUFDLFNBQVVKLE1BQU07UUFDekJHLFNBQVMsTUFBTUg7SUFDbkIsR0FBRyxTQUFVRCxLQUFLO1FBQ2RJLFNBQVNKO0lBQ2I7QUFDSjtBQUNPLFNBQVNNLE1BQU1DLEVBQUU7SUFDcEIsT0FBTyxJQUFJVixRQUFRLFNBQVVDLE9BQU87UUFBSSxPQUFPVSxXQUFXVixTQUFTUztJQUFLO0FBQzVFO0FBQ08sU0FBU0UsWUFBWU4sT0FBTyxFQUFFSSxFQUFFO0lBQ25DLE9BQU9WLFFBQVFhLElBQUksQ0FBQztRQUNoQlA7UUFDQSxJQUFJTixRQUFRLFNBQVVjLENBQUMsRUFBRVosTUFBTTtZQUMzQixPQUFPUyxXQUFXO2dCQUFjLE9BQU9ULE9BQU8sSUFBSWEsTUFBTTtZQUFhLEdBQUdMO1FBQzVFO0tBQ0g7QUFDTDtBQUNBLElBQUlNLGtCQUFrQjtBQUN0QixJQUFJQyx1QkFBdUI7QUFDM0IsSUFBSUMsa0JBQWtCO0FBQ2YsU0FBU0MsbUJBQW1CcEIsQ0FBQyxFQUFFcUIsVUFBVSxFQUFFQyxXQUFXO0lBQ3pELElBQUlBLGdCQUFnQixLQUFLLEdBQUc7UUFBRUEsY0FBYztZQUFjLE9BQU87UUFBTTtJQUFHO0lBQzFFLE9BQU96QixnREFBU0EsQ0FBQyxJQUFJLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRztRQUNuQyxJQUFJMEIsY0FBY0MsR0FBR0M7UUFDckIsT0FBTzNCLGtEQUFXQSxDQUFDLElBQUksRUFBRSxTQUFVNEIsRUFBRTtZQUNqQyxPQUFRQSxHQUFHQyxLQUFLO2dCQUNaLEtBQUs7b0JBQ0RKLGVBQWU7b0JBQ2ZDLElBQUk7b0JBQ0pFLEdBQUdDLEtBQUssR0FBRztnQkFDZixLQUFLO29CQUNELElBQUksS0FBSyxFQUFFLEVBQXdCO29CQUNuQ0QsR0FBR0MsS0FBSyxHQUFHO2dCQUNmLEtBQUs7b0JBQ0RELEdBQUdFLElBQUksQ0FBQ0MsSUFBSSxDQUFDO3dCQUFDO3dCQUFHOzt3QkFBSztxQkFBRTtvQkFDeEIsT0FBTzt3QkFBQyxFQUFFLE9BQU87d0JBQUk3QjtxQkFBSTtnQkFDN0IsS0FBSztvQkFBRyxPQUFPO3dCQUFDLEVBQUUsUUFBUTt3QkFBSTBCLEdBQUdJLElBQUk7cUJBQUc7Z0JBQ3hDLEtBQUs7b0JBQ0RMLFVBQVVDLEdBQUdJLElBQUk7b0JBQ2pCTjtvQkFDQSxJQUFJQSxLQUFLSCxjQUFjLENBQUNDLFlBQVlHLFVBQVU7d0JBQzFDLE1BQU1BO29CQUNWO29CQUNBLE9BQU87d0JBQUMsRUFBRSxPQUFPO3dCQUFJZixNQUFNYTtxQkFBYztnQkFDN0MsS0FBSztvQkFDREcsR0FBR0ksSUFBSTtvQkFDUCxJQUFJLENBQUNSLFlBQVlHLFVBQVU7d0JBQ3ZCLE1BQU1BO29CQUNWO29CQUNBRixlQUNJQSxpQkFBaUIsSUFDWE4sa0JBQ0FjLEtBQUtDLEdBQUcsQ0FBQ2IsaUJBQWlCRCx1QkFBdUJLO29CQUMzRCxPQUFPO3dCQUFDLEVBQUUsT0FBTzt3QkFBSTtxQkFBRTtnQkFDM0IsS0FBSztvQkFBRyxPQUFPO3dCQUFDLEVBQUUsT0FBTzt3QkFBSTtxQkFBRTtnQkFDL0IsS0FBSztvQkFBRyxPQUFPO3dCQUFDLEVBQUUsUUFBUTtxQkFBRztZQUNqQztRQUNKO0lBQ0o7QUFDSjtBQUNPLFNBQVNVO0lBQ1osSUFBSUMsWUFBWTtJQUNoQixPQUFPO1FBQUVDLFFBQVE7WUFBYyxPQUFRRCxZQUFZO1FBQU87UUFBR0UsYUFBYTtZQUFjLE9BQU9GO1FBQVc7SUFBRTtBQUNoSDtBQUNPLFNBQVNHLGlCQUFpQkQsV0FBVztJQUN4QyxJQUFJQSxlQUFlO1FBQ2YsTUFBTUU7SUFDVjtBQUNKO0FBQ08sSUFBSUEsWUFBWSxJQUFJdEIsTUFBTSxhQUFhLENBQzlDLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BhbGNoL2FsY2hlbXktd2ViMy9kaXN0L2VzbS91dGlsL3Byb21pc2VzLmpzP2UyNDMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19hd2FpdGVyLCBfX2dlbmVyYXRvciB9IGZyb20gXCJ0c2xpYlwiO1xuLyoqXG4gKiBIZWxwZXIgZm9yIGNvbnZlcnRpbmcgZnVuY3Rpb25zIHdoaWNoIHRha2UgYSBjYWxsYmFjayBhcyB0aGVpciBmaW5hbCBhcmd1bWVudFxuICogdG8gZnVuY3Rpb25zIHdoaWNoIHJldHVybiBhIHByb21pc2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcm9taXNpZnkoZikge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHJldHVybiBmKGZ1bmN0aW9uIChlcnJvciwgcmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuLyoqXG4gKiBIZWxwZXIgZm9yIGNvbnZlcnRpbmcgZnVuY3Rpb25zIHdoaWNoIHJldHVybiBhIHByb21pc2UgdG8gZnVuY3Rpb25zIHdoaWNoXG4gKiB0YWtlIGEgY2FsbGJhY2sgYXMgdGhlaXIgZmluYWwgYXJndW1lbnQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjYWxsV2hlbkRvbmUocHJvbWlzZSwgY2FsbGJhY2spIHtcbiAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICBjYWxsYmFjayhudWxsLCByZXN1bHQpO1xuICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICBjYWxsYmFjayhlcnJvcik7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZGVsYXkobXMpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmV0dXJuIHNldFRpbWVvdXQocmVzb2x2ZSwgbXMpOyB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aXRoVGltZW91dChwcm9taXNlLCBtcykge1xuICAgIHJldHVybiBQcm9taXNlLnJhY2UoW1xuICAgICAgICBwcm9taXNlLFxuICAgICAgICBuZXcgUHJvbWlzZShmdW5jdGlvbiAoXywgcmVqZWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiByZWplY3QobmV3IEVycm9yKFwiVGltZW91dFwiKSk7IH0sIG1zKTtcbiAgICAgICAgfSksXG4gICAgXSk7XG59XG52YXIgTUlOX1JFVFJZX0RFTEFZID0gMTAwMDtcbnZhciBSRVRSWV9CQUNLT0ZGX0ZBQ1RPUiA9IDI7XG52YXIgTUFYX1JFVFJZX0RFTEFZID0gMzAwMDA7XG5leHBvcnQgZnVuY3Rpb24gd2l0aEJhY2tvZmZSZXRyaWVzKGYsIHJldHJ5Q291bnQsIHNob3VsZFJldHJ5KSB7XG4gICAgaWYgKHNob3VsZFJldHJ5ID09PSB2b2lkIDApIHsgc2hvdWxkUmV0cnkgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0cnVlOyB9OyB9XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbmV4dFdhaXRUaW1lLCBpLCBlcnJvcl8xO1xuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICBuZXh0V2FpdFRpbWUgPSAwO1xuICAgICAgICAgICAgICAgICAgICBpID0gMDtcbiAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAxO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0cnVlKSByZXR1cm4gWzMgLypicmVhayovLCA3XTtcbiAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAyO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgX2EudHJ5cy5wdXNoKFsyLCA0LCAsIDZdKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgZigpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiBbMiAvKnJldHVybiovLCBfYS5zZW50KCldO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JfMSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaSA+PSByZXRyeUNvdW50IHx8ICFzaG91bGRSZXRyeShlcnJvcl8xKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyb3JfMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBkZWxheShuZXh0V2FpdFRpbWUpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzaG91bGRSZXRyeShlcnJvcl8xKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyb3JfMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBuZXh0V2FpdFRpbWUgPVxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dFdhaXRUaW1lID09PSAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBNSU5fUkVUUllfREVMQVlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IE1hdGgubWluKE1BWF9SRVRSWV9ERUxBWSwgUkVUUllfQkFDS09GRl9GQUNUT1IgKiBuZXh0V2FpdFRpbWUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA2XTtcbiAgICAgICAgICAgICAgICBjYXNlIDY6IHJldHVybiBbMyAvKmJyZWFrKi8sIDFdO1xuICAgICAgICAgICAgICAgIGNhc2UgNzogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtYWtlQ2FuY2VsVG9rZW4oKSB7XG4gICAgdmFyIGNhbmNlbGxlZCA9IGZhbHNlO1xuICAgIHJldHVybiB7IGNhbmNlbDogZnVuY3Rpb24gKCkgeyByZXR1cm4gKGNhbmNlbGxlZCA9IHRydWUpOyB9LCBpc0NhbmNlbGxlZDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY2FuY2VsbGVkOyB9IH07XG59XG5leHBvcnQgZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxlZChpc0NhbmNlbGxlZCkge1xuICAgIGlmIChpc0NhbmNlbGxlZCgpKSB7XG4gICAgICAgIHRocm93IENBTkNFTExFRDtcbiAgICB9XG59XG5leHBvcnQgdmFyIENBTkNFTExFRCA9IG5ldyBFcnJvcihcIkNhbmNlbGxlZFwiKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb21pc2VzLmpzLm1hcCJdLCJuYW1lcyI6WyJfX2F3YWl0ZXIiLCJfX2dlbmVyYXRvciIsInByb21pc2lmeSIsImYiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImVycm9yIiwicmVzdWx0IiwiY2FsbFdoZW5Eb25lIiwicHJvbWlzZSIsImNhbGxiYWNrIiwidGhlbiIsImRlbGF5IiwibXMiLCJzZXRUaW1lb3V0Iiwid2l0aFRpbWVvdXQiLCJyYWNlIiwiXyIsIkVycm9yIiwiTUlOX1JFVFJZX0RFTEFZIiwiUkVUUllfQkFDS09GRl9GQUNUT1IiLCJNQVhfUkVUUllfREVMQVkiLCJ3aXRoQmFja29mZlJldHJpZXMiLCJyZXRyeUNvdW50Iiwic2hvdWxkUmV0cnkiLCJuZXh0V2FpdFRpbWUiLCJpIiwiZXJyb3JfMSIsIl9hIiwibGFiZWwiLCJ0cnlzIiwicHVzaCIsInNlbnQiLCJNYXRoIiwibWluIiwibWFrZUNhbmNlbFRva2VuIiwiY2FuY2VsbGVkIiwiY2FuY2VsIiwiaXNDYW5jZWxsZWQiLCJ0aHJvd0lmQ2FuY2VsbGVkIiwiQ0FOQ0VMTEVEIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/util/promises.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/version.js":
/*!*************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/dist/esm/version.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VERSION: () => (/* binding */ VERSION)\n/* harmony export */ });\n// This file is autogenerated by injectVersion.js. Any changes will be\n// overwritten on commit!\nvar VERSION = \"1.4.7\"; //# sourceMappingURL=version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL2Rpc3QvZXNtL3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLHNFQUFzRTtBQUN0RSx5QkFBeUI7QUFDbEIsSUFBSUEsVUFBVSxRQUFRLENBQzdCLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BhbGNoL2FsY2hlbXktd2ViMy9kaXN0L2VzbS92ZXJzaW9uLmpzP2U2MDkiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhpcyBmaWxlIGlzIGF1dG9nZW5lcmF0ZWQgYnkgaW5qZWN0VmVyc2lvbi5qcy4gQW55IGNoYW5nZXMgd2lsbCBiZVxuLy8gb3ZlcndyaXR0ZW4gb24gY29tbWl0IVxuZXhwb3J0IHZhciBWRVJTSU9OID0gXCIxLjQuN1wiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOlsiVkVSU0lPTiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/version.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/alchemyContext.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/alchemyContext.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   makeAlchemyContext: () => (/* binding */ makeAlchemyContext)\n/* harmony export */ });\n/* harmony import */ var sturdy_websocket__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sturdy-websocket */ \"(ssr)/./node_modules/sturdy-websocket/dist/index.js\");\n/* harmony import */ var websocket__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! websocket */ \"(ssr)/./node_modules/websocket/index.js\");\n/* harmony import */ var websocket__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(websocket__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _util_jsonRpc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/jsonRpc */ \"(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/util/jsonRpc.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../version */ \"(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/version.js\");\n/* harmony import */ var _alchemySendHttp__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./alchemySendHttp */ \"(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/alchemySendHttp.js\");\n/* harmony import */ var _alchemySendWebSocket__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./alchemySendWebSocket */ \"(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/alchemySendWebSocket.js\");\n/* harmony import */ var _httpProvider__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./httpProvider */ \"(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/httpProvider.js\");\n/* harmony import */ var _sendJsonRpcPayload__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./sendJsonRpcPayload */ \"(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/sendJsonRpcPayload.js\");\n/* harmony import */ var _sendRestPayload__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sendRestPayload */ \"(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/sendRestPayload.js\");\n/* harmony import */ var _webSocketProvider__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./webSocketProvider */ \"(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/webSocketProvider.js\");\n\n\n\n\n\n\n\n\n\n\nvar NODE_MAX_WS_FRAME_SIZE = 100 * 1024 * 1024; // 100 MB\nfunction makeAlchemyContext(url, config) {\n    var makeJsonRpcPayload = (0,_util_jsonRpc__WEBPACK_IMPORTED_MODULE_2__.makeJsonRpcPayloadFactory)();\n    var restSender = (0,_sendRestPayload__WEBPACK_IMPORTED_MODULE_3__.makeRestPayloadSender)({\n        config: config,\n        url: url\n    });\n    if (/^https?:\\/\\//.test(url)) {\n        var alchemySendJsonrRpc = (0,_alchemySendHttp__WEBPACK_IMPORTED_MODULE_4__.makeJsonRpcHttpSender)(url);\n        var _a = (0,_sendJsonRpcPayload__WEBPACK_IMPORTED_MODULE_5__.makeJsonRpcPayloadSender)(alchemySendJsonrRpc, config), sendJsonRpcPayload = _a.sendJsonRpcPayload, setWriteProvider = _a.setWriteProvider;\n        var jsonRpcSenders = (0,_util_jsonRpc__WEBPACK_IMPORTED_MODULE_2__.makeJsonRpcSenders)(sendJsonRpcPayload, makeJsonRpcPayload);\n        var provider = (0,_httpProvider__WEBPACK_IMPORTED_MODULE_6__.makeAlchemyHttpProvider)(sendJsonRpcPayload);\n        return {\n            provider: provider,\n            jsonRpcSenders: jsonRpcSenders,\n            restSender: restSender,\n            setWriteProvider: setWriteProvider\n        };\n    } else if (/^wss?:\\/\\//.test(url)) {\n        var protocol = isAlchemyUrl(url) ? \"alchemy-web3-\" + _version__WEBPACK_IMPORTED_MODULE_7__.VERSION : undefined;\n        var ws = new sturdy_websocket__WEBPACK_IMPORTED_MODULE_0__[\"default\"](url, protocol, {\n            wsConstructor: getWebSocketConstructor()\n        });\n        var alchemySend = (0,_alchemySendWebSocket__WEBPACK_IMPORTED_MODULE_8__.makeWebSocketSender)(ws);\n        var _b = (0,_sendJsonRpcPayload__WEBPACK_IMPORTED_MODULE_5__.makeJsonRpcPayloadSender)(alchemySend, config), sendJsonRpcPayload = _b.sendJsonRpcPayload, setWriteProvider = _b.setWriteProvider;\n        var jsonRpcSenders = (0,_util_jsonRpc__WEBPACK_IMPORTED_MODULE_2__.makeJsonRpcSenders)(sendJsonRpcPayload, makeJsonRpcPayload);\n        var provider = new _webSocketProvider__WEBPACK_IMPORTED_MODULE_9__.AlchemyWebSocketProvider(ws, sendJsonRpcPayload, jsonRpcSenders);\n        return {\n            provider: provider,\n            jsonRpcSenders: jsonRpcSenders,\n            restSender: restSender,\n            setWriteProvider: setWriteProvider\n        };\n    } else {\n        throw new Error(\"Alchemy URL protocol must be one of http, https, ws, or wss. Recieved: \" + url);\n    }\n}\nfunction getWebSocketConstructor() {\n    return isNodeEnvironment() ? function(url, protocols) {\n        return new websocket__WEBPACK_IMPORTED_MODULE_1__.w3cwebsocket(url, protocols, undefined, undefined, undefined, {\n            maxReceivedMessageSize: NODE_MAX_WS_FRAME_SIZE,\n            maxReceivedFrameSize: NODE_MAX_WS_FRAME_SIZE\n        });\n    } : WebSocket;\n}\nfunction isNodeEnvironment() {\n    return typeof process !== \"undefined\" && process != null && process.versions != null && process.versions.node != null;\n}\nfunction isAlchemyUrl(url) {\n    return url.indexOf(\"alchemy.com\") >= 0 || url.indexOf(\"alchemyapi.io\") >= 0;\n} //# sourceMappingURL=alchemyContext.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL2Rpc3QvZXNtL3dlYjMtYWRhcHRlci9hbGNoZW15Q29udGV4dC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBK0M7QUFDTjtBQUN3QztBQUM1QztBQUNxQjtBQUNHO0FBQ0o7QUFDTztBQUNOO0FBQ0s7QUFDL0QsSUFBSVcseUJBQXlCLE1BQU0sT0FBTyxNQUFNLFNBQVM7QUFDbEQsU0FBU0MsbUJBQW1CQyxHQUFHLEVBQUVDLE1BQU07SUFDMUMsSUFBSUMscUJBQXFCYix3RUFBeUJBO0lBQ2xELElBQUljLGFBQWFQLHVFQUFxQkEsQ0FBQztRQUNuQ0ssUUFBUUE7UUFDUkQsS0FBS0E7SUFDVDtJQUNBLElBQUksZUFBZUksSUFBSSxDQUFDSixNQUFNO1FBQzFCLElBQUlLLHNCQUFzQmIsdUVBQXFCQSxDQUFDUTtRQUNoRCxJQUFJTSxLQUFLWCw2RUFBd0JBLENBQUNVLHFCQUFxQkosU0FBU00scUJBQXFCRCxHQUFHQyxrQkFBa0IsRUFBRUMsbUJBQW1CRixHQUFHRSxnQkFBZ0I7UUFDbEosSUFBSUMsaUJBQWlCbkIsaUVBQWtCQSxDQUFDaUIsb0JBQW9CTDtRQUM1RCxJQUFJUSxXQUFXaEIsc0VBQXVCQSxDQUFDYTtRQUN2QyxPQUFPO1lBQUVHLFVBQVVBO1lBQVVELGdCQUFnQkE7WUFBZ0JOLFlBQVlBO1lBQVlLLGtCQUFrQkE7UUFBaUI7SUFDNUgsT0FDSyxJQUFJLGFBQWFKLElBQUksQ0FBQ0osTUFBTTtRQUM3QixJQUFJVyxXQUFXQyxhQUFhWixPQUFPLGtCQUFrQlQsNkNBQU9BLEdBQUdzQjtRQUMvRCxJQUFJQyxLQUFLLElBQUkzQix3REFBZUEsQ0FBQ2EsS0FBS1csVUFBVTtZQUN4Q0ksZUFBZUM7UUFDbkI7UUFDQSxJQUFJQyxjQUFjeEIsMEVBQW1CQSxDQUFDcUI7UUFDdEMsSUFBSUksS0FBS3ZCLDZFQUF3QkEsQ0FBQ3NCLGFBQWFoQixTQUFTTSxxQkFBcUJXLEdBQUdYLGtCQUFrQixFQUFFQyxtQkFBbUJVLEdBQUdWLGdCQUFnQjtRQUMxSSxJQUFJQyxpQkFBaUJuQixpRUFBa0JBLENBQUNpQixvQkFBb0JMO1FBQzVELElBQUlRLFdBQVcsSUFBSWIsd0VBQXdCQSxDQUFDaUIsSUFBSVAsb0JBQW9CRTtRQUNwRSxPQUFPO1lBQUVDLFVBQVVBO1lBQVVELGdCQUFnQkE7WUFBZ0JOLFlBQVlBO1lBQVlLLGtCQUFrQkE7UUFBaUI7SUFDNUgsT0FDSztRQUNELE1BQU0sSUFBSVcsTUFBTSw0RUFBNEVuQjtJQUNoRztBQUNKO0FBQ0EsU0FBU2dCO0lBQ0wsT0FBT0ksc0JBQ0QsU0FBVXBCLEdBQUcsRUFBRXFCLFNBQVM7UUFDdEIsT0FBTyxJQUFJakMsbURBQVlBLENBQUNZLEtBQUtxQixXQUFXUixXQUFXQSxXQUFXQSxXQUFXO1lBQ3JFUyx3QkFBd0J4QjtZQUN4QnlCLHNCQUFzQnpCO1FBQzFCO0lBQ0osSUFDRTBCO0FBQ1Y7QUFDQSxTQUFTSjtJQUNMLE9BQVEsT0FBT0ssWUFBWSxlQUN2QkEsV0FBVyxRQUNYQSxRQUFRQyxRQUFRLElBQUksUUFDcEJELFFBQVFDLFFBQVEsQ0FBQ0MsSUFBSSxJQUFJO0FBQ2pDO0FBQ0EsU0FBU2YsYUFBYVosR0FBRztJQUNyQixPQUFPQSxJQUFJNEIsT0FBTyxDQUFDLGtCQUFrQixLQUFLNUIsSUFBSTRCLE9BQU8sQ0FBQyxvQkFBb0I7QUFDOUUsRUFDQSwwQ0FBMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AYWxjaC9hbGNoZW15LXdlYjMvZGlzdC9lc20vd2ViMy1hZGFwdGVyL2FsY2hlbXlDb250ZXh0LmpzPzFmZmYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFN0dXJkeVdlYlNvY2tldCBmcm9tIFwic3R1cmR5LXdlYnNvY2tldFwiO1xuaW1wb3J0IHsgdzNjd2Vic29ja2V0IH0gZnJvbSBcIndlYnNvY2tldFwiO1xuaW1wb3J0IHsgbWFrZUpzb25ScGNQYXlsb2FkRmFjdG9yeSwgbWFrZUpzb25ScGNTZW5kZXJzLCB9IGZyb20gXCIuLi91dGlsL2pzb25ScGNcIjtcbmltcG9ydCB7IFZFUlNJT04gfSBmcm9tIFwiLi4vdmVyc2lvblwiO1xuaW1wb3J0IHsgbWFrZUpzb25ScGNIdHRwU2VuZGVyIH0gZnJvbSBcIi4vYWxjaGVteVNlbmRIdHRwXCI7XG5pbXBvcnQgeyBtYWtlV2ViU29ja2V0U2VuZGVyIH0gZnJvbSBcIi4vYWxjaGVteVNlbmRXZWJTb2NrZXRcIjtcbmltcG9ydCB7IG1ha2VBbGNoZW15SHR0cFByb3ZpZGVyIH0gZnJvbSBcIi4vaHR0cFByb3ZpZGVyXCI7XG5pbXBvcnQgeyBtYWtlSnNvblJwY1BheWxvYWRTZW5kZXIgfSBmcm9tIFwiLi9zZW5kSnNvblJwY1BheWxvYWRcIjtcbmltcG9ydCB7IG1ha2VSZXN0UGF5bG9hZFNlbmRlciB9IGZyb20gXCIuL3NlbmRSZXN0UGF5bG9hZFwiO1xuaW1wb3J0IHsgQWxjaGVteVdlYlNvY2tldFByb3ZpZGVyIH0gZnJvbSBcIi4vd2ViU29ja2V0UHJvdmlkZXJcIjtcbnZhciBOT0RFX01BWF9XU19GUkFNRV9TSVpFID0gMTAwICogMTAyNCAqIDEwMjQ7IC8vIDEwMCBNQlxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VBbGNoZW15Q29udGV4dCh1cmwsIGNvbmZpZykge1xuICAgIHZhciBtYWtlSnNvblJwY1BheWxvYWQgPSBtYWtlSnNvblJwY1BheWxvYWRGYWN0b3J5KCk7XG4gICAgdmFyIHJlc3RTZW5kZXIgPSBtYWtlUmVzdFBheWxvYWRTZW5kZXIoe1xuICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgdXJsOiB1cmwsXG4gICAgfSk7XG4gICAgaWYgKC9eaHR0cHM/OlxcL1xcLy8udGVzdCh1cmwpKSB7XG4gICAgICAgIHZhciBhbGNoZW15U2VuZEpzb25yUnBjID0gbWFrZUpzb25ScGNIdHRwU2VuZGVyKHVybCk7XG4gICAgICAgIHZhciBfYSA9IG1ha2VKc29uUnBjUGF5bG9hZFNlbmRlcihhbGNoZW15U2VuZEpzb25yUnBjLCBjb25maWcpLCBzZW5kSnNvblJwY1BheWxvYWQgPSBfYS5zZW5kSnNvblJwY1BheWxvYWQsIHNldFdyaXRlUHJvdmlkZXIgPSBfYS5zZXRXcml0ZVByb3ZpZGVyO1xuICAgICAgICB2YXIganNvblJwY1NlbmRlcnMgPSBtYWtlSnNvblJwY1NlbmRlcnMoc2VuZEpzb25ScGNQYXlsb2FkLCBtYWtlSnNvblJwY1BheWxvYWQpO1xuICAgICAgICB2YXIgcHJvdmlkZXIgPSBtYWtlQWxjaGVteUh0dHBQcm92aWRlcihzZW5kSnNvblJwY1BheWxvYWQpO1xuICAgICAgICByZXR1cm4geyBwcm92aWRlcjogcHJvdmlkZXIsIGpzb25ScGNTZW5kZXJzOiBqc29uUnBjU2VuZGVycywgcmVzdFNlbmRlcjogcmVzdFNlbmRlciwgc2V0V3JpdGVQcm92aWRlcjogc2V0V3JpdGVQcm92aWRlciB9O1xuICAgIH1cbiAgICBlbHNlIGlmICgvXndzcz86XFwvXFwvLy50ZXN0KHVybCkpIHtcbiAgICAgICAgdmFyIHByb3RvY29sID0gaXNBbGNoZW15VXJsKHVybCkgPyBcImFsY2hlbXktd2ViMy1cIiArIFZFUlNJT04gOiB1bmRlZmluZWQ7XG4gICAgICAgIHZhciB3cyA9IG5ldyBTdHVyZHlXZWJTb2NrZXQodXJsLCBwcm90b2NvbCwge1xuICAgICAgICAgICAgd3NDb25zdHJ1Y3RvcjogZ2V0V2ViU29ja2V0Q29uc3RydWN0b3IoKSxcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBhbGNoZW15U2VuZCA9IG1ha2VXZWJTb2NrZXRTZW5kZXIod3MpO1xuICAgICAgICB2YXIgX2IgPSBtYWtlSnNvblJwY1BheWxvYWRTZW5kZXIoYWxjaGVteVNlbmQsIGNvbmZpZyksIHNlbmRKc29uUnBjUGF5bG9hZCA9IF9iLnNlbmRKc29uUnBjUGF5bG9hZCwgc2V0V3JpdGVQcm92aWRlciA9IF9iLnNldFdyaXRlUHJvdmlkZXI7XG4gICAgICAgIHZhciBqc29uUnBjU2VuZGVycyA9IG1ha2VKc29uUnBjU2VuZGVycyhzZW5kSnNvblJwY1BheWxvYWQsIG1ha2VKc29uUnBjUGF5bG9hZCk7XG4gICAgICAgIHZhciBwcm92aWRlciA9IG5ldyBBbGNoZW15V2ViU29ja2V0UHJvdmlkZXIod3MsIHNlbmRKc29uUnBjUGF5bG9hZCwganNvblJwY1NlbmRlcnMpO1xuICAgICAgICByZXR1cm4geyBwcm92aWRlcjogcHJvdmlkZXIsIGpzb25ScGNTZW5kZXJzOiBqc29uUnBjU2VuZGVycywgcmVzdFNlbmRlcjogcmVzdFNlbmRlciwgc2V0V3JpdGVQcm92aWRlcjogc2V0V3JpdGVQcm92aWRlciB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQWxjaGVteSBVUkwgcHJvdG9jb2wgbXVzdCBiZSBvbmUgb2YgaHR0cCwgaHR0cHMsIHdzLCBvciB3c3MuIFJlY2lldmVkOiBcIiArIHVybCk7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0V2ViU29ja2V0Q29uc3RydWN0b3IoKSB7XG4gICAgcmV0dXJuIGlzTm9kZUVudmlyb25tZW50KClcbiAgICAgICAgPyBmdW5jdGlvbiAodXJsLCBwcm90b2NvbHMpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgdzNjd2Vic29ja2V0KHVybCwgcHJvdG9jb2xzLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB7XG4gICAgICAgICAgICAgICAgbWF4UmVjZWl2ZWRNZXNzYWdlU2l6ZTogTk9ERV9NQVhfV1NfRlJBTUVfU0laRSxcbiAgICAgICAgICAgICAgICBtYXhSZWNlaXZlZEZyYW1lU2l6ZTogTk9ERV9NQVhfV1NfRlJBTUVfU0laRSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIDogV2ViU29ja2V0O1xufVxuZnVuY3Rpb24gaXNOb2RlRW52aXJvbm1lbnQoKSB7XG4gICAgcmV0dXJuICh0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgICBwcm9jZXNzICE9IG51bGwgJiZcbiAgICAgICAgcHJvY2Vzcy52ZXJzaW9ucyAhPSBudWxsICYmXG4gICAgICAgIHByb2Nlc3MudmVyc2lvbnMubm9kZSAhPSBudWxsKTtcbn1cbmZ1bmN0aW9uIGlzQWxjaGVteVVybCh1cmwpIHtcbiAgICByZXR1cm4gdXJsLmluZGV4T2YoXCJhbGNoZW15LmNvbVwiKSA+PSAwIHx8IHVybC5pbmRleE9mKFwiYWxjaGVteWFwaS5pb1wiKSA+PSAwO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWxjaGVteUNvbnRleHQuanMubWFwIl0sIm5hbWVzIjpbIlN0dXJkeVdlYlNvY2tldCIsInczY3dlYnNvY2tldCIsIm1ha2VKc29uUnBjUGF5bG9hZEZhY3RvcnkiLCJtYWtlSnNvblJwY1NlbmRlcnMiLCJWRVJTSU9OIiwibWFrZUpzb25ScGNIdHRwU2VuZGVyIiwibWFrZVdlYlNvY2tldFNlbmRlciIsIm1ha2VBbGNoZW15SHR0cFByb3ZpZGVyIiwibWFrZUpzb25ScGNQYXlsb2FkU2VuZGVyIiwibWFrZVJlc3RQYXlsb2FkU2VuZGVyIiwiQWxjaGVteVdlYlNvY2tldFByb3ZpZGVyIiwiTk9ERV9NQVhfV1NfRlJBTUVfU0laRSIsIm1ha2VBbGNoZW15Q29udGV4dCIsInVybCIsImNvbmZpZyIsIm1ha2VKc29uUnBjUGF5bG9hZCIsInJlc3RTZW5kZXIiLCJ0ZXN0IiwiYWxjaGVteVNlbmRKc29uclJwYyIsIl9hIiwic2VuZEpzb25ScGNQYXlsb2FkIiwic2V0V3JpdGVQcm92aWRlciIsImpzb25ScGNTZW5kZXJzIiwicHJvdmlkZXIiLCJwcm90b2NvbCIsImlzQWxjaGVteVVybCIsInVuZGVmaW5lZCIsIndzIiwid3NDb25zdHJ1Y3RvciIsImdldFdlYlNvY2tldENvbnN0cnVjdG9yIiwiYWxjaGVteVNlbmQiLCJfYiIsIkVycm9yIiwiaXNOb2RlRW52aXJvbm1lbnQiLCJwcm90b2NvbHMiLCJtYXhSZWNlaXZlZE1lc3NhZ2VTaXplIiwibWF4UmVjZWl2ZWRGcmFtZVNpemUiLCJXZWJTb2NrZXQiLCJwcm9jZXNzIiwidmVyc2lvbnMiLCJub2RlIiwiaW5kZXhPZiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/alchemyContext.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/alchemySendHttp.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/alchemySendHttp.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   makeJsonRpcHttpSender: () => (/* binding */ makeJsonRpcHttpSender)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var fetch_ponyfill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fetch-ponyfill */ \"(ssr)/./node_modules/fetch-ponyfill/fetch-node.js\");\n/* harmony import */ var fetch_ponyfill__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fetch_ponyfill__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../version */ \"(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/version.js\");\n\n\n\nvar _a = fetch_ponyfill__WEBPACK_IMPORTED_MODULE_0___default()(), fetch = _a.fetch, Headers = _a.Headers;\nvar ALCHEMY_HEADERS = new Headers({\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\",\n    \"Alchemy-Web3-Version\": _version__WEBPACK_IMPORTED_MODULE_1__.VERSION\n});\nvar RATE_LIMIT_STATUS = 429;\nfunction makeJsonRpcHttpSender(url) {\n    var _this = this;\n    return function(request) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(_this, void 0, void 0, function() {\n            var response, status, _a;\n            var _b, _c;\n            var _d;\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function(_e) {\n                switch(_e.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            fetch(url, {\n                                method: \"POST\",\n                                headers: ALCHEMY_HEADERS,\n                                body: JSON.stringify(request)\n                            })\n                        ];\n                    case 1:\n                        response = _e.sent();\n                        status = response.status;\n                        _a = status;\n                        switch(_a){\n                            case 200:\n                                return [\n                                    3 /*break*/ ,\n                                    2\n                                ];\n                            case RATE_LIMIT_STATUS:\n                                return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                            case 0:\n                                return [\n                                    3 /*break*/ ,\n                                    5\n                                ];\n                        }\n                        return [\n                            3 /*break*/ ,\n                            6\n                        ];\n                    case 2:\n                        _b = {\n                            type: \"jsonrpc\"\n                        };\n                        return [\n                            4 /*yield*/ ,\n                            response.json()\n                        ];\n                    case 3:\n                        return [\n                            2 /*return*/ ,\n                            (_b.response = _e.sent(), _b)\n                        ];\n                    case 4:\n                        return [\n                            2 /*return*/ ,\n                            {\n                                type: \"rateLimit\"\n                            }\n                        ];\n                    case 5:\n                        return [\n                            2 /*return*/ ,\n                            {\n                                type: \"networkError\",\n                                status: 0,\n                                message: \"Connection failed.\"\n                            }\n                        ];\n                    case 6:\n                        _c = {\n                            status: status,\n                            type: \"networkError\"\n                        };\n                        return [\n                            4 /*yield*/ ,\n                            response.json()\n                        ];\n                    case 7:\n                        return [\n                            2 /*return*/ ,\n                            (_c.message = (_d = _e.sent().error) === null || _d === void 0 ? void 0 : _d.message, _c)\n                        ];\n                }\n            });\n        });\n    };\n} //# sourceMappingURL=alchemySendHttp.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL2Rpc3QvZXNtL3dlYjMtYWRhcHRlci9hbGNoZW15U2VuZEh0dHAuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBK0M7QUFDSjtBQUNOO0FBQ3JDLElBQUlJLEtBQUtGLHFEQUFhQSxJQUFJRyxRQUFRRCxHQUFHQyxLQUFLLEVBQUVDLFVBQVVGLEdBQUdFLE9BQU87QUFDaEUsSUFBSUMsa0JBQWtCLElBQUlELFFBQVE7SUFDOUJFLFFBQVE7SUFDUixnQkFBZ0I7SUFDaEIsd0JBQXdCTCw2Q0FBT0E7QUFDbkM7QUFDQSxJQUFJTSxvQkFBb0I7QUFDakIsU0FBU0Msc0JBQXNCQyxHQUFHO0lBQ3JDLElBQUlDLFFBQVEsSUFBSTtJQUNoQixPQUFPLFNBQVVDLE9BQU87UUFBSSxPQUFPYixnREFBU0EsQ0FBQ1ksT0FBTyxLQUFLLEdBQUcsS0FBSyxHQUFHO1lBQ2hFLElBQUlFLFVBQVVDLFFBQVFYO1lBQ3RCLElBQUlZLElBQUlDO1lBQ1IsSUFBSUM7WUFDSixPQUFPakIsa0RBQVdBLENBQUMsSUFBSSxFQUFFLFNBQVVrQixFQUFFO2dCQUNqQyxPQUFRQSxHQUFHQyxLQUFLO29CQUNaLEtBQUs7d0JBQUcsT0FBTzs0QkFBQyxFQUFFLE9BQU87NEJBQUlmLE1BQU1NLEtBQUs7Z0NBQ2hDVSxRQUFRO2dDQUNSQyxTQUFTZjtnQ0FDVGdCLE1BQU1DLEtBQUtDLFNBQVMsQ0FBQ1o7NEJBQ3pCO3lCQUFHO29CQUNQLEtBQUs7d0JBQ0RDLFdBQVdLLEdBQUdPLElBQUk7d0JBQ2xCWCxTQUFTRCxTQUFTQyxNQUFNO3dCQUN4QlgsS0FBS1c7d0JBQ0wsT0FBUVg7NEJBQ0osS0FBSztnQ0FBSyxPQUFPO29DQUFDLEVBQUUsT0FBTztvQ0FBSTtpQ0FBRTs0QkFDakMsS0FBS0s7Z0NBQW1CLE9BQU87b0NBQUMsRUFBRSxPQUFPO29DQUFJO2lDQUFFOzRCQUMvQyxLQUFLO2dDQUFHLE9BQU87b0NBQUMsRUFBRSxPQUFPO29DQUFJO2lDQUFFO3dCQUNuQzt3QkFDQSxPQUFPOzRCQUFDLEVBQUUsT0FBTzs0QkFBSTt5QkFBRTtvQkFDM0IsS0FBSzt3QkFDRE8sS0FBSzs0QkFBRVcsTUFBTTt3QkFBVTt3QkFDdkIsT0FBTzs0QkFBQyxFQUFFLE9BQU87NEJBQUliLFNBQVNjLElBQUk7eUJBQUc7b0JBQ3pDLEtBQUs7d0JBQUcsT0FBTzs0QkFBQyxFQUFFLFFBQVE7NEJBQUtaLENBQUFBLEdBQUdGLFFBQVEsR0FBR0ssR0FBR08sSUFBSSxJQUFJVixFQUFDO3lCQUFHO29CQUM1RCxLQUFLO3dCQUFHLE9BQU87NEJBQUMsRUFBRSxRQUFROzRCQUFJO2dDQUFFVyxNQUFNOzRCQUFZO3lCQUFFO29CQUNwRCxLQUFLO3dCQUFHLE9BQU87NEJBQUMsRUFBRSxRQUFROzRCQUFJO2dDQUN0QkEsTUFBTTtnQ0FDTlosUUFBUTtnQ0FDUmMsU0FBUzs0QkFDYjt5QkFBRTtvQkFDTixLQUFLO3dCQUNEWixLQUFLOzRCQUNERixRQUFRQTs0QkFDUlksTUFBTTt3QkFDVjt3QkFDQSxPQUFPOzRCQUFDLEVBQUUsT0FBTzs0QkFBSWIsU0FBU2MsSUFBSTt5QkFBRztvQkFDekMsS0FBSzt3QkFBRyxPQUFPOzRCQUFDLEVBQUUsUUFBUTs0QkFBS1gsQ0FBQUEsR0FBR1ksT0FBTyxHQUFHLENBQUNYLEtBQUssR0FBSVEsSUFBSSxHQUFJSSxLQUFLLE1BQU0sUUFBUVosT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHVyxPQUFPLEVBQzVHWixFQUFDO3lCQUFHO2dCQUNoQjtZQUNKO1FBQ0o7SUFBSTtBQUNSLEVBQ0EsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL2Rpc3QvZXNtL3dlYjMtYWRhcHRlci9hbGNoZW15U2VuZEh0dHAuanM/NThjYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX2F3YWl0ZXIsIF9fZ2VuZXJhdG9yIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgZmV0Y2hQb255ZmlsbCBmcm9tIFwiZmV0Y2gtcG9ueWZpbGxcIjtcbmltcG9ydCB7IFZFUlNJT04gfSBmcm9tIFwiLi4vdmVyc2lvblwiO1xudmFyIF9hID0gZmV0Y2hQb255ZmlsbCgpLCBmZXRjaCA9IF9hLmZldGNoLCBIZWFkZXJzID0gX2EuSGVhZGVycztcbnZhciBBTENIRU1ZX0hFQURFUlMgPSBuZXcgSGVhZGVycyh7XG4gICAgQWNjZXB0OiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICBcIkFsY2hlbXktV2ViMy1WZXJzaW9uXCI6IFZFUlNJT04sXG59KTtcbnZhciBSQVRFX0xJTUlUX1NUQVRVUyA9IDQyOTtcbmV4cG9ydCBmdW5jdGlvbiBtYWtlSnNvblJwY0h0dHBTZW5kZXIodXJsKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICByZXR1cm4gZnVuY3Rpb24gKHJlcXVlc3QpIHsgcmV0dXJuIF9fYXdhaXRlcihfdGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHJlc3BvbnNlLCBzdGF0dXMsIF9hO1xuICAgICAgICB2YXIgX2IsIF9jO1xuICAgICAgICB2YXIgX2Q7XG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2UpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2UubGFiZWwpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIGZldGNoKHVybCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IEFMQ0hFTVlfSEVBREVSUyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHJlcXVlc3QpLFxuICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9lLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzID0gcmVzcG9uc2Uuc3RhdHVzO1xuICAgICAgICAgICAgICAgICAgICBfYSA9IHN0YXR1cztcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyMDA6IHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBSQVRFX0xJTUlUX1NUQVRVUzogcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDZdO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgX2IgPSB7IHR5cGU6IFwianNvbnJwY1wiIH07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHJlc3BvbnNlLmpzb24oKV07XG4gICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzIgLypyZXR1cm4qLywgKF9iLnJlc3BvbnNlID0gX2Uuc2VudCgpLCBfYildO1xuICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHsgdHlwZTogXCJyYXRlTGltaXRcIiB9XTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6IHJldHVybiBbMiAvKnJldHVybiovLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIm5ldHdvcmtFcnJvclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXCJDb25uZWN0aW9uIGZhaWxlZC5cIixcbiAgICAgICAgICAgICAgICAgICAgfV07XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICBfYyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogc3RhdHVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJuZXR3b3JrRXJyb3JcIlxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCByZXNwb25zZS5qc29uKCldO1xuICAgICAgICAgICAgICAgIGNhc2UgNzogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIChfYy5tZXNzYWdlID0gKF9kID0gKF9lLnNlbnQoKSkuZXJyb3IpID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgX2MpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7IH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hbGNoZW15U2VuZEh0dHAuanMubWFwIl0sIm5hbWVzIjpbIl9fYXdhaXRlciIsIl9fZ2VuZXJhdG9yIiwiZmV0Y2hQb255ZmlsbCIsIlZFUlNJT04iLCJfYSIsImZldGNoIiwiSGVhZGVycyIsIkFMQ0hFTVlfSEVBREVSUyIsIkFjY2VwdCIsIlJBVEVfTElNSVRfU1RBVFVTIiwibWFrZUpzb25ScGNIdHRwU2VuZGVyIiwidXJsIiwiX3RoaXMiLCJyZXF1ZXN0IiwicmVzcG9uc2UiLCJzdGF0dXMiLCJfYiIsIl9jIiwiX2QiLCJfZSIsImxhYmVsIiwibWV0aG9kIiwiaGVhZGVycyIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5Iiwic2VudCIsInR5cGUiLCJqc29uIiwibWVzc2FnZSIsImVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/alchemySendHttp.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/alchemySendWebSocket.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/alchemySendWebSocket.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   makeWebSocketSender: () => (/* binding */ makeWebSocketSender)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types */ \"(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/types.js\");\n\n\nfunction makeWebSocketSender(ws) {\n    var contextsById = new Map();\n    ws.addEventListener(\"message\", function(message) {\n        var response = JSON.parse(message.data);\n        if (!(0,_types__WEBPACK_IMPORTED_MODULE_0__.isResponse)(response)) {\n            return;\n        }\n        var id = getIdFromResponse(response);\n        if (id === undefined) {\n            return;\n        }\n        var context = contextsById.get(id);\n        if (!context) {\n            return;\n        }\n        var resolve = context.resolve;\n        contextsById.delete(id);\n        if (!Array.isArray(response) && response.error && response.error.code === 429) {\n            resolve({\n                type: \"rateLimit\"\n            });\n        } else {\n            resolve({\n                response: response,\n                type: \"jsonrpc\"\n            });\n        }\n    });\n    ws.addEventListener(\"down\", function() {\n        (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([], (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__read)(contextsById)).forEach(function(_a) {\n            var _b = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__read)(_a, 2), id = _b[0], _c = _b[1], request = _c.request, resolve = _c.resolve;\n            if (isWrite(request)) {\n                // Writes cannot be resent because they will fail for a duplicate nonce.\n                contextsById.delete(id);\n                resolve({\n                    type: \"networkError\",\n                    status: 0,\n                    message: \"WebSocket closed before receiving a response for write request with id: \" + id + \".\"\n                });\n            }\n        });\n    });\n    ws.addEventListener(\"reopen\", function() {\n        var e_1, _a;\n        try {\n            for(var _b = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__values)(contextsById.values()), _c = _b.next(); !_c.done; _c = _b.next()){\n                var request = _c.value.request;\n                ws.send(JSON.stringify(request));\n            }\n        } catch (e_1_1) {\n            e_1 = {\n                error: e_1_1\n            };\n        } finally{\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            } finally{\n                if (e_1) throw e_1.error;\n            }\n        }\n    });\n    return function(request) {\n        return new Promise(function(resolve) {\n            var id = getIdFromRequest(request);\n            if (id !== undefined) {\n                var existingContext = contextsById.get(id);\n                if (existingContext) {\n                    var message = \"Another WebSocket request was made with the same id (\" + id + \") before a response was received.\";\n                    console.error(message);\n                    existingContext.resolve({\n                        message: message,\n                        type: \"networkError\",\n                        status: 0\n                    });\n                }\n                contextsById.set(id, {\n                    request: request,\n                    resolve: resolve\n                });\n            }\n            ws.send(JSON.stringify(request));\n        });\n    };\n}\nfunction getIdFromRequest(request) {\n    if (!Array.isArray(request)) {\n        return request.id;\n    }\n    return getCanonicalIdFromList(request.map(function(p) {\n        return p.id;\n    }));\n}\nfunction getIdFromResponse(response) {\n    if (!Array.isArray(response)) {\n        return response.id;\n    }\n    return getCanonicalIdFromList(response.map(function(p) {\n        return p.id;\n    }));\n}\n/**\n * Since the JSON-RPC spec allows responses to be returned in a different order\n * than sent, we need a mechanism for choosing a canonical id from a list that\n * doesn't depend on the order. This chooses the \"minimum\" id by an arbitrary\n * ordering: the smallest string if possible, otherwise the smallest number,\n * otherwise null.\n */ function getCanonicalIdFromList(ids) {\n    var stringIds = ids.filter(function(id) {\n        return typeof id === \"string\";\n    });\n    if (stringIds.length > 0) {\n        return stringIds.reduce(function(bestId, id) {\n            return bestId < id ? bestId : id;\n        });\n    }\n    var numberIds = ids.filter(function(id) {\n        return typeof id === \"number\";\n    });\n    if (numberIds.length > 0) {\n        return Math.min.apply(Math, (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([], (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__read)(numberIds)));\n    }\n    return ids.indexOf(null) >= 0 ? null : undefined;\n}\nfunction isWrite(request) {\n    return Array.isArray(request) ? request.every(isSingleWrite) : isSingleWrite(request);\n}\nvar WRITE_METHODS = [\n    \"eth_sendTransaction\",\n    \"eth_sendRawTransaction\"\n];\nfunction isSingleWrite(request) {\n    return WRITE_METHODS.includes(request.method);\n} //# sourceMappingURL=alchemySendWebSocket.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/alchemySendWebSocket.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/customRPC.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/customRPC.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchEnableCustomRPC: () => (/* binding */ patchEnableCustomRPC)\n/* harmony export */ });\n/* harmony import */ var web3_core_method__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! web3-core-method */ \"(ssr)/./node_modules/web3-core-method/lib/index.js\");\n/* harmony import */ var web3_core_method__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(web3_core_method__WEBPACK_IMPORTED_MODULE_0__);\n\nvar MethodFn = (web3_core_method__WEBPACK_IMPORTED_MODULE_0___default());\n/**\n * Private method to enable adding custom RPC calls to the web3 object. This\n * allows the addition of custom endpoints to the web3 object.\n */ function patchEnableCustomRPC(web3) {\n    web3.eth.customRPC = function(opts) {\n        var newMethod = new MethodFn({\n            name: opts.name,\n            call: opts.call,\n            params: opts.params || 0,\n            inputFormatter: opts.inputFormatter || null,\n            outputFormatter: opts.outputFormatter || null\n        });\n        newMethod.attachToObject(this);\n        newMethod.setRequestManager(this._requestManager, this.accounts);\n    };\n} //# sourceMappingURL=customRPC.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL2Rpc3QvZXNtL3dlYjMtYWRhcHRlci9jdXN0b21SUEMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXNDO0FBQ3RDLElBQUlDLFdBQVdELHlEQUFNQTtBQUNyQjs7O0NBR0MsR0FDTSxTQUFTRSxxQkFBcUJDLElBQUk7SUFDckNBLEtBQUtDLEdBQUcsQ0FBQ0MsU0FBUyxHQUFHLFNBQVVDLElBQUk7UUFDL0IsSUFBSUMsWUFBWSxJQUFJTixTQUFTO1lBQ3pCTyxNQUFNRixLQUFLRSxJQUFJO1lBQ2ZDLE1BQU1ILEtBQUtHLElBQUk7WUFDZkMsUUFBUUosS0FBS0ksTUFBTSxJQUFJO1lBQ3ZCQyxnQkFBZ0JMLEtBQUtLLGNBQWMsSUFBSTtZQUN2Q0MsaUJBQWlCTixLQUFLTSxlQUFlLElBQUk7UUFDN0M7UUFDQUwsVUFBVU0sY0FBYyxDQUFDLElBQUk7UUFDN0JOLFVBQVVPLGlCQUFpQixDQUFDLElBQUksQ0FBQ0MsZUFBZSxFQUFFLElBQUksQ0FBQ0MsUUFBUTtJQUNuRTtBQUNKLEVBQ0EscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL2Rpc3QvZXNtL3dlYjMtYWRhcHRlci9jdXN0b21SUEMuanM/MDVlNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTWV0aG9kIGZyb20gXCJ3ZWIzLWNvcmUtbWV0aG9kXCI7XG52YXIgTWV0aG9kRm4gPSBNZXRob2Q7XG4vKipcbiAqIFByaXZhdGUgbWV0aG9kIHRvIGVuYWJsZSBhZGRpbmcgY3VzdG9tIFJQQyBjYWxscyB0byB0aGUgd2ViMyBvYmplY3QuIFRoaXNcbiAqIGFsbG93cyB0aGUgYWRkaXRpb24gb2YgY3VzdG9tIGVuZHBvaW50cyB0byB0aGUgd2ViMyBvYmplY3QuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXRjaEVuYWJsZUN1c3RvbVJQQyh3ZWIzKSB7XG4gICAgd2ViMy5ldGguY3VzdG9tUlBDID0gZnVuY3Rpb24gKG9wdHMpIHtcbiAgICAgICAgdmFyIG5ld01ldGhvZCA9IG5ldyBNZXRob2RGbih7XG4gICAgICAgICAgICBuYW1lOiBvcHRzLm5hbWUsXG4gICAgICAgICAgICBjYWxsOiBvcHRzLmNhbGwsXG4gICAgICAgICAgICBwYXJhbXM6IG9wdHMucGFyYW1zIHx8IDAsXG4gICAgICAgICAgICBpbnB1dEZvcm1hdHRlcjogb3B0cy5pbnB1dEZvcm1hdHRlciB8fCBudWxsLFxuICAgICAgICAgICAgb3V0cHV0Rm9ybWF0dGVyOiBvcHRzLm91dHB1dEZvcm1hdHRlciB8fCBudWxsLFxuICAgICAgICB9KTtcbiAgICAgICAgbmV3TWV0aG9kLmF0dGFjaFRvT2JqZWN0KHRoaXMpO1xuICAgICAgICBuZXdNZXRob2Quc2V0UmVxdWVzdE1hbmFnZXIodGhpcy5fcmVxdWVzdE1hbmFnZXIsIHRoaXMuYWNjb3VudHMpO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jdXN0b21SUEMuanMubWFwIl0sIm5hbWVzIjpbIk1ldGhvZCIsIk1ldGhvZEZuIiwicGF0Y2hFbmFibGVDdXN0b21SUEMiLCJ3ZWIzIiwiZXRoIiwiY3VzdG9tUlBDIiwib3B0cyIsIm5ld01ldGhvZCIsIm5hbWUiLCJjYWxsIiwicGFyYW1zIiwiaW5wdXRGb3JtYXR0ZXIiLCJvdXRwdXRGb3JtYXR0ZXIiLCJhdHRhY2hUb09iamVjdCIsInNldFJlcXVlc3RNYW5hZ2VyIiwiX3JlcXVlc3RNYW5hZ2VyIiwiYWNjb3VudHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/customRPC.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/eth_PrivateTransactions.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/eth_PrivateTransactions.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchEthPrivateTransactionMethods: () => (/* binding */ patchEthPrivateTransactionMethods)\n/* harmony export */ });\nfunction patchEthPrivateTransactionMethods(web3) {\n    web3.eth.customRPC({\n        name: \"sendPrivateTransaction\",\n        call: \"eth_sendPrivateTransaction\",\n        params: 3\n    });\n    web3.eth.customRPC({\n        name: \"cancelPrivateTransaction\",\n        call: \"eth_cancelPrivateTransaction\",\n        params: 1\n    });\n} //# sourceMappingURL=eth_PrivateTransactions.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL2Rpc3QvZXNtL3dlYjMtYWRhcHRlci9ldGhfUHJpdmF0ZVRyYW5zYWN0aW9ucy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sU0FBU0Esa0NBQWtDQyxJQUFJO0lBQ2xEQSxLQUFLQyxHQUFHLENBQUNDLFNBQVMsQ0FBQztRQUNmQyxNQUFNO1FBQ05DLE1BQU07UUFDTkMsUUFBUTtJQUNaO0lBQ0FMLEtBQUtDLEdBQUcsQ0FBQ0MsU0FBUyxDQUFDO1FBQ2ZDLE1BQU07UUFDTkMsTUFBTTtRQUNOQyxRQUFRO0lBQ1o7QUFDSixFQUNBLG1EQUFtRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BhbGNoL2FsY2hlbXktd2ViMy9kaXN0L2VzbS93ZWIzLWFkYXB0ZXIvZXRoX1ByaXZhdGVUcmFuc2FjdGlvbnMuanM/MzFiMCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gcGF0Y2hFdGhQcml2YXRlVHJhbnNhY3Rpb25NZXRob2RzKHdlYjMpIHtcbiAgICB3ZWIzLmV0aC5jdXN0b21SUEMoe1xuICAgICAgICBuYW1lOiBcInNlbmRQcml2YXRlVHJhbnNhY3Rpb25cIixcbiAgICAgICAgY2FsbDogXCJldGhfc2VuZFByaXZhdGVUcmFuc2FjdGlvblwiLFxuICAgICAgICBwYXJhbXM6IDMsXG4gICAgfSk7XG4gICAgd2ViMy5ldGguY3VzdG9tUlBDKHtcbiAgICAgICAgbmFtZTogXCJjYW5jZWxQcml2YXRlVHJhbnNhY3Rpb25cIixcbiAgICAgICAgY2FsbDogXCJldGhfY2FuY2VsUHJpdmF0ZVRyYW5zYWN0aW9uXCIsXG4gICAgICAgIHBhcmFtczogMSxcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV0aF9Qcml2YXRlVHJhbnNhY3Rpb25zLmpzLm1hcCJdLCJuYW1lcyI6WyJwYXRjaEV0aFByaXZhdGVUcmFuc2FjdGlvbk1ldGhvZHMiLCJ3ZWIzIiwiZXRoIiwiY3VzdG9tUlBDIiwibmFtZSIsImNhbGwiLCJwYXJhbXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/eth_PrivateTransactions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/eth_maxPriorityFeePerGas.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/eth_maxPriorityFeePerGas.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchEthMaxPriorityFeePerGasMethod: () => (/* binding */ patchEthMaxPriorityFeePerGasMethod)\n/* harmony export */ });\nfunction patchEthMaxPriorityFeePerGasMethod(web3) {\n    web3.eth.customRPC({\n        name: \"getMaxPriorityFeePerGas\",\n        call: \"eth_maxPriorityFeePerGas\",\n        params: 0\n    });\n} //# sourceMappingURL=eth_maxPriorityFeePerGas.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL2Rpc3QvZXNtL3dlYjMtYWRhcHRlci9ldGhfbWF4UHJpb3JpdHlGZWVQZXJHYXMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLFNBQVNBLG1DQUFtQ0MsSUFBSTtJQUNuREEsS0FBS0MsR0FBRyxDQUFDQyxTQUFTLENBQUM7UUFDZkMsTUFBTTtRQUNOQyxNQUFNO1FBQ05DLFFBQVE7SUFDWjtBQUNKLEVBQ0Esb0RBQW9EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL2Rpc3QvZXNtL3dlYjMtYWRhcHRlci9ldGhfbWF4UHJpb3JpdHlGZWVQZXJHYXMuanM/NmMzZSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gcGF0Y2hFdGhNYXhQcmlvcml0eUZlZVBlckdhc01ldGhvZCh3ZWIzKSB7XG4gICAgd2ViMy5ldGguY3VzdG9tUlBDKHtcbiAgICAgICAgbmFtZTogXCJnZXRNYXhQcmlvcml0eUZlZVBlckdhc1wiLFxuICAgICAgICBjYWxsOiBcImV0aF9tYXhQcmlvcml0eUZlZVBlckdhc1wiLFxuICAgICAgICBwYXJhbXM6IDAsXG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ldGhfbWF4UHJpb3JpdHlGZWVQZXJHYXMuanMubWFwIl0sIm5hbWVzIjpbInBhdGNoRXRoTWF4UHJpb3JpdHlGZWVQZXJHYXNNZXRob2QiLCJ3ZWIzIiwiZXRoIiwiY3VzdG9tUlBDIiwibmFtZSIsImNhbGwiLCJwYXJhbXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/eth_maxPriorityFeePerGas.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/httpProvider.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/httpProvider.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   makeAlchemyHttpProvider: () => (/* binding */ makeAlchemyHttpProvider)\n/* harmony export */ });\n/* harmony import */ var _util_promises__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/promises */ \"(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/util/promises.js\");\n\n/**\n * Returns a \"provider\" which can be passed to the Web3 constructor.\n */ function makeAlchemyHttpProvider(sendJsonRpcPayload) {\n    function send(payload, callback) {\n        (0,_util_promises__WEBPACK_IMPORTED_MODULE_0__.callWhenDone)(sendJsonRpcPayload(payload), callback);\n    }\n    return {\n        send: send\n    };\n} //# sourceMappingURL=httpProvider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL2Rpc3QvZXNtL3dlYjMtYWRhcHRlci9odHRwUHJvdmlkZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBZ0Q7QUFDaEQ7O0NBRUMsR0FDTSxTQUFTQyx3QkFBd0JDLGtCQUFrQjtJQUN0RCxTQUFTQyxLQUFLQyxPQUFPLEVBQUVDLFFBQVE7UUFDM0JMLDREQUFZQSxDQUFDRSxtQkFBbUJFLFVBQVVDO0lBQzlDO0lBQ0EsT0FBTztRQUFFRixNQUFNQTtJQUFLO0FBQ3hCLEVBQ0Esd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL2Rpc3QvZXNtL3dlYjMtYWRhcHRlci9odHRwUHJvdmlkZXIuanM/YzFiMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjYWxsV2hlbkRvbmUgfSBmcm9tIFwiLi4vdXRpbC9wcm9taXNlc1wiO1xuLyoqXG4gKiBSZXR1cm5zIGEgXCJwcm92aWRlclwiIHdoaWNoIGNhbiBiZSBwYXNzZWQgdG8gdGhlIFdlYjMgY29uc3RydWN0b3IuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYWtlQWxjaGVteUh0dHBQcm92aWRlcihzZW5kSnNvblJwY1BheWxvYWQpIHtcbiAgICBmdW5jdGlvbiBzZW5kKHBheWxvYWQsIGNhbGxiYWNrKSB7XG4gICAgICAgIGNhbGxXaGVuRG9uZShzZW5kSnNvblJwY1BheWxvYWQocGF5bG9hZCksIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgcmV0dXJuIHsgc2VuZDogc2VuZCB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aHR0cFByb3ZpZGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJjYWxsV2hlbkRvbmUiLCJtYWtlQWxjaGVteUh0dHBQcm92aWRlciIsInNlbmRKc29uUnBjUGF5bG9hZCIsInNlbmQiLCJwYXlsb2FkIiwiY2FsbGJhY2siXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/httpProvider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/sendJsonRpcPayload.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/sendJsonRpcPayload.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   makeJsonRpcPayloadSender: () => (/* binding */ makeJsonRpcPayloadSender)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var assert_never__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! assert-never */ \"(ssr)/./node_modules/assert-never/index.js\");\n/* harmony import */ var _util_promises__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/promises */ \"(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/util/promises.js\");\n\n\n\nvar ALCHEMY_DISALLOWED_METHODS = [\n    \"eth_accounts\",\n    \"eth_sendTransaction\",\n    \"eth_sign\",\n    \"eth_signTypedData_v3\",\n    \"eth_signTypedData\"\n];\nvar ALCHEMY_DISALLOWED_PREFIXES = [\n    \"personal\"\n];\nfunction makeJsonRpcPayloadSender(alchemySendJsonRpc, config) {\n    // Copy middlewares from config.\n    var middlewares = [];\n    config.jsonRpcSenderMiddlewares.forEach(function(m) {\n        return middlewares.push(m);\n    });\n    var currentWriteProvider = config.writeProvider;\n    middlewares.push(function(payload) {\n        var disallowedMethod = getDisallowedMethod(payload);\n        if (!disallowedMethod) {\n            try {\n                return sendJsonRpcWithRetries(payload, alchemySendJsonRpc, config);\n            } catch (alchemyError) {\n                // Fallback to write provider, but if both fail throw the error from\n                // Alchemy.\n                if (!currentWriteProvider) {\n                    throw alchemyError;\n                }\n                try {\n                    return sendJsonRpcWithProvider(currentWriteProvider, payload);\n                } catch (_a) {\n                    throw alchemyError;\n                }\n            }\n        } else {\n            if (!currentWriteProvider) {\n                throw new Error('No provider available for method \"' + disallowedMethod + '\"');\n            }\n            return sendJsonRpcWithProvider(currentWriteProvider, payload);\n        }\n    });\n    var sendJsonRpcPayload = function(payload) {\n        var getNext = function(i) {\n            var middleware = middlewares[i];\n            return function() {\n                return middleware(payload, getNext(i + 1));\n            };\n        };\n        return getNext(0)();\n    };\n    function setWriteProvider(writeProvider) {\n        currentWriteProvider = writeProvider !== null && writeProvider !== void 0 ? writeProvider : null;\n    }\n    return {\n        sendJsonRpcPayload: sendJsonRpcPayload,\n        setWriteProvider: setWriteProvider\n    };\n}\nfunction sendJsonRpcWithProvider(provider, payload) {\n    var anyProvider = provider;\n    var sendMethod = (anyProvider.sendAsync ? anyProvider.sendAsync : anyProvider.send).bind(anyProvider);\n    return (0,_util_promises__WEBPACK_IMPORTED_MODULE_1__.promisify)(function(callback) {\n        return sendMethod(payload, callback);\n    });\n}\nfunction getDisallowedMethod(payload) {\n    var payloads = Array.isArray(payload) ? payload : [\n        payload\n    ];\n    // Check if the payload method is a disallowed method or starts with a\n    // disallowed prefix.\n    var disallowedRequest = payloads.find(function(p) {\n        return ALCHEMY_DISALLOWED_METHODS.indexOf(p.method) >= 0 || ALCHEMY_DISALLOWED_PREFIXES.some(function(prefix) {\n            return p.method.startsWith(prefix);\n        });\n    }) || undefined;\n    return disallowedRequest && disallowedRequest.method;\n}\nfunction sendJsonRpcWithRetries(payload, alchemySendJsonRpc, _a) {\n    var maxRetries = _a.maxRetries, retryInterval = _a.retryInterval, retryJitter = _a.retryJitter;\n    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function() {\n        var i, result, status_1, message, statusString;\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function(_b) {\n            switch(_b.label){\n                case 0:\n                    i = 0;\n                    _b.label = 1;\n                case 1:\n                    if (!(i < maxRetries + 1)) return [\n                        3 /*break*/ ,\n                        5\n                    ];\n                    return [\n                        4 /*yield*/ ,\n                        alchemySendJsonRpc(payload)\n                    ];\n                case 2:\n                    result = _b.sent();\n                    switch(result.type){\n                        case \"jsonrpc\":\n                            return [\n                                2 /*return*/ ,\n                                result.response\n                            ];\n                        case \"rateLimit\":\n                            break;\n                        case \"networkError\":\n                            {\n                                status_1 = result.status, message = result.message;\n                                statusString = status_1 !== 0 ? \"(\" + status_1 + \") \" : \"\";\n                                throw new Error(statusString + \" \" + message);\n                            }\n                        default:\n                            return [\n                                2 /*return*/ ,\n                                (0,assert_never__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(result)\n                            ];\n                    }\n                    return [\n                        4 /*yield*/ ,\n                        (0,_util_promises__WEBPACK_IMPORTED_MODULE_1__.delay)(retryInterval + (retryJitter * Math.random() | 0))\n                    ];\n                case 3:\n                    _b.sent();\n                    _b.label = 4;\n                case 4:\n                    i++;\n                    return [\n                        3 /*break*/ ,\n                        1\n                    ];\n                case 5:\n                    throw new Error(\"Rate limited for \" + (maxRetries + 1) + \" consecutive attempts.\");\n            }\n        });\n    });\n} //# sourceMappingURL=sendJsonRpcPayload.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/sendJsonRpcPayload.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/sendRestPayload.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/sendRestPayload.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   makeRestPayloadSender: () => (/* binding */ makeRestPayloadSender)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var fetch_ponyfill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fetch-ponyfill */ \"(ssr)/./node_modules/fetch-ponyfill/fetch-node.js\");\n/* harmony import */ var fetch_ponyfill__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fetch_ponyfill__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var urijs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! urijs */ \"(ssr)/./node_modules/urijs/src/URI.js\");\n/* harmony import */ var urijs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(urijs__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _util_promises__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/promises */ \"(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/util/promises.js\");\n\n\n\n\nfunction makeRestPayloadSender(_a) {\n    var _this = this;\n    var url = _a.url, config = _a.config;\n    // The rest payload sender only works for alchemy.com http endpoints.\n    var error;\n    if (/^wss?:\\/\\//.test(url)) {\n        error = \"Alchemy rest endpoints are not available via websockets\";\n    }\n    if (!url.includes(\"alchemy\")) {\n        error = \"Alchemy specific rest endpoints are not available with a non Alchemy provider.\";\n    }\n    if (url.includes(\"alchemyapi.io\") && !url.includes(\"eth-\")) {\n        error = \"Alchemy specific rest endpoints on L2 networks are not available with our legacy endpoints on alchemyapi.io. Please switch over to alchemy.com\";\n    }\n    // Don't use the native `URL` class for this. It doesn't work in React Native.\n    var urlObject = new (urijs__WEBPACK_IMPORTED_MODULE_1___default())(url);\n    var origin = urlObject.origin();\n    var pathname = urlObject.path();\n    var apiKey = pathname.substring(pathname.lastIndexOf(\"/\") + 1);\n    var fetch = fetch_ponyfill__WEBPACK_IMPORTED_MODULE_0___default()().fetch;\n    // NFT endpoints are prefixed differently, so the path must be constructed separately\n    var NFT_ENDPOINTS = [\n        \"getNFTs\",\n        \"getNFTMetadata\"\n    ];\n    var NFT_PREFIX = \"nft/v2/\";\n    var isNftPath = function(path) {\n        return NFT_ENDPOINTS.includes(path);\n    };\n    var formatNftPath = function(path) {\n        return NFT_PREFIX + apiKey + \"/\" + path;\n    };\n    var sendRestPayload = function(path, payload) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(_this, void 0, void 0, function() {\n            var maxRetries, retryInterval, retryJitter, endpoint, i, response, status_1;\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        if (error) {\n                            throw new Error(error);\n                        }\n                        maxRetries = config.maxRetries, retryInterval = config.retryInterval, retryJitter = config.retryJitter;\n                        if (!(origin && apiKey)) return [\n                            3 /*break*/ ,\n                            6\n                        ];\n                        endpoint = new (urijs__WEBPACK_IMPORTED_MODULE_1___default())(origin).search(payload).path(isNftPath(path) ? formatNftPath(path) : apiKey + path).toString();\n                        i = 0;\n                        _a.label = 1;\n                    case 1:\n                        if (!(i < maxRetries + 1)) return [\n                            3 /*break*/ ,\n                            5\n                        ];\n                        return [\n                            4 /*yield*/ ,\n                            fetch(endpoint)\n                        ];\n                    case 2:\n                        response = _a.sent();\n                        status_1 = response.status;\n                        switch(status_1){\n                            case 200:\n                                return [\n                                    2 /*return*/ ,\n                                    response.json()\n                                ];\n                            case 429:\n                                break;\n                            default:\n                                throw new Error(response.status + \":\" + response.statusText);\n                        }\n                        return [\n                            4 /*yield*/ ,\n                            (0,_util_promises__WEBPACK_IMPORTED_MODULE_3__.delay)(retryInterval + (retryJitter * Math.random() | 0))\n                        ];\n                    case 3:\n                        _a.sent();\n                        _a.label = 4;\n                    case 4:\n                        i++;\n                        return [\n                            3 /*break*/ ,\n                            1\n                        ];\n                    case 5:\n                        throw new Error(\"Rate limited for \" + (maxRetries + 1) + \" consecutive attempts.\");\n                    case 6:\n                        return [\n                            2 /*return*/ ,\n                            Promise.resolve()\n                        ];\n                }\n            });\n        });\n    };\n    return {\n        sendRestPayload: sendRestPayload\n    };\n} //# sourceMappingURL=sendRestPayload.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/sendRestPayload.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/webSocketProvider.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/webSocketProvider.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AlchemyWebSocketProvider: () => (/* binding */ AlchemyWebSocketProvider)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! eventemitter3 */ \"(ssr)/./node_modules/eventemitter3/index.js\");\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(eventemitter3__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _subscriptions_subscriptionBackfill__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../subscriptions/subscriptionBackfill */ \"(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/subscriptions/subscriptionBackfill.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../types */ \"(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/types.js\");\n/* harmony import */ var _util_hex__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/hex */ \"(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/util/hex.js\");\n/* harmony import */ var _util_jsonRpc__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/jsonRpc */ \"(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/util/jsonRpc.js\");\n/* harmony import */ var _util_promises__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/promises */ \"(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/util/promises.js\");\n\n\n\n\n\n\n\nvar HEARTBEAT_INTERVAL = 30000;\nvar HEARTBEAT_WAIT_TIME = 10000;\nvar BACKFILL_TIMEOUT = 60000;\nvar BACKFILL_RETRIES = 5;\n/**\n * Subscriptions have a memory of recent events they have sent so that in the\n * event that they disconnect and need to backfill, they can detect re-orgs.\n * Keep a buffer that goes back at least these many blocks, the maximum amount\n * at which we might conceivably see a re-org.\n *\n * Note that while our buffer goes back this many blocks, it may contain more\n * than this many elements, since in the case of logs subscriptions more than\n * one event may be emitted for a block.\n */ var RETAINED_EVENT_BLOCK_COUNT = 10;\nvar AlchemyWebSocketProvider = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__extends)(AlchemyWebSocketProvider, _super);\n    function AlchemyWebSocketProvider(ws, sendJsonRpcPayload, jsonRpcSenders) {\n        var _this = _super.call(this) || this;\n        _this.ws = ws;\n        _this.sendJsonRpcPayload = sendJsonRpcPayload;\n        _this.jsonRpcSenders = jsonRpcSenders;\n        // In the case of a WebSocket reconnection, all subscriptions are lost and we\n        // create new ones to replace them, but we want to create the illusion that\n        // the original subscriptions persist. Thus, maintain a mapping from the\n        // \"virtual\" subscription ids which are visible to the consumer to the\n        // \"physical\" subscription ids of the actual connections. This terminology is\n        // borrowed from virtual and physical memory, which has a similar mapping.\n        _this.virtualSubscriptionsById = new Map();\n        _this.virtualIdsByPhysicalId = new Map();\n        _this.cancelBackfill = noop;\n        _this.startHeartbeat = function() {\n            if (_this.heartbeatIntervalId != null) {\n                return;\n            }\n            _this.heartbeatIntervalId = setInterval(function() {\n                return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(_this, void 0, void 0, function() {\n                    var _a;\n                    return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function(_b) {\n                        switch(_b.label){\n                            case 0:\n                                _b.trys.push([\n                                    0,\n                                    2,\n                                    ,\n                                    3\n                                ]);\n                                return [\n                                    4 /*yield*/ ,\n                                    (0,_util_promises__WEBPACK_IMPORTED_MODULE_2__.withTimeout)(this.jsonRpcSenders.send(\"net_version\"), HEARTBEAT_WAIT_TIME)\n                                ];\n                            case 1:\n                                _b.sent();\n                                return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                            case 2:\n                                _a = _b.sent();\n                                this.ws.reconnect();\n                                return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                            case 3:\n                                return [\n                                    2 /*return*/ \n                                ];\n                        }\n                    });\n                });\n            }, HEARTBEAT_INTERVAL);\n        };\n        _this.stopHeartbeatAndBackfill = function() {\n            if (_this.heartbeatIntervalId != null) {\n                clearInterval(_this.heartbeatIntervalId);\n                _this.heartbeatIntervalId = undefined;\n            }\n            _this.cancelBackfill();\n        };\n        _this.handleMessage = function(event) {\n            var message = JSON.parse(event.data);\n            if (!(0,_types__WEBPACK_IMPORTED_MODULE_3__.isSubscriptionEvent)(message)) {\n                return;\n            }\n            var physicalId = message.params.subscription;\n            var virtualId = _this.virtualIdsByPhysicalId.get(physicalId);\n            if (!virtualId) {\n                return;\n            }\n            var subscription = _this.virtualSubscriptionsById.get(virtualId);\n            if (subscription.method !== \"eth_subscribe\") {\n                _this.emitGenericEvent(virtualId, message.params.result);\n                return;\n            }\n            switch(subscription.params[0]){\n                case \"newHeads\":\n                    {\n                        var newHeadsSubscription = subscription;\n                        var newHeadsMessage = message;\n                        var isBackfilling = newHeadsSubscription.isBackfilling, backfillBuffer = newHeadsSubscription.backfillBuffer;\n                        var result = newHeadsMessage.params.result;\n                        if (isBackfilling) {\n                            addToNewHeadsEventsBuffer(backfillBuffer, result);\n                        } else {\n                            _this.emitNewHeadsEvent(virtualId, result);\n                        }\n                        break;\n                    }\n                case \"logs\":\n                    {\n                        var logsSubscription = subscription;\n                        var logsMessage = message;\n                        var isBackfilling = logsSubscription.isBackfilling, backfillBuffer = logsSubscription.backfillBuffer;\n                        var result = logsMessage.params.result;\n                        if (isBackfilling) {\n                            addToLogsEventsBuffer(backfillBuffer, result);\n                        } else {\n                            _this.emitLogsEvent(virtualId, result);\n                        }\n                        break;\n                    }\n                default:\n                    _this.emitGenericEvent(virtualId, message.params.result);\n            }\n        };\n        _this.handleReopen = function() {\n            var e_1, _a;\n            _this.virtualIdsByPhysicalId.clear();\n            var _b = (0,_util_promises__WEBPACK_IMPORTED_MODULE_2__.makeCancelToken)(), cancel = _b.cancel, isCancelled = _b.isCancelled;\n            _this.cancelBackfill = cancel;\n            var _loop_1 = function(subscription) {\n                (function() {\n                    return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(_this, void 0, void 0, function() {\n                        var error_1;\n                        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function(_a) {\n                            switch(_a.label){\n                                case 0:\n                                    _a.trys.push([\n                                        0,\n                                        2,\n                                        ,\n                                        3\n                                    ]);\n                                    return [\n                                        4 /*yield*/ ,\n                                        this.resubscribeAndBackfill(isCancelled, subscription)\n                                    ];\n                                case 1:\n                                    _a.sent();\n                                    return [\n                                        3 /*break*/ ,\n                                        3\n                                    ];\n                                case 2:\n                                    error_1 = _a.sent();\n                                    if (!isCancelled()) {\n                                        console.error('Error while backfilling \"' + subscription.params[0] + '\" subscription. Some events may be missing.', error_1);\n                                    }\n                                    return [\n                                        3 /*break*/ ,\n                                        3\n                                    ];\n                                case 3:\n                                    return [\n                                        2 /*return*/ \n                                    ];\n                            }\n                        });\n                    });\n                })();\n            };\n            try {\n                for(var _c = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__values)(_this.virtualSubscriptionsById.values()), _d = _c.next(); !_d.done; _d = _c.next()){\n                    var subscription = _d.value;\n                    _loop_1(subscription);\n                }\n            } catch (e_1_1) {\n                e_1 = {\n                    error: e_1_1\n                };\n            } finally{\n                try {\n                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n                } finally{\n                    if (e_1) throw e_1.error;\n                }\n            }\n            _this.startHeartbeat();\n        };\n        _this.backfiller = (0,_subscriptions_subscriptionBackfill__WEBPACK_IMPORTED_MODULE_4__.makeBackfiller)(jsonRpcSenders);\n        _this.addSocketListeners();\n        _this.startHeartbeat();\n        return _this;\n    }\n    AlchemyWebSocketProvider.prototype.send = function(request, callback) {\n        if (isSubscribeRequest(request)) {\n            var id = request.id;\n            if (id === undefined) {\n                // The JSON-RPC spec says to return nothing if there is no request id.\n                return;\n            }\n            (0,_util_promises__WEBPACK_IMPORTED_MODULE_2__.callWhenDone)(this.subscribe(request), callback);\n            return;\n        }\n        if (isUnsubscribeRequest(request)) {\n            (0,_util_promises__WEBPACK_IMPORTED_MODULE_2__.callWhenDone)(this.unsubscribe(request), callback);\n            return;\n        }\n        (0,_util_promises__WEBPACK_IMPORTED_MODULE_2__.callWhenDone)(this.sendJsonRpcPayload(request), callback);\n    };\n    AlchemyWebSocketProvider.prototype.supportsSubscriptions = function() {\n        return true;\n    };\n    AlchemyWebSocketProvider.prototype.disconnect = function(code, reason) {\n        this.removeSocketListeners();\n        this.removeAllListeners();\n        this.stopHeartbeatAndBackfill();\n        this.ws.close(code, reason);\n    };\n    AlchemyWebSocketProvider.prototype.connect = function() {\n    // No-op. We're already connected when passed a websocket in the\n    // constructor.\n    };\n    AlchemyWebSocketProvider.prototype.reset = function() {\n    // No-op.\n    };\n    AlchemyWebSocketProvider.prototype.reconnect = function() {\n    // No-op. This isn't called anywhere.\n    };\n    AlchemyWebSocketProvider.prototype.subscribe = function(request) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function() {\n            var method, _a, params, startingBlockNumber, response, id;\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function(_b) {\n                switch(_b.label){\n                    case 0:\n                        method = request.method, _a = request.params, params = _a === void 0 ? [] : _a;\n                        return [\n                            4 /*yield*/ ,\n                            this.getBlockNumber()\n                        ];\n                    case 1:\n                        startingBlockNumber = _b.sent();\n                        return [\n                            4 /*yield*/ ,\n                            this.sendJsonRpcPayload(request)\n                        ];\n                    case 2:\n                        response = _b.sent();\n                        id = response.result;\n                        this.virtualSubscriptionsById.set(id, {\n                            method: method,\n                            params: params,\n                            startingBlockNumber: startingBlockNumber,\n                            virtualId: id,\n                            physicalId: id,\n                            sentEvents: [],\n                            isBackfilling: false,\n                            backfillBuffer: []\n                        });\n                        this.virtualIdsByPhysicalId.set(id, id);\n                        return [\n                            2 /*return*/ ,\n                            (0,_util_jsonRpc__WEBPACK_IMPORTED_MODULE_5__.makeResponse)(request.id, id)\n                        ];\n                }\n            });\n        });\n    };\n    AlchemyWebSocketProvider.prototype.unsubscribe = function(request) {\n        var _a;\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function() {\n            var subscriptionId, virtualSubscription, physicalId, physicalRequest;\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function(_b) {\n                switch(_b.label){\n                    case 0:\n                        subscriptionId = (_a = request.params) === null || _a === void 0 ? void 0 : _a[0];\n                        virtualSubscription = this.virtualSubscriptionsById.get(subscriptionId);\n                        if (!virtualSubscription) {\n                            return [\n                                2 /*return*/ ,\n                                (0,_util_jsonRpc__WEBPACK_IMPORTED_MODULE_5__.makeResponse)(request.id, false)\n                            ];\n                        }\n                        physicalId = virtualSubscription.physicalId;\n                        physicalRequest = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, request), {\n                            params: [\n                                physicalId\n                            ]\n                        });\n                        return [\n                            4 /*yield*/ ,\n                            this.sendJsonRpcPayload(physicalRequest)\n                        ];\n                    case 1:\n                        _b.sent();\n                        this.virtualSubscriptionsById.delete(subscriptionId);\n                        this.virtualIdsByPhysicalId.delete(physicalId);\n                        return [\n                            2 /*return*/ ,\n                            (0,_util_jsonRpc__WEBPACK_IMPORTED_MODULE_5__.makeResponse)(request.id, true)\n                        ];\n                }\n            });\n        });\n    };\n    AlchemyWebSocketProvider.prototype.addSocketListeners = function() {\n        this.ws.addEventListener(\"message\", this.handleMessage);\n        this.ws.addEventListener(\"reopen\", this.handleReopen);\n        this.ws.addEventListener(\"down\", this.stopHeartbeatAndBackfill);\n    };\n    AlchemyWebSocketProvider.prototype.removeSocketListeners = function() {\n        this.ws.removeEventListener(\"message\", this.handleMessage);\n        this.ws.removeEventListener(\"reopen\", this.handleReopen);\n        this.ws.removeEventListener(\"down\", this.stopHeartbeatAndBackfill);\n    };\n    AlchemyWebSocketProvider.prototype.resubscribeAndBackfill = function(isCancelled, subscription) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function() {\n            var virtualId, method, params, sentEvents, backfillBuffer, startingBlockNumber, physicalId, _a, backfillEvents, events, filter_1, backfillEvents, events;\n            var _this = this;\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function(_b) {\n                switch(_b.label){\n                    case 0:\n                        virtualId = subscription.virtualId, method = subscription.method, params = subscription.params, sentEvents = subscription.sentEvents, backfillBuffer = subscription.backfillBuffer, startingBlockNumber = subscription.startingBlockNumber;\n                        subscription.isBackfilling = true;\n                        backfillBuffer.length = 0;\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([\n                            1,\n                            ,\n                            9,\n                            10\n                        ]);\n                        return [\n                            4 /*yield*/ ,\n                            this.jsonRpcSenders.send(method, params)\n                        ];\n                    case 2:\n                        physicalId = _b.sent();\n                        (0,_util_promises__WEBPACK_IMPORTED_MODULE_2__.throwIfCancelled)(isCancelled);\n                        subscription.physicalId = physicalId;\n                        this.virtualIdsByPhysicalId.set(physicalId, virtualId);\n                        _a = params[0];\n                        switch(_a){\n                            case \"newHeads\":\n                                return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                            case \"logs\":\n                                return [\n                                    3 /*break*/ ,\n                                    5\n                                ];\n                        }\n                        return [\n                            3 /*break*/ ,\n                            7\n                        ];\n                    case 3:\n                        return [\n                            4 /*yield*/ ,\n                            (0,_util_promises__WEBPACK_IMPORTED_MODULE_2__.withBackoffRetries)(function() {\n                                return (0,_util_promises__WEBPACK_IMPORTED_MODULE_2__.withTimeout)(_this.backfiller.getNewHeadsBackfill(isCancelled, sentEvents, startingBlockNumber), BACKFILL_TIMEOUT);\n                            }, BACKFILL_RETRIES, function() {\n                                return !isCancelled();\n                            })\n                        ];\n                    case 4:\n                        backfillEvents = _b.sent();\n                        (0,_util_promises__WEBPACK_IMPORTED_MODULE_2__.throwIfCancelled)(isCancelled);\n                        events = (0,_subscriptions_subscriptionBackfill__WEBPACK_IMPORTED_MODULE_4__.dedupeNewHeads)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([], (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__read)(backfillEvents)), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__read)(backfillBuffer)));\n                        events.forEach(function(event) {\n                            return _this.emitNewHeadsEvent(virtualId, event);\n                        });\n                        return [\n                            3 /*break*/ ,\n                            8\n                        ];\n                    case 5:\n                        filter_1 = params[1] || {};\n                        return [\n                            4 /*yield*/ ,\n                            (0,_util_promises__WEBPACK_IMPORTED_MODULE_2__.withBackoffRetries)(function() {\n                                return (0,_util_promises__WEBPACK_IMPORTED_MODULE_2__.withTimeout)(_this.backfiller.getLogsBackfill(isCancelled, filter_1, sentEvents, startingBlockNumber), BACKFILL_TIMEOUT);\n                            }, BACKFILL_RETRIES, function() {\n                                return !isCancelled();\n                            })\n                        ];\n                    case 6:\n                        backfillEvents = _b.sent();\n                        (0,_util_promises__WEBPACK_IMPORTED_MODULE_2__.throwIfCancelled)(isCancelled);\n                        events = (0,_subscriptions_subscriptionBackfill__WEBPACK_IMPORTED_MODULE_4__.dedupeLogs)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([], (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__read)(backfillEvents)), (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__read)(backfillBuffer)));\n                        events.forEach(function(event) {\n                            return _this.emitLogsEvent(virtualId, event);\n                        });\n                        return [\n                            3 /*break*/ ,\n                            8\n                        ];\n                    case 7:\n                        return [\n                            3 /*break*/ ,\n                            8\n                        ];\n                    case 8:\n                        return [\n                            3 /*break*/ ,\n                            10\n                        ];\n                    case 9:\n                        subscription.isBackfilling = false;\n                        backfillBuffer.length = 0;\n                        return [\n                            7 /*endfinally*/ \n                        ];\n                    case 10:\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    AlchemyWebSocketProvider.prototype.getBlockNumber = function() {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function() {\n            var blockNumberHex;\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__generator)(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            this.jsonRpcSenders.send(\"eth_blockNumber\")\n                        ];\n                    case 1:\n                        blockNumberHex = _a.sent();\n                        return [\n                            2 /*return*/ ,\n                            (0,_util_hex__WEBPACK_IMPORTED_MODULE_6__.fromHex)(blockNumberHex)\n                        ];\n                }\n            });\n        });\n    };\n    AlchemyWebSocketProvider.prototype.emitNewHeadsEvent = function(virtualId, result) {\n        this.emitAndRememberEvent(virtualId, result, getNewHeadsBlockNumber);\n    };\n    AlchemyWebSocketProvider.prototype.emitLogsEvent = function(virtualId, result) {\n        this.emitAndRememberEvent(virtualId, result, getLogsBlockNumber);\n    };\n    /**\n     * Emits an event to consumers, but also remembers it in its subscriptions's\n     * `sentEvents` buffer so that we can detect re-orgs if the connection drops\n     * and needs to be reconnected.\n     */ AlchemyWebSocketProvider.prototype.emitAndRememberEvent = function(virtualId, result, getBlockNumber) {\n        var subscription = this.virtualSubscriptionsById.get(virtualId);\n        if (!subscription) {\n            return;\n        }\n        // Web3 modifies these event objects once we pass them on (changing hex\n        // numbers to numbers). We want the original event, so make a defensive\n        // copy.\n        addToPastEventsBuffer(subscription.sentEvents, (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), getBlockNumber);\n        this.emitGenericEvent(virtualId, result);\n    };\n    AlchemyWebSocketProvider.prototype.emitGenericEvent = function(virtualId, result) {\n        var event = {\n            jsonrpc: \"2.0\",\n            method: \"eth_subscription\",\n            params: {\n                subscription: virtualId,\n                result: result\n            }\n        };\n        this.emit(\"data\", event);\n    };\n    return AlchemyWebSocketProvider;\n}((eventemitter3__WEBPACK_IMPORTED_MODULE_0___default()));\n\nfunction addToNewHeadsEventsBuffer(pastEvents, event) {\n    addToPastEventsBuffer(pastEvents, event, getNewHeadsBlockNumber);\n}\nfunction addToLogsEventsBuffer(pastEvents, event) {\n    addToPastEventsBuffer(pastEvents, event, getLogsBlockNumber);\n}\n/**\n * Adds a new event to an array of events, evicting any events which\n * are so old that they will no longer feasibly be part of a reorg.\n */ function addToPastEventsBuffer(pastEvents, event, getBlockNumber) {\n    var currentBlockNumber = getBlockNumber(event);\n    // Find first index of an event recent enough to retain, then drop everything\n    // at a lower index.\n    var firstGoodIndex = pastEvents.findIndex(function(e) {\n        return getBlockNumber(e) > currentBlockNumber - RETAINED_EVENT_BLOCK_COUNT;\n    });\n    if (firstGoodIndex === -1) {\n        pastEvents.length = 0;\n    } else {\n        pastEvents.splice(0, firstGoodIndex);\n    }\n    pastEvents.push(event);\n}\nfunction isSubscribeRequest(request) {\n    return !Array.isArray(request) && request.method === \"eth_subscribe\";\n}\nfunction isUnsubscribeRequest(request) {\n    return !Array.isArray(request) && request.method === \"eth_unsubscribe\";\n}\nfunction getNewHeadsBlockNumber(event) {\n    return (0,_util_hex__WEBPACK_IMPORTED_MODULE_6__.fromHex)(event.number);\n}\nfunction getLogsBlockNumber(event) {\n    return (0,_util_hex__WEBPACK_IMPORTED_MODULE_6__.fromHex)(event.blockNumber);\n}\nfunction noop() {\n// Nothing.\n} //# sourceMappingURL=webSocketProvider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/webSocketProvider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/node_modules/eth-lib/lib/account.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/node_modules/eth-lib/lib/account.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Bytes = __webpack_require__(/*! ./bytes */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/eth-lib/lib/bytes.js\");\nconst Nat = __webpack_require__(/*! ./nat */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/eth-lib/lib/nat.js\");\nconst elliptic = __webpack_require__(/*! elliptic */ \"(ssr)/./node_modules/elliptic/lib/elliptic.js\");\nconst rlp = __webpack_require__(/*! ./rlp */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/eth-lib/lib/rlp.js\");\nconst secp256k1 = new elliptic.ec(\"secp256k1\"); // eslint-disable-line\nconst { keccak256, keccak256s } = __webpack_require__(/*! ./hash */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/eth-lib/lib/hash.js\");\nconst create = (entropy)=>{\n    const innerHex = keccak256(Bytes.concat(Bytes.random(32), entropy || Bytes.random(32)));\n    const middleHex = Bytes.concat(Bytes.concat(Bytes.random(32), innerHex), Bytes.random(32));\n    const outerHex = keccak256(middleHex);\n    return fromPrivate(outerHex);\n};\nconst toChecksum = (address)=>{\n    const addressHash = keccak256s(address.slice(2));\n    let checksumAddress = \"0x\";\n    for(let i = 0; i < 40; i++)checksumAddress += parseInt(addressHash[i + 2], 16) > 7 ? address[i + 2].toUpperCase() : address[i + 2];\n    return checksumAddress;\n};\nconst fromPrivate = (privateKey)=>{\n    const buffer = new Buffer(privateKey.slice(2), \"hex\");\n    const ecKey = secp256k1.keyFromPrivate(buffer);\n    const publicKey = \"0x\" + ecKey.getPublic(false, \"hex\").slice(2);\n    const publicHash = keccak256(publicKey);\n    const address = toChecksum(\"0x\" + publicHash.slice(-40));\n    return {\n        address: address,\n        privateKey: privateKey\n    };\n};\nconst encodeSignature = ([v, r, s])=>Bytes.flatten([\n        r,\n        s,\n        v\n    ]);\nconst decodeSignature = (hex)=>[\n        Bytes.slice(64, Bytes.length(hex), hex),\n        Bytes.slice(0, 32, hex),\n        Bytes.slice(32, 64, hex)\n    ];\nconst makeSigner = (addToV)=>(hash, privateKey)=>{\n        const signature = secp256k1.keyFromPrivate(new Buffer(privateKey.slice(2), \"hex\")).sign(new Buffer(hash.slice(2), \"hex\"), {\n            canonical: true\n        });\n        return encodeSignature([\n            Nat.fromString(Bytes.fromNumber(addToV + signature.recoveryParam)),\n            Bytes.pad(32, Bytes.fromNat(\"0x\" + signature.r.toString(16))),\n            Bytes.pad(32, Bytes.fromNat(\"0x\" + signature.s.toString(16)))\n        ]);\n    };\nconst sign = makeSigner(27); // v=27|28 instead of 0|1...\nconst recover = (hash, signature)=>{\n    const vals = decodeSignature(signature);\n    const vrs = {\n        v: Bytes.toNumber(vals[0]),\n        r: vals[1].slice(2),\n        s: vals[2].slice(2)\n    };\n    const ecPublicKey = secp256k1.recoverPubKey(new Buffer(hash.slice(2), \"hex\"), vrs, vrs.v < 2 ? vrs.v : 1 - vrs.v % 2); // because odd vals mean v=0... sadly that means v=0 means v=1... I hate that\n    const publicKey = \"0x\" + ecPublicKey.encode(\"hex\", false).slice(2);\n    const publicHash = keccak256(publicKey);\n    const address = toChecksum(\"0x\" + publicHash.slice(-40));\n    return address;\n};\nmodule.exports = {\n    create,\n    toChecksum,\n    fromPrivate,\n    sign,\n    makeSigner,\n    recover,\n    encodeSignature,\n    decodeSignature\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL25vZGVfbW9kdWxlcy9ldGgtbGliL2xpYi9hY2NvdW50LmpzIiwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLFFBQVFDLG1CQUFPQSxDQUFDLDBGQUFTO0FBQy9CLE1BQU1DLE1BQU1ELG1CQUFPQSxDQUFDLHNGQUFPO0FBQzNCLE1BQU1FLFdBQVdGLG1CQUFPQSxDQUFDLCtEQUFVO0FBQ25DLE1BQU1HLE1BQU1ILG1CQUFPQSxDQUFDLHNGQUFPO0FBQzNCLE1BQU1JLFlBQVksSUFBSUYsU0FBU0csRUFBRSxDQUFDLGNBQWMsc0JBQXNCO0FBQ3RFLE1BQU0sRUFBRUMsU0FBUyxFQUFFQyxVQUFVLEVBQUUsR0FBR1AsbUJBQU9BLENBQUMsd0ZBQVE7QUFFbEQsTUFBTVEsU0FBU0MsQ0FBQUE7SUFDYixNQUFNQyxXQUFXSixVQUFVUCxNQUFNWSxNQUFNLENBQUNaLE1BQU1hLE1BQU0sQ0FBQyxLQUFLSCxXQUFXVixNQUFNYSxNQUFNLENBQUM7SUFDbEYsTUFBTUMsWUFBWWQsTUFBTVksTUFBTSxDQUFDWixNQUFNWSxNQUFNLENBQUNaLE1BQU1hLE1BQU0sQ0FBQyxLQUFLRixXQUFXWCxNQUFNYSxNQUFNLENBQUM7SUFDdEYsTUFBTUUsV0FBV1IsVUFBVU87SUFDM0IsT0FBT0UsWUFBWUQ7QUFDckI7QUFFQSxNQUFNRSxhQUFhQyxDQUFBQTtJQUNqQixNQUFNQyxjQUFjWCxXQUFXVSxRQUFRRSxLQUFLLENBQUM7SUFDN0MsSUFBSUMsa0JBQWtCO0lBQ3RCLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJLElBQUlBLElBQUtELG1CQUFtQkUsU0FBU0osV0FBVyxDQUFDRyxJQUFJLEVBQUUsRUFBRSxNQUFNLElBQUlKLE9BQU8sQ0FBQ0ksSUFBSSxFQUFFLENBQUNFLFdBQVcsS0FBS04sT0FBTyxDQUFDSSxJQUFJLEVBQUU7SUFDcEksT0FBT0Q7QUFDVDtBQUVBLE1BQU1MLGNBQWNTLENBQUFBO0lBQ2xCLE1BQU1DLFNBQVMsSUFBSUMsT0FBT0YsV0FBV0wsS0FBSyxDQUFDLElBQUk7SUFDL0MsTUFBTVEsUUFBUXZCLFVBQVV3QixjQUFjLENBQUNIO0lBQ3ZDLE1BQU1JLFlBQVksT0FBT0YsTUFBTUcsU0FBUyxDQUFDLE9BQU8sT0FBT1gsS0FBSyxDQUFDO0lBQzdELE1BQU1ZLGFBQWF6QixVQUFVdUI7SUFDN0IsTUFBTVosVUFBVUQsV0FBVyxPQUFPZSxXQUFXWixLQUFLLENBQUMsQ0FBQztJQUNwRCxPQUFPO1FBQ0xGLFNBQVNBO1FBQ1RPLFlBQVlBO0lBQ2Q7QUFDRjtBQUVBLE1BQU1RLGtCQUFrQixDQUFDLENBQUNDLEdBQUdDLEdBQUdDLEVBQUUsR0FBS3BDLE1BQU1xQyxPQUFPLENBQUM7UUFBQ0Y7UUFBR0M7UUFBR0Y7S0FBRTtBQUU5RCxNQUFNSSxrQkFBa0JDLENBQUFBLE1BQU87UUFBQ3ZDLE1BQU1vQixLQUFLLENBQUMsSUFBSXBCLE1BQU13QyxNQUFNLENBQUNELE1BQU1BO1FBQU12QyxNQUFNb0IsS0FBSyxDQUFDLEdBQUcsSUFBSW1CO1FBQU12QyxNQUFNb0IsS0FBSyxDQUFDLElBQUksSUFBSW1CO0tBQUs7QUFFM0gsTUFBTUUsYUFBYUMsQ0FBQUEsU0FBVSxDQUFDQyxNQUFNbEI7UUFDbEMsTUFBTW1CLFlBQVl2QyxVQUFVd0IsY0FBYyxDQUFDLElBQUlGLE9BQU9GLFdBQVdMLEtBQUssQ0FBQyxJQUFJLFFBQVF5QixJQUFJLENBQUMsSUFBSWxCLE9BQU9nQixLQUFLdkIsS0FBSyxDQUFDLElBQUksUUFBUTtZQUFFMEIsV0FBVztRQUFLO1FBQzVJLE9BQU9iLGdCQUFnQjtZQUFDL0IsSUFBSTZDLFVBQVUsQ0FBQy9DLE1BQU1nRCxVQUFVLENBQUNOLFNBQVNFLFVBQVVLLGFBQWE7WUFBSWpELE1BQU1rRCxHQUFHLENBQUMsSUFBSWxELE1BQU1tRCxPQUFPLENBQUMsT0FBT1AsVUFBVVQsQ0FBQyxDQUFDaUIsUUFBUSxDQUFDO1lBQU9wRCxNQUFNa0QsR0FBRyxDQUFDLElBQUlsRCxNQUFNbUQsT0FBTyxDQUFDLE9BQU9QLFVBQVVSLENBQUMsQ0FBQ2dCLFFBQVEsQ0FBQztTQUFNO0lBQzNOO0FBRUEsTUFBTVAsT0FBT0osV0FBVyxLQUFLLDRCQUE0QjtBQUV6RCxNQUFNWSxVQUFVLENBQUNWLE1BQU1DO0lBQ3JCLE1BQU1VLE9BQU9oQixnQkFBZ0JNO0lBQzdCLE1BQU1XLE1BQU07UUFBRXJCLEdBQUdsQyxNQUFNd0QsUUFBUSxDQUFDRixJQUFJLENBQUMsRUFBRTtRQUFHbkIsR0FBR21CLElBQUksQ0FBQyxFQUFFLENBQUNsQyxLQUFLLENBQUM7UUFBSWdCLEdBQUdrQixJQUFJLENBQUMsRUFBRSxDQUFDbEMsS0FBSyxDQUFDO0lBQUc7SUFDbkYsTUFBTXFDLGNBQWNwRCxVQUFVcUQsYUFBYSxDQUFDLElBQUkvQixPQUFPZ0IsS0FBS3ZCLEtBQUssQ0FBQyxJQUFJLFFBQVFtQyxLQUFLQSxJQUFJckIsQ0FBQyxHQUFHLElBQUlxQixJQUFJckIsQ0FBQyxHQUFHLElBQUlxQixJQUFJckIsQ0FBQyxHQUFHLElBQUksNkVBQTZFO0lBQ3BNLE1BQU1KLFlBQVksT0FBTzJCLFlBQVlFLE1BQU0sQ0FBQyxPQUFPLE9BQU92QyxLQUFLLENBQUM7SUFDaEUsTUFBTVksYUFBYXpCLFVBQVV1QjtJQUM3QixNQUFNWixVQUFVRCxXQUFXLE9BQU9lLFdBQVdaLEtBQUssQ0FBQyxDQUFDO0lBQ3BELE9BQU9GO0FBQ1Q7QUFFQTBDLE9BQU9DLE9BQU8sR0FBRztJQUNmcEQ7SUFDQVE7SUFDQUQ7SUFDQTZCO0lBQ0FKO0lBQ0FZO0lBQ0FwQjtJQUNBSztBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL25vZGVfbW9kdWxlcy9ldGgtbGliL2xpYi9hY2NvdW50LmpzP2Q3MmQiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQnl0ZXMgPSByZXF1aXJlKFwiLi9ieXRlc1wiKTtcbmNvbnN0IE5hdCA9IHJlcXVpcmUoXCIuL25hdFwiKTtcbmNvbnN0IGVsbGlwdGljID0gcmVxdWlyZShcImVsbGlwdGljXCIpO1xuY29uc3QgcmxwID0gcmVxdWlyZShcIi4vcmxwXCIpO1xuY29uc3Qgc2VjcDI1NmsxID0gbmV3IGVsbGlwdGljLmVjKFwic2VjcDI1NmsxXCIpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5jb25zdCB7IGtlY2NhazI1Niwga2VjY2FrMjU2cyB9ID0gcmVxdWlyZShcIi4vaGFzaFwiKTtcblxuY29uc3QgY3JlYXRlID0gZW50cm9weSA9PiB7XG4gIGNvbnN0IGlubmVySGV4ID0ga2VjY2FrMjU2KEJ5dGVzLmNvbmNhdChCeXRlcy5yYW5kb20oMzIpLCBlbnRyb3B5IHx8IEJ5dGVzLnJhbmRvbSgzMikpKTtcbiAgY29uc3QgbWlkZGxlSGV4ID0gQnl0ZXMuY29uY2F0KEJ5dGVzLmNvbmNhdChCeXRlcy5yYW5kb20oMzIpLCBpbm5lckhleCksIEJ5dGVzLnJhbmRvbSgzMikpO1xuICBjb25zdCBvdXRlckhleCA9IGtlY2NhazI1NihtaWRkbGVIZXgpO1xuICByZXR1cm4gZnJvbVByaXZhdGUob3V0ZXJIZXgpO1xufTtcblxuY29uc3QgdG9DaGVja3N1bSA9IGFkZHJlc3MgPT4ge1xuICBjb25zdCBhZGRyZXNzSGFzaCA9IGtlY2NhazI1NnMoYWRkcmVzcy5zbGljZSgyKSk7XG4gIGxldCBjaGVja3N1bUFkZHJlc3MgPSBcIjB4XCI7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgNDA7IGkrKykgY2hlY2tzdW1BZGRyZXNzICs9IHBhcnNlSW50KGFkZHJlc3NIYXNoW2kgKyAyXSwgMTYpID4gNyA/IGFkZHJlc3NbaSArIDJdLnRvVXBwZXJDYXNlKCkgOiBhZGRyZXNzW2kgKyAyXTtcbiAgcmV0dXJuIGNoZWNrc3VtQWRkcmVzcztcbn07XG5cbmNvbnN0IGZyb21Qcml2YXRlID0gcHJpdmF0ZUtleSA9PiB7XG4gIGNvbnN0IGJ1ZmZlciA9IG5ldyBCdWZmZXIocHJpdmF0ZUtleS5zbGljZSgyKSwgXCJoZXhcIik7XG4gIGNvbnN0IGVjS2V5ID0gc2VjcDI1NmsxLmtleUZyb21Qcml2YXRlKGJ1ZmZlcik7XG4gIGNvbnN0IHB1YmxpY0tleSA9IFwiMHhcIiArIGVjS2V5LmdldFB1YmxpYyhmYWxzZSwgJ2hleCcpLnNsaWNlKDIpO1xuICBjb25zdCBwdWJsaWNIYXNoID0ga2VjY2FrMjU2KHB1YmxpY0tleSk7XG4gIGNvbnN0IGFkZHJlc3MgPSB0b0NoZWNrc3VtKFwiMHhcIiArIHB1YmxpY0hhc2guc2xpY2UoLTQwKSk7XG4gIHJldHVybiB7XG4gICAgYWRkcmVzczogYWRkcmVzcyxcbiAgICBwcml2YXRlS2V5OiBwcml2YXRlS2V5XG4gIH07XG59O1xuXG5jb25zdCBlbmNvZGVTaWduYXR1cmUgPSAoW3YsIHIsIHNdKSA9PiBCeXRlcy5mbGF0dGVuKFtyLCBzLCB2XSk7XG5cbmNvbnN0IGRlY29kZVNpZ25hdHVyZSA9IGhleCA9PiBbQnl0ZXMuc2xpY2UoNjQsIEJ5dGVzLmxlbmd0aChoZXgpLCBoZXgpLCBCeXRlcy5zbGljZSgwLCAzMiwgaGV4KSwgQnl0ZXMuc2xpY2UoMzIsIDY0LCBoZXgpXTtcblxuY29uc3QgbWFrZVNpZ25lciA9IGFkZFRvViA9PiAoaGFzaCwgcHJpdmF0ZUtleSkgPT4ge1xuICBjb25zdCBzaWduYXR1cmUgPSBzZWNwMjU2azEua2V5RnJvbVByaXZhdGUobmV3IEJ1ZmZlcihwcml2YXRlS2V5LnNsaWNlKDIpLCBcImhleFwiKSkuc2lnbihuZXcgQnVmZmVyKGhhc2guc2xpY2UoMiksIFwiaGV4XCIpLCB7IGNhbm9uaWNhbDogdHJ1ZSB9KTtcbiAgcmV0dXJuIGVuY29kZVNpZ25hdHVyZShbTmF0LmZyb21TdHJpbmcoQnl0ZXMuZnJvbU51bWJlcihhZGRUb1YgKyBzaWduYXR1cmUucmVjb3ZlcnlQYXJhbSkpLCBCeXRlcy5wYWQoMzIsIEJ5dGVzLmZyb21OYXQoXCIweFwiICsgc2lnbmF0dXJlLnIudG9TdHJpbmcoMTYpKSksIEJ5dGVzLnBhZCgzMiwgQnl0ZXMuZnJvbU5hdChcIjB4XCIgKyBzaWduYXR1cmUucy50b1N0cmluZygxNikpKV0pO1xufTtcblxuY29uc3Qgc2lnbiA9IG1ha2VTaWduZXIoMjcpOyAvLyB2PTI3fDI4IGluc3RlYWQgb2YgMHwxLi4uXG5cbmNvbnN0IHJlY292ZXIgPSAoaGFzaCwgc2lnbmF0dXJlKSA9PiB7XG4gIGNvbnN0IHZhbHMgPSBkZWNvZGVTaWduYXR1cmUoc2lnbmF0dXJlKTtcbiAgY29uc3QgdnJzID0geyB2OiBCeXRlcy50b051bWJlcih2YWxzWzBdKSwgcjogdmFsc1sxXS5zbGljZSgyKSwgczogdmFsc1syXS5zbGljZSgyKSB9O1xuICBjb25zdCBlY1B1YmxpY0tleSA9IHNlY3AyNTZrMS5yZWNvdmVyUHViS2V5KG5ldyBCdWZmZXIoaGFzaC5zbGljZSgyKSwgXCJoZXhcIiksIHZycywgdnJzLnYgPCAyID8gdnJzLnYgOiAxIC0gdnJzLnYgJSAyKTsgLy8gYmVjYXVzZSBvZGQgdmFscyBtZWFuIHY9MC4uLiBzYWRseSB0aGF0IG1lYW5zIHY9MCBtZWFucyB2PTEuLi4gSSBoYXRlIHRoYXRcbiAgY29uc3QgcHVibGljS2V5ID0gXCIweFwiICsgZWNQdWJsaWNLZXkuZW5jb2RlKFwiaGV4XCIsIGZhbHNlKS5zbGljZSgyKTtcbiAgY29uc3QgcHVibGljSGFzaCA9IGtlY2NhazI1NihwdWJsaWNLZXkpO1xuICBjb25zdCBhZGRyZXNzID0gdG9DaGVja3N1bShcIjB4XCIgKyBwdWJsaWNIYXNoLnNsaWNlKC00MCkpO1xuICByZXR1cm4gYWRkcmVzcztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjcmVhdGUsXG4gIHRvQ2hlY2tzdW0sXG4gIGZyb21Qcml2YXRlLFxuICBzaWduLFxuICBtYWtlU2lnbmVyLFxuICByZWNvdmVyLFxuICBlbmNvZGVTaWduYXR1cmUsXG4gIGRlY29kZVNpZ25hdHVyZVxufTsiXSwibmFtZXMiOlsiQnl0ZXMiLCJyZXF1aXJlIiwiTmF0IiwiZWxsaXB0aWMiLCJybHAiLCJzZWNwMjU2azEiLCJlYyIsImtlY2NhazI1NiIsImtlY2NhazI1NnMiLCJjcmVhdGUiLCJlbnRyb3B5IiwiaW5uZXJIZXgiLCJjb25jYXQiLCJyYW5kb20iLCJtaWRkbGVIZXgiLCJvdXRlckhleCIsImZyb21Qcml2YXRlIiwidG9DaGVja3N1bSIsImFkZHJlc3MiLCJhZGRyZXNzSGFzaCIsInNsaWNlIiwiY2hlY2tzdW1BZGRyZXNzIiwiaSIsInBhcnNlSW50IiwidG9VcHBlckNhc2UiLCJwcml2YXRlS2V5IiwiYnVmZmVyIiwiQnVmZmVyIiwiZWNLZXkiLCJrZXlGcm9tUHJpdmF0ZSIsInB1YmxpY0tleSIsImdldFB1YmxpYyIsInB1YmxpY0hhc2giLCJlbmNvZGVTaWduYXR1cmUiLCJ2IiwiciIsInMiLCJmbGF0dGVuIiwiZGVjb2RlU2lnbmF0dXJlIiwiaGV4IiwibGVuZ3RoIiwibWFrZVNpZ25lciIsImFkZFRvViIsImhhc2giLCJzaWduYXR1cmUiLCJzaWduIiwiY2Fub25pY2FsIiwiZnJvbVN0cmluZyIsImZyb21OdW1iZXIiLCJyZWNvdmVyeVBhcmFtIiwicGFkIiwiZnJvbU5hdCIsInRvU3RyaW5nIiwicmVjb3ZlciIsInZhbHMiLCJ2cnMiLCJ0b051bWJlciIsImVjUHVibGljS2V5IiwicmVjb3ZlclB1YktleSIsImVuY29kZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/node_modules/eth-lib/lib/account.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/node_modules/eth-lib/lib/array.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/node_modules/eth-lib/lib/array.js ***!
  \***************************************************************************/
/***/ ((module) => {

eval("const generate = (num, fn)=>{\n    let a = [];\n    for(var i = 0; i < num; ++i)a.push(fn(i));\n    return a;\n};\nconst replicate = (num, val)=>generate(num, ()=>val);\nconst concat = (a, b)=>a.concat(b);\nconst flatten = (a)=>{\n    let r = [];\n    for(let j = 0, J = a.length; j < J; ++j)for(let i = 0, I = a[j].length; i < I; ++i)r.push(a[j][i]);\n    return r;\n};\nconst chunksOf = (n, a)=>{\n    let b = [];\n    for(let i = 0, l = a.length; i < l; i += n)b.push(a.slice(i, i + n));\n    return b;\n};\nmodule.exports = {\n    generate,\n    replicate,\n    concat,\n    flatten,\n    chunksOf\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AYWxjaC9hbGNoZW15LXdlYjMvbm9kZV9tb2R1bGVzL2V0aC1saWIvbGliL2FycmF5LmpzPzI3ZGIiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZ2VuZXJhdGUgPSAobnVtLCBmbikgPT4ge1xuICBsZXQgYSA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG51bTsgKytpKSBhLnB1c2goZm4oaSkpO1xuICByZXR1cm4gYTtcbn07XG5cbmNvbnN0IHJlcGxpY2F0ZSA9IChudW0sIHZhbCkgPT4gZ2VuZXJhdGUobnVtLCAoKSA9PiB2YWwpO1xuXG5jb25zdCBjb25jYXQgPSAoYSwgYikgPT4gYS5jb25jYXQoYik7XG5cbmNvbnN0IGZsYXR0ZW4gPSBhID0+IHtcbiAgbGV0IHIgPSBbXTtcbiAgZm9yIChsZXQgaiA9IDAsIEogPSBhLmxlbmd0aDsgaiA8IEo7ICsraikgZm9yIChsZXQgaSA9IDAsIEkgPSBhW2pdLmxlbmd0aDsgaSA8IEk7ICsraSkgci5wdXNoKGFbal1baV0pO1xuICByZXR1cm4gcjtcbn07XG5cbmNvbnN0IGNodW5rc09mID0gKG4sIGEpID0+IHtcbiAgbGV0IGIgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBhLmxlbmd0aDsgaSA8IGw7IGkgKz0gbikgYi5wdXNoKGEuc2xpY2UoaSwgaSArIG4pKTtcbiAgcmV0dXJuIGI7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2VuZXJhdGUsXG4gIHJlcGxpY2F0ZSxcbiAgY29uY2F0LFxuICBmbGF0dGVuLFxuICBjaHVua3NPZlxufTsiXSwibmFtZXMiOlsiZ2VuZXJhdGUiLCJudW0iLCJmbiIsImEiLCJpIiwicHVzaCIsInJlcGxpY2F0ZSIsInZhbCIsImNvbmNhdCIsImIiLCJmbGF0dGVuIiwiciIsImoiLCJKIiwibGVuZ3RoIiwiSSIsImNodW5rc09mIiwibiIsImwiLCJzbGljZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLFdBQVcsQ0FBQ0MsS0FBS0M7SUFDckIsSUFBSUMsSUFBSSxFQUFFO0lBQ1YsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlILEtBQUssRUFBRUcsRUFBR0QsRUFBRUUsSUFBSSxDQUFDSCxHQUFHRTtJQUN4QyxPQUFPRDtBQUNUO0FBRUEsTUFBTUcsWUFBWSxDQUFDTCxLQUFLTSxNQUFRUCxTQUFTQyxLQUFLLElBQU1NO0FBRXBELE1BQU1DLFNBQVMsQ0FBQ0wsR0FBR00sSUFBTU4sRUFBRUssTUFBTSxDQUFDQztBQUVsQyxNQUFNQyxVQUFVUCxDQUFBQTtJQUNkLElBQUlRLElBQUksRUFBRTtJQUNWLElBQUssSUFBSUMsSUFBSSxHQUFHQyxJQUFJVixFQUFFVyxNQUFNLEVBQUVGLElBQUlDLEdBQUcsRUFBRUQsRUFBRyxJQUFLLElBQUlSLElBQUksR0FBR1csSUFBSVosQ0FBQyxDQUFDUyxFQUFFLENBQUNFLE1BQU0sRUFBRVYsSUFBSVcsR0FBRyxFQUFFWCxFQUFHTyxFQUFFTixJQUFJLENBQUNGLENBQUMsQ0FBQ1MsRUFBRSxDQUFDUixFQUFFO0lBQ3JHLE9BQU9PO0FBQ1Q7QUFFQSxNQUFNSyxXQUFXLENBQUNDLEdBQUdkO0lBQ25CLElBQUlNLElBQUksRUFBRTtJQUNWLElBQUssSUFBSUwsSUFBSSxHQUFHYyxJQUFJZixFQUFFVyxNQUFNLEVBQUVWLElBQUljLEdBQUdkLEtBQUthLEVBQUdSLEVBQUVKLElBQUksQ0FBQ0YsRUFBRWdCLEtBQUssQ0FBQ2YsR0FBR0EsSUFBSWE7SUFDbkUsT0FBT1I7QUFDVDtBQUVBVyxPQUFPQyxPQUFPLEdBQUc7SUFDZnJCO0lBQ0FNO0lBQ0FFO0lBQ0FFO0lBQ0FNO0FBQ0YiLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL25vZGVfbW9kdWxlcy9ldGgtbGliL2xpYi9hcnJheS5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/node_modules/eth-lib/lib/array.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/node_modules/eth-lib/lib/bytes.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/node_modules/eth-lib/lib/bytes.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const A = __webpack_require__(/*! ./array.js */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/eth-lib/lib/array.js\");\nconst at = (bytes, index)=>parseInt(bytes.slice(index * 2 + 2, index * 2 + 4), 16);\nconst random = (bytes)=>{\n    let rnd;\n    if (false) {}\n    else if (true) rnd = (__webpack_require__(/*! crypto */ \"crypto\").randomBytes)(bytes);\n    else {}\n    let hex = \"0x\";\n    for(let i = 0; i < bytes; ++i)hex += (\"00\" + rnd[i].toString(16)).slice(-2);\n    return hex;\n};\nconst length = (a)=>(a.length - 2) / 2;\nconst flatten = (a)=>\"0x\" + a.reduce((r, s)=>r + s.slice(2), \"\");\nconst slice = (i, j, bs)=>\"0x\" + bs.slice(i * 2 + 2, j * 2 + 2);\nconst reverse = (hex)=>{\n    let rev = \"0x\";\n    for(let i = 0, l = length(hex); i < l; ++i){\n        rev += hex.slice((l - i) * 2, (l - i + 1) * 2);\n    }\n    return rev;\n};\nconst pad = (l, hex)=>hex.length === l * 2 + 2 ? hex : pad(l, \"0x\" + \"0\" + hex.slice(2));\nconst padRight = (l, hex)=>hex.length === l * 2 + 2 ? hex : padRight(l, hex + \"0\");\nconst toArray = (hex)=>{\n    let arr = [];\n    for(let i = 2, l = hex.length; i < l; i += 2)arr.push(parseInt(hex.slice(i, i + 2), 16));\n    return arr;\n};\nconst fromArray = (arr)=>{\n    let hex = \"0x\";\n    for(let i = 0, l = arr.length; i < l; ++i){\n        let b = arr[i];\n        hex += (b < 16 ? \"0\" : \"\") + b.toString(16);\n    }\n    return hex;\n};\nconst toUint8Array = (hex)=>new Uint8Array(toArray(hex));\nconst fromUint8Array = (arr)=>fromArray([].slice.call(arr, 0));\nconst fromNumber = (num)=>{\n    let hex = num.toString(16);\n    return hex.length % 2 === 0 ? \"0x\" + hex : \"0x0\" + hex;\n};\nconst toNumber = (hex)=>parseInt(hex.slice(2), 16);\nconst concat = (a, b)=>a.concat(b.slice(2));\nconst fromNat = (bn)=>bn === \"0x0\" ? \"0x\" : bn.length % 2 === 0 ? bn : \"0x0\" + bn.slice(2);\nconst toNat = (bn)=>bn[2] === \"0\" ? \"0x\" + bn.slice(3) : bn;\nconst fromAscii = (ascii)=>{\n    let hex = \"0x\";\n    for(let i = 0; i < ascii.length; ++i)hex += (\"00\" + ascii.charCodeAt(i).toString(16)).slice(-2);\n    return hex;\n};\nconst toAscii = (hex)=>{\n    let ascii = \"\";\n    for(let i = 2; i < hex.length; i += 2)ascii += String.fromCharCode(parseInt(hex.slice(i, i + 2), 16));\n    return ascii;\n};\n// From https://gist.github.com/pascaldekloe/62546103a1576803dade9269ccf76330\nconst fromString = (s)=>{\n    const makeByte = (uint8)=>{\n        const b = uint8.toString(16);\n        return b.length < 2 ? \"0\" + b : b;\n    };\n    let bytes = \"0x\";\n    for(let ci = 0; ci != s.length; ci++){\n        let c = s.charCodeAt(ci);\n        if (c < 128) {\n            bytes += makeByte(c);\n            continue;\n        }\n        if (c < 2048) {\n            bytes += makeByte(c >> 6 | 192);\n        } else {\n            if (c > 0xd7ff && c < 0xdc00) {\n                if (++ci == s.length) return null;\n                let c2 = s.charCodeAt(ci);\n                if (c2 < 0xdc00 || c2 > 0xdfff) return null;\n                c = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\n                bytes += makeByte(c >> 18 | 240);\n                bytes += makeByte(c >> 12 & 63 | 128);\n            } else {\n                // c <= 0xffff\n                bytes += makeByte(c >> 12 | 224);\n            }\n            bytes += makeByte(c >> 6 & 63 | 128);\n        }\n        bytes += makeByte(c & 63 | 128);\n    }\n    return bytes;\n};\nconst toString = (bytes)=>{\n    let s = \"\";\n    let i = 0;\n    let l = length(bytes);\n    while(i < l){\n        let c = at(bytes, i++);\n        if (c > 127) {\n            if (c > 191 && c < 224) {\n                if (i >= l) return null;\n                c = (c & 31) << 6 | at(bytes, i) & 63;\n            } else if (c > 223 && c < 240) {\n                if (i + 1 >= l) return null;\n                c = (c & 15) << 12 | (at(bytes, i) & 63) << 6 | at(bytes, ++i) & 63;\n            } else if (c > 239 && c < 248) {\n                if (i + 2 >= l) return null;\n                c = (c & 7) << 18 | (at(bytes, i) & 63) << 12 | (at(bytes, ++i) & 63) << 6 | at(bytes, ++i) & 63;\n            } else return null;\n            ++i;\n        }\n        if (c <= 0xffff) s += String.fromCharCode(c);\n        else if (c <= 0x10ffff) {\n            c -= 0x10000;\n            s += String.fromCharCode(c >> 10 | 0xd800);\n            s += String.fromCharCode(c & 0x3FF | 0xdc00);\n        } else return null;\n    }\n    return s;\n};\nmodule.exports = {\n    random,\n    length,\n    concat,\n    flatten,\n    slice,\n    reverse,\n    pad,\n    padRight,\n    fromAscii,\n    toAscii,\n    fromString,\n    toString,\n    fromNumber,\n    toNumber,\n    fromNat,\n    toNat,\n    fromArray,\n    toArray,\n    fromUint8Array,\n    toUint8Array\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL25vZGVfbW9kdWxlcy9ldGgtbGliL2xpYi9ieXRlcy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxJQUFJQyxtQkFBT0EsQ0FBQyw2RkFBWTtBQUU5QixNQUFNQyxLQUFLLENBQUNDLE9BQU9DLFFBQVVDLFNBQVNGLE1BQU1HLEtBQUssQ0FBQ0YsUUFBUSxJQUFJLEdBQUdBLFFBQVEsSUFBSSxJQUFJO0FBRWpGLE1BQU1HLFNBQVNKLENBQUFBO0lBQ2IsSUFBSUs7SUFDSixJQUFJLEtBQStFLEVBQUVBLEVBQTJETDtTQUFLLElBQUksSUFBOEIsRUFBRUssTUFBTVAseURBQWtDLENBQUNFO1NBQVksRUFBMkM7SUFDelIsSUFBSVcsTUFBTTtJQUNWLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJWixPQUFPLEVBQUVZLEVBQUdELE9BQU8sQ0FBQyxPQUFPTixHQUFHLENBQUNPLEVBQUUsQ0FBQ0MsUUFBUSxDQUFDLEdBQUUsRUFBR1YsS0FBSyxDQUFDLENBQUM7SUFDM0UsT0FBT1E7QUFDVDtBQUVBLE1BQU1HLFNBQVNDLENBQUFBLElBQUssQ0FBQ0EsRUFBRUQsTUFBTSxHQUFHLEtBQUs7QUFFckMsTUFBTUUsVUFBVUQsQ0FBQUEsSUFBSyxPQUFPQSxFQUFFRSxNQUFNLENBQUMsQ0FBQ0MsR0FBR0MsSUFBTUQsSUFBSUMsRUFBRWhCLEtBQUssQ0FBQyxJQUFJO0FBRS9ELE1BQU1BLFFBQVEsQ0FBQ1MsR0FBR1EsR0FBR0MsS0FBTyxPQUFPQSxHQUFHbEIsS0FBSyxDQUFDUyxJQUFJLElBQUksR0FBR1EsSUFBSSxJQUFJO0FBRS9ELE1BQU1FLFVBQVVYLENBQUFBO0lBQ2QsSUFBSVksTUFBTTtJQUNWLElBQUssSUFBSVgsSUFBSSxHQUFHWSxJQUFJVixPQUFPSCxNQUFNQyxJQUFJWSxHQUFHLEVBQUVaLEVBQUc7UUFDM0NXLE9BQU9aLElBQUlSLEtBQUssQ0FBQyxDQUFDcUIsSUFBSVosQ0FB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LENBQUNBLElBQUksRUFBQyxLQUFNLElBQUlyRCxHQUFHQyxPQUFPWSxLQUFLO1lBQ3JDLE9BQU8sSUFBSXdDLElBQUksT0FBT0EsSUFBSSxLQUFLO2dCQUM3QixJQUFJeEMsSUFBSSxLQUFLWSxHQUFHLE9BQU87Z0JBQ3ZCNEIsSUFBSSxDQUFDQSxJQUFJLEVBQUMsS0FBTSxLQUFLLENBQUNyRCxHQUFHQyxPQUFPWSxLQUFLLEVBQUMsS0FBTSxJQUFJYixHQUFHQyxPQUFPLEVBQUVZLEtBQUs7WUFDbkUsT0FBTyxJQUFJd0MsSUFBSSxPQUFPQSxJQUFJLEtBQUs7Z0JBQzdCLElBQUl4QyxJQUFJLEtBQUtZLEdBQUcsT0FBTztnQkFDdkI0QixJQUFJLENBQUNBLElBQUksTUFBTSxLQUFLLENBQUNyRCxHQUFHQyxPQUFPWSxLQUFLLEVBQUMsS0FBTSxLQUFLLENBQUNiLEdBQUdDLE9BQU8sRUFBRVksS0FBSyxFQUFDLEtBQU0sSUFBSWIsR0FBR0MsT0FBTyxFQUFFWSxLQUFLO1lBQ2hHLE9BQU8sT0FBTztZQUNkLEVBQUVBO1FBQ0o7UUFDQSxJQUFJd0MsS0FBSyxRQUFRakMsS0FBSzJCLE9BQU9DLFlBQVksQ0FBQ0s7YUFBUSxJQUFJQSxLQUFLLFVBQVU7WUFDbkVBLEtBQUs7WUFDTGpDLEtBQUsyQixPQUFPQyxZQUFZLENBQUNLLEtBQUssS0FBSztZQUNuQ2pDLEtBQUsyQixPQUFPQyxZQUFZLENBQUNLLElBQUksUUFBUTtRQUN2QyxPQUFPLE9BQU87SUFDaEI7SUFDQSxPQUFPakM7QUFDVDtBQUVBbUMsT0FBT0MsT0FBTyxHQUFHO0lBQ2ZuRDtJQUNBVTtJQUNBd0I7SUFDQXRCO0lBQ0FiO0lBQ0FtQjtJQUNBRztJQUNBQztJQUNBZ0I7SUFDQUc7SUFDQUc7SUFDQW5DO0lBQ0FzQjtJQUNBRTtJQUNBRTtJQUNBRTtJQUNBWDtJQUNBSDtJQUNBTTtJQUNBRDtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL25vZGVfbW9kdWxlcy9ldGgtbGliL2xpYi9ieXRlcy5qcz8wMGY5Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEEgPSByZXF1aXJlKFwiLi9hcnJheS5qc1wiKTtcblxuY29uc3QgYXQgPSAoYnl0ZXMsIGluZGV4KSA9PiBwYXJzZUludChieXRlcy5zbGljZShpbmRleCAqIDIgKyAyLCBpbmRleCAqIDIgKyA0KSwgMTYpO1xuXG5jb25zdCByYW5kb20gPSBieXRlcyA9PiB7XG4gIGxldCBybmQ7XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5jcnlwdG8gJiYgd2luZG93LmNyeXB0by5nZXRSYW5kb21WYWx1ZXMpIHJuZCA9IHdpbmRvdy5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50OEFycmF5KGJ5dGVzKSk7ZWxzZSBpZiAodHlwZW9mIHJlcXVpcmUgIT09IFwidW5kZWZpbmVkXCIpIHJuZCA9IHJlcXVpcmUoXCJjXCIgKyBcInJ5cHRvXCIpLnJhbmRvbUJ5dGVzKGJ5dGVzKTtlbHNlIHRocm93IFwiU2FmZSByYW5kb20gbnVtYmVycyBub3QgYXZhaWxhYmxlLlwiO1xuICBsZXQgaGV4ID0gXCIweFwiO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVzOyArK2kpIGhleCArPSAoXCIwMFwiICsgcm5kW2ldLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTIpO1xuICByZXR1cm4gaGV4O1xufTtcblxuY29uc3QgbGVuZ3RoID0gYSA9PiAoYS5sZW5ndGggLSAyKSAvIDI7XG5cbmNvbnN0IGZsYXR0ZW4gPSBhID0+IFwiMHhcIiArIGEucmVkdWNlKChyLCBzKSA9PiByICsgcy5zbGljZSgyKSwgXCJcIik7XG5cbmNvbnN0IHNsaWNlID0gKGksIGosIGJzKSA9PiBcIjB4XCIgKyBicy5zbGljZShpICogMiArIDIsIGogKiAyICsgMik7XG5cbmNvbnN0IHJldmVyc2UgPSBoZXggPT4ge1xuICBsZXQgcmV2ID0gXCIweFwiO1xuICBmb3IgKGxldCBpID0gMCwgbCA9IGxlbmd0aChoZXgpOyBpIDwgbDsgKytpKSB7XG4gICAgcmV2ICs9IGhleC5zbGljZSgobCAtIGkpICogMiwgKGwgLSBpICsgMSkgKiAyKTtcbiAgfVxuICByZXR1cm4gcmV2O1xufTtcblxuY29uc3QgcGFkID0gKGwsIGhleCkgPT4gaGV4Lmxlbmd0aCA9PT0gbCAqIDIgKyAyID8gaGV4IDogcGFkKGwsIFwiMHhcIiArIFwiMFwiICsgaGV4LnNsaWNlKDIpKTtcblxuY29uc3QgcGFkUmlnaHQgPSAobCwgaGV4KSA9PiBoZXgubGVuZ3RoID09PSBsICogMiArIDIgPyBoZXggOiBwYWRSaWdodChsLCBoZXggKyBcIjBcIik7XG5cbmNvbnN0IHRvQXJyYXkgPSBoZXggPT4ge1xuICBsZXQgYXJyID0gW107XG4gIGZvciAobGV0IGkgPSAyLCBsID0gaGV4Lmxlbmd0aDsgaSA8IGw7IGkgKz0gMikgYXJyLnB1c2gocGFyc2VJbnQoaGV4LnNsaWNlKGksIGkgKyAyKSwgMTYpKTtcbiAgcmV0dXJuIGFycjtcbn07XG5cbmNvbnN0IGZyb21BcnJheSA9IGFyciA9PiB7XG4gIGxldCBoZXggPSBcIjB4XCI7XG4gIGZvciAobGV0IGkgPSAwLCBsID0gYXJyLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgIGxldCBiID0gYXJyW2ldO1xuICAgIGhleCArPSAoYiA8IDE2ID8gXCIwXCIgOiBcIlwiKSArIGIudG9TdHJpbmcoMTYpO1xuICB9XG4gIHJldHVybiBoZXg7XG59O1xuXG5jb25zdCB0b1VpbnQ4QXJyYXkgPSBoZXggPT4gbmV3IFVpbnQ4QXJyYXkodG9BcnJheShoZXgpKTtcblxuY29uc3QgZnJvbVVpbnQ4QXJyYXkgPSBhcnIgPT4gZnJvbUFycmF5KFtdLnNsaWNlLmNhbGwoYXJyLCAwKSk7XG5cbmNvbnN0IGZyb21OdW1iZXIgPSBudW0gPT4ge1xuICBsZXQgaGV4ID0gbnVtLnRvU3RyaW5nKDE2KTtcbiAgcmV0dXJuIGhleC5sZW5ndGggJSAyID09PSAwID8gXCIweFwiICsgaGV4IDogXCIweDBcIiArIGhleDtcbn07XG5cbmNvbnN0IHRvTnVtYmVyID0gaGV4ID0+IHBhcnNlSW50KGhleC5zbGljZSgyKSwgMTYpO1xuXG5jb25zdCBjb25jYXQgPSAoYSwgYikgPT4gYS5jb25jYXQoYi5zbGljZSgyKSk7XG5cbmNvbnN0IGZyb21OYXQgPSBibiA9PiBibiA9PT0gXCIweDBcIiA/IFwiMHhcIiA6IGJuLmxlbmd0aCAlIDIgPT09IDAgPyBibiA6IFwiMHgwXCIgKyBibi5zbGljZSgyKTtcblxuY29uc3QgdG9OYXQgPSBibiA9PiBiblsyXSA9PT0gXCIwXCIgPyBcIjB4XCIgKyBibi5zbGljZSgzKSA6IGJuO1xuXG5jb25zdCBmcm9tQXNjaWkgPSBhc2NpaSA9PiB7XG4gIGxldCBoZXggPSBcIjB4XCI7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXNjaWkubGVuZ3RoOyArK2kpIGhleCArPSAoXCIwMFwiICsgYXNjaWkuY2hhckNvZGVBdChpKS50b1N0cmluZygxNikpLnNsaWNlKC0yKTtcbiAgcmV0dXJuIGhleDtcbn07XG5cbmNvbnN0IHRvQXNjaWkgPSBoZXggPT4ge1xuICBsZXQgYXNjaWkgPSBcIlwiO1xuICBmb3IgKGxldCBpID0gMjsgaSA8IGhleC5sZW5ndGg7IGkgKz0gMikgYXNjaWkgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShwYXJzZUludChoZXguc2xpY2UoaSwgaSArIDIpLCAxNikpO1xuICByZXR1cm4gYXNjaWk7XG59O1xuXG4vLyBGcm9tIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL3Bhc2NhbGRla2xvZS82MjU0NjEwM2ExNTc2ODAzZGFkZTkyNjljY2Y3NjMzMFxuY29uc3QgZnJvbVN0cmluZyA9IHMgPT4ge1xuICBjb25zdCBtYWtlQnl0ZSA9IHVpbnQ4ID0+IHtcbiAgICBjb25zdCBiID0gdWludDgudG9TdHJpbmcoMTYpO1xuICAgIHJldHVybiBiLmxlbmd0aCA8IDIgPyBcIjBcIiArIGIgOiBiO1xuICB9O1xuICBsZXQgYnl0ZXMgPSBcIjB4XCI7XG4gIGZvciAobGV0IGNpID0gMDsgY2kgIT0gcy5sZW5ndGg7IGNpKyspIHtcbiAgICBsZXQgYyA9IHMuY2hhckNvZGVBdChjaSk7XG4gICAgaWYgKGMgPCAxMjgpIHtcbiAgICAgIGJ5dGVzICs9IG1ha2VCeXRlKGMpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChjIDwgMjA0OCkge1xuICAgICAgYnl0ZXMgKz0gbWFrZUJ5dGUoYyA+PiA2IHwgMTkyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGMgPiAweGQ3ZmYgJiYgYyA8IDB4ZGMwMCkge1xuICAgICAgICBpZiAoKytjaSA9PSBzLmxlbmd0aCkgcmV0dXJuIG51bGw7XG4gICAgICAgIGxldCBjMiA9IHMuY2hhckNvZGVBdChjaSk7XG4gICAgICAgIGlmIChjMiA8IDB4ZGMwMCB8fCBjMiA+IDB4ZGZmZikgcmV0dXJuIG51bGw7XG4gICAgICAgIGMgPSAweDEwMDAwICsgKChjICYgMHgwM2ZmKSA8PCAxMCkgKyAoYzIgJiAweDAzZmYpO1xuICAgICAgICBieXRlcyArPSBtYWtlQnl0ZShjID4+IDE4IHwgMjQwKTtcbiAgICAgICAgYnl0ZXMgKz0gbWFrZUJ5dGUoYyA+PiAxMiAmIDYzIHwgMTI4KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGMgPD0gMHhmZmZmXG4gICAgICAgIGJ5dGVzICs9IG1ha2VCeXRlKGMgPj4gMTIgfCAyMjQpO1xuICAgICAgfVxuICAgICAgYnl0ZXMgKz0gbWFrZUJ5dGUoYyA+PiA2ICYgNjMgfCAxMjgpO1xuICAgIH1cbiAgICBieXRlcyArPSBtYWtlQnl0ZShjICYgNjMgfCAxMjgpO1xuICB9XG4gIHJldHVybiBieXRlcztcbn07XG5cbmNvbnN0IHRvU3RyaW5nID0gYnl0ZXMgPT4ge1xuICBsZXQgcyA9ICcnO1xuICBsZXQgaSA9IDA7XG4gIGxldCBsID0gbGVuZ3RoKGJ5dGVzKTtcbiAgd2hpbGUgKGkgPCBsKSB7XG4gICAgbGV0IGMgPSBhdChieXRlcywgaSsrKTtcbiAgICBpZiAoYyA+IDEyNykge1xuICAgICAgaWYgKGMgPiAxOTEgJiYgYyA8IDIyNCkge1xuICAgICAgICBpZiAoaSA+PSBsKSByZXR1cm4gbnVsbDtcbiAgICAgICAgYyA9IChjICYgMzEpIDw8IDYgfCBhdChieXRlcywgaSkgJiA2MztcbiAgICAgIH0gZWxzZSBpZiAoYyA+IDIyMyAmJiBjIDwgMjQwKSB7XG4gICAgICAgIGlmIChpICsgMSA+PSBsKSByZXR1cm4gbnVsbDtcbiAgICAgICAgYyA9IChjICYgMTUpIDw8IDEyIHwgKGF0KGJ5dGVzLCBpKSAmIDYzKSA8PCA2IHwgYXQoYnl0ZXMsICsraSkgJiA2MztcbiAgICAgIH0gZWxzZSBpZiAoYyA+IDIzOSAmJiBjIDwgMjQ4KSB7XG4gICAgICAgIGlmIChpICsgMiA+PSBsKSByZXR1cm4gbnVsbDtcbiAgICAgICAgYyA9IChjICYgNykgPDwgMTggfCAoYXQoYnl0ZXMsIGkpICYgNjMpIDw8IDEyIHwgKGF0KGJ5dGVzLCArK2kpICYgNjMpIDw8IDYgfCBhdChieXRlcywgKytpKSAmIDYzO1xuICAgICAgfSBlbHNlIHJldHVybiBudWxsO1xuICAgICAgKytpO1xuICAgIH1cbiAgICBpZiAoYyA8PSAweGZmZmYpIHMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjKTtlbHNlIGlmIChjIDw9IDB4MTBmZmZmKSB7XG4gICAgICBjIC09IDB4MTAwMDA7XG4gICAgICBzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYyA+PiAxMCB8IDB4ZDgwMCk7XG4gICAgICBzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYyAmIDB4M0ZGIHwgMHhkYzAwKTtcbiAgICB9IGVsc2UgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIHM7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgcmFuZG9tLFxuICBsZW5ndGgsXG4gIGNvbmNhdCxcbiAgZmxhdHRlbixcbiAgc2xpY2UsXG4gIHJldmVyc2UsXG4gIHBhZCxcbiAgcGFkUmlnaHQsXG4gIGZyb21Bc2NpaSxcbiAgdG9Bc2NpaSxcbiAgZnJvbVN0cmluZyxcbiAgdG9TdHJpbmcsXG4gIGZyb21OdW1iZXIsXG4gIHRvTnVtYmVyLFxuICBmcm9tTmF0LFxuICB0b05hdCxcbiAgZnJvbUFycmF5LFxuICB0b0FycmF5LFxuICBmcm9tVWludDhBcnJheSxcbiAgdG9VaW50OEFycmF5XG59OyJdLCJuYW1lcyI6WyJBIiwicmVxdWlyZSIsImF0IiwiYnl0ZXMiLCJpbmRleCIsInBhcnNlSW50Iiwic2xpY2UiLCJyYW5kb20iLCJybmQiLCJ3aW5kb3ciLCJjcnlwdG8iLCJnZXRSYW5kb21WYWx1ZXMiLCJVaW50OEFycmF5IiwicmFuZG9tQnl0ZXMiLCJoZXgiLCJpIiwidG9TdHJpbmciLCJsZW5ndGgiLCJhIiwiZmxhdHRlbiIsInJlZHVjZSIsInIiLCJzIiwiaiIsImJzIiwicmV2ZXJzZSIsInJldiIsImwiLCJwYWQiLCJwYWRSaWdodCIsInRvQXJyYXkiLCJhcnIiLCJwdXNoIiwiZnJvbUFycmF5IiwiYiIsInRvVWludDhBcnJheSIsImZyb21VaW50OEFycmF5IiwiY2FsbCIsImZyb21OdW1iZXIiLCJudW0iLCJ0b051bWJlciIsImNvbmNhdCIsImZyb21OYXQiLCJibiIsInRvTmF0IiwiZnJvbUFzY2lpIiwiYXNjaWkiLCJjaGFyQ29kZUF0IiwidG9Bc2NpaSIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImZyb21TdHJpbmciLCJtYWtlQnl0ZSIsInVpbnQ4IiwiY2kiLCJjIiwiYzIiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/node_modules/eth-lib/lib/bytes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/node_modules/eth-lib/lib/hash.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/node_modules/eth-lib/lib/hash.js ***!
  \**************************************************************************/
/***/ ((module) => {

eval("// This was ported from https://github.com/emn178/js-sha3, with some minor\n// modifications and pruning. It is licensed under MIT:\n//\n// Copyright 2015-2016 Chen, Yi-Cyuan\n//  \n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n// \n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nconst HEX_CHARS = \"0123456789abcdef\".split(\"\");\nconst KECCAK_PADDING = [\n    1,\n    256,\n    65536,\n    16777216\n];\nconst SHIFT = [\n    0,\n    8,\n    16,\n    24\n];\nconst RC = [\n    1,\n    0,\n    32898,\n    0,\n    32906,\n    2147483648,\n    2147516416,\n    2147483648,\n    32907,\n    0,\n    2147483649,\n    0,\n    2147516545,\n    2147483648,\n    32777,\n    2147483648,\n    138,\n    0,\n    136,\n    0,\n    2147516425,\n    0,\n    2147483658,\n    0,\n    2147516555,\n    0,\n    139,\n    2147483648,\n    32905,\n    2147483648,\n    32771,\n    2147483648,\n    32770,\n    2147483648,\n    128,\n    2147483648,\n    32778,\n    0,\n    2147483658,\n    2147483648,\n    2147516545,\n    2147483648,\n    32896,\n    2147483648,\n    2147483649,\n    0,\n    2147516424,\n    2147483648\n];\nconst Keccak = (bits)=>({\n        blocks: [],\n        reset: true,\n        block: 0,\n        start: 0,\n        blockCount: 1600 - (bits << 1) >> 5,\n        outputBlocks: bits >> 5,\n        s: ((s)=>[].concat(s, s, s, s, s))([\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0\n        ])\n    });\nconst update = (state, message)=>{\n    var length = message.length, blocks = state.blocks, byteCount = state.blockCount << 2, blockCount = state.blockCount, outputBlocks = state.outputBlocks, s = state.s, index = 0, i, code;\n    // update\n    while(index < length){\n        if (state.reset) {\n            state.reset = false;\n            blocks[0] = state.block;\n            for(i = 1; i < blockCount + 1; ++i){\n                blocks[i] = 0;\n            }\n        }\n        if (typeof message !== \"string\") {\n            for(i = state.start; index < length && i < byteCount; ++index){\n                blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n            }\n        } else {\n            for(i = state.start; index < length && i < byteCount; ++index){\n                code = message.charCodeAt(index);\n                if (code < 0x80) {\n                    blocks[i >> 2] |= code << SHIFT[i++ & 3];\n                } else if (code < 0x800) {\n                    blocks[i >> 2] |= (0xc0 | code >> 6) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n                } else if (code < 0xd800 || code >= 0xe000) {\n                    blocks[i >> 2] |= (0xe0 | code >> 12) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n                } else {\n                    code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);\n                    blocks[i >> 2] |= (0xf0 | code >> 18) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | code >> 12 & 0x3f) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n                }\n            }\n        }\n        state.lastByteIndex = i;\n        if (i >= byteCount) {\n            state.start = i - byteCount;\n            state.block = blocks[blockCount];\n            for(i = 0; i < blockCount; ++i){\n                s[i] ^= blocks[i];\n            }\n            f(s);\n            state.reset = true;\n        } else {\n            state.start = i;\n        }\n    }\n    // finalize\n    i = state.lastByteIndex;\n    blocks[i >> 2] |= KECCAK_PADDING[i & 3];\n    if (state.lastByteIndex === byteCount) {\n        blocks[0] = blocks[blockCount];\n        for(i = 1; i < blockCount + 1; ++i){\n            blocks[i] = 0;\n        }\n    }\n    blocks[blockCount - 1] |= 0x80000000;\n    for(i = 0; i < blockCount; ++i){\n        s[i] ^= blocks[i];\n    }\n    f(s);\n    // toString\n    var hex = \"\", i = 0, j = 0, block;\n    while(j < outputBlocks){\n        for(i = 0; i < blockCount && j < outputBlocks; ++i, ++j){\n            block = s[i];\n            hex += HEX_CHARS[block >> 4 & 0x0F] + HEX_CHARS[block & 0x0F] + HEX_CHARS[block >> 12 & 0x0F] + HEX_CHARS[block >> 8 & 0x0F] + HEX_CHARS[block >> 20 & 0x0F] + HEX_CHARS[block >> 16 & 0x0F] + HEX_CHARS[block >> 28 & 0x0F] + HEX_CHARS[block >> 24 & 0x0F];\n        }\n        if (j % blockCount === 0) {\n            f(s);\n            i = 0;\n        }\n    }\n    return \"0x\" + hex;\n};\nconst f = (s)=>{\n    var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;\n    for(n = 0; n < 48; n += 2){\n        c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];\n        c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];\n        c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];\n        c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];\n        c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];\n        c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];\n        c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];\n        c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];\n        c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];\n        c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];\n        h = c8 ^ (c2 << 1 | c3 >>> 31);\n        l = c9 ^ (c3 << 1 | c2 >>> 31);\n        s[0] ^= h;\n        s[1] ^= l;\n        s[10] ^= h;\n        s[11] ^= l;\n        s[20] ^= h;\n        s[21] ^= l;\n        s[30] ^= h;\n        s[31] ^= l;\n        s[40] ^= h;\n        s[41] ^= l;\n        h = c0 ^ (c4 << 1 | c5 >>> 31);\n        l = c1 ^ (c5 << 1 | c4 >>> 31);\n        s[2] ^= h;\n        s[3] ^= l;\n        s[12] ^= h;\n        s[13] ^= l;\n        s[22] ^= h;\n        s[23] ^= l;\n        s[32] ^= h;\n        s[33] ^= l;\n        s[42] ^= h;\n        s[43] ^= l;\n        h = c2 ^ (c6 << 1 | c7 >>> 31);\n        l = c3 ^ (c7 << 1 | c6 >>> 31);\n        s[4] ^= h;\n        s[5] ^= l;\n        s[14] ^= h;\n        s[15] ^= l;\n        s[24] ^= h;\n        s[25] ^= l;\n        s[34] ^= h;\n        s[35] ^= l;\n        s[44] ^= h;\n        s[45] ^= l;\n        h = c4 ^ (c8 << 1 | c9 >>> 31);\n        l = c5 ^ (c9 << 1 | c8 >>> 31);\n        s[6] ^= h;\n        s[7] ^= l;\n        s[16] ^= h;\n        s[17] ^= l;\n        s[26] ^= h;\n        s[27] ^= l;\n        s[36] ^= h;\n        s[37] ^= l;\n        s[46] ^= h;\n        s[47] ^= l;\n        h = c6 ^ (c0 << 1 | c1 >>> 31);\n        l = c7 ^ (c1 << 1 | c0 >>> 31);\n        s[8] ^= h;\n        s[9] ^= l;\n        s[18] ^= h;\n        s[19] ^= l;\n        s[28] ^= h;\n        s[29] ^= l;\n        s[38] ^= h;\n        s[39] ^= l;\n        s[48] ^= h;\n        s[49] ^= l;\n        b0 = s[0];\n        b1 = s[1];\n        b32 = s[11] << 4 | s[10] >>> 28;\n        b33 = s[10] << 4 | s[11] >>> 28;\n        b14 = s[20] << 3 | s[21] >>> 29;\n        b15 = s[21] << 3 | s[20] >>> 29;\n        b46 = s[31] << 9 | s[30] >>> 23;\n        b47 = s[30] << 9 | s[31] >>> 23;\n        b28 = s[40] << 18 | s[41] >>> 14;\n        b29 = s[41] << 18 | s[40] >>> 14;\n        b20 = s[2] << 1 | s[3] >>> 31;\n        b21 = s[3] << 1 | s[2] >>> 31;\n        b2 = s[13] << 12 | s[12] >>> 20;\n        b3 = s[12] << 12 | s[13] >>> 20;\n        b34 = s[22] << 10 | s[23] >>> 22;\n        b35 = s[23] << 10 | s[22] >>> 22;\n        b16 = s[33] << 13 | s[32] >>> 19;\n        b17 = s[32] << 13 | s[33] >>> 19;\n        b48 = s[42] << 2 | s[43] >>> 30;\n        b49 = s[43] << 2 | s[42] >>> 30;\n        b40 = s[5] << 30 | s[4] >>> 2;\n        b41 = s[4] << 30 | s[5] >>> 2;\n        b22 = s[14] << 6 | s[15] >>> 26;\n        b23 = s[15] << 6 | s[14] >>> 26;\n        b4 = s[25] << 11 | s[24] >>> 21;\n        b5 = s[24] << 11 | s[25] >>> 21;\n        b36 = s[34] << 15 | s[35] >>> 17;\n        b37 = s[35] << 15 | s[34] >>> 17;\n        b18 = s[45] << 29 | s[44] >>> 3;\n        b19 = s[44] << 29 | s[45] >>> 3;\n        b10 = s[6] << 28 | s[7] >>> 4;\n        b11 = s[7] << 28 | s[6] >>> 4;\n        b42 = s[17] << 23 | s[16] >>> 9;\n        b43 = s[16] << 23 | s[17] >>> 9;\n        b24 = s[26] << 25 | s[27] >>> 7;\n        b25 = s[27] << 25 | s[26] >>> 7;\n        b6 = s[36] << 21 | s[37] >>> 11;\n        b7 = s[37] << 21 | s[36] >>> 11;\n        b38 = s[47] << 24 | s[46] >>> 8;\n        b39 = s[46] << 24 | s[47] >>> 8;\n        b30 = s[8] << 27 | s[9] >>> 5;\n        b31 = s[9] << 27 | s[8] >>> 5;\n        b12 = s[18] << 20 | s[19] >>> 12;\n        b13 = s[19] << 20 | s[18] >>> 12;\n        b44 = s[29] << 7 | s[28] >>> 25;\n        b45 = s[28] << 7 | s[29] >>> 25;\n        b26 = s[38] << 8 | s[39] >>> 24;\n        b27 = s[39] << 8 | s[38] >>> 24;\n        b8 = s[48] << 14 | s[49] >>> 18;\n        b9 = s[49] << 14 | s[48] >>> 18;\n        s[0] = b0 ^ ~b2 & b4;\n        s[1] = b1 ^ ~b3 & b5;\n        s[10] = b10 ^ ~b12 & b14;\n        s[11] = b11 ^ ~b13 & b15;\n        s[20] = b20 ^ ~b22 & b24;\n        s[21] = b21 ^ ~b23 & b25;\n        s[30] = b30 ^ ~b32 & b34;\n        s[31] = b31 ^ ~b33 & b35;\n        s[40] = b40 ^ ~b42 & b44;\n        s[41] = b41 ^ ~b43 & b45;\n        s[2] = b2 ^ ~b4 & b6;\n        s[3] = b3 ^ ~b5 & b7;\n        s[12] = b12 ^ ~b14 & b16;\n        s[13] = b13 ^ ~b15 & b17;\n        s[22] = b22 ^ ~b24 & b26;\n        s[23] = b23 ^ ~b25 & b27;\n        s[32] = b32 ^ ~b34 & b36;\n        s[33] = b33 ^ ~b35 & b37;\n        s[42] = b42 ^ ~b44 & b46;\n        s[43] = b43 ^ ~b45 & b47;\n        s[4] = b4 ^ ~b6 & b8;\n        s[5] = b5 ^ ~b7 & b9;\n        s[14] = b14 ^ ~b16 & b18;\n        s[15] = b15 ^ ~b17 & b19;\n        s[24] = b24 ^ ~b26 & b28;\n        s[25] = b25 ^ ~b27 & b29;\n        s[34] = b34 ^ ~b36 & b38;\n        s[35] = b35 ^ ~b37 & b39;\n        s[44] = b44 ^ ~b46 & b48;\n        s[45] = b45 ^ ~b47 & b49;\n        s[6] = b6 ^ ~b8 & b0;\n        s[7] = b7 ^ ~b9 & b1;\n        s[16] = b16 ^ ~b18 & b10;\n        s[17] = b17 ^ ~b19 & b11;\n        s[26] = b26 ^ ~b28 & b20;\n        s[27] = b27 ^ ~b29 & b21;\n        s[36] = b36 ^ ~b38 & b30;\n        s[37] = b37 ^ ~b39 & b31;\n        s[46] = b46 ^ ~b48 & b40;\n        s[47] = b47 ^ ~b49 & b41;\n        s[8] = b8 ^ ~b0 & b2;\n        s[9] = b9 ^ ~b1 & b3;\n        s[18] = b18 ^ ~b10 & b12;\n        s[19] = b19 ^ ~b11 & b13;\n        s[28] = b28 ^ ~b20 & b22;\n        s[29] = b29 ^ ~b21 & b23;\n        s[38] = b38 ^ ~b30 & b32;\n        s[39] = b39 ^ ~b31 & b33;\n        s[48] = b48 ^ ~b40 & b42;\n        s[49] = b49 ^ ~b41 & b43;\n        s[0] ^= RC[n];\n        s[1] ^= RC[n + 1];\n    }\n};\nconst keccak = (bits)=>(str)=>{\n        var msg;\n        if (str.slice(0, 2) === \"0x\") {\n            msg = [];\n            for(var i = 2, l = str.length; i < l; i += 2)msg.push(parseInt(str.slice(i, i + 2), 16));\n        } else {\n            msg = str;\n        }\n        return update(Keccak(bits, bits), msg);\n    };\nmodule.exports = {\n    keccak256: keccak(256),\n    keccak512: keccak(512),\n    keccak256s: keccak(256),\n    keccak512s: keccak(512)\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/node_modules/eth-lib/lib/hash.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/node_modules/eth-lib/lib/nat.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/node_modules/eth-lib/lib/nat.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const BN = __webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/eth-lib/node_modules/bn.js/lib/bn.js\");\nconst Bytes = __webpack_require__(/*! ./bytes */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/eth-lib/lib/bytes.js\");\nconst fromBN = (bn)=>\"0x\" + bn.toString(\"hex\");\nconst toBN = (str)=>new BN(str.slice(2), 16);\nconst fromString = (str)=>{\n    const bn = \"0x\" + (str.slice(0, 2) === \"0x\" ? new BN(str.slice(2), 16) : new BN(str, 10)).toString(\"hex\");\n    return bn === \"0x0\" ? \"0x\" : bn;\n};\nconst toEther = (wei)=>toNumber(div(wei, fromString(\"10000000000\"))) / 100000000;\nconst fromEther = (eth)=>mul(fromNumber(Math.floor(eth * 100000000)), fromString(\"10000000000\"));\nconst toString = (a)=>toBN(a).toString(10);\nconst fromNumber = (a)=>typeof a === \"string\" ? /^0x/.test(a) ? a : \"0x\" + a : \"0x\" + new BN(a).toString(\"hex\");\nconst toNumber = (a)=>toBN(a).toNumber();\nconst toUint256 = (a)=>Bytes.pad(32, a);\nconst bin = (method)=>(a, b)=>fromBN(toBN(a)[method](toBN(b)));\nconst add = bin(\"add\");\nconst mul = bin(\"mul\");\nconst div = bin(\"div\");\nconst sub = bin(\"sub\");\nmodule.exports = {\n    toString,\n    fromString,\n    toNumber,\n    fromNumber,\n    toEther,\n    fromEther,\n    toUint256,\n    add,\n    mul,\n    div,\n    sub\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL25vZGVfbW9kdWxlcy9ldGgtbGliL2xpYi9uYXQuanMiLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsS0FBS0MsbUJBQU9BLENBQUMsd0dBQU87QUFDMUIsTUFBTUMsUUFBUUQsbUJBQU9BLENBQUMsMEZBQVM7QUFFL0IsTUFBTUUsU0FBU0MsQ0FBQUEsS0FBTSxPQUFPQSxHQUFHQyxRQUFRLENBQUM7QUFFeEMsTUFBTUMsT0FBT0MsQ0FBQUEsTUFBTyxJQUFJUCxHQUFHTyxJQUFJQyxLQUFLLENBQUMsSUFBSTtBQUV6QyxNQUFNQyxhQUFhRixDQUFBQTtJQUNqQixNQUFNSCxLQUFLLE9BQU8sQ0FBQ0csSUFBSUMsS0FBSyxDQUFDLEdBQUcsT0FBTyxPQUFPLElBQUlSLEdBQUdPLElBQUlDLEtBQUssQ0FBQyxJQUFJLE1BQU0sSUFBSVIsR0FBR08sS0FBSyxHQUFFLEVBQUdGLFFBQVEsQ0FBQztJQUNuRyxPQUFPRCxPQUFPLFFBQVEsT0FBT0E7QUFDL0I7QUFFQSxNQUFNTSxVQUFVQyxDQUFBQSxNQUFPQyxTQUFTQyxJQUFJRixLQUFLRixXQUFXLG1CQUFtQjtBQUV2RSxNQUFNSyxZQUFZQyxDQUFBQSxNQUFPQyxJQUFJQyxXQUFXQyxLQUFLQyxLQUFLLENBQUNKLE1BQU0sYUFBYU4sV0FBVztBQUVqRixNQUFNSixXQUFXZSxDQUFBQSxJQUFLZCxLQUFLYyxHQUFHZixRQUFRLENBQUM7QUFFdkMsTUFBTVksYUFBYUcsQ0FBQUEsSUFBSyxPQUFPQSxNQUFNLFdBQVcsTUFBTUMsSUFBSSxDQUFDRCxLQUFLQSxJQUFJLE9BQU9BLElBQUksT0FBTyxJQUFJcEIsR0FBR29CLEdBQUdmLFFBQVEsQ0FBQztBQUV6RyxNQUFNTyxXQUFXUSxDQUFBQSxJQUFLZCxLQUFLYyxHQUFHUixRQUFRO0FBRXRDLE1BQU1VLFlBQVlGLENBQUFBLElBQUtsQixNQUFNcUIsR0FBRyxDQUFDLElBQUlIO0FBRXJDLE1BQU1JLE1BQU1DLENBQUFBLFNBQVUsQ0FBQ0wsR0FBR00sSUFBTXZCLE9BQU9HLEtBQUtjLEVBQUUsQ0FBQ0ssT0FBTyxDQUFDbkIsS0FBS29CO0FBRTVELE1BQU1DLE1BQU1ILElBQUk7QUFDaEIsTUFBTVIsTUFBTVEsSUFBSTtBQUNoQixNQUFNWCxNQUFNVyxJQUFJO0FBQ2hCLE1BQU1JLE1BQU1KLElBQUk7QUFFaEJLLE9BQU9DLE9BQU8sR0FBRztJQUNmekI7SUFDQUk7SUFDQUc7SUFDQUs7SUFDQVA7SUFDQUk7SUFDQVE7SUFDQUs7SUFDQVg7SUFDQUg7SUFDQWU7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BhbGNoL2FsY2hlbXktd2ViMy9ub2RlX21vZHVsZXMvZXRoLWxpYi9saWIvbmF0LmpzP2RmZjIiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQk4gPSByZXF1aXJlKFwiYm4uanNcIik7XG5jb25zdCBCeXRlcyA9IHJlcXVpcmUoXCIuL2J5dGVzXCIpO1xuXG5jb25zdCBmcm9tQk4gPSBibiA9PiBcIjB4XCIgKyBibi50b1N0cmluZyhcImhleFwiKTtcblxuY29uc3QgdG9CTiA9IHN0ciA9PiBuZXcgQk4oc3RyLnNsaWNlKDIpLCAxNik7XG5cbmNvbnN0IGZyb21TdHJpbmcgPSBzdHIgPT4ge1xuICBjb25zdCBibiA9IFwiMHhcIiArIChzdHIuc2xpY2UoMCwgMikgPT09IFwiMHhcIiA/IG5ldyBCTihzdHIuc2xpY2UoMiksIDE2KSA6IG5ldyBCTihzdHIsIDEwKSkudG9TdHJpbmcoXCJoZXhcIik7XG4gIHJldHVybiBibiA9PT0gXCIweDBcIiA/IFwiMHhcIiA6IGJuO1xufTtcblxuY29uc3QgdG9FdGhlciA9IHdlaSA9PiB0b051bWJlcihkaXYod2VpLCBmcm9tU3RyaW5nKFwiMTAwMDAwMDAwMDBcIikpKSAvIDEwMDAwMDAwMDtcblxuY29uc3QgZnJvbUV0aGVyID0gZXRoID0+IG11bChmcm9tTnVtYmVyKE1hdGguZmxvb3IoZXRoICogMTAwMDAwMDAwKSksIGZyb21TdHJpbmcoXCIxMDAwMDAwMDAwMFwiKSk7XG5cbmNvbnN0IHRvU3RyaW5nID0gYSA9PiB0b0JOKGEpLnRvU3RyaW5nKDEwKTtcblxuY29uc3QgZnJvbU51bWJlciA9IGEgPT4gdHlwZW9mIGEgPT09IFwic3RyaW5nXCIgPyAvXjB4Ly50ZXN0KGEpID8gYSA6IFwiMHhcIiArIGEgOiBcIjB4XCIgKyBuZXcgQk4oYSkudG9TdHJpbmcoXCJoZXhcIik7XG5cbmNvbnN0IHRvTnVtYmVyID0gYSA9PiB0b0JOKGEpLnRvTnVtYmVyKCk7XG5cbmNvbnN0IHRvVWludDI1NiA9IGEgPT4gQnl0ZXMucGFkKDMyLCBhKTtcblxuY29uc3QgYmluID0gbWV0aG9kID0+IChhLCBiKSA9PiBmcm9tQk4odG9CTihhKVttZXRob2RdKHRvQk4oYikpKTtcblxuY29uc3QgYWRkID0gYmluKFwiYWRkXCIpO1xuY29uc3QgbXVsID0gYmluKFwibXVsXCIpO1xuY29uc3QgZGl2ID0gYmluKFwiZGl2XCIpO1xuY29uc3Qgc3ViID0gYmluKFwic3ViXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgdG9TdHJpbmcsXG4gIGZyb21TdHJpbmcsXG4gIHRvTnVtYmVyLFxuICBmcm9tTnVtYmVyLFxuICB0b0V0aGVyLFxuICBmcm9tRXRoZXIsXG4gIHRvVWludDI1NixcbiAgYWRkLFxuICBtdWwsXG4gIGRpdixcbiAgc3ViXG59OyJdLCJuYW1lcyI6WyJCTiIsInJlcXVpcmUiLCJCeXRlcyIsImZyb21CTiIsImJuIiwidG9TdHJpbmciLCJ0b0JOIiwic3RyIiwic2xpY2UiLCJmcm9tU3RyaW5nIiwidG9FdGhlciIsIndlaSIsInRvTnVtYmVyIiwiZGl2IiwiZnJvbUV0aGVyIiwiZXRoIiwibXVsIiwiZnJvbU51bWJlciIsIk1hdGgiLCJmbG9vciIsImEiLCJ0ZXN0IiwidG9VaW50MjU2IiwicGFkIiwiYmluIiwibWV0aG9kIiwiYiIsImFkZCIsInN1YiIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/node_modules/eth-lib/lib/nat.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/node_modules/eth-lib/lib/rlp.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/node_modules/eth-lib/lib/rlp.js ***!
  \*************************************************************************/
/***/ ((module) => {

eval("// The RLP format\n// Serialization and deserialization for the BytesTree type, under the following grammar:\n// | First byte | Meaning                                                                    |\n// | ---------- | -------------------------------------------------------------------------- |\n// | 0   to 127 | HEX(leaf)                                                                  |\n// | 128 to 183 | HEX(length_of_leaf + 128) + HEX(leaf)                                      |\n// | 184 to 191 | HEX(length_of_length_of_leaf + 128 + 55) + HEX(length_of_leaf) + HEX(leaf) |\n// | 192 to 247 | HEX(length_of_node + 192) + HEX(node)                                      |\n// | 248 to 255 | HEX(length_of_length_of_node + 128 + 55) + HEX(length_of_node) + HEX(node) |\nconst encode = (tree)=>{\n    const padEven = (str)=>str.length % 2 === 0 ? str : \"0\" + str;\n    const uint = (num)=>padEven(num.toString(16));\n    const length = (len, add)=>len < 56 ? uint(add + len) : uint(add + uint(len).length / 2 + 55) + uint(len);\n    const dataTree = (tree)=>{\n        if (typeof tree === \"string\") {\n            const hex = tree.slice(2);\n            const pre = hex.length != 2 || hex >= \"80\" ? length(hex.length / 2, 128) : \"\";\n            return pre + hex;\n        } else {\n            const hex = tree.map(dataTree).join(\"\");\n            const pre = length(hex.length / 2, 192);\n            return pre + hex;\n        }\n    };\n    return \"0x\" + dataTree(tree);\n};\nconst decode = (hex)=>{\n    let i = 2;\n    const parseTree = ()=>{\n        if (i >= hex.length) throw \"\";\n        const head = hex.slice(i, i + 2);\n        return head < \"80\" ? (i += 2, \"0x\" + head) : head < \"c0\" ? parseHex() : parseList();\n    };\n    const parseLength = ()=>{\n        const len = parseInt(hex.slice(i, i += 2), 16) % 64;\n        return len < 56 ? len : parseInt(hex.slice(i, i += (len - 55) * 2), 16);\n    };\n    const parseHex = ()=>{\n        const len = parseLength();\n        return \"0x\" + hex.slice(i, i += len * 2);\n    };\n    const parseList = ()=>{\n        const lim = parseLength() * 2 + i;\n        let list = [];\n        while(i < lim)list.push(parseTree());\n        return list;\n    };\n    try {\n        return parseTree();\n    } catch (e) {\n        return [];\n    }\n};\nmodule.exports = {\n    encode,\n    decode\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AYWxjaC9hbGNoZW15LXdlYjMvbm9kZV9tb2R1bGVzL2V0aC1saWIvbGliL3JscC5qcz9hOGM0Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoZSBSTFAgZm9ybWF0XG4vLyBTZXJpYWxpemF0aW9uIGFuZCBkZXNlcmlhbGl6YXRpb24gZm9yIHRoZSBCeXRlc1RyZWUgdHlwZSwgdW5kZXIgdGhlIGZvbGxvd2luZyBncmFtbWFyOlxuLy8gfCBGaXJzdCBieXRlIHwgTWVhbmluZyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuLy8gfCAtLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfFxuLy8gfCAwICAgdG8gMTI3IHwgSEVYKGxlYWYpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuLy8gfCAxMjggdG8gMTgzIHwgSEVYKGxlbmd0aF9vZl9sZWFmICsgMTI4KSArIEhFWChsZWFmKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuLy8gfCAxODQgdG8gMTkxIHwgSEVYKGxlbmd0aF9vZl9sZW5ndGhfb2ZfbGVhZiArIDEyOCArIDU1KSArIEhFWChsZW5ndGhfb2ZfbGVhZikgKyBIRVgobGVhZikgfFxuLy8gfCAxOTIgdG8gMjQ3IHwgSEVYKGxlbmd0aF9vZl9ub2RlICsgMTkyKSArIEhFWChub2RlKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuLy8gfCAyNDggdG8gMjU1IHwgSEVYKGxlbmd0aF9vZl9sZW5ndGhfb2Zfbm9kZSArIDEyOCArIDU1KSArIEhFWChsZW5ndGhfb2Zfbm9kZSkgKyBIRVgobm9kZSkgfFxuXG5jb25zdCBlbmNvZGUgPSB0cmVlID0+IHtcbiAgY29uc3QgcGFkRXZlbiA9IHN0ciA9PiBzdHIubGVuZ3RoICUgMiA9PT0gMCA/IHN0ciA6IFwiMFwiICsgc3RyO1xuXG4gIGNvbnN0IHVpbnQgPSBudW0gPT4gcGFkRXZlbihudW0udG9TdHJpbmcoMTYpKTtcblxuICBjb25zdCBsZW5ndGggPSAobGVuLCBhZGQpID0+IGxlbiA8IDU2ID8gdWludChhZGQgKyBsZW4pIDogdWludChhZGQgKyB1aW50KGxlbikubGVuZ3RoIC8gMiArIDU1KSArIHVpbnQobGVuKTtcblxuICBjb25zdCBkYXRhVHJlZSA9IHRyZWUgPT4ge1xuICAgIGlmICh0eXBlb2YgdHJlZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgY29uc3QgaGV4ID0gdHJlZS5zbGljZSgyKTtcbiAgICAgIGNvbnN0IHByZSA9IGhleC5sZW5ndGggIT0gMiB8fCBoZXggPj0gXCI4MFwiID8gbGVuZ3RoKGhleC5sZW5ndGggLyAyLCAxMjgpIDogXCJcIjtcbiAgICAgIHJldHVybiBwcmUgKyBoZXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGhleCA9IHRyZWUubWFwKGRhdGFUcmVlKS5qb2luKFwiXCIpO1xuICAgICAgY29uc3QgcHJlID0gbGVuZ3RoKGhleC5sZW5ndGggLyAyLCAxOTIpO1xuICAgICAgcmV0dXJuIHByZSArIGhleDtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFwiMHhcIiArIGRhdGFUcmVlKHRyZWUpO1xufTtcblxuY29uc3QgZGVjb2RlID0gaGV4ID0+IHtcbiAgbGV0IGkgPSAyO1xuXG4gIGNvbnN0IHBhcnNlVHJlZSA9ICgpID0+IHtcbiAgICBpZiAoaSA+PSBoZXgubGVuZ3RoKSB0aHJvdyBcIlwiO1xuICAgIGNvbnN0IGhlYWQgPSBoZXguc2xpY2UoaSwgaSArIDIpO1xuICAgIHJldHVybiBoZWFkIDwgXCI4MFwiID8gKGkgKz0gMiwgXCIweFwiICsgaGVhZCkgOiBoZWFkIDwgXCJjMFwiID8gcGFyc2VIZXgoKSA6IHBhcnNlTGlzdCgpO1xuICB9O1xuXG4gIGNvbnN0IHBhcnNlTGVuZ3RoID0gKCkgPT4ge1xuICAgIGNvbnN0IGxlbiA9IHBhcnNlSW50KGhleC5zbGljZShpLCBpICs9IDIpLCAxNikgJSA2NDtcbiAgICByZXR1cm4gbGVuIDwgNTYgPyBsZW4gOiBwYXJzZUludChoZXguc2xpY2UoaSwgaSArPSAobGVuIC0gNTUpICogMiksIDE2KTtcbiAgfTtcblxuICBjb25zdCBwYXJzZUhleCA9ICgpID0+IHtcbiAgICBjb25zdCBsZW4gPSBwYXJzZUxlbmd0aCgpO1xuICAgIHJldHVybiBcIjB4XCIgKyBoZXguc2xpY2UoaSwgaSArPSBsZW4gKiAyKTtcbiAgfTtcblxuICBjb25zdCBwYXJzZUxpc3QgPSAoKSA9PiB7XG4gICAgY29uc3QgbGltID0gcGFyc2VMZW5ndGgoKSAqIDIgKyBpO1xuICAgIGxldCBsaXN0ID0gW107XG4gICAgd2hpbGUgKGkgPCBsaW0pIGxpc3QucHVzaChwYXJzZVRyZWUoKSk7XG4gICAgcmV0dXJuIGxpc3Q7XG4gIH07XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gcGFyc2VUcmVlKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0geyBlbmNvZGUsIGRlY29kZSB9OyJdLCJuYW1lcyI6WyJlbmNvZGUiLCJ0cmVlIiwicGFkRXZlbiIsInN0ciIsImxlbmd0aCIsInVpbnQiLCJudW0iLCJ0b1N0cmluZyIsImxlbiIsImFkZCIsImRhdGFUcmVlIiwiaGV4Iiwic2xpY2UiLCJwcmUiLCJtYXAiLCJqb2luIiwiZGVjb2RlIiwiaSIsInBhcnNlVHJlZSIsImhlYWQiLCJwYXJzZUhleCIsInBhcnNlTGlzdCIsInBhcnNlTGVuZ3RoIiwicGFyc2VJbnQiLCJsaW0iLCJsaXN0IiwicHVzaCIsImUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUI7QUFDakIseUZBQXlGO0FBQ3pGLDhGQUE4RjtBQUM5Riw4RkFBOEY7QUFDOUYsOEZBQThGO0FBQzlGLDhGQUE4RjtBQUM5Riw4RkFBOEY7QUFDOUYsOEZBQThGO0FBQzlGLDhGQUE4RjtBQUU5RixNQUFNQSxTQUFTQyxDQUFBQTtJQUNiLE1BQU1DLFVBQVVDLENBQUFBLE1BQU9BLElBQUlDLE1BQU0sR0FBRyxNQUFNLElBQUlELE1BQU0sTUFBTUE7SUFFMUQsTUFBTUUsT0FBT0MsQ0FBQUEsTUFBT0osUUFBUUksSUFBSUMsUUFBUSxDQUFDO0lBRXpDLE1BQU1ILFNBQVMsQ0FBQ0ksS0FBS0MsTUFBUUQsTUFBTSxLQUFLSCxLQUFLSSxNQUFNRCxPQUFPSCxLQUFLSSxNQUFNSixLQUFLRyxLQUFLSixNQUFNLEdBQUcsSUFBSSxNQUFNQyxLQUFLRztJQUV2RyxNQUFNRSxXQUFXVCxDQUFBQTtRQUNmLElBQUksT0FBT0EsU0FBUyxVQUFVO1lBQzVCLE1BQU1VLE1BQU1WLEtBQUtXLEtBQUssQ0FBQztZQUN2QixNQUFNQyxNQUFNRixJQUFJUCxNQUFNLElBQUksS0FBS08sT0FBTyxPQUFPUCxPQUFPTyxJQUFJUCxNQUFNLEdBQUcsR0FBRyxPQUFPO1lBQzNFLE9BQU9TLE1BQU1GO1FBQ2YsT0FBTztZQUNMLE1BQU1BLE1BQU1WLEtBQUthLEdBQUcsQ0FBQ0osVUFBVUssSUFBSSxDQUFDO1lBQ3BDLE1BQU1GLE1BQU1ULE9BQU9PLElBQUlQLE1BQU0sR0FBRyxHQUFHO1lBQ25DLE9BQU9TLE1BQU1GO1FBQ2Y7SUFDRjtJQUVBLE9BQU8sT0FBT0QsU0FBU1Q7QUFDekI7QUFFQSxNQUFNZSxTQUFTTCxDQUFBQTtJQUNiLElBQUlNLElBQUk7SUFFUixNQUFNQyxZQUFZO1FBQ2hCLElBQUlELEtBQUtOLElBQUlQLE1BQU0sRUFBRSxNQUFNO1FBQzNCLE1BQU1lLE9BQU9SLElBQUlDLEtBQUssQ0FBQ0ssR0FBR0EsSUFBSTtRQUM5QixPQUFPRSxPQUFPLE9BQVFGLENBQUFBLEtBQUssR0FBRyxPQUFPRSxJQUFHLElBQUtBLE9BQU8sT0FBT0MsYUFBYUM7SUFDMUU7SUFFQSxNQUFNQyxjQUFjO1FBQ2xCLE1BQU1kLE1BQU1lLFNBQVNaLElBQUlDLEtBQUssQ0FBQ0ssR0FBR0EsS0FBSyxJQUFJLE1BQU07UUFDakQsT0FBT1QsTUFBTSxLQUFLQSxNQUFNZSxTQUFTWixJQUFJQyxLQUFLLENBQUNLLEdBQUdBLEtBQUssQUFBQ1QsQ0FBQUEsTUFBTSxFQUFDLElBQUssSUFBSTtJQUN0RTtJQUVBLE1BQU1ZLFdBQVc7UUFDZixNQUFNWixNQUFNYztRQUNaLE9BQU8sT0FBT1gsSUFBSUMsS0FBSyxDQUFDSyxHQUFHQSxLQUFLVCxNQUFNO0lBQ3hDO0lBRUEsTUFBTWEsWUFBWTtRQUNoQixNQUFNRyxNQUFNRixnQkFBZ0IsSUFBSUw7UUFDaEMsSUFBSVEsT0FBTyxFQUFFO1FBQ2IsTUFBT1IsSUFBSU8sSUFBS0MsS0FBS0MsSUFBSSxDQUFDUjtRQUMxQixPQUFPTztJQUNUO0lBRUEsSUFBSTtRQUNGLE9BQU9QO0lBQ1QsRUFBRSxPQUFPUyxHQUFHO1FBQ1YsT0FBTyxFQUFFO0lBQ1g7QUFDRjtBQUVBQyxPQUFPQyxPQUFPLEdBQUc7SUFBRTdCO0lBQVFnQjtBQUFPIiwiZmlsZSI6Iihzc3IpLy4vbm9kZV9tb2R1bGVzL0BhbGNoL2FsY2hlbXktd2ViMy9ub2RlX21vZHVsZXMvZXRoLWxpYi9saWIvcmxwLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/node_modules/eth-lib/lib/rlp.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/node_modules/eth-lib/node_modules/bn.js/lib/bn.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/node_modules/eth-lib/node_modules/bn.js/lib/bn.js ***!
  \*******************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\n(function(module1, exports) {\n    \"use strict\";\n    // Utils\n    function assert(val, msg) {\n        if (!val) throw new Error(msg || \"Assertion failed\");\n    }\n    // Could use `inherits` module, but don't want to move from single file\n    // architecture yet.\n    function inherits(ctor, superCtor) {\n        ctor.super_ = superCtor;\n        var TempCtor = function() {};\n        TempCtor.prototype = superCtor.prototype;\n        ctor.prototype = new TempCtor();\n        ctor.prototype.constructor = ctor;\n    }\n    // BN\n    function BN(number, base, endian) {\n        if (BN.isBN(number)) {\n            return number;\n        }\n        this.negative = 0;\n        this.words = null;\n        this.length = 0;\n        // Reduction context\n        this.red = null;\n        if (number !== null) {\n            if (base === \"le\" || base === \"be\") {\n                endian = base;\n                base = 10;\n            }\n            this._init(number || 0, base || 10, endian || \"be\");\n        }\n    }\n    if (typeof module1 === \"object\") {\n        module1.exports = BN;\n    } else {\n        exports.BN = BN;\n    }\n    BN.BN = BN;\n    BN.wordSize = 26;\n    var Buffer;\n    try {\n        if (false) {} else {\n            Buffer = (__webpack_require__(/*! buffer */ \"buffer\").Buffer);\n        }\n    } catch (e) {}\n    BN.isBN = function isBN(num) {\n        if (num instanceof BN) {\n            return true;\n        }\n        return num !== null && typeof num === \"object\" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n    };\n    BN.max = function max(left, right) {\n        if (left.cmp(right) > 0) return left;\n        return right;\n    };\n    BN.min = function min(left, right) {\n        if (left.cmp(right) < 0) return left;\n        return right;\n    };\n    BN.prototype._init = function init(number, base, endian) {\n        if (typeof number === \"number\") {\n            return this._initNumber(number, base, endian);\n        }\n        if (typeof number === \"object\") {\n            return this._initArray(number, base, endian);\n        }\n        if (base === \"hex\") {\n            base = 16;\n        }\n        assert(base === (base | 0) && base >= 2 && base <= 36);\n        number = number.toString().replace(/\\s+/g, \"\");\n        var start = 0;\n        if (number[0] === \"-\") {\n            start++;\n            this.negative = 1;\n        }\n        if (start < number.length) {\n            if (base === 16) {\n                this._parseHex(number, start, endian);\n            } else {\n                this._parseBase(number, base, start);\n                if (endian === \"le\") {\n                    this._initArray(this.toArray(), base, endian);\n                }\n            }\n        }\n    };\n    BN.prototype._initNumber = function _initNumber(number, base, endian) {\n        if (number < 0) {\n            this.negative = 1;\n            number = -number;\n        }\n        if (number < 0x4000000) {\n            this.words = [\n                number & 0x3ffffff\n            ];\n            this.length = 1;\n        } else if (number < 0x10000000000000) {\n            this.words = [\n                number & 0x3ffffff,\n                number / 0x4000000 & 0x3ffffff\n            ];\n            this.length = 2;\n        } else {\n            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n            this.words = [\n                number & 0x3ffffff,\n                number / 0x4000000 & 0x3ffffff,\n                1\n            ];\n            this.length = 3;\n        }\n        if (endian !== \"le\") return;\n        // Reverse the bytes\n        this._initArray(this.toArray(), base, endian);\n    };\n    BN.prototype._initArray = function _initArray(number, base, endian) {\n        // Perhaps a Uint8Array\n        assert(typeof number.length === \"number\");\n        if (number.length <= 0) {\n            this.words = [\n                0\n            ];\n            this.length = 1;\n            return this;\n        }\n        this.length = Math.ceil(number.length / 3);\n        this.words = new Array(this.length);\n        for(var i = 0; i < this.length; i++){\n            this.words[i] = 0;\n        }\n        var j, w;\n        var off = 0;\n        if (endian === \"be\") {\n            for(i = number.length - 1, j = 0; i >= 0; i -= 3){\n                w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;\n                this.words[j] |= w << off & 0x3ffffff;\n                this.words[j + 1] = w >>> 26 - off & 0x3ffffff;\n                off += 24;\n                if (off >= 26) {\n                    off -= 26;\n                    j++;\n                }\n            }\n        } else if (endian === \"le\") {\n            for(i = 0, j = 0; i < number.length; i += 3){\n                w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;\n                this.words[j] |= w << off & 0x3ffffff;\n                this.words[j + 1] = w >>> 26 - off & 0x3ffffff;\n                off += 24;\n                if (off >= 26) {\n                    off -= 26;\n                    j++;\n                }\n            }\n        }\n        return this.strip();\n    };\n    function parseHex4Bits(string, index) {\n        var c = string.charCodeAt(index);\n        // 'A' - 'F'\n        if (c >= 65 && c <= 70) {\n            return c - 55;\n        // 'a' - 'f'\n        } else if (c >= 97 && c <= 102) {\n            return c - 87;\n        // '0' - '9'\n        } else {\n            return c - 48 & 0xf;\n        }\n    }\n    function parseHexByte(string, lowerBound, index) {\n        var r = parseHex4Bits(string, index);\n        if (index - 1 >= lowerBound) {\n            r |= parseHex4Bits(string, index - 1) << 4;\n        }\n        return r;\n    }\n    BN.prototype._parseHex = function _parseHex(number, start, endian) {\n        // Create possibly bigger array to ensure that it fits the number\n        this.length = Math.ceil((number.length - start) / 6);\n        this.words = new Array(this.length);\n        for(var i = 0; i < this.length; i++){\n            this.words[i] = 0;\n        }\n        // 24-bits chunks\n        var off = 0;\n        var j = 0;\n        var w;\n        if (endian === \"be\") {\n            for(i = number.length - 1; i >= start; i -= 2){\n                w = parseHexByte(number, start, i) << off;\n                this.words[j] |= w & 0x3ffffff;\n                if (off >= 18) {\n                    off -= 18;\n                    j += 1;\n                    this.words[j] |= w >>> 26;\n                } else {\n                    off += 8;\n                }\n            }\n        } else {\n            var parseLength = number.length - start;\n            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){\n                w = parseHexByte(number, start, i) << off;\n                this.words[j] |= w & 0x3ffffff;\n                if (off >= 18) {\n                    off -= 18;\n                    j += 1;\n                    this.words[j] |= w >>> 26;\n                } else {\n                    off += 8;\n                }\n            }\n        }\n        this.strip();\n    };\n    function parseBase(str, start, end, mul) {\n        var r = 0;\n        var len = Math.min(str.length, end);\n        for(var i = start; i < len; i++){\n            var c = str.charCodeAt(i) - 48;\n            r *= mul;\n            // 'a'\n            if (c >= 49) {\n                r += c - 49 + 0xa;\n            // 'A'\n            } else if (c >= 17) {\n                r += c - 17 + 0xa;\n            // '0' - '9'\n            } else {\n                r += c;\n            }\n        }\n        return r;\n    }\n    BN.prototype._parseBase = function _parseBase(number, base, start) {\n        // Initialize as zero\n        this.words = [\n            0\n        ];\n        this.length = 1;\n        // Find length of limb in base\n        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base){\n            limbLen++;\n        }\n        limbLen--;\n        limbPow = limbPow / base | 0;\n        var total = number.length - start;\n        var mod = total % limbLen;\n        var end = Math.min(total, total - mod) + start;\n        var word = 0;\n        for(var i = start; i < end; i += limbLen){\n            word = parseBase(number, i, i + limbLen, base);\n            this.imuln(limbPow);\n            if (this.words[0] + word < 0x4000000) {\n                this.words[0] += word;\n            } else {\n                this._iaddn(word);\n            }\n        }\n        if (mod !== 0) {\n            var pow = 1;\n            word = parseBase(number, i, number.length, base);\n            for(i = 0; i < mod; i++){\n                pow *= base;\n            }\n            this.imuln(pow);\n            if (this.words[0] + word < 0x4000000) {\n                this.words[0] += word;\n            } else {\n                this._iaddn(word);\n            }\n        }\n        this.strip();\n    };\n    BN.prototype.copy = function copy(dest) {\n        dest.words = new Array(this.length);\n        for(var i = 0; i < this.length; i++){\n            dest.words[i] = this.words[i];\n        }\n        dest.length = this.length;\n        dest.negative = this.negative;\n        dest.red = this.red;\n    };\n    BN.prototype.clone = function clone() {\n        var r = new BN(null);\n        this.copy(r);\n        return r;\n    };\n    BN.prototype._expand = function _expand(size) {\n        while(this.length < size){\n            this.words[this.length++] = 0;\n        }\n        return this;\n    };\n    // Remove leading `0` from `this`\n    BN.prototype.strip = function strip() {\n        while(this.length > 1 && this.words[this.length - 1] === 0){\n            this.length--;\n        }\n        return this._normSign();\n    };\n    BN.prototype._normSign = function _normSign() {\n        // -0 = 0\n        if (this.length === 1 && this.words[0] === 0) {\n            this.negative = 0;\n        }\n        return this;\n    };\n    BN.prototype.inspect = function inspect() {\n        return (this.red ? \"<BN-R: \" : \"<BN: \") + this.toString(16) + \">\";\n    };\n    /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */ var zeros = [\n        \"\",\n        \"0\",\n        \"00\",\n        \"000\",\n        \"0000\",\n        \"00000\",\n        \"000000\",\n        \"0000000\",\n        \"00000000\",\n        \"000000000\",\n        \"0000000000\",\n        \"00000000000\",\n        \"000000000000\",\n        \"0000000000000\",\n        \"00000000000000\",\n        \"000000000000000\",\n        \"0000000000000000\",\n        \"00000000000000000\",\n        \"000000000000000000\",\n        \"0000000000000000000\",\n        \"00000000000000000000\",\n        \"000000000000000000000\",\n        \"0000000000000000000000\",\n        \"00000000000000000000000\",\n        \"000000000000000000000000\",\n        \"0000000000000000000000000\"\n    ];\n    var groupSizes = [\n        0,\n        0,\n        25,\n        16,\n        12,\n        11,\n        10,\n        9,\n        8,\n        8,\n        7,\n        7,\n        7,\n        7,\n        6,\n        6,\n        6,\n        6,\n        6,\n        6,\n        6,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5\n    ];\n    var groupBases = [\n        0,\n        0,\n        33554432,\n        43046721,\n        16777216,\n        48828125,\n        60466176,\n        40353607,\n        16777216,\n        43046721,\n        10000000,\n        19487171,\n        35831808,\n        62748517,\n        7529536,\n        11390625,\n        16777216,\n        24137569,\n        34012224,\n        47045881,\n        64000000,\n        4084101,\n        5153632,\n        6436343,\n        7962624,\n        9765625,\n        11881376,\n        14348907,\n        17210368,\n        20511149,\n        24300000,\n        28629151,\n        33554432,\n        39135393,\n        45435424,\n        52521875,\n        60466176\n    ];\n    BN.prototype.toString = function toString(base, padding) {\n        base = base || 10;\n        padding = padding | 0 || 1;\n        var out;\n        if (base === 16 || base === \"hex\") {\n            out = \"\";\n            var off = 0;\n            var carry = 0;\n            for(var i = 0; i < this.length; i++){\n                var w = this.words[i];\n                var word = ((w << off | carry) & 0xffffff).toString(16);\n                carry = w >>> 24 - off & 0xffffff;\n                if (carry !== 0 || i !== this.length - 1) {\n                    out = zeros[6 - word.length] + word + out;\n                } else {\n                    out = word + out;\n                }\n                off += 2;\n                if (off >= 26) {\n                    off -= 26;\n                    i--;\n                }\n            }\n            if (carry !== 0) {\n                out = carry.toString(16) + out;\n            }\n            while(out.length % padding !== 0){\n                out = \"0\" + out;\n            }\n            if (this.negative !== 0) {\n                out = \"-\" + out;\n            }\n            return out;\n        }\n        if (base === (base | 0) && base >= 2 && base <= 36) {\n            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n            var groupSize = groupSizes[base];\n            // var groupBase = Math.pow(base, groupSize);\n            var groupBase = groupBases[base];\n            out = \"\";\n            var c = this.clone();\n            c.negative = 0;\n            while(!c.isZero()){\n                var r = c.modn(groupBase).toString(base);\n                c = c.idivn(groupBase);\n                if (!c.isZero()) {\n                    out = zeros[groupSize - r.length] + r + out;\n                } else {\n                    out = r + out;\n                }\n            }\n            if (this.isZero()) {\n                out = \"0\" + out;\n            }\n            while(out.length % padding !== 0){\n                out = \"0\" + out;\n            }\n            if (this.negative !== 0) {\n                out = \"-\" + out;\n            }\n            return out;\n        }\n        assert(false, \"Base should be between 2 and 36\");\n    };\n    BN.prototype.toNumber = function toNumber() {\n        var ret = this.words[0];\n        if (this.length === 2) {\n            ret += this.words[1] * 0x4000000;\n        } else if (this.length === 3 && this.words[2] === 0x01) {\n            // NOTE: at this stage it is known that the top bit is set\n            ret += 0x10000000000000 + this.words[1] * 0x4000000;\n        } else if (this.length > 2) {\n            assert(false, \"Number can only safely store up to 53 bits\");\n        }\n        return this.negative !== 0 ? -ret : ret;\n    };\n    BN.prototype.toJSON = function toJSON() {\n        return this.toString(16);\n    };\n    BN.prototype.toBuffer = function toBuffer(endian, length) {\n        assert(typeof Buffer !== \"undefined\");\n        return this.toArrayLike(Buffer, endian, length);\n    };\n    BN.prototype.toArray = function toArray(endian, length) {\n        return this.toArrayLike(Array, endian, length);\n    };\n    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {\n        var byteLength = this.byteLength();\n        var reqLength = length || Math.max(1, byteLength);\n        assert(byteLength <= reqLength, \"byte array longer than desired length\");\n        assert(reqLength > 0, \"Requested array length <= 0\");\n        this.strip();\n        var littleEndian = endian === \"le\";\n        var res = new ArrayType(reqLength);\n        var b, i;\n        var q = this.clone();\n        if (!littleEndian) {\n            // Assume big-endian\n            for(i = 0; i < reqLength - byteLength; i++){\n                res[i] = 0;\n            }\n            for(i = 0; !q.isZero(); i++){\n                b = q.andln(0xff);\n                q.iushrn(8);\n                res[reqLength - i - 1] = b;\n            }\n        } else {\n            for(i = 0; !q.isZero(); i++){\n                b = q.andln(0xff);\n                q.iushrn(8);\n                res[i] = b;\n            }\n            for(; i < reqLength; i++){\n                res[i] = 0;\n            }\n        }\n        return res;\n    };\n    if (Math.clz32) {\n        BN.prototype._countBits = function _countBits(w) {\n            return 32 - Math.clz32(w);\n        };\n    } else {\n        BN.prototype._countBits = function _countBits(w) {\n            var t = w;\n            var r = 0;\n            if (t >= 0x1000) {\n                r += 13;\n                t >>>= 13;\n            }\n            if (t >= 0x40) {\n                r += 7;\n                t >>>= 7;\n            }\n            if (t >= 0x8) {\n                r += 4;\n                t >>>= 4;\n            }\n            if (t >= 0x02) {\n                r += 2;\n                t >>>= 2;\n            }\n            return r + t;\n        };\n    }\n    BN.prototype._zeroBits = function _zeroBits(w) {\n        // Short-cut\n        if (w === 0) return 26;\n        var t = w;\n        var r = 0;\n        if ((t & 0x1fff) === 0) {\n            r += 13;\n            t >>>= 13;\n        }\n        if ((t & 0x7f) === 0) {\n            r += 7;\n            t >>>= 7;\n        }\n        if ((t & 0xf) === 0) {\n            r += 4;\n            t >>>= 4;\n        }\n        if ((t & 0x3) === 0) {\n            r += 2;\n            t >>>= 2;\n        }\n        if ((t & 0x1) === 0) {\n            r++;\n        }\n        return r;\n    };\n    // Return number of used bits in a BN\n    BN.prototype.bitLength = function bitLength() {\n        var w = this.words[this.length - 1];\n        var hi = this._countBits(w);\n        return (this.length - 1) * 26 + hi;\n    };\n    function toBitArray(num) {\n        var w = new Array(num.bitLength());\n        for(var bit = 0; bit < w.length; bit++){\n            var off = bit / 26 | 0;\n            var wbit = bit % 26;\n            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;\n        }\n        return w;\n    }\n    // Number of trailing zero bits\n    BN.prototype.zeroBits = function zeroBits() {\n        if (this.isZero()) return 0;\n        var r = 0;\n        for(var i = 0; i < this.length; i++){\n            var b = this._zeroBits(this.words[i]);\n            r += b;\n            if (b !== 26) break;\n        }\n        return r;\n    };\n    BN.prototype.byteLength = function byteLength() {\n        return Math.ceil(this.bitLength() / 8);\n    };\n    BN.prototype.toTwos = function toTwos(width) {\n        if (this.negative !== 0) {\n            return this.abs().inotn(width).iaddn(1);\n        }\n        return this.clone();\n    };\n    BN.prototype.fromTwos = function fromTwos(width) {\n        if (this.testn(width - 1)) {\n            return this.notn(width).iaddn(1).ineg();\n        }\n        return this.clone();\n    };\n    BN.prototype.isNeg = function isNeg() {\n        return this.negative !== 0;\n    };\n    // Return negative clone of `this`\n    BN.prototype.neg = function neg() {\n        return this.clone().ineg();\n    };\n    BN.prototype.ineg = function ineg() {\n        if (!this.isZero()) {\n            this.negative ^= 1;\n        }\n        return this;\n    };\n    // Or `num` with `this` in-place\n    BN.prototype.iuor = function iuor(num) {\n        while(this.length < num.length){\n            this.words[this.length++] = 0;\n        }\n        for(var i = 0; i < num.length; i++){\n            this.words[i] = this.words[i] | num.words[i];\n        }\n        return this.strip();\n    };\n    BN.prototype.ior = function ior(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuor(num);\n    };\n    // Or `num` with `this`\n    BN.prototype.or = function or(num) {\n        if (this.length > num.length) return this.clone().ior(num);\n        return num.clone().ior(this);\n    };\n    BN.prototype.uor = function uor(num) {\n        if (this.length > num.length) return this.clone().iuor(num);\n        return num.clone().iuor(this);\n    };\n    // And `num` with `this` in-place\n    BN.prototype.iuand = function iuand(num) {\n        // b = min-length(num, this)\n        var b;\n        if (this.length > num.length) {\n            b = num;\n        } else {\n            b = this;\n        }\n        for(var i = 0; i < b.length; i++){\n            this.words[i] = this.words[i] & num.words[i];\n        }\n        this.length = b.length;\n        return this.strip();\n    };\n    BN.prototype.iand = function iand(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuand(num);\n    };\n    // And `num` with `this`\n    BN.prototype.and = function and(num) {\n        if (this.length > num.length) return this.clone().iand(num);\n        return num.clone().iand(this);\n    };\n    BN.prototype.uand = function uand(num) {\n        if (this.length > num.length) return this.clone().iuand(num);\n        return num.clone().iuand(this);\n    };\n    // Xor `num` with `this` in-place\n    BN.prototype.iuxor = function iuxor(num) {\n        // a.length > b.length\n        var a;\n        var b;\n        if (this.length > num.length) {\n            a = this;\n            b = num;\n        } else {\n            a = num;\n            b = this;\n        }\n        for(var i = 0; i < b.length; i++){\n            this.words[i] = a.words[i] ^ b.words[i];\n        }\n        if (this !== a) {\n            for(; i < a.length; i++){\n                this.words[i] = a.words[i];\n            }\n        }\n        this.length = a.length;\n        return this.strip();\n    };\n    BN.prototype.ixor = function ixor(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuxor(num);\n    };\n    // Xor `num` with `this`\n    BN.prototype.xor = function xor(num) {\n        if (this.length > num.length) return this.clone().ixor(num);\n        return num.clone().ixor(this);\n    };\n    BN.prototype.uxor = function uxor(num) {\n        if (this.length > num.length) return this.clone().iuxor(num);\n        return num.clone().iuxor(this);\n    };\n    // Not ``this`` with ``width`` bitwidth\n    BN.prototype.inotn = function inotn(width) {\n        assert(typeof width === \"number\" && width >= 0);\n        var bytesNeeded = Math.ceil(width / 26) | 0;\n        var bitsLeft = width % 26;\n        // Extend the buffer with leading zeroes\n        this._expand(bytesNeeded);\n        if (bitsLeft > 0) {\n            bytesNeeded--;\n        }\n        // Handle complete words\n        for(var i = 0; i < bytesNeeded; i++){\n            this.words[i] = ~this.words[i] & 0x3ffffff;\n        }\n        // Handle the residue\n        if (bitsLeft > 0) {\n            this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;\n        }\n        // And remove leading zeroes\n        return this.strip();\n    };\n    BN.prototype.notn = function notn(width) {\n        return this.clone().inotn(width);\n    };\n    // Set `bit` of `this`\n    BN.prototype.setn = function setn(bit, val) {\n        assert(typeof bit === \"number\" && bit >= 0);\n        var off = bit / 26 | 0;\n        var wbit = bit % 26;\n        this._expand(off + 1);\n        if (val) {\n            this.words[off] = this.words[off] | 1 << wbit;\n        } else {\n            this.words[off] = this.words[off] & ~(1 << wbit);\n        }\n        return this.strip();\n    };\n    // Add `num` to `this` in-place\n    BN.prototype.iadd = function iadd(num) {\n        var r;\n        // negative + positive\n        if (this.negative !== 0 && num.negative === 0) {\n            this.negative = 0;\n            r = this.isub(num);\n            this.negative ^= 1;\n            return this._normSign();\n        // positive + negative\n        } else if (this.negative === 0 && num.negative !== 0) {\n            num.negative = 0;\n            r = this.isub(num);\n            num.negative = 1;\n            return r._normSign();\n        }\n        // a.length > b.length\n        var a, b;\n        if (this.length > num.length) {\n            a = this;\n            b = num;\n        } else {\n            a = num;\n            b = this;\n        }\n        var carry = 0;\n        for(var i = 0; i < b.length; i++){\n            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n            this.words[i] = r & 0x3ffffff;\n            carry = r >>> 26;\n        }\n        for(; carry !== 0 && i < a.length; i++){\n            r = (a.words[i] | 0) + carry;\n            this.words[i] = r & 0x3ffffff;\n            carry = r >>> 26;\n        }\n        this.length = a.length;\n        if (carry !== 0) {\n            this.words[this.length] = carry;\n            this.length++;\n        // Copy the rest of the words\n        } else if (a !== this) {\n            for(; i < a.length; i++){\n                this.words[i] = a.words[i];\n            }\n        }\n        return this;\n    };\n    // Add `num` to `this`\n    BN.prototype.add = function add(num) {\n        var res;\n        if (num.negative !== 0 && this.negative === 0) {\n            num.negative = 0;\n            res = this.sub(num);\n            num.negative ^= 1;\n            return res;\n        } else if (num.negative === 0 && this.negative !== 0) {\n            this.negative = 0;\n            res = num.sub(this);\n            this.negative = 1;\n            return res;\n        }\n        if (this.length > num.length) return this.clone().iadd(num);\n        return num.clone().iadd(this);\n    };\n    // Subtract `num` from `this` in-place\n    BN.prototype.isub = function isub(num) {\n        // this - (-num) = this + num\n        if (num.negative !== 0) {\n            num.negative = 0;\n            var r = this.iadd(num);\n            num.negative = 1;\n            return r._normSign();\n        // -this - num = -(this + num)\n        } else if (this.negative !== 0) {\n            this.negative = 0;\n            this.iadd(num);\n            this.negative = 1;\n            return this._normSign();\n        }\n        // At this point both numbers are positive\n        var cmp = this.cmp(num);\n        // Optimization - zeroify\n        if (cmp === 0) {\n            this.negative = 0;\n            this.length = 1;\n            this.words[0] = 0;\n            return this;\n        }\n        // a > b\n        var a, b;\n        if (cmp > 0) {\n            a = this;\n            b = num;\n        } else {\n            a = num;\n            b = this;\n        }\n        var carry = 0;\n        for(var i = 0; i < b.length; i++){\n            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n            carry = r >> 26;\n            this.words[i] = r & 0x3ffffff;\n        }\n        for(; carry !== 0 && i < a.length; i++){\n            r = (a.words[i] | 0) + carry;\n            carry = r >> 26;\n            this.words[i] = r & 0x3ffffff;\n        }\n        // Copy rest of the words\n        if (carry === 0 && i < a.length && a !== this) {\n            for(; i < a.length; i++){\n                this.words[i] = a.words[i];\n            }\n        }\n        this.length = Math.max(this.length, i);\n        if (a !== this) {\n            this.negative = 1;\n        }\n        return this.strip();\n    };\n    // Subtract `num` from `this`\n    BN.prototype.sub = function sub(num) {\n        return this.clone().isub(num);\n    };\n    function smallMulTo(self, num, out) {\n        out.negative = num.negative ^ self.negative;\n        var len = self.length + num.length | 0;\n        out.length = len;\n        len = len - 1 | 0;\n        // Peel one iteration (compiler can't do it, because of code complexity)\n        var a = self.words[0] | 0;\n        var b = num.words[0] | 0;\n        var r = a * b;\n        var lo = r & 0x3ffffff;\n        var carry = r / 0x4000000 | 0;\n        out.words[0] = lo;\n        for(var k = 1; k < len; k++){\n            // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n            // note that ncarry could be >= 0x3ffffff\n            var ncarry = carry >>> 26;\n            var rword = carry & 0x3ffffff;\n            var maxJ = Math.min(k, num.length - 1);\n            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){\n                var i = k - j | 0;\n                a = self.words[i] | 0;\n                b = num.words[j] | 0;\n                r = a * b + rword;\n                ncarry += r / 0x4000000 | 0;\n                rword = r & 0x3ffffff;\n            }\n            out.words[k] = rword | 0;\n            carry = ncarry | 0;\n        }\n        if (carry !== 0) {\n            out.words[k] = carry | 0;\n        } else {\n            out.length--;\n        }\n        return out.strip();\n    }\n    // TODO(indutny): it may be reasonable to omit it for users who don't need\n    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n    // multiplication (like elliptic secp256k1).\n    var comb10MulTo = function comb10MulTo(self, num, out) {\n        var a = self.words;\n        var b = num.words;\n        var o = out.words;\n        var c = 0;\n        var lo;\n        var mid;\n        var hi;\n        var a0 = a[0] | 0;\n        var al0 = a0 & 0x1fff;\n        var ah0 = a0 >>> 13;\n        var a1 = a[1] | 0;\n        var al1 = a1 & 0x1fff;\n        var ah1 = a1 >>> 13;\n        var a2 = a[2] | 0;\n        var al2 = a2 & 0x1fff;\n        var ah2 = a2 >>> 13;\n        var a3 = a[3] | 0;\n        var al3 = a3 & 0x1fff;\n        var ah3 = a3 >>> 13;\n        var a4 = a[4] | 0;\n        var al4 = a4 & 0x1fff;\n        var ah4 = a4 >>> 13;\n        var a5 = a[5] | 0;\n        var al5 = a5 & 0x1fff;\n        var ah5 = a5 >>> 13;\n        var a6 = a[6] | 0;\n        var al6 = a6 & 0x1fff;\n        var ah6 = a6 >>> 13;\n        var a7 = a[7] | 0;\n        var al7 = a7 & 0x1fff;\n        var ah7 = a7 >>> 13;\n        var a8 = a[8] | 0;\n        var al8 = a8 & 0x1fff;\n        var ah8 = a8 >>> 13;\n        var a9 = a[9] | 0;\n        var al9 = a9 & 0x1fff;\n        var ah9 = a9 >>> 13;\n        var b0 = b[0] | 0;\n        var bl0 = b0 & 0x1fff;\n        var bh0 = b0 >>> 13;\n        var b1 = b[1] | 0;\n        var bl1 = b1 & 0x1fff;\n        var bh1 = b1 >>> 13;\n        var b2 = b[2] | 0;\n        var bl2 = b2 & 0x1fff;\n        var bh2 = b2 >>> 13;\n        var b3 = b[3] | 0;\n        var bl3 = b3 & 0x1fff;\n        var bh3 = b3 >>> 13;\n        var b4 = b[4] | 0;\n        var bl4 = b4 & 0x1fff;\n        var bh4 = b4 >>> 13;\n        var b5 = b[5] | 0;\n        var bl5 = b5 & 0x1fff;\n        var bh5 = b5 >>> 13;\n        var b6 = b[6] | 0;\n        var bl6 = b6 & 0x1fff;\n        var bh6 = b6 >>> 13;\n        var b7 = b[7] | 0;\n        var bl7 = b7 & 0x1fff;\n        var bh7 = b7 >>> 13;\n        var b8 = b[8] | 0;\n        var bl8 = b8 & 0x1fff;\n        var bh8 = b8 >>> 13;\n        var b9 = b[9] | 0;\n        var bl9 = b9 & 0x1fff;\n        var bh9 = b9 >>> 13;\n        out.negative = self.negative ^ num.negative;\n        out.length = 19;\n        /* k = 0 */ lo = Math.imul(al0, bl0);\n        mid = Math.imul(al0, bh0);\n        mid = mid + Math.imul(ah0, bl0) | 0;\n        hi = Math.imul(ah0, bh0);\n        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;\n        w0 &= 0x3ffffff;\n        /* k = 1 */ lo = Math.imul(al1, bl0);\n        mid = Math.imul(al1, bh0);\n        mid = mid + Math.imul(ah1, bl0) | 0;\n        hi = Math.imul(ah1, bh0);\n        lo = lo + Math.imul(al0, bl1) | 0;\n        mid = mid + Math.imul(al0, bh1) | 0;\n        mid = mid + Math.imul(ah0, bl1) | 0;\n        hi = hi + Math.imul(ah0, bh1) | 0;\n        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;\n        w1 &= 0x3ffffff;\n        /* k = 2 */ lo = Math.imul(al2, bl0);\n        mid = Math.imul(al2, bh0);\n        mid = mid + Math.imul(ah2, bl0) | 0;\n        hi = Math.imul(ah2, bh0);\n        lo = lo + Math.imul(al1, bl1) | 0;\n        mid = mid + Math.imul(al1, bh1) | 0;\n        mid = mid + Math.imul(ah1, bl1) | 0;\n        hi = hi + Math.imul(ah1, bh1) | 0;\n        lo = lo + Math.imul(al0, bl2) | 0;\n        mid = mid + Math.imul(al0, bh2) | 0;\n        mid = mid + Math.imul(ah0, bl2) | 0;\n        hi = hi + Math.imul(ah0, bh2) | 0;\n        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;\n        w2 &= 0x3ffffff;\n        /* k = 3 */ lo = Math.imul(al3, bl0);\n        mid = Math.imul(al3, bh0);\n        mid = mid + Math.imul(ah3, bl0) | 0;\n        hi = Math.imul(ah3, bh0);\n        lo = lo + Math.imul(al2, bl1) | 0;\n        mid = mid + Math.imul(al2, bh1) | 0;\n        mid = mid + Math.imul(ah2, bl1) | 0;\n        hi = hi + Math.imul(ah2, bh1) | 0;\n        lo = lo + Math.imul(al1, bl2) | 0;\n        mid = mid + Math.imul(al1, bh2) | 0;\n        mid = mid + Math.imul(ah1, bl2) | 0;\n        hi = hi + Math.imul(ah1, bh2) | 0;\n        lo = lo + Math.imul(al0, bl3) | 0;\n        mid = mid + Math.imul(al0, bh3) | 0;\n        mid = mid + Math.imul(ah0, bl3) | 0;\n        hi = hi + Math.imul(ah0, bh3) | 0;\n        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;\n        w3 &= 0x3ffffff;\n        /* k = 4 */ lo = Math.imul(al4, bl0);\n        mid = Math.imul(al4, bh0);\n        mid = mid + Math.imul(ah4, bl0) | 0;\n        hi = Math.imul(ah4, bh0);\n        lo = lo + Math.imul(al3, bl1) | 0;\n        mid = mid + Math.imul(al3, bh1) | 0;\n        mid = mid + Math.imul(ah3, bl1) | 0;\n        hi = hi + Math.imul(ah3, bh1) | 0;\n        lo = lo + Math.imul(al2, bl2) | 0;\n        mid = mid + Math.imul(al2, bh2) | 0;\n        mid = mid + Math.imul(ah2, bl2) | 0;\n        hi = hi + Math.imul(ah2, bh2) | 0;\n        lo = lo + Math.imul(al1, bl3) | 0;\n        mid = mid + Math.imul(al1, bh3) | 0;\n        mid = mid + Math.imul(ah1, bl3) | 0;\n        hi = hi + Math.imul(ah1, bh3) | 0;\n        lo = lo + Math.imul(al0, bl4) | 0;\n        mid = mid + Math.imul(al0, bh4) | 0;\n        mid = mid + Math.imul(ah0, bl4) | 0;\n        hi = hi + Math.imul(ah0, bh4) | 0;\n        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;\n        w4 &= 0x3ffffff;\n        /* k = 5 */ lo = Math.imul(al5, bl0);\n        mid = Math.imul(al5, bh0);\n        mid = mid + Math.imul(ah5, bl0) | 0;\n        hi = Math.imul(ah5, bh0);\n        lo = lo + Math.imul(al4, bl1) | 0;\n        mid = mid + Math.imul(al4, bh1) | 0;\n        mid = mid + Math.imul(ah4, bl1) | 0;\n        hi = hi + Math.imul(ah4, bh1) | 0;\n        lo = lo + Math.imul(al3, bl2) | 0;\n        mid = mid + Math.imul(al3, bh2) | 0;\n        mid = mid + Math.imul(ah3, bl2) | 0;\n        hi = hi + Math.imul(ah3, bh2) | 0;\n        lo = lo + Math.imul(al2, bl3) | 0;\n        mid = mid + Math.imul(al2, bh3) | 0;\n        mid = mid + Math.imul(ah2, bl3) | 0;\n        hi = hi + Math.imul(ah2, bh3) | 0;\n        lo = lo + Math.imul(al1, bl4) | 0;\n        mid = mid + Math.imul(al1, bh4) | 0;\n        mid = mid + Math.imul(ah1, bl4) | 0;\n        hi = hi + Math.imul(ah1, bh4) | 0;\n        lo = lo + Math.imul(al0, bl5) | 0;\n        mid = mid + Math.imul(al0, bh5) | 0;\n        mid = mid + Math.imul(ah0, bl5) | 0;\n        hi = hi + Math.imul(ah0, bh5) | 0;\n        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;\n        w5 &= 0x3ffffff;\n        /* k = 6 */ lo = Math.imul(al6, bl0);\n        mid = Math.imul(al6, bh0);\n        mid = mid + Math.imul(ah6, bl0) | 0;\n        hi = Math.imul(ah6, bh0);\n        lo = lo + Math.imul(al5, bl1) | 0;\n        mid = mid + Math.imul(al5, bh1) | 0;\n        mid = mid + Math.imul(ah5, bl1) | 0;\n        hi = hi + Math.imul(ah5, bh1) | 0;\n        lo = lo + Math.imul(al4, bl2) | 0;\n        mid = mid + Math.imul(al4, bh2) | 0;\n        mid = mid + Math.imul(ah4, bl2) | 0;\n        hi = hi + Math.imul(ah4, bh2) | 0;\n        lo = lo + Math.imul(al3, bl3) | 0;\n        mid = mid + Math.imul(al3, bh3) | 0;\n        mid = mid + Math.imul(ah3, bl3) | 0;\n        hi = hi + Math.imul(ah3, bh3) | 0;\n        lo = lo + Math.imul(al2, bl4) | 0;\n        mid = mid + Math.imul(al2, bh4) | 0;\n        mid = mid + Math.imul(ah2, bl4) | 0;\n        hi = hi + Math.imul(ah2, bh4) | 0;\n        lo = lo + Math.imul(al1, bl5) | 0;\n        mid = mid + Math.imul(al1, bh5) | 0;\n        mid = mid + Math.imul(ah1, bl5) | 0;\n        hi = hi + Math.imul(ah1, bh5) | 0;\n        lo = lo + Math.imul(al0, bl6) | 0;\n        mid = mid + Math.imul(al0, bh6) | 0;\n        mid = mid + Math.imul(ah0, bl6) | 0;\n        hi = hi + Math.imul(ah0, bh6) | 0;\n        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;\n        w6 &= 0x3ffffff;\n        /* k = 7 */ lo = Math.imul(al7, bl0);\n        mid = Math.imul(al7, bh0);\n        mid = mid + Math.imul(ah7, bl0) | 0;\n        hi = Math.imul(ah7, bh0);\n        lo = lo + Math.imul(al6, bl1) | 0;\n        mid = mid + Math.imul(al6, bh1) | 0;\n        mid = mid + Math.imul(ah6, bl1) | 0;\n        hi = hi + Math.imul(ah6, bh1) | 0;\n        lo = lo + Math.imul(al5, bl2) | 0;\n        mid = mid + Math.imul(al5, bh2) | 0;\n        mid = mid + Math.imul(ah5, bl2) | 0;\n        hi = hi + Math.imul(ah5, bh2) | 0;\n        lo = lo + Math.imul(al4, bl3) | 0;\n        mid = mid + Math.imul(al4, bh3) | 0;\n        mid = mid + Math.imul(ah4, bl3) | 0;\n        hi = hi + Math.imul(ah4, bh3) | 0;\n        lo = lo + Math.imul(al3, bl4) | 0;\n        mid = mid + Math.imul(al3, bh4) | 0;\n        mid = mid + Math.imul(ah3, bl4) | 0;\n        hi = hi + Math.imul(ah3, bh4) | 0;\n        lo = lo + Math.imul(al2, bl5) | 0;\n        mid = mid + Math.imul(al2, bh5) | 0;\n        mid = mid + Math.imul(ah2, bl5) | 0;\n        hi = hi + Math.imul(ah2, bh5) | 0;\n        lo = lo + Math.imul(al1, bl6) | 0;\n        mid = mid + Math.imul(al1, bh6) | 0;\n        mid = mid + Math.imul(ah1, bl6) | 0;\n        hi = hi + Math.imul(ah1, bh6) | 0;\n        lo = lo + Math.imul(al0, bl7) | 0;\n        mid = mid + Math.imul(al0, bh7) | 0;\n        mid = mid + Math.imul(ah0, bl7) | 0;\n        hi = hi + Math.imul(ah0, bh7) | 0;\n        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;\n        w7 &= 0x3ffffff;\n        /* k = 8 */ lo = Math.imul(al8, bl0);\n        mid = Math.imul(al8, bh0);\n        mid = mid + Math.imul(ah8, bl0) | 0;\n        hi = Math.imul(ah8, bh0);\n        lo = lo + Math.imul(al7, bl1) | 0;\n        mid = mid + Math.imul(al7, bh1) | 0;\n        mid = mid + Math.imul(ah7, bl1) | 0;\n        hi = hi + Math.imul(ah7, bh1) | 0;\n        lo = lo + Math.imul(al6, bl2) | 0;\n        mid = mid + Math.imul(al6, bh2) | 0;\n        mid = mid + Math.imul(ah6, bl2) | 0;\n        hi = hi + Math.imul(ah6, bh2) | 0;\n        lo = lo + Math.imul(al5, bl3) | 0;\n        mid = mid + Math.imul(al5, bh3) | 0;\n        mid = mid + Math.imul(ah5, bl3) | 0;\n        hi = hi + Math.imul(ah5, bh3) | 0;\n        lo = lo + Math.imul(al4, bl4) | 0;\n        mid = mid + Math.imul(al4, bh4) | 0;\n        mid = mid + Math.imul(ah4, bl4) | 0;\n        hi = hi + Math.imul(ah4, bh4) | 0;\n        lo = lo + Math.imul(al3, bl5) | 0;\n        mid = mid + Math.imul(al3, bh5) | 0;\n        mid = mid + Math.imul(ah3, bl5) | 0;\n        hi = hi + Math.imul(ah3, bh5) | 0;\n        lo = lo + Math.imul(al2, bl6) | 0;\n        mid = mid + Math.imul(al2, bh6) | 0;\n        mid = mid + Math.imul(ah2, bl6) | 0;\n        hi = hi + Math.imul(ah2, bh6) | 0;\n        lo = lo + Math.imul(al1, bl7) | 0;\n        mid = mid + Math.imul(al1, bh7) | 0;\n        mid = mid + Math.imul(ah1, bl7) | 0;\n        hi = hi + Math.imul(ah1, bh7) | 0;\n        lo = lo + Math.imul(al0, bl8) | 0;\n        mid = mid + Math.imul(al0, bh8) | 0;\n        mid = mid + Math.imul(ah0, bl8) | 0;\n        hi = hi + Math.imul(ah0, bh8) | 0;\n        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;\n        w8 &= 0x3ffffff;\n        /* k = 9 */ lo = Math.imul(al9, bl0);\n        mid = Math.imul(al9, bh0);\n        mid = mid + Math.imul(ah9, bl0) | 0;\n        hi = Math.imul(ah9, bh0);\n        lo = lo + Math.imul(al8, bl1) | 0;\n        mid = mid + Math.imul(al8, bh1) | 0;\n        mid = mid + Math.imul(ah8, bl1) | 0;\n        hi = hi + Math.imul(ah8, bh1) | 0;\n        lo = lo + Math.imul(al7, bl2) | 0;\n        mid = mid + Math.imul(al7, bh2) | 0;\n        mid = mid + Math.imul(ah7, bl2) | 0;\n        hi = hi + Math.imul(ah7, bh2) | 0;\n        lo = lo + Math.imul(al6, bl3) | 0;\n        mid = mid + Math.imul(al6, bh3) | 0;\n        mid = mid + Math.imul(ah6, bl3) | 0;\n        hi = hi + Math.imul(ah6, bh3) | 0;\n        lo = lo + Math.imul(al5, bl4) | 0;\n        mid = mid + Math.imul(al5, bh4) | 0;\n        mid = mid + Math.imul(ah5, bl4) | 0;\n        hi = hi + Math.imul(ah5, bh4) | 0;\n        lo = lo + Math.imul(al4, bl5) | 0;\n        mid = mid + Math.imul(al4, bh5) | 0;\n        mid = mid + Math.imul(ah4, bl5) | 0;\n        hi = hi + Math.imul(ah4, bh5) | 0;\n        lo = lo + Math.imul(al3, bl6) | 0;\n        mid = mid + Math.imul(al3, bh6) | 0;\n        mid = mid + Math.imul(ah3, bl6) | 0;\n        hi = hi + Math.imul(ah3, bh6) | 0;\n        lo = lo + Math.imul(al2, bl7) | 0;\n        mid = mid + Math.imul(al2, bh7) | 0;\n        mid = mid + Math.imul(ah2, bl7) | 0;\n        hi = hi + Math.imul(ah2, bh7) | 0;\n        lo = lo + Math.imul(al1, bl8) | 0;\n        mid = mid + Math.imul(al1, bh8) | 0;\n        mid = mid + Math.imul(ah1, bl8) | 0;\n        hi = hi + Math.imul(ah1, bh8) | 0;\n        lo = lo + Math.imul(al0, bl9) | 0;\n        mid = mid + Math.imul(al0, bh9) | 0;\n        mid = mid + Math.imul(ah0, bl9) | 0;\n        hi = hi + Math.imul(ah0, bh9) | 0;\n        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;\n        w9 &= 0x3ffffff;\n        /* k = 10 */ lo = Math.imul(al9, bl1);\n        mid = Math.imul(al9, bh1);\n        mid = mid + Math.imul(ah9, bl1) | 0;\n        hi = Math.imul(ah9, bh1);\n        lo = lo + Math.imul(al8, bl2) | 0;\n        mid = mid + Math.imul(al8, bh2) | 0;\n        mid = mid + Math.imul(ah8, bl2) | 0;\n        hi = hi + Math.imul(ah8, bh2) | 0;\n        lo = lo + Math.imul(al7, bl3) | 0;\n        mid = mid + Math.imul(al7, bh3) | 0;\n        mid = mid + Math.imul(ah7, bl3) | 0;\n        hi = hi + Math.imul(ah7, bh3) | 0;\n        lo = lo + Math.imul(al6, bl4) | 0;\n        mid = mid + Math.imul(al6, bh4) | 0;\n        mid = mid + Math.imul(ah6, bl4) | 0;\n        hi = hi + Math.imul(ah6, bh4) | 0;\n        lo = lo + Math.imul(al5, bl5) | 0;\n        mid = mid + Math.imul(al5, bh5) | 0;\n        mid = mid + Math.imul(ah5, bl5) | 0;\n        hi = hi + Math.imul(ah5, bh5) | 0;\n        lo = lo + Math.imul(al4, bl6) | 0;\n        mid = mid + Math.imul(al4, bh6) | 0;\n        mid = mid + Math.imul(ah4, bl6) | 0;\n        hi = hi + Math.imul(ah4, bh6) | 0;\n        lo = lo + Math.imul(al3, bl7) | 0;\n        mid = mid + Math.imul(al3, bh7) | 0;\n        mid = mid + Math.imul(ah3, bl7) | 0;\n        hi = hi + Math.imul(ah3, bh7) | 0;\n        lo = lo + Math.imul(al2, bl8) | 0;\n        mid = mid + Math.imul(al2, bh8) | 0;\n        mid = mid + Math.imul(ah2, bl8) | 0;\n        hi = hi + Math.imul(ah2, bh8) | 0;\n        lo = lo + Math.imul(al1, bl9) | 0;\n        mid = mid + Math.imul(al1, bh9) | 0;\n        mid = mid + Math.imul(ah1, bl9) | 0;\n        hi = hi + Math.imul(ah1, bh9) | 0;\n        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;\n        w10 &= 0x3ffffff;\n        /* k = 11 */ lo = Math.imul(al9, bl2);\n        mid = Math.imul(al9, bh2);\n        mid = mid + Math.imul(ah9, bl2) | 0;\n        hi = Math.imul(ah9, bh2);\n        lo = lo + Math.imul(al8, bl3) | 0;\n        mid = mid + Math.imul(al8, bh3) | 0;\n        mid = mid + Math.imul(ah8, bl3) | 0;\n        hi = hi + Math.imul(ah8, bh3) | 0;\n        lo = lo + Math.imul(al7, bl4) | 0;\n        mid = mid + Math.imul(al7, bh4) | 0;\n        mid = mid + Math.imul(ah7, bl4) | 0;\n        hi = hi + Math.imul(ah7, bh4) | 0;\n        lo = lo + Math.imul(al6, bl5) | 0;\n        mid = mid + Math.imul(al6, bh5) | 0;\n        mid = mid + Math.imul(ah6, bl5) | 0;\n        hi = hi + Math.imul(ah6, bh5) | 0;\n        lo = lo + Math.imul(al5, bl6) | 0;\n        mid = mid + Math.imul(al5, bh6) | 0;\n        mid = mid + Math.imul(ah5, bl6) | 0;\n        hi = hi + Math.imul(ah5, bh6) | 0;\n        lo = lo + Math.imul(al4, bl7) | 0;\n        mid = mid + Math.imul(al4, bh7) | 0;\n        mid = mid + Math.imul(ah4, bl7) | 0;\n        hi = hi + Math.imul(ah4, bh7) | 0;\n        lo = lo + Math.imul(al3, bl8) | 0;\n        mid = mid + Math.imul(al3, bh8) | 0;\n        mid = mid + Math.imul(ah3, bl8) | 0;\n        hi = hi + Math.imul(ah3, bh8) | 0;\n        lo = lo + Math.imul(al2, bl9) | 0;\n        mid = mid + Math.imul(al2, bh9) | 0;\n        mid = mid + Math.imul(ah2, bl9) | 0;\n        hi = hi + Math.imul(ah2, bh9) | 0;\n        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;\n        w11 &= 0x3ffffff;\n        /* k = 12 */ lo = Math.imul(al9, bl3);\n        mid = Math.imul(al9, bh3);\n        mid = mid + Math.imul(ah9, bl3) | 0;\n        hi = Math.imul(ah9, bh3);\n        lo = lo + Math.imul(al8, bl4) | 0;\n        mid = mid + Math.imul(al8, bh4) | 0;\n        mid = mid + Math.imul(ah8, bl4) | 0;\n        hi = hi + Math.imul(ah8, bh4) | 0;\n        lo = lo + Math.imul(al7, bl5) | 0;\n        mid = mid + Math.imul(al7, bh5) | 0;\n        mid = mid + Math.imul(ah7, bl5) | 0;\n        hi = hi + Math.imul(ah7, bh5) | 0;\n        lo = lo + Math.imul(al6, bl6) | 0;\n        mid = mid + Math.imul(al6, bh6) | 0;\n        mid = mid + Math.imul(ah6, bl6) | 0;\n        hi = hi + Math.imul(ah6, bh6) | 0;\n        lo = lo + Math.imul(al5, bl7) | 0;\n        mid = mid + Math.imul(al5, bh7) | 0;\n        mid = mid + Math.imul(ah5, bl7) | 0;\n        hi = hi + Math.imul(ah5, bh7) | 0;\n        lo = lo + Math.imul(al4, bl8) | 0;\n        mid = mid + Math.imul(al4, bh8) | 0;\n        mid = mid + Math.imul(ah4, bl8) | 0;\n        hi = hi + Math.imul(ah4, bh8) | 0;\n        lo = lo + Math.imul(al3, bl9) | 0;\n        mid = mid + Math.imul(al3, bh9) | 0;\n        mid = mid + Math.imul(ah3, bl9) | 0;\n        hi = hi + Math.imul(ah3, bh9) | 0;\n        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;\n        w12 &= 0x3ffffff;\n        /* k = 13 */ lo = Math.imul(al9, bl4);\n        mid = Math.imul(al9, bh4);\n        mid = mid + Math.imul(ah9, bl4) | 0;\n        hi = Math.imul(ah9, bh4);\n        lo = lo + Math.imul(al8, bl5) | 0;\n        mid = mid + Math.imul(al8, bh5) | 0;\n        mid = mid + Math.imul(ah8, bl5) | 0;\n        hi = hi + Math.imul(ah8, bh5) | 0;\n        lo = lo + Math.imul(al7, bl6) | 0;\n        mid = mid + Math.imul(al7, bh6) | 0;\n        mid = mid + Math.imul(ah7, bl6) | 0;\n        hi = hi + Math.imul(ah7, bh6) | 0;\n        lo = lo + Math.imul(al6, bl7) | 0;\n        mid = mid + Math.imul(al6, bh7) | 0;\n        mid = mid + Math.imul(ah6, bl7) | 0;\n        hi = hi + Math.imul(ah6, bh7) | 0;\n        lo = lo + Math.imul(al5, bl8) | 0;\n        mid = mid + Math.imul(al5, bh8) | 0;\n        mid = mid + Math.imul(ah5, bl8) | 0;\n        hi = hi + Math.imul(ah5, bh8) | 0;\n        lo = lo + Math.imul(al4, bl9) | 0;\n        mid = mid + Math.imul(al4, bh9) | 0;\n        mid = mid + Math.imul(ah4, bl9) | 0;\n        hi = hi + Math.imul(ah4, bh9) | 0;\n        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;\n        w13 &= 0x3ffffff;\n        /* k = 14 */ lo = Math.imul(al9, bl5);\n        mid = Math.imul(al9, bh5);\n        mid = mid + Math.imul(ah9, bl5) | 0;\n        hi = Math.imul(ah9, bh5);\n        lo = lo + Math.imul(al8, bl6) | 0;\n        mid = mid + Math.imul(al8, bh6) | 0;\n        mid = mid + Math.imul(ah8, bl6) | 0;\n        hi = hi + Math.imul(ah8, bh6) | 0;\n        lo = lo + Math.imul(al7, bl7) | 0;\n        mid = mid + Math.imul(al7, bh7) | 0;\n        mid = mid + Math.imul(ah7, bl7) | 0;\n        hi = hi + Math.imul(ah7, bh7) | 0;\n        lo = lo + Math.imul(al6, bl8) | 0;\n        mid = mid + Math.imul(al6, bh8) | 0;\n        mid = mid + Math.imul(ah6, bl8) | 0;\n        hi = hi + Math.imul(ah6, bh8) | 0;\n        lo = lo + Math.imul(al5, bl9) | 0;\n        mid = mid + Math.imul(al5, bh9) | 0;\n        mid = mid + Math.imul(ah5, bl9) | 0;\n        hi = hi + Math.imul(ah5, bh9) | 0;\n        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;\n        w14 &= 0x3ffffff;\n        /* k = 15 */ lo = Math.imul(al9, bl6);\n        mid = Math.imul(al9, bh6);\n        mid = mid + Math.imul(ah9, bl6) | 0;\n        hi = Math.imul(ah9, bh6);\n        lo = lo + Math.imul(al8, bl7) | 0;\n        mid = mid + Math.imul(al8, bh7) | 0;\n        mid = mid + Math.imul(ah8, bl7) | 0;\n        hi = hi + Math.imul(ah8, bh7) | 0;\n        lo = lo + Math.imul(al7, bl8) | 0;\n        mid = mid + Math.imul(al7, bh8) | 0;\n        mid = mid + Math.imul(ah7, bl8) | 0;\n        hi = hi + Math.imul(ah7, bh8) | 0;\n        lo = lo + Math.imul(al6, bl9) | 0;\n        mid = mid + Math.imul(al6, bh9) | 0;\n        mid = mid + Math.imul(ah6, bl9) | 0;\n        hi = hi + Math.imul(ah6, bh9) | 0;\n        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;\n        w15 &= 0x3ffffff;\n        /* k = 16 */ lo = Math.imul(al9, bl7);\n        mid = Math.imul(al9, bh7);\n        mid = mid + Math.imul(ah9, bl7) | 0;\n        hi = Math.imul(ah9, bh7);\n        lo = lo + Math.imul(al8, bl8) | 0;\n        mid = mid + Math.imul(al8, bh8) | 0;\n        mid = mid + Math.imul(ah8, bl8) | 0;\n        hi = hi + Math.imul(ah8, bh8) | 0;\n        lo = lo + Math.imul(al7, bl9) | 0;\n        mid = mid + Math.imul(al7, bh9) | 0;\n        mid = mid + Math.imul(ah7, bl9) | 0;\n        hi = hi + Math.imul(ah7, bh9) | 0;\n        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;\n        w16 &= 0x3ffffff;\n        /* k = 17 */ lo = Math.imul(al9, bl8);\n        mid = Math.imul(al9, bh8);\n        mid = mid + Math.imul(ah9, bl8) | 0;\n        hi = Math.imul(ah9, bh8);\n        lo = lo + Math.imul(al8, bl9) | 0;\n        mid = mid + Math.imul(al8, bh9) | 0;\n        mid = mid + Math.imul(ah8, bl9) | 0;\n        hi = hi + Math.imul(ah8, bh9) | 0;\n        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;\n        w17 &= 0x3ffffff;\n        /* k = 18 */ lo = Math.imul(al9, bl9);\n        mid = Math.imul(al9, bh9);\n        mid = mid + Math.imul(ah9, bl9) | 0;\n        hi = Math.imul(ah9, bh9);\n        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;\n        w18 &= 0x3ffffff;\n        o[0] = w0;\n        o[1] = w1;\n        o[2] = w2;\n        o[3] = w3;\n        o[4] = w4;\n        o[5] = w5;\n        o[6] = w6;\n        o[7] = w7;\n        o[8] = w8;\n        o[9] = w9;\n        o[10] = w10;\n        o[11] = w11;\n        o[12] = w12;\n        o[13] = w13;\n        o[14] = w14;\n        o[15] = w15;\n        o[16] = w16;\n        o[17] = w17;\n        o[18] = w18;\n        if (c !== 0) {\n            o[19] = c;\n            out.length++;\n        }\n        return out;\n    };\n    // Polyfill comb\n    if (!Math.imul) {\n        comb10MulTo = smallMulTo;\n    }\n    function bigMulTo(self, num, out) {\n        out.negative = num.negative ^ self.negative;\n        out.length = self.length + num.length;\n        var carry = 0;\n        var hncarry = 0;\n        for(var k = 0; k < out.length - 1; k++){\n            // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n            // note that ncarry could be >= 0x3ffffff\n            var ncarry = hncarry;\n            hncarry = 0;\n            var rword = carry & 0x3ffffff;\n            var maxJ = Math.min(k, num.length - 1);\n            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){\n                var i = k - j;\n                var a = self.words[i] | 0;\n                var b = num.words[j] | 0;\n                var r = a * b;\n                var lo = r & 0x3ffffff;\n                ncarry = ncarry + (r / 0x4000000 | 0) | 0;\n                lo = lo + rword | 0;\n                rword = lo & 0x3ffffff;\n                ncarry = ncarry + (lo >>> 26) | 0;\n                hncarry += ncarry >>> 26;\n                ncarry &= 0x3ffffff;\n            }\n            out.words[k] = rword;\n            carry = ncarry;\n            ncarry = hncarry;\n        }\n        if (carry !== 0) {\n            out.words[k] = carry;\n        } else {\n            out.length--;\n        }\n        return out.strip();\n    }\n    function jumboMulTo(self, num, out) {\n        var fftm = new FFTM();\n        return fftm.mulp(self, num, out);\n    }\n    BN.prototype.mulTo = function mulTo(num, out) {\n        var res;\n        var len = this.length + num.length;\n        if (this.length === 10 && num.length === 10) {\n            res = comb10MulTo(this, num, out);\n        } else if (len < 63) {\n            res = smallMulTo(this, num, out);\n        } else if (len < 1024) {\n            res = bigMulTo(this, num, out);\n        } else {\n            res = jumboMulTo(this, num, out);\n        }\n        return res;\n    };\n    // Cooley-Tukey algorithm for FFT\n    // slightly revisited to rely on looping instead of recursion\n    function FFTM(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    FFTM.prototype.makeRBT = function makeRBT(N) {\n        var t = new Array(N);\n        var l = BN.prototype._countBits(N) - 1;\n        for(var i = 0; i < N; i++){\n            t[i] = this.revBin(i, l, N);\n        }\n        return t;\n    };\n    // Returns binary-reversed representation of `x`\n    FFTM.prototype.revBin = function revBin(x, l, N) {\n        if (x === 0 || x === N - 1) return x;\n        var rb = 0;\n        for(var i = 0; i < l; i++){\n            rb |= (x & 1) << l - i - 1;\n            x >>= 1;\n        }\n        return rb;\n    };\n    // Performs \"tweedling\" phase, therefore 'emulating'\n    // behaviour of the recursive algorithm\n    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {\n        for(var i = 0; i < N; i++){\n            rtws[i] = rws[rbt[i]];\n            itws[i] = iws[rbt[i]];\n        }\n    };\n    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {\n        this.permute(rbt, rws, iws, rtws, itws, N);\n        for(var s = 1; s < N; s <<= 1){\n            var l = s << 1;\n            var rtwdf = Math.cos(2 * Math.PI / l);\n            var itwdf = Math.sin(2 * Math.PI / l);\n            for(var p = 0; p < N; p += l){\n                var rtwdf_ = rtwdf;\n                var itwdf_ = itwdf;\n                for(var j = 0; j < s; j++){\n                    var re = rtws[p + j];\n                    var ie = itws[p + j];\n                    var ro = rtws[p + j + s];\n                    var io = itws[p + j + s];\n                    var rx = rtwdf_ * ro - itwdf_ * io;\n                    io = rtwdf_ * io + itwdf_ * ro;\n                    ro = rx;\n                    rtws[p + j] = re + ro;\n                    itws[p + j] = ie + io;\n                    rtws[p + j + s] = re - ro;\n                    itws[p + j + s] = ie - io;\n                    /* jshint maxdepth : false */ if (j !== l) {\n                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n                        rtwdf_ = rx;\n                    }\n                }\n            }\n        }\n    };\n    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {\n        var N = Math.max(m, n) | 1;\n        var odd = N & 1;\n        var i = 0;\n        for(N = N / 2 | 0; N; N = N >>> 1){\n            i++;\n        }\n        return 1 << i + 1 + odd;\n    };\n    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {\n        if (N <= 1) return;\n        for(var i = 0; i < N / 2; i++){\n            var t = rws[i];\n            rws[i] = rws[N - i - 1];\n            rws[N - i - 1] = t;\n            t = iws[i];\n            iws[i] = -iws[N - i - 1];\n            iws[N - i - 1] = -t;\n        }\n    };\n    FFTM.prototype.normalize13b = function normalize13b(ws, N) {\n        var carry = 0;\n        for(var i = 0; i < N / 2; i++){\n            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;\n            ws[i] = w & 0x3ffffff;\n            if (w < 0x4000000) {\n                carry = 0;\n            } else {\n                carry = w / 0x4000000 | 0;\n            }\n        }\n        return ws;\n    };\n    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {\n        var carry = 0;\n        for(var i = 0; i < len; i++){\n            carry = carry + (ws[i] | 0);\n            rws[2 * i] = carry & 0x1fff;\n            carry = carry >>> 13;\n            rws[2 * i + 1] = carry & 0x1fff;\n            carry = carry >>> 13;\n        }\n        // Pad with zeroes\n        for(i = 2 * len; i < N; ++i){\n            rws[i] = 0;\n        }\n        assert(carry === 0);\n        assert((carry & ~0x1fff) === 0);\n    };\n    FFTM.prototype.stub = function stub(N) {\n        var ph = new Array(N);\n        for(var i = 0; i < N; i++){\n            ph[i] = 0;\n        }\n        return ph;\n    };\n    FFTM.prototype.mulp = function mulp(x, y, out) {\n        var N = 2 * this.guessLen13b(x.length, y.length);\n        var rbt = this.makeRBT(N);\n        var _ = this.stub(N);\n        var rws = new Array(N);\n        var rwst = new Array(N);\n        var iwst = new Array(N);\n        var nrws = new Array(N);\n        var nrwst = new Array(N);\n        var niwst = new Array(N);\n        var rmws = out.words;\n        rmws.length = N;\n        this.convert13b(x.words, x.length, rws, N);\n        this.convert13b(y.words, y.length, nrws, N);\n        this.transform(rws, _, rwst, iwst, N, rbt);\n        this.transform(nrws, _, nrwst, niwst, N, rbt);\n        for(var i = 0; i < N; i++){\n            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n            rwst[i] = rx;\n        }\n        this.conjugate(rwst, iwst, N);\n        this.transform(rwst, iwst, rmws, _, N, rbt);\n        this.conjugate(rmws, _, N);\n        this.normalize13b(rmws, N);\n        out.negative = x.negative ^ y.negative;\n        out.length = x.length + y.length;\n        return out.strip();\n    };\n    // Multiply `this` by `num`\n    BN.prototype.mul = function mul(num) {\n        var out = new BN(null);\n        out.words = new Array(this.length + num.length);\n        return this.mulTo(num, out);\n    };\n    // Multiply employing FFT\n    BN.prototype.mulf = function mulf(num) {\n        var out = new BN(null);\n        out.words = new Array(this.length + num.length);\n        return jumboMulTo(this, num, out);\n    };\n    // In-place Multiplication\n    BN.prototype.imul = function imul(num) {\n        return this.clone().mulTo(num, this);\n    };\n    BN.prototype.imuln = function imuln(num) {\n        assert(typeof num === \"number\");\n        assert(num < 0x4000000);\n        // Carry\n        var carry = 0;\n        for(var i = 0; i < this.length; i++){\n            var w = (this.words[i] | 0) * num;\n            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n            carry >>= 26;\n            carry += w / 0x4000000 | 0;\n            // NOTE: lo is 27bit maximum\n            carry += lo >>> 26;\n            this.words[i] = lo & 0x3ffffff;\n        }\n        if (carry !== 0) {\n            this.words[i] = carry;\n            this.length++;\n        }\n        return this;\n    };\n    BN.prototype.muln = function muln(num) {\n        return this.clone().imuln(num);\n    };\n    // `this` * `this`\n    BN.prototype.sqr = function sqr() {\n        return this.mul(this);\n    };\n    // `this` * `this` in-place\n    BN.prototype.isqr = function isqr() {\n        return this.imul(this.clone());\n    };\n    // Math.pow(`this`, `num`)\n    BN.prototype.pow = function pow(num) {\n        var w = toBitArray(num);\n        if (w.length === 0) return new BN(1);\n        // Skip leading zeroes\n        var res = this;\n        for(var i = 0; i < w.length; i++, res = res.sqr()){\n            if (w[i] !== 0) break;\n        }\n        if (++i < w.length) {\n            for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){\n                if (w[i] === 0) continue;\n                res = res.mul(q);\n            }\n        }\n        return res;\n    };\n    // Shift-left in-place\n    BN.prototype.iushln = function iushln(bits) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var r = bits % 26;\n        var s = (bits - r) / 26;\n        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;\n        var i;\n        if (r !== 0) {\n            var carry = 0;\n            for(i = 0; i < this.length; i++){\n                var newCarry = this.words[i] & carryMask;\n                var c = (this.words[i] | 0) - newCarry << r;\n                this.words[i] = c | carry;\n                carry = newCarry >>> 26 - r;\n            }\n            if (carry) {\n                this.words[i] = carry;\n                this.length++;\n            }\n        }\n        if (s !== 0) {\n            for(i = this.length - 1; i >= 0; i--){\n                this.words[i + s] = this.words[i];\n            }\n            for(i = 0; i < s; i++){\n                this.words[i] = 0;\n            }\n            this.length += s;\n        }\n        return this.strip();\n    };\n    BN.prototype.ishln = function ishln(bits) {\n        // TODO(indutny): implement me\n        assert(this.negative === 0);\n        return this.iushln(bits);\n    };\n    // Shift-right in-place\n    // NOTE: `hint` is a lowest bit before trailing zeroes\n    // NOTE: if `extended` is present - it will be filled with destroyed bits\n    BN.prototype.iushrn = function iushrn(bits, hint, extended) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var h;\n        if (hint) {\n            h = (hint - hint % 26) / 26;\n        } else {\n            h = 0;\n        }\n        var r = bits % 26;\n        var s = Math.min((bits - r) / 26, this.length);\n        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;\n        var maskedWords = extended;\n        h -= s;\n        h = Math.max(0, h);\n        // Extended mode, copy masked part\n        if (maskedWords) {\n            for(var i = 0; i < s; i++){\n                maskedWords.words[i] = this.words[i];\n            }\n            maskedWords.length = s;\n        }\n        if (s === 0) {\n        // No-op, we should not move anything at all\n        } else if (this.length > s) {\n            this.length -= s;\n            for(i = 0; i < this.length; i++){\n                this.words[i] = this.words[i + s];\n            }\n        } else {\n            this.words[0] = 0;\n            this.length = 1;\n        }\n        var carry = 0;\n        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){\n            var word = this.words[i] | 0;\n            this.words[i] = carry << 26 - r | word >>> r;\n            carry = word & mask;\n        }\n        // Push carried bits as a mask\n        if (maskedWords && carry !== 0) {\n            maskedWords.words[maskedWords.length++] = carry;\n        }\n        if (this.length === 0) {\n            this.words[0] = 0;\n            this.length = 1;\n        }\n        return this.strip();\n    };\n    BN.prototype.ishrn = function ishrn(bits, hint, extended) {\n        // TODO(indutny): implement me\n        assert(this.negative === 0);\n        return this.iushrn(bits, hint, extended);\n    };\n    // Shift-left\n    BN.prototype.shln = function shln(bits) {\n        return this.clone().ishln(bits);\n    };\n    BN.prototype.ushln = function ushln(bits) {\n        return this.clone().iushln(bits);\n    };\n    // Shift-right\n    BN.prototype.shrn = function shrn(bits) {\n        return this.clone().ishrn(bits);\n    };\n    BN.prototype.ushrn = function ushrn(bits) {\n        return this.clone().iushrn(bits);\n    };\n    // Test if n bit is set\n    BN.prototype.testn = function testn(bit) {\n        assert(typeof bit === \"number\" && bit >= 0);\n        var r = bit % 26;\n        var s = (bit - r) / 26;\n        var q = 1 << r;\n        // Fast case: bit is much higher than all existing words\n        if (this.length <= s) return false;\n        // Check bit and return\n        var w = this.words[s];\n        return !!(w & q);\n    };\n    // Return only lowers bits of number (in-place)\n    BN.prototype.imaskn = function imaskn(bits) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var r = bits % 26;\n        var s = (bits - r) / 26;\n        assert(this.negative === 0, \"imaskn works only with positive numbers\");\n        if (this.length <= s) {\n            return this;\n        }\n        if (r !== 0) {\n            s++;\n        }\n        this.length = Math.min(s, this.length);\n        if (r !== 0) {\n            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;\n            this.words[this.length - 1] &= mask;\n        }\n        return this.strip();\n    };\n    // Return only lowers bits of number\n    BN.prototype.maskn = function maskn(bits) {\n        return this.clone().imaskn(bits);\n    };\n    // Add plain number `num` to `this`\n    BN.prototype.iaddn = function iaddn(num) {\n        assert(typeof num === \"number\");\n        assert(num < 0x4000000);\n        if (num < 0) return this.isubn(-num);\n        // Possible sign change\n        if (this.negative !== 0) {\n            if (this.length === 1 && (this.words[0] | 0) < num) {\n                this.words[0] = num - (this.words[0] | 0);\n                this.negative = 0;\n                return this;\n            }\n            this.negative = 0;\n            this.isubn(num);\n            this.negative = 1;\n            return this;\n        }\n        // Add without checks\n        return this._iaddn(num);\n    };\n    BN.prototype._iaddn = function _iaddn(num) {\n        this.words[0] += num;\n        // Carry\n        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){\n            this.words[i] -= 0x4000000;\n            if (i === this.length - 1) {\n                this.words[i + 1] = 1;\n            } else {\n                this.words[i + 1]++;\n            }\n        }\n        this.length = Math.max(this.length, i + 1);\n        return this;\n    };\n    // Subtract plain number `num` from `this`\n    BN.prototype.isubn = function isubn(num) {\n        assert(typeof num === \"number\");\n        assert(num < 0x4000000);\n        if (num < 0) return this.iaddn(-num);\n        if (this.negative !== 0) {\n            this.negative = 0;\n            this.iaddn(num);\n            this.negative = 1;\n            return this;\n        }\n        this.words[0] -= num;\n        if (this.length === 1 && this.words[0] < 0) {\n            this.words[0] = -this.words[0];\n            this.negative = 1;\n        } else {\n            // Carry\n            for(var i = 0; i < this.length && this.words[i] < 0; i++){\n                this.words[i] += 0x4000000;\n                this.words[i + 1] -= 1;\n            }\n        }\n        return this.strip();\n    };\n    BN.prototype.addn = function addn(num) {\n        return this.clone().iaddn(num);\n    };\n    BN.prototype.subn = function subn(num) {\n        return this.clone().isubn(num);\n    };\n    BN.prototype.iabs = function iabs() {\n        this.negative = 0;\n        return this;\n    };\n    BN.prototype.abs = function abs() {\n        return this.clone().iabs();\n    };\n    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {\n        var len = num.length + shift;\n        var i;\n        this._expand(len);\n        var w;\n        var carry = 0;\n        for(i = 0; i < num.length; i++){\n            w = (this.words[i + shift] | 0) + carry;\n            var right = (num.words[i] | 0) * mul;\n            w -= right & 0x3ffffff;\n            carry = (w >> 26) - (right / 0x4000000 | 0);\n            this.words[i + shift] = w & 0x3ffffff;\n        }\n        for(; i < this.length - shift; i++){\n            w = (this.words[i + shift] | 0) + carry;\n            carry = w >> 26;\n            this.words[i + shift] = w & 0x3ffffff;\n        }\n        if (carry === 0) return this.strip();\n        // Subtraction overflow\n        assert(carry === -1);\n        carry = 0;\n        for(i = 0; i < this.length; i++){\n            w = -(this.words[i] | 0) + carry;\n            carry = w >> 26;\n            this.words[i] = w & 0x3ffffff;\n        }\n        this.negative = 1;\n        return this.strip();\n    };\n    BN.prototype._wordDiv = function _wordDiv(num, mode) {\n        var shift = this.length - num.length;\n        var a = this.clone();\n        var b = num;\n        // Normalize\n        var bhi = b.words[b.length - 1] | 0;\n        var bhiBits = this._countBits(bhi);\n        shift = 26 - bhiBits;\n        if (shift !== 0) {\n            b = b.ushln(shift);\n            a.iushln(shift);\n            bhi = b.words[b.length - 1] | 0;\n        }\n        // Initialize quotient\n        var m = a.length - b.length;\n        var q;\n        if (mode !== \"mod\") {\n            q = new BN(null);\n            q.length = m + 1;\n            q.words = new Array(q.length);\n            for(var i = 0; i < q.length; i++){\n                q.words[i] = 0;\n            }\n        }\n        var diff = a.clone()._ishlnsubmul(b, 1, m);\n        if (diff.negative === 0) {\n            a = diff;\n            if (q) {\n                q.words[m] = 1;\n            }\n        }\n        for(var j = m - 1; j >= 0; j--){\n            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);\n            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n            // (0x7ffffff)\n            qj = Math.min(qj / bhi | 0, 0x3ffffff);\n            a._ishlnsubmul(b, qj, j);\n            while(a.negative !== 0){\n                qj--;\n                a.negative = 0;\n                a._ishlnsubmul(b, 1, j);\n                if (!a.isZero()) {\n                    a.negative ^= 1;\n                }\n            }\n            if (q) {\n                q.words[j] = qj;\n            }\n        }\n        if (q) {\n            q.strip();\n        }\n        a.strip();\n        // Denormalize\n        if (mode !== \"div\" && shift !== 0) {\n            a.iushrn(shift);\n        }\n        return {\n            div: q || null,\n            mod: a\n        };\n    };\n    // NOTE: 1) `mode` can be set to `mod` to request mod only,\n    //       to `div` to request div only, or be absent to\n    //       request both div & mod\n    //       2) `positive` is true if unsigned mod is requested\n    BN.prototype.divmod = function divmod(num, mode, positive) {\n        assert(!num.isZero());\n        if (this.isZero()) {\n            return {\n                div: new BN(0),\n                mod: new BN(0)\n            };\n        }\n        var div, mod, res;\n        if (this.negative !== 0 && num.negative === 0) {\n            res = this.neg().divmod(num, mode);\n            if (mode !== \"mod\") {\n                div = res.div.neg();\n            }\n            if (mode !== \"div\") {\n                mod = res.mod.neg();\n                if (positive && mod.negative !== 0) {\n                    mod.iadd(num);\n                }\n            }\n            return {\n                div: div,\n                mod: mod\n            };\n        }\n        if (this.negative === 0 && num.negative !== 0) {\n            res = this.divmod(num.neg(), mode);\n            if (mode !== \"mod\") {\n                div = res.div.neg();\n            }\n            return {\n                div: div,\n                mod: res.mod\n            };\n        }\n        if ((this.negative & num.negative) !== 0) {\n            res = this.neg().divmod(num.neg(), mode);\n            if (mode !== \"div\") {\n                mod = res.mod.neg();\n                if (positive && mod.negative !== 0) {\n                    mod.isub(num);\n                }\n            }\n            return {\n                div: res.div,\n                mod: mod\n            };\n        }\n        // Both numbers are positive at this point\n        // Strip both numbers to approximate shift value\n        if (num.length > this.length || this.cmp(num) < 0) {\n            return {\n                div: new BN(0),\n                mod: this\n            };\n        }\n        // Very short reduction\n        if (num.length === 1) {\n            if (mode === \"div\") {\n                return {\n                    div: this.divn(num.words[0]),\n                    mod: null\n                };\n            }\n            if (mode === \"mod\") {\n                return {\n                    div: null,\n                    mod: new BN(this.modn(num.words[0]))\n                };\n            }\n            return {\n                div: this.divn(num.words[0]),\n                mod: new BN(this.modn(num.words[0]))\n            };\n        }\n        return this._wordDiv(num, mode);\n    };\n    // Find `this` / `num`\n    BN.prototype.div = function div(num) {\n        return this.divmod(num, \"div\", false).div;\n    };\n    // Find `this` % `num`\n    BN.prototype.mod = function mod(num) {\n        return this.divmod(num, \"mod\", false).mod;\n    };\n    BN.prototype.umod = function umod(num) {\n        return this.divmod(num, \"mod\", true).mod;\n    };\n    // Find Round(`this` / `num`)\n    BN.prototype.divRound = function divRound(num) {\n        var dm = this.divmod(num);\n        // Fast case - exact division\n        if (dm.mod.isZero()) return dm.div;\n        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n        var half = num.ushrn(1);\n        var r2 = num.andln(1);\n        var cmp = mod.cmp(half);\n        // Round down\n        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n        // Round up\n        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n    };\n    BN.prototype.modn = function modn(num) {\n        assert(num <= 0x3ffffff);\n        var p = (1 << 26) % num;\n        var acc = 0;\n        for(var i = this.length - 1; i >= 0; i--){\n            acc = (p * acc + (this.words[i] | 0)) % num;\n        }\n        return acc;\n    };\n    // In-place division by number\n    BN.prototype.idivn = function idivn(num) {\n        assert(num <= 0x3ffffff);\n        var carry = 0;\n        for(var i = this.length - 1; i >= 0; i--){\n            var w = (this.words[i] | 0) + carry * 0x4000000;\n            this.words[i] = w / num | 0;\n            carry = w % num;\n        }\n        return this.strip();\n    };\n    BN.prototype.divn = function divn(num) {\n        return this.clone().idivn(num);\n    };\n    BN.prototype.egcd = function egcd(p) {\n        assert(p.negative === 0);\n        assert(!p.isZero());\n        var x = this;\n        var y = p.clone();\n        if (x.negative !== 0) {\n            x = x.umod(p);\n        } else {\n            x = x.clone();\n        }\n        // A * x + B * y = x\n        var A = new BN(1);\n        var B = new BN(0);\n        // C * x + D * y = y\n        var C = new BN(0);\n        var D = new BN(1);\n        var g = 0;\n        while(x.isEven() && y.isEven()){\n            x.iushrn(1);\n            y.iushrn(1);\n            ++g;\n        }\n        var yp = y.clone();\n        var xp = x.clone();\n        while(!x.isZero()){\n            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n            if (i > 0) {\n                x.iushrn(i);\n                while(i-- > 0){\n                    if (A.isOdd() || B.isOdd()) {\n                        A.iadd(yp);\n                        B.isub(xp);\n                    }\n                    A.iushrn(1);\n                    B.iushrn(1);\n                }\n            }\n            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n            if (j > 0) {\n                y.iushrn(j);\n                while(j-- > 0){\n                    if (C.isOdd() || D.isOdd()) {\n                        C.iadd(yp);\n                        D.isub(xp);\n                    }\n                    C.iushrn(1);\n                    D.iushrn(1);\n                }\n            }\n            if (x.cmp(y) >= 0) {\n                x.isub(y);\n                A.isub(C);\n                B.isub(D);\n            } else {\n                y.isub(x);\n                C.isub(A);\n                D.isub(B);\n            }\n        }\n        return {\n            a: C,\n            b: D,\n            gcd: y.iushln(g)\n        };\n    };\n    // This is reduced incarnation of the binary EEA\n    // above, designated to invert members of the\n    // _prime_ fields F(p) at a maximal speed\n    BN.prototype._invmp = function _invmp(p) {\n        assert(p.negative === 0);\n        assert(!p.isZero());\n        var a = this;\n        var b = p.clone();\n        if (a.negative !== 0) {\n            a = a.umod(p);\n        } else {\n            a = a.clone();\n        }\n        var x1 = new BN(1);\n        var x2 = new BN(0);\n        var delta = b.clone();\n        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){\n            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n            if (i > 0) {\n                a.iushrn(i);\n                while(i-- > 0){\n                    if (x1.isOdd()) {\n                        x1.iadd(delta);\n                    }\n                    x1.iushrn(1);\n                }\n            }\n            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n            if (j > 0) {\n                b.iushrn(j);\n                while(j-- > 0){\n                    if (x2.isOdd()) {\n                        x2.iadd(delta);\n                    }\n                    x2.iushrn(1);\n                }\n            }\n            if (a.cmp(b) >= 0) {\n                a.isub(b);\n                x1.isub(x2);\n            } else {\n                b.isub(a);\n                x2.isub(x1);\n            }\n        }\n        var res;\n        if (a.cmpn(1) === 0) {\n            res = x1;\n        } else {\n            res = x2;\n        }\n        if (res.cmpn(0) < 0) {\n            res.iadd(p);\n        }\n        return res;\n    };\n    BN.prototype.gcd = function gcd(num) {\n        if (this.isZero()) return num.abs();\n        if (num.isZero()) return this.abs();\n        var a = this.clone();\n        var b = num.clone();\n        a.negative = 0;\n        b.negative = 0;\n        // Remove common factor of two\n        for(var shift = 0; a.isEven() && b.isEven(); shift++){\n            a.iushrn(1);\n            b.iushrn(1);\n        }\n        do {\n            while(a.isEven()){\n                a.iushrn(1);\n            }\n            while(b.isEven()){\n                b.iushrn(1);\n            }\n            var r = a.cmp(b);\n            if (r < 0) {\n                // Swap `a` and `b` to make `a` always bigger than `b`\n                var t = a;\n                a = b;\n                b = t;\n            } else if (r === 0 || b.cmpn(1) === 0) {\n                break;\n            }\n            a.isub(b);\n        }while (true);\n        return b.iushln(shift);\n    };\n    // Invert number in the field F(num)\n    BN.prototype.invm = function invm(num) {\n        return this.egcd(num).a.umod(num);\n    };\n    BN.prototype.isEven = function isEven() {\n        return (this.words[0] & 1) === 0;\n    };\n    BN.prototype.isOdd = function isOdd() {\n        return (this.words[0] & 1) === 1;\n    };\n    // And first word and num\n    BN.prototype.andln = function andln(num) {\n        return this.words[0] & num;\n    };\n    // Increment at the bit position in-line\n    BN.prototype.bincn = function bincn(bit) {\n        assert(typeof bit === \"number\");\n        var r = bit % 26;\n        var s = (bit - r) / 26;\n        var q = 1 << r;\n        // Fast case: bit is much higher than all existing words\n        if (this.length <= s) {\n            this._expand(s + 1);\n            this.words[s] |= q;\n            return this;\n        }\n        // Add bit and propagate, if needed\n        var carry = q;\n        for(var i = s; carry !== 0 && i < this.length; i++){\n            var w = this.words[i] | 0;\n            w += carry;\n            carry = w >>> 26;\n            w &= 0x3ffffff;\n            this.words[i] = w;\n        }\n        if (carry !== 0) {\n            this.words[i] = carry;\n            this.length++;\n        }\n        return this;\n    };\n    BN.prototype.isZero = function isZero() {\n        return this.length === 1 && this.words[0] === 0;\n    };\n    BN.prototype.cmpn = function cmpn(num) {\n        var negative = num < 0;\n        if (this.negative !== 0 && !negative) return -1;\n        if (this.negative === 0 && negative) return 1;\n        this.strip();\n        var res;\n        if (this.length > 1) {\n            res = 1;\n        } else {\n            if (negative) {\n                num = -num;\n            }\n            assert(num <= 0x3ffffff, \"Number is too big\");\n            var w = this.words[0] | 0;\n            res = w === num ? 0 : w < num ? -1 : 1;\n        }\n        if (this.negative !== 0) return -res | 0;\n        return res;\n    };\n    // Compare two numbers and return:\n    // 1 - if `this` > `num`\n    // 0 - if `this` == `num`\n    // -1 - if `this` < `num`\n    BN.prototype.cmp = function cmp(num) {\n        if (this.negative !== 0 && num.negative === 0) return -1;\n        if (this.negative === 0 && num.negative !== 0) return 1;\n        var res = this.ucmp(num);\n        if (this.negative !== 0) return -res | 0;\n        return res;\n    };\n    // Unsigned comparison\n    BN.prototype.ucmp = function ucmp(num) {\n        // At this point both numbers have the same sign\n        if (this.length > num.length) return 1;\n        if (this.length < num.length) return -1;\n        var res = 0;\n        for(var i = this.length - 1; i >= 0; i--){\n            var a = this.words[i] | 0;\n            var b = num.words[i] | 0;\n            if (a === b) continue;\n            if (a < b) {\n                res = -1;\n            } else if (a > b) {\n                res = 1;\n            }\n            break;\n        }\n        return res;\n    };\n    BN.prototype.gtn = function gtn(num) {\n        return this.cmpn(num) === 1;\n    };\n    BN.prototype.gt = function gt(num) {\n        return this.cmp(num) === 1;\n    };\n    BN.prototype.gten = function gten(num) {\n        return this.cmpn(num) >= 0;\n    };\n    BN.prototype.gte = function gte(num) {\n        return this.cmp(num) >= 0;\n    };\n    BN.prototype.ltn = function ltn(num) {\n        return this.cmpn(num) === -1;\n    };\n    BN.prototype.lt = function lt(num) {\n        return this.cmp(num) === -1;\n    };\n    BN.prototype.lten = function lten(num) {\n        return this.cmpn(num) <= 0;\n    };\n    BN.prototype.lte = function lte(num) {\n        return this.cmp(num) <= 0;\n    };\n    BN.prototype.eqn = function eqn(num) {\n        return this.cmpn(num) === 0;\n    };\n    BN.prototype.eq = function eq(num) {\n        return this.cmp(num) === 0;\n    };\n    //\n    // A reduce context, could be using montgomery or something better, depending\n    // on the `m` itself.\n    //\n    BN.red = function red(num) {\n        return new Red(num);\n    };\n    BN.prototype.toRed = function toRed(ctx) {\n        assert(!this.red, \"Already a number in reduction context\");\n        assert(this.negative === 0, \"red works only with positives\");\n        return ctx.convertTo(this)._forceRed(ctx);\n    };\n    BN.prototype.fromRed = function fromRed() {\n        assert(this.red, \"fromRed works only with numbers in reduction context\");\n        return this.red.convertFrom(this);\n    };\n    BN.prototype._forceRed = function _forceRed(ctx) {\n        this.red = ctx;\n        return this;\n    };\n    BN.prototype.forceRed = function forceRed(ctx) {\n        assert(!this.red, \"Already a number in reduction context\");\n        return this._forceRed(ctx);\n    };\n    BN.prototype.redAdd = function redAdd(num) {\n        assert(this.red, \"redAdd works only with red numbers\");\n        return this.red.add(this, num);\n    };\n    BN.prototype.redIAdd = function redIAdd(num) {\n        assert(this.red, \"redIAdd works only with red numbers\");\n        return this.red.iadd(this, num);\n    };\n    BN.prototype.redSub = function redSub(num) {\n        assert(this.red, \"redSub works only with red numbers\");\n        return this.red.sub(this, num);\n    };\n    BN.prototype.redISub = function redISub(num) {\n        assert(this.red, \"redISub works only with red numbers\");\n        return this.red.isub(this, num);\n    };\n    BN.prototype.redShl = function redShl(num) {\n        assert(this.red, \"redShl works only with red numbers\");\n        return this.red.shl(this, num);\n    };\n    BN.prototype.redMul = function redMul(num) {\n        assert(this.red, \"redMul works only with red numbers\");\n        this.red._verify2(this, num);\n        return this.red.mul(this, num);\n    };\n    BN.prototype.redIMul = function redIMul(num) {\n        assert(this.red, \"redMul works only with red numbers\");\n        this.red._verify2(this, num);\n        return this.red.imul(this, num);\n    };\n    BN.prototype.redSqr = function redSqr() {\n        assert(this.red, \"redSqr works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.sqr(this);\n    };\n    BN.prototype.redISqr = function redISqr() {\n        assert(this.red, \"redISqr works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.isqr(this);\n    };\n    // Square root over p\n    BN.prototype.redSqrt = function redSqrt() {\n        assert(this.red, \"redSqrt works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.sqrt(this);\n    };\n    BN.prototype.redInvm = function redInvm() {\n        assert(this.red, \"redInvm works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.invm(this);\n    };\n    // Return negative clone of `this` % `red modulo`\n    BN.prototype.redNeg = function redNeg() {\n        assert(this.red, \"redNeg works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.neg(this);\n    };\n    BN.prototype.redPow = function redPow(num) {\n        assert(this.red && !num.red, \"redPow(normalNum)\");\n        this.red._verify1(this);\n        return this.red.pow(this, num);\n    };\n    // Prime numbers with efficient reduction\n    var primes = {\n        k256: null,\n        p224: null,\n        p192: null,\n        p25519: null\n    };\n    // Pseudo-Mersenne prime\n    function MPrime(name, p) {\n        // P = 2 ^ N - K\n        this.name = name;\n        this.p = new BN(p, 16);\n        this.n = this.p.bitLength();\n        this.k = new BN(1).iushln(this.n).isub(this.p);\n        this.tmp = this._tmp();\n    }\n    MPrime.prototype._tmp = function _tmp() {\n        var tmp = new BN(null);\n        tmp.words = new Array(Math.ceil(this.n / 13));\n        return tmp;\n    };\n    MPrime.prototype.ireduce = function ireduce(num) {\n        // Assumes that `num` is less than `P^2`\n        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n        var r = num;\n        var rlen;\n        do {\n            this.split(r, this.tmp);\n            r = this.imulK(r);\n            r = r.iadd(this.tmp);\n            rlen = r.bitLength();\n        }while (rlen > this.n);\n        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n        if (cmp === 0) {\n            r.words[0] = 0;\n            r.length = 1;\n        } else if (cmp > 0) {\n            r.isub(this.p);\n        } else {\n            if (r.strip !== undefined) {\n                // r is BN v4 instance\n                r.strip();\n            } else {\n                // r is BN v5 instance\n                r._strip();\n            }\n        }\n        return r;\n    };\n    MPrime.prototype.split = function split(input, out) {\n        input.iushrn(this.n, 0, out);\n    };\n    MPrime.prototype.imulK = function imulK(num) {\n        return num.imul(this.k);\n    };\n    function K256() {\n        MPrime.call(this, \"k256\", \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f\");\n    }\n    inherits(K256, MPrime);\n    K256.prototype.split = function split(input, output) {\n        // 256 = 9 * 26 + 22\n        var mask = 0x3fffff;\n        var outLen = Math.min(input.length, 9);\n        for(var i = 0; i < outLen; i++){\n            output.words[i] = input.words[i];\n        }\n        output.length = outLen;\n        if (input.length <= 9) {\n            input.words[0] = 0;\n            input.length = 1;\n            return;\n        }\n        // Shift by 9 limbs\n        var prev = input.words[9];\n        output.words[output.length++] = prev & mask;\n        for(i = 10; i < input.length; i++){\n            var next = input.words[i] | 0;\n            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;\n            prev = next;\n        }\n        prev >>>= 22;\n        input.words[i - 10] = prev;\n        if (prev === 0 && input.length > 10) {\n            input.length -= 10;\n        } else {\n            input.length -= 9;\n        }\n    };\n    K256.prototype.imulK = function imulK(num) {\n        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n        num.words[num.length] = 0;\n        num.words[num.length + 1] = 0;\n        num.length += 2;\n        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n        var lo = 0;\n        for(var i = 0; i < num.length; i++){\n            var w = num.words[i] | 0;\n            lo += w * 0x3d1;\n            num.words[i] = lo & 0x3ffffff;\n            lo = w * 0x40 + (lo / 0x4000000 | 0);\n        }\n        // Fast length reduction\n        if (num.words[num.length - 1] === 0) {\n            num.length--;\n            if (num.words[num.length - 1] === 0) {\n                num.length--;\n            }\n        }\n        return num;\n    };\n    function P224() {\n        MPrime.call(this, \"p224\", \"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001\");\n    }\n    inherits(P224, MPrime);\n    function P192() {\n        MPrime.call(this, \"p192\", \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff\");\n    }\n    inherits(P192, MPrime);\n    function P25519() {\n        // 2 ^ 255 - 19\n        MPrime.call(this, \"25519\", \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\");\n    }\n    inherits(P25519, MPrime);\n    P25519.prototype.imulK = function imulK(num) {\n        // K = 0x13\n        var carry = 0;\n        for(var i = 0; i < num.length; i++){\n            var hi = (num.words[i] | 0) * 0x13 + carry;\n            var lo = hi & 0x3ffffff;\n            hi >>>= 26;\n            num.words[i] = lo;\n            carry = hi;\n        }\n        if (carry !== 0) {\n            num.words[num.length++] = carry;\n        }\n        return num;\n    };\n    // Exported mostly for testing purposes, use plain name instead\n    BN._prime = function prime(name) {\n        // Cached version of prime\n        if (primes[name]) return primes[name];\n        var prime;\n        if (name === \"k256\") {\n            prime = new K256();\n        } else if (name === \"p224\") {\n            prime = new P224();\n        } else if (name === \"p192\") {\n            prime = new P192();\n        } else if (name === \"p25519\") {\n            prime = new P25519();\n        } else {\n            throw new Error(\"Unknown prime \" + name);\n        }\n        primes[name] = prime;\n        return prime;\n    };\n    //\n    // Base reduction engine\n    //\n    function Red(m) {\n        if (typeof m === \"string\") {\n            var prime = BN._prime(m);\n            this.m = prime.p;\n            this.prime = prime;\n        } else {\n            assert(m.gtn(1), \"modulus must be greater than 1\");\n            this.m = m;\n            this.prime = null;\n        }\n    }\n    Red.prototype._verify1 = function _verify1(a) {\n        assert(a.negative === 0, \"red works only with positives\");\n        assert(a.red, \"red works only with red numbers\");\n    };\n    Red.prototype._verify2 = function _verify2(a, b) {\n        assert((a.negative | b.negative) === 0, \"red works only with positives\");\n        assert(a.red && a.red === b.red, \"red works only with red numbers\");\n    };\n    Red.prototype.imod = function imod(a) {\n        if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n        return a.umod(this.m)._forceRed(this);\n    };\n    Red.prototype.neg = function neg(a) {\n        if (a.isZero()) {\n            return a.clone();\n        }\n        return this.m.sub(a)._forceRed(this);\n    };\n    Red.prototype.add = function add(a, b) {\n        this._verify2(a, b);\n        var res = a.add(b);\n        if (res.cmp(this.m) >= 0) {\n            res.isub(this.m);\n        }\n        return res._forceRed(this);\n    };\n    Red.prototype.iadd = function iadd(a, b) {\n        this._verify2(a, b);\n        var res = a.iadd(b);\n        if (res.cmp(this.m) >= 0) {\n            res.isub(this.m);\n        }\n        return res;\n    };\n    Red.prototype.sub = function sub(a, b) {\n        this._verify2(a, b);\n        var res = a.sub(b);\n        if (res.cmpn(0) < 0) {\n            res.iadd(this.m);\n        }\n        return res._forceRed(this);\n    };\n    Red.prototype.isub = function isub(a, b) {\n        this._verify2(a, b);\n        var res = a.isub(b);\n        if (res.cmpn(0) < 0) {\n            res.iadd(this.m);\n        }\n        return res;\n    };\n    Red.prototype.shl = function shl(a, num) {\n        this._verify1(a);\n        return this.imod(a.ushln(num));\n    };\n    Red.prototype.imul = function imul(a, b) {\n        this._verify2(a, b);\n        return this.imod(a.imul(b));\n    };\n    Red.prototype.mul = function mul(a, b) {\n        this._verify2(a, b);\n        return this.imod(a.mul(b));\n    };\n    Red.prototype.isqr = function isqr(a) {\n        return this.imul(a, a.clone());\n    };\n    Red.prototype.sqr = function sqr(a) {\n        return this.mul(a, a);\n    };\n    Red.prototype.sqrt = function sqrt(a) {\n        if (a.isZero()) return a.clone();\n        var mod3 = this.m.andln(3);\n        assert(mod3 % 2 === 1);\n        // Fast case\n        if (mod3 === 3) {\n            var pow = this.m.add(new BN(1)).iushrn(2);\n            return this.pow(a, pow);\n        }\n        // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n        //\n        // Find Q and S, that Q * 2 ^ S = (P - 1)\n        var q = this.m.subn(1);\n        var s = 0;\n        while(!q.isZero() && q.andln(1) === 0){\n            s++;\n            q.iushrn(1);\n        }\n        assert(!q.isZero());\n        var one = new BN(1).toRed(this);\n        var nOne = one.redNeg();\n        // Find quadratic non-residue\n        // NOTE: Max is such because of generalized Riemann hypothesis.\n        var lpow = this.m.subn(1).iushrn(1);\n        var z = this.m.bitLength();\n        z = new BN(2 * z * z).toRed(this);\n        while(this.pow(z, lpow).cmp(nOne) !== 0){\n            z.redIAdd(nOne);\n        }\n        var c = this.pow(z, q);\n        var r = this.pow(a, q.addn(1).iushrn(1));\n        var t = this.pow(a, q);\n        var m = s;\n        while(t.cmp(one) !== 0){\n            var tmp = t;\n            for(var i = 0; tmp.cmp(one) !== 0; i++){\n                tmp = tmp.redSqr();\n            }\n            assert(i < m);\n            var b = this.pow(c, new BN(1).iushln(m - i - 1));\n            r = r.redMul(b);\n            c = b.redSqr();\n            t = t.redMul(c);\n            m = i;\n        }\n        return r;\n    };\n    Red.prototype.invm = function invm(a) {\n        var inv = a._invmp(this.m);\n        if (inv.negative !== 0) {\n            inv.negative = 0;\n            return this.imod(inv).redNeg();\n        } else {\n            return this.imod(inv);\n        }\n    };\n    Red.prototype.pow = function pow(a, num) {\n        if (num.isZero()) return new BN(1).toRed(this);\n        if (num.cmpn(1) === 0) return a.clone();\n        var windowSize = 4;\n        var wnd = new Array(1 << windowSize);\n        wnd[0] = new BN(1).toRed(this);\n        wnd[1] = a;\n        for(var i = 2; i < wnd.length; i++){\n            wnd[i] = this.mul(wnd[i - 1], a);\n        }\n        var res = wnd[0];\n        var current = 0;\n        var currentLen = 0;\n        var start = num.bitLength() % 26;\n        if (start === 0) {\n            start = 26;\n        }\n        for(i = num.length - 1; i >= 0; i--){\n            var word = num.words[i];\n            for(var j = start - 1; j >= 0; j--){\n                var bit = word >> j & 1;\n                if (res !== wnd[0]) {\n                    res = this.sqr(res);\n                }\n                if (bit === 0 && current === 0) {\n                    currentLen = 0;\n                    continue;\n                }\n                current <<= 1;\n                current |= bit;\n                currentLen++;\n                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n                res = this.mul(res, wnd[current]);\n                currentLen = 0;\n                current = 0;\n            }\n            start = 26;\n        }\n        return res;\n    };\n    Red.prototype.convertTo = function convertTo(num) {\n        var r = num.umod(this.m);\n        return r === num ? r.clone() : r;\n    };\n    Red.prototype.convertFrom = function convertFrom(num) {\n        var res = num.clone();\n        res.red = null;\n        return res;\n    };\n    //\n    // Montgomery method engine\n    //\n    BN.mont = function mont(num) {\n        return new Mont(num);\n    };\n    function Mont(m) {\n        Red.call(this, m);\n        this.shift = this.m.bitLength();\n        if (this.shift % 26 !== 0) {\n            this.shift += 26 - this.shift % 26;\n        }\n        this.r = new BN(1).iushln(this.shift);\n        this.r2 = this.imod(this.r.sqr());\n        this.rinv = this.r._invmp(this.m);\n        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n        this.minv = this.minv.umod(this.r);\n        this.minv = this.r.sub(this.minv);\n    }\n    inherits(Mont, Red);\n    Mont.prototype.convertTo = function convertTo(num) {\n        return this.imod(num.ushln(this.shift));\n    };\n    Mont.prototype.convertFrom = function convertFrom(num) {\n        var r = this.imod(num.mul(this.rinv));\n        r.red = null;\n        return r;\n    };\n    Mont.prototype.imul = function imul(a, b) {\n        if (a.isZero() || b.isZero()) {\n            a.words[0] = 0;\n            a.length = 1;\n            return a;\n        }\n        var t = a.imul(b);\n        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        var u = t.isub(c).iushrn(this.shift);\n        var res = u;\n        if (u.cmp(this.m) >= 0) {\n            res = u.isub(this.m);\n        } else if (u.cmpn(0) < 0) {\n            res = u.iadd(this.m);\n        }\n        return res._forceRed(this);\n    };\n    Mont.prototype.mul = function mul(a, b) {\n        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n        var t = a.mul(b);\n        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        var u = t.isub(c).iushrn(this.shift);\n        var res = u;\n        if (u.cmp(this.m) >= 0) {\n            res = u.isub(this.m);\n        } else if (u.cmpn(0) < 0) {\n            res = u.iadd(this.m);\n        }\n        return res._forceRed(this);\n    };\n    Mont.prototype.invm = function invm(a) {\n        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n        var res = this.imod(a._invmp(this.m).mul(this.r2));\n        return res._forceRed(this);\n    };\n})( false || module, this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL25vZGVfbW9kdWxlcy9ldGgtbGliL25vZGVfbW9kdWxlcy9ibi5qcy9saWIvYm4uanMiLCJtYXBwaW5ncyI6IjtBQUFDLFVBQVVBLE9BQU0sRUFBRUMsT0FBTztJQUN4QjtJQUVBLFFBQVE7SUFDUixTQUFTQyxPQUFRQyxHQUFHLEVBQUVDLEdBQUc7UUFDdkIsSUFBSSxDQUFDRCxLQUFLLE1BQU0sSUFBSUUsTUFBTUQsT0FBTztJQUNuQztJQUVBLHVFQUF1RTtJQUN2RSxvQkFBb0I7SUFDcEIsU0FBU0UsU0FBVUMsSUFBSSxFQUFFQyxTQUFTO1FBQ2hDRCxLQUFLRSxNQUFNLEdBQUdEO1FBQ2QsSUFBSUUsV0FBVyxZQUFhO1FBQzVCQSxTQUFTQyxTQUFTLEdBQUdILFVBQVVHLFNBQVM7UUFDeENKLEtBQUtJLFNBQVMsR0FBRyxJQUFJRDtRQUNyQkgsS0FBS0ksU0FBUyxDQUFDQyxXQUFXLEdBQUdMO0lBQy9CO0lBRUEsS0FBSztJQUVMLFNBQVNNLEdBQUlDLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxNQUFNO1FBQy9CLElBQUlILEdBQUdJLElBQUksQ0FBQ0gsU0FBUztZQUNuQixPQUFPQTtRQUNUO1FBRUEsSUFBSSxDQUFDSSxRQUFRLEdBQUc7UUFDaEIsSUFBSSxDQUFDQyxLQUFLLEdBQUc7UUFDYixJQUFJLENBQUNDLE1BQU0sR0FBRztRQUVkLG9CQUFvQjtRQUNwQixJQUFJLENBQUNDLEdBQUcsR0FBRztRQUVYLElBQUlQLFdBQVcsTUFBTTtZQUNuQixJQUFJQyxTQUFTLFFBQVFBLFNBQVMsTUFBTTtnQkFDbENDLFNBQVNEO2dCQUNUQSxPQUFPO1lBQ1Q7WUFFQSxJQUFJLENBQUNPLEtBQUssQ0FBQ1IsVUFBVSxHQUFHQyxRQUFRLElBQUlDLFVBQVU7UUFDaEQ7SUFDRjtJQUNBLElBQUksT0FBT2hCLFlBQVcsVUFBVTtRQUM5QkEsUUFBT0MsT0FBTyxHQUFHWTtJQUNuQixPQUFPO1FBQ0xa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STtJQUMzQjtJQUVBNEQsS0FBS2phLFNBQVMsQ0FBQ29WLElBQUksR0FBRyxTQUFTQSxLQUFNdk4sQ0FBQztRQUNwQyxpREFBaUQ7UUFDakQsSUFBSW5DLE1BQU0sSUFBSSxDQUFDMlQsSUFBSSxDQUFDeFIsRUFBRWtOLE1BQU0sQ0FBQyxJQUFJLENBQUN4RSxDQUFDLEVBQUVsTixHQUFHLENBQUMsSUFBSSxDQUFDMlEsRUFBRTtRQUNoRCxPQUFPdE8sSUFBSTJRLFNBQVMsQ0FBQyxJQUFJO0lBQzNCO0FBQ0YsR0FBRyxNQUFrQixJQUFlaFgsUUFBUSxJQUFJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL25vZGVfbW9kdWxlcy9ldGgtbGliL25vZGVfbW9kdWxlcy9ibi5qcy9saWIvYm4uanM/OGYyZSJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gVXRpbHNcbiAgZnVuY3Rpb24gYXNzZXJ0ICh2YWwsIG1zZykge1xuICAgIGlmICghdmFsKSB0aHJvdyBuZXcgRXJyb3IobXNnIHx8ICdBc3NlcnRpb24gZmFpbGVkJyk7XG4gIH1cblxuICAvLyBDb3VsZCB1c2UgYGluaGVyaXRzYCBtb2R1bGUsIGJ1dCBkb24ndCB3YW50IHRvIG1vdmUgZnJvbSBzaW5nbGUgZmlsZVxuICAvLyBhcmNoaXRlY3R1cmUgeWV0LlxuICBmdW5jdGlvbiBpbmhlcml0cyAoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3I7XG4gICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge307XG4gICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZTtcbiAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpO1xuICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvcjtcbiAgfVxuXG4gIC8vIEJOXG5cbiAgZnVuY3Rpb24gQk4gKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgaWYgKEJOLmlzQk4obnVtYmVyKSkge1xuICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICB9XG5cbiAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICB0aGlzLndvcmRzID0gbnVsbDtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG5cbiAgICAvLyBSZWR1Y3Rpb24gY29udGV4dFxuICAgIHRoaXMucmVkID0gbnVsbDtcblxuICAgIGlmIChudW1iZXIgIT09IG51bGwpIHtcbiAgICAgIGlmIChiYXNlID09PSAnbGUnIHx8IGJhc2UgPT09ICdiZScpIHtcbiAgICAgICAgZW5kaWFuID0gYmFzZTtcbiAgICAgICAgYmFzZSA9IDEwO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9pbml0KG51bWJlciB8fCAwLCBiYXNlIHx8IDEwLCBlbmRpYW4gfHwgJ2JlJyk7XG4gICAgfVxuICB9XG4gIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gQk47XG4gIH0gZWxzZSB7XG4gICAgZXhwb3J0cy5CTiA9IEJOO1xuICB9XG5cbiAgQk4uQk4gPSBCTjtcbiAgQk4ud29yZFNpemUgPSAyNjtcblxuICB2YXIgQnVmZmVyO1xuICB0cnkge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LkJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIEJ1ZmZlciA9IHdpbmRvdy5CdWZmZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgfVxuXG4gIEJOLmlzQk4gPSBmdW5jdGlvbiBpc0JOIChudW0pIHtcbiAgICBpZiAobnVtIGluc3RhbmNlb2YgQk4pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBudW0gIT09IG51bGwgJiYgdHlwZW9mIG51bSA9PT0gJ29iamVjdCcgJiZcbiAgICAgIG51bS5jb25zdHJ1Y3Rvci53b3JkU2l6ZSA9PT0gQk4ud29yZFNpemUgJiYgQXJyYXkuaXNBcnJheShudW0ud29yZHMpO1xuICB9O1xuXG4gIEJOLm1heCA9IGZ1bmN0aW9uIG1heCAobGVmdCwgcmlnaHQpIHtcbiAgICBpZiAobGVmdC5jbXAocmlnaHQpID4gMCkgcmV0dXJuIGxlZnQ7XG4gICAgcmV0dXJuIHJpZ2h0O1xuICB9O1xuXG4gIEJOLm1pbiA9IGZ1bmN0aW9uIG1pbiAobGVmdCwgcmlnaHQpIHtcbiAgICBpZiAobGVmdC5jbXAocmlnaHQpIDwgMCkgcmV0dXJuIGxlZnQ7XG4gICAgcmV0dXJuIHJpZ2h0O1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIGluaXQgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgaWYgKHR5cGVvZiBudW1iZXIgPT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gdGhpcy5faW5pdE51bWJlcihudW1iZXIsIGJhc2UsIGVuZGlhbik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBudW1iZXIgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gdGhpcy5faW5pdEFycmF5KG51bWJlciwgYmFzZSwgZW5kaWFuKTtcbiAgICB9XG5cbiAgICBpZiAoYmFzZSA9PT0gJ2hleCcpIHtcbiAgICAgIGJhc2UgPSAxNjtcbiAgICB9XG4gICAgYXNzZXJ0KGJhc2UgPT09IChiYXNlIHwgMCkgJiYgYmFzZSA+PSAyICYmIGJhc2UgPD0gMzYpO1xuXG4gICAgbnVtYmVyID0gbnVtYmVyLnRvU3RyaW5nKCkucmVwbGFjZSgvXFxzKy9nLCAnJyk7XG4gICAgdmFyIHN0YXJ0ID0gMDtcbiAgICBpZiAobnVtYmVyWzBdID09PSAnLScpIHtcbiAgICAgIHN0YXJ0Kys7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICB9XG5cbiAgICBpZiAoc3RhcnQgPCBudW1iZXIubGVuZ3RoKSB7XG4gICAgICBpZiAoYmFzZSA9PT0gMTYpIHtcbiAgICAgICAgdGhpcy5fcGFyc2VIZXgobnVtYmVyLCBzdGFydCwgZW5kaWFuKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3BhcnNlQmFzZShudW1iZXIsIGJhc2UsIHN0YXJ0KTtcbiAgICAgICAgaWYgKGVuZGlhbiA9PT0gJ2xlJykge1xuICAgICAgICAgIHRoaXMuX2luaXRBcnJheSh0aGlzLnRvQXJyYXkoKSwgYmFzZSwgZW5kaWFuKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2luaXROdW1iZXIgPSBmdW5jdGlvbiBfaW5pdE51bWJlciAobnVtYmVyLCBiYXNlLCBlbmRpYW4pIHtcbiAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgICBudW1iZXIgPSAtbnVtYmVyO1xuICAgIH1cbiAgICBpZiAobnVtYmVyIDwgMHg0MDAwMDAwKSB7XG4gICAgICB0aGlzLndvcmRzID0gWyBudW1iZXIgJiAweDNmZmZmZmYgXTtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICB9IGVsc2UgaWYgKG51bWJlciA8IDB4MTAwMDAwMDAwMDAwMDApIHtcbiAgICAgIHRoaXMud29yZHMgPSBbXG4gICAgICAgIG51bWJlciAmIDB4M2ZmZmZmZixcbiAgICAgICAgKG51bWJlciAvIDB4NDAwMDAwMCkgJiAweDNmZmZmZmZcbiAgICAgIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFzc2VydChudW1iZXIgPCAweDIwMDAwMDAwMDAwMDAwKTsgLy8gMiBeIDUzICh1bnNhZmUpXG4gICAgICB0aGlzLndvcmRzID0gW1xuICAgICAgICBudW1iZXIgJiAweDNmZmZmZmYsXG4gICAgICAgIChudW1iZXIgLyAweDQwMDAwMDApICYgMHgzZmZmZmZmLFxuICAgICAgICAxXG4gICAgICBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAzO1xuICAgIH1cblxuICAgIGlmIChlbmRpYW4gIT09ICdsZScpIHJldHVybjtcblxuICAgIC8vIFJldmVyc2UgdGhlIGJ5dGVzXG4gICAgdGhpcy5faW5pdEFycmF5KHRoaXMudG9BcnJheSgpLCBiYXNlLCBlbmRpYW4pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faW5pdEFycmF5ID0gZnVuY3Rpb24gX2luaXRBcnJheSAobnVtYmVyLCBiYXNlLCBlbmRpYW4pIHtcbiAgICAvLyBQZXJoYXBzIGEgVWludDhBcnJheVxuICAgIGFzc2VydCh0eXBlb2YgbnVtYmVyLmxlbmd0aCA9PT0gJ251bWJlcicpO1xuICAgIGlmIChudW1iZXIubGVuZ3RoIDw9IDApIHtcbiAgICAgIHRoaXMud29yZHMgPSBbIDAgXTtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5jZWlsKG51bWJlci5sZW5ndGggLyAzKTtcbiAgICB0aGlzLndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSAwO1xuICAgIH1cblxuICAgIHZhciBqLCB3O1xuICAgIHZhciBvZmYgPSAwO1xuICAgIGlmIChlbmRpYW4gPT09ICdiZScpIHtcbiAgICAgIGZvciAoaSA9IG51bWJlci5sZW5ndGggLSAxLCBqID0gMDsgaSA+PSAwOyBpIC09IDMpIHtcbiAgICAgICAgdyA9IG51bWJlcltpXSB8IChudW1iZXJbaSAtIDFdIDw8IDgpIHwgKG51bWJlcltpIC0gMl0gPDwgMTYpO1xuICAgICAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgICAgIHRoaXMud29yZHNbaiArIDFdID0gKHcgPj4+ICgyNiAtIG9mZikpICYgMHgzZmZmZmZmO1xuICAgICAgICBvZmYgKz0gMjQ7XG4gICAgICAgIGlmIChvZmYgPj0gMjYpIHtcbiAgICAgICAgICBvZmYgLT0gMjY7XG4gICAgICAgICAgaisrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlbmRpYW4gPT09ICdsZScpIHtcbiAgICAgIGZvciAoaSA9IDAsIGogPSAwOyBpIDwgbnVtYmVyLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgIHcgPSBudW1iZXJbaV0gfCAobnVtYmVyW2kgKyAxXSA8PCA4KSB8IChudW1iZXJbaSArIDJdIDw8IDE2KTtcbiAgICAgICAgdGhpcy53b3Jkc1tqXSB8PSAodyA8PCBvZmYpICYgMHgzZmZmZmZmO1xuICAgICAgICB0aGlzLndvcmRzW2ogKyAxXSA9ICh3ID4+PiAoMjYgLSBvZmYpKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgb2ZmICs9IDI0O1xuICAgICAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICAgIGorKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHBhcnNlSGV4NEJpdHMgKHN0cmluZywgaW5kZXgpIHtcbiAgICB2YXIgYyA9IHN0cmluZy5jaGFyQ29kZUF0KGluZGV4KTtcbiAgICAvLyAnQScgLSAnRidcbiAgICBpZiAoYyA+PSA2NSAmJiBjIDw9IDcwKSB7XG4gICAgICByZXR1cm4gYyAtIDU1O1xuICAgIC8vICdhJyAtICdmJ1xuICAgIH0gZWxzZSBpZiAoYyA+PSA5NyAmJiBjIDw9IDEwMikge1xuICAgICAgcmV0dXJuIGMgLSA4NztcbiAgICAvLyAnMCcgLSAnOSdcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIChjIC0gNDgpICYgMHhmO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlSGV4Qnl0ZSAoc3RyaW5nLCBsb3dlckJvdW5kLCBpbmRleCkge1xuICAgIHZhciByID0gcGFyc2VIZXg0Qml0cyhzdHJpbmcsIGluZGV4KTtcbiAgICBpZiAoaW5kZXggLSAxID49IGxvd2VyQm91bmQpIHtcbiAgICAgIHIgfD0gcGFyc2VIZXg0Qml0cyhzdHJpbmcsIGluZGV4IC0gMSkgPDwgNDtcbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH1cblxuICBCTi5wcm90b3R5cGUuX3BhcnNlSGV4ID0gZnVuY3Rpb24gX3BhcnNlSGV4IChudW1iZXIsIHN0YXJ0LCBlbmRpYW4pIHtcbiAgICAvLyBDcmVhdGUgcG9zc2libHkgYmlnZ2VyIGFycmF5IHRvIGVuc3VyZSB0aGF0IGl0IGZpdHMgdGhlIG51bWJlclxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5jZWlsKChudW1iZXIubGVuZ3RoIC0gc3RhcnQpIC8gNik7XG4gICAgdGhpcy53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICB9XG5cbiAgICAvLyAyNC1iaXRzIGNodW5rc1xuICAgIHZhciBvZmYgPSAwO1xuICAgIHZhciBqID0gMDtcblxuICAgIHZhciB3O1xuICAgIGlmIChlbmRpYW4gPT09ICdiZScpIHtcbiAgICAgIGZvciAoaSA9IG51bWJlci5sZW5ndGggLSAxOyBpID49IHN0YXJ0OyBpIC09IDIpIHtcbiAgICAgICAgdyA9IHBhcnNlSGV4Qnl0ZShudW1iZXIsIHN0YXJ0LCBpKSA8PCBvZmY7XG4gICAgICAgIHRoaXMud29yZHNbal0gfD0gdyAmIDB4M2ZmZmZmZjtcbiAgICAgICAgaWYgKG9mZiA+PSAxOCkge1xuICAgICAgICAgIG9mZiAtPSAxODtcbiAgICAgICAgICBqICs9IDE7XG4gICAgICAgICAgdGhpcy53b3Jkc1tqXSB8PSB3ID4+PiAyNjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvZmYgKz0gODtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcGFyc2VMZW5ndGggPSBudW1iZXIubGVuZ3RoIC0gc3RhcnQ7XG4gICAgICBmb3IgKGkgPSBwYXJzZUxlbmd0aCAlIDIgPT09IDAgPyBzdGFydCArIDEgOiBzdGFydDsgaSA8IG51bWJlci5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICB3ID0gcGFyc2VIZXhCeXRlKG51bWJlciwgc3RhcnQsIGkpIDw8IG9mZjtcbiAgICAgICAgdGhpcy53b3Jkc1tqXSB8PSB3ICYgMHgzZmZmZmZmO1xuICAgICAgICBpZiAob2ZmID49IDE4KSB7XG4gICAgICAgICAgb2ZmIC09IDE4O1xuICAgICAgICAgIGogKz0gMTtcbiAgICAgICAgICB0aGlzLndvcmRzW2pdIHw9IHcgPj4+IDI2O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9mZiArPSA4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHBhcnNlQmFzZSAoc3RyLCBzdGFydCwgZW5kLCBtdWwpIHtcbiAgICB2YXIgciA9IDA7XG4gICAgdmFyIGxlbiA9IE1hdGgubWluKHN0ci5sZW5ndGgsIGVuZCk7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHZhciBjID0gc3RyLmNoYXJDb2RlQXQoaSkgLSA0ODtcblxuICAgICAgciAqPSBtdWw7XG5cbiAgICAgIC8vICdhJ1xuICAgICAgaWYgKGMgPj0gNDkpIHtcbiAgICAgICAgciArPSBjIC0gNDkgKyAweGE7XG5cbiAgICAgIC8vICdBJ1xuICAgICAgfSBlbHNlIGlmIChjID49IDE3KSB7XG4gICAgICAgIHIgKz0gYyAtIDE3ICsgMHhhO1xuXG4gICAgICAvLyAnMCcgLSAnOSdcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHIgKz0gYztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH1cblxuICBCTi5wcm90b3R5cGUuX3BhcnNlQmFzZSA9IGZ1bmN0aW9uIF9wYXJzZUJhc2UgKG51bWJlciwgYmFzZSwgc3RhcnQpIHtcbiAgICAvLyBJbml0aWFsaXplIGFzIHplcm9cbiAgICB0aGlzLndvcmRzID0gWyAwIF07XG4gICAgdGhpcy5sZW5ndGggPSAxO1xuXG4gICAgLy8gRmluZCBsZW5ndGggb2YgbGltYiBpbiBiYXNlXG4gICAgZm9yICh2YXIgbGltYkxlbiA9IDAsIGxpbWJQb3cgPSAxOyBsaW1iUG93IDw9IDB4M2ZmZmZmZjsgbGltYlBvdyAqPSBiYXNlKSB7XG4gICAgICBsaW1iTGVuKys7XG4gICAgfVxuICAgIGxpbWJMZW4tLTtcbiAgICBsaW1iUG93ID0gKGxpbWJQb3cgLyBiYXNlKSB8IDA7XG5cbiAgICB2YXIgdG90YWwgPSBudW1iZXIubGVuZ3RoIC0gc3RhcnQ7XG4gICAgdmFyIG1vZCA9IHRvdGFsICUgbGltYkxlbjtcbiAgICB2YXIgZW5kID0gTWF0aC5taW4odG90YWwsIHRvdGFsIC0gbW9kKSArIHN0YXJ0O1xuXG4gICAgdmFyIHdvcmQgPSAwO1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSBsaW1iTGVuKSB7XG4gICAgICB3b3JkID0gcGFyc2VCYXNlKG51bWJlciwgaSwgaSArIGxpbWJMZW4sIGJhc2UpO1xuXG4gICAgICB0aGlzLmltdWxuKGxpbWJQb3cpO1xuICAgICAgaWYgKHRoaXMud29yZHNbMF0gKyB3b3JkIDwgMHg0MDAwMDAwKSB7XG4gICAgICAgIHRoaXMud29yZHNbMF0gKz0gd29yZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2lhZGRuKHdvcmQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChtb2QgIT09IDApIHtcbiAgICAgIHZhciBwb3cgPSAxO1xuICAgICAgd29yZCA9IHBhcnNlQmFzZShudW1iZXIsIGksIG51bWJlci5sZW5ndGgsIGJhc2UpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbW9kOyBpKyspIHtcbiAgICAgICAgcG93ICo9IGJhc2U7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaW11bG4ocG93KTtcbiAgICAgIGlmICh0aGlzLndvcmRzWzBdICsgd29yZCA8IDB4NDAwMDAwMCkge1xuICAgICAgICB0aGlzLndvcmRzWzBdICs9IHdvcmQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9pYWRkbih3b3JkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5IChkZXN0KSB7XG4gICAgZGVzdC53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkZXN0LndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXTtcbiAgICB9XG4gICAgZGVzdC5sZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgICBkZXN0Lm5lZ2F0aXZlID0gdGhpcy5uZWdhdGl2ZTtcbiAgICBkZXN0LnJlZCA9IHRoaXMucmVkO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uIGNsb25lICgpIHtcbiAgICB2YXIgciA9IG5ldyBCTihudWxsKTtcbiAgICB0aGlzLmNvcHkocik7XG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9leHBhbmQgPSBmdW5jdGlvbiBfZXhwYW5kIChzaXplKSB7XG4gICAgd2hpbGUgKHRoaXMubGVuZ3RoIDwgc2l6ZSkge1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCsrXSA9IDA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIFJlbW92ZSBsZWFkaW5nIGAwYCBmcm9tIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc3RyaXAgPSBmdW5jdGlvbiBzdHJpcCAoKSB7XG4gICAgd2hpbGUgKHRoaXMubGVuZ3RoID4gMSAmJiB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV0gPT09IDApIHtcbiAgICAgIHRoaXMubGVuZ3RoLS07XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fbm9ybVNpZ24gPSBmdW5jdGlvbiBfbm9ybVNpZ24gKCkge1xuICAgIC8vIC0wID0gMFxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLndvcmRzWzBdID09PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgICByZXR1cm4gKHRoaXMucmVkID8gJzxCTi1SOiAnIDogJzxCTjogJykgKyB0aGlzLnRvU3RyaW5nKDE2KSArICc+JztcbiAgfTtcblxuICAvKlxuXG4gIHZhciB6ZXJvcyA9IFtdO1xuICB2YXIgZ3JvdXBTaXplcyA9IFtdO1xuICB2YXIgZ3JvdXBCYXNlcyA9IFtdO1xuXG4gIHZhciBzID0gJyc7XG4gIHZhciBpID0gLTE7XG4gIHdoaWxlICgrK2kgPCBCTi53b3JkU2l6ZSkge1xuICAgIHplcm9zW2ldID0gcztcbiAgICBzICs9ICcwJztcbiAgfVxuICBncm91cFNpemVzWzBdID0gMDtcbiAgZ3JvdXBTaXplc1sxXSA9IDA7XG4gIGdyb3VwQmFzZXNbMF0gPSAwO1xuICBncm91cEJhc2VzWzFdID0gMDtcbiAgdmFyIGJhc2UgPSAyIC0gMTtcbiAgd2hpbGUgKCsrYmFzZSA8IDM2ICsgMSkge1xuICAgIHZhciBncm91cFNpemUgPSAwO1xuICAgIHZhciBncm91cEJhc2UgPSAxO1xuICAgIHdoaWxlIChncm91cEJhc2UgPCAoMSA8PCBCTi53b3JkU2l6ZSkgLyBiYXNlKSB7XG4gICAgICBncm91cEJhc2UgKj0gYmFzZTtcbiAgICAgIGdyb3VwU2l6ZSArPSAxO1xuICAgIH1cbiAgICBncm91cFNpemVzW2Jhc2VdID0gZ3JvdXBTaXplO1xuICAgIGdyb3VwQmFzZXNbYmFzZV0gPSBncm91cEJhc2U7XG4gIH1cblxuICAqL1xuXG4gIHZhciB6ZXJvcyA9IFtcbiAgICAnJyxcbiAgICAnMCcsXG4gICAgJzAwJyxcbiAgICAnMDAwJyxcbiAgICAnMDAwMCcsXG4gICAgJzAwMDAwJyxcbiAgICAnMDAwMDAwJyxcbiAgICAnMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCdcbiAgXTtcblxuICB2YXIgZ3JvdXBTaXplcyA9IFtcbiAgICAwLCAwLFxuICAgIDI1LCAxNiwgMTIsIDExLCAxMCwgOSwgOCxcbiAgICA4LCA3LCA3LCA3LCA3LCA2LCA2LFxuICAgIDYsIDYsIDYsIDYsIDYsIDUsIDUsXG4gICAgNSwgNSwgNSwgNSwgNSwgNSwgNSxcbiAgICA1LCA1LCA1LCA1LCA1LCA1LCA1XG4gIF07XG5cbiAgdmFyIGdyb3VwQmFzZXMgPSBbXG4gICAgMCwgMCxcbiAgICAzMzU1NDQzMiwgNDMwNDY3MjEsIDE2Nzc3MjE2LCA0ODgyODEyNSwgNjA0NjYxNzYsIDQwMzUzNjA3LCAxNjc3NzIxNixcbiAgICA0MzA0NjcyMSwgMTAwMDAwMDAsIDE5NDg3MTcxLCAzNTgzMTgwOCwgNjI3NDg1MTcsIDc1Mjk1MzYsIDExMzkwNjI1LFxuICAgIDE2Nzc3MjE2LCAyNDEzNzU2OSwgMzQwMTIyMjQsIDQ3MDQ1ODgxLCA2NDAwMDAwMCwgNDA4NDEwMSwgNTE1MzYzMixcbiAgICA2NDM2MzQzLCA3OTYyNjI0LCA5NzY1NjI1LCAxMTg4MTM3NiwgMTQzNDg5MDcsIDE3MjEwMzY4LCAyMDUxMTE0OSxcbiAgICAyNDMwMDAwMCwgMjg2MjkxNTEsIDMzNTU0NDMyLCAzOTEzNTM5MywgNDU0MzU0MjQsIDUyNTIxODc1LCA2MDQ2NjE3NlxuICBdO1xuXG4gIEJOLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nIChiYXNlLCBwYWRkaW5nKSB7XG4gICAgYmFzZSA9IGJhc2UgfHwgMTA7XG4gICAgcGFkZGluZyA9IHBhZGRpbmcgfCAwIHx8IDE7XG5cbiAgICB2YXIgb3V0O1xuICAgIGlmIChiYXNlID09PSAxNiB8fCBiYXNlID09PSAnaGV4Jykge1xuICAgICAgb3V0ID0gJyc7XG4gICAgICB2YXIgb2ZmID0gMDtcbiAgICAgIHZhciBjYXJyeSA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLndvcmRzW2ldO1xuICAgICAgICB2YXIgd29yZCA9ICgoKHcgPDwgb2ZmKSB8IGNhcnJ5KSAmIDB4ZmZmZmZmKS50b1N0cmluZygxNik7XG4gICAgICAgIGNhcnJ5ID0gKHcgPj4+ICgyNCAtIG9mZikpICYgMHhmZmZmZmY7XG4gICAgICAgIGlmIChjYXJyeSAhPT0gMCB8fCBpICE9PSB0aGlzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBvdXQgPSB6ZXJvc1s2IC0gd29yZC5sZW5ndGhdICsgd29yZCArIG91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgPSB3b3JkICsgb3V0O1xuICAgICAgICB9XG4gICAgICAgIG9mZiArPSAyO1xuICAgICAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICAgIGktLTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICAgIG91dCA9IGNhcnJ5LnRvU3RyaW5nKDE2KSArIG91dDtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChvdXQubGVuZ3RoICUgcGFkZGluZyAhPT0gMCkge1xuICAgICAgICBvdXQgPSAnMCcgKyBvdXQ7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICBvdXQgPSAnLScgKyBvdXQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH1cblxuICAgIGlmIChiYXNlID09PSAoYmFzZSB8IDApICYmIGJhc2UgPj0gMiAmJiBiYXNlIDw9IDM2KSB7XG4gICAgICAvLyB2YXIgZ3JvdXBTaXplID0gTWF0aC5mbG9vcihCTi53b3JkU2l6ZSAqIE1hdGguTE4yIC8gTWF0aC5sb2coYmFzZSkpO1xuICAgICAgdmFyIGdyb3VwU2l6ZSA9IGdyb3VwU2l6ZXNbYmFzZV07XG4gICAgICAvLyB2YXIgZ3JvdXBCYXNlID0gTWF0aC5wb3coYmFzZSwgZ3JvdXBTaXplKTtcbiAgICAgIHZhciBncm91cEJhc2UgPSBncm91cEJhc2VzW2Jhc2VdO1xuICAgICAgb3V0ID0gJyc7XG4gICAgICB2YXIgYyA9IHRoaXMuY2xvbmUoKTtcbiAgICAgIGMubmVnYXRpdmUgPSAwO1xuICAgICAgd2hpbGUgKCFjLmlzWmVybygpKSB7XG4gICAgICAgIHZhciByID0gYy5tb2RuKGdyb3VwQmFzZSkudG9TdHJpbmcoYmFzZSk7XG4gICAgICAgIGMgPSBjLmlkaXZuKGdyb3VwQmFzZSk7XG5cbiAgICAgICAgaWYgKCFjLmlzWmVybygpKSB7XG4gICAgICAgICAgb3V0ID0gemVyb3NbZ3JvdXBTaXplIC0gci5sZW5ndGhdICsgciArIG91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgPSByICsgb3V0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5pc1plcm8oKSkge1xuICAgICAgICBvdXQgPSAnMCcgKyBvdXQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAob3V0Lmxlbmd0aCAlIHBhZGRpbmcgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJy0nICsgb3V0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBhc3NlcnQoZmFsc2UsICdCYXNlIHNob3VsZCBiZSBiZXR3ZWVuIDIgYW5kIDM2Jyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvTnVtYmVyID0gZnVuY3Rpb24gdG9OdW1iZXIgKCkge1xuICAgIHZhciByZXQgPSB0aGlzLndvcmRzWzBdO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMikge1xuICAgICAgcmV0ICs9IHRoaXMud29yZHNbMV0gKiAweDQwMDAwMDA7XG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA9PT0gMyAmJiB0aGlzLndvcmRzWzJdID09PSAweDAxKSB7XG4gICAgICAvLyBOT1RFOiBhdCB0aGlzIHN0YWdlIGl0IGlzIGtub3duIHRoYXQgdGhlIHRvcCBiaXQgaXMgc2V0XG4gICAgICByZXQgKz0gMHgxMDAwMDAwMDAwMDAwMCArICh0aGlzLndvcmRzWzFdICogMHg0MDAwMDAwKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMubGVuZ3RoID4gMikge1xuICAgICAgYXNzZXJ0KGZhbHNlLCAnTnVtYmVyIGNhbiBvbmx5IHNhZmVseSBzdG9yZSB1cCB0byA1MyBiaXRzJyk7XG4gICAgfVxuICAgIHJldHVybiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkgPyAtcmV0IDogcmV0O1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKDE2KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9CdWZmZXIgPSBmdW5jdGlvbiB0b0J1ZmZlciAoZW5kaWFuLCBsZW5ndGgpIHtcbiAgICBhc3NlcnQodHlwZW9mIEJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpO1xuICAgIHJldHVybiB0aGlzLnRvQXJyYXlMaWtlKEJ1ZmZlciwgZW5kaWFuLCBsZW5ndGgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24gdG9BcnJheSAoZW5kaWFuLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gdGhpcy50b0FycmF5TGlrZShBcnJheSwgZW5kaWFuLCBsZW5ndGgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0FycmF5TGlrZSA9IGZ1bmN0aW9uIHRvQXJyYXlMaWtlIChBcnJheVR5cGUsIGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgdmFyIGJ5dGVMZW5ndGggPSB0aGlzLmJ5dGVMZW5ndGgoKTtcbiAgICB2YXIgcmVxTGVuZ3RoID0gbGVuZ3RoIHx8IE1hdGgubWF4KDEsIGJ5dGVMZW5ndGgpO1xuICAgIGFzc2VydChieXRlTGVuZ3RoIDw9IHJlcUxlbmd0aCwgJ2J5dGUgYXJyYXkgbG9uZ2VyIHRoYW4gZGVzaXJlZCBsZW5ndGgnKTtcbiAgICBhc3NlcnQocmVxTGVuZ3RoID4gMCwgJ1JlcXVlc3RlZCBhcnJheSBsZW5ndGggPD0gMCcpO1xuXG4gICAgdGhpcy5zdHJpcCgpO1xuICAgIHZhciBsaXR0bGVFbmRpYW4gPSBlbmRpYW4gPT09ICdsZSc7XG4gICAgdmFyIHJlcyA9IG5ldyBBcnJheVR5cGUocmVxTGVuZ3RoKTtcblxuICAgIHZhciBiLCBpO1xuICAgIHZhciBxID0gdGhpcy5jbG9uZSgpO1xuICAgIGlmICghbGl0dGxlRW5kaWFuKSB7XG4gICAgICAvLyBBc3N1bWUgYmlnLWVuZGlhblxuICAgICAgZm9yIChpID0gMDsgaSA8IHJlcUxlbmd0aCAtIGJ5dGVMZW5ndGg7IGkrKykge1xuICAgICAgICByZXNbaV0gPSAwO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwOyAhcS5pc1plcm8oKTsgaSsrKSB7XG4gICAgICAgIGIgPSBxLmFuZGxuKDB4ZmYpO1xuICAgICAgICBxLml1c2hybig4KTtcblxuICAgICAgICByZXNbcmVxTGVuZ3RoIC0gaSAtIDFdID0gYjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChpID0gMDsgIXEuaXNaZXJvKCk7IGkrKykge1xuICAgICAgICBiID0gcS5hbmRsbigweGZmKTtcbiAgICAgICAgcS5pdXNocm4oOCk7XG5cbiAgICAgICAgcmVzW2ldID0gYjtcbiAgICAgIH1cblxuICAgICAgZm9yICg7IGkgPCByZXFMZW5ndGg7IGkrKykge1xuICAgICAgICByZXNbaV0gPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgaWYgKE1hdGguY2x6MzIpIHtcbiAgICBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyA9IGZ1bmN0aW9uIF9jb3VudEJpdHMgKHcpIHtcbiAgICAgIHJldHVybiAzMiAtIE1hdGguY2x6MzIodyk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyA9IGZ1bmN0aW9uIF9jb3VudEJpdHMgKHcpIHtcbiAgICAgIHZhciB0ID0gdztcbiAgICAgIHZhciByID0gMDtcbiAgICAgIGlmICh0ID49IDB4MTAwMCkge1xuICAgICAgICByICs9IDEzO1xuICAgICAgICB0ID4+Pj0gMTM7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDQwKSB7XG4gICAgICAgIHIgKz0gNztcbiAgICAgICAgdCA+Pj49IDc7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDgpIHtcbiAgICAgICAgciArPSA0O1xuICAgICAgICB0ID4+Pj0gNDtcbiAgICAgIH1cbiAgICAgIGlmICh0ID49IDB4MDIpIHtcbiAgICAgICAgciArPSAyO1xuICAgICAgICB0ID4+Pj0gMjtcbiAgICAgIH1cbiAgICAgIHJldHVybiByICsgdDtcbiAgICB9O1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl96ZXJvQml0cyA9IGZ1bmN0aW9uIF96ZXJvQml0cyAodykge1xuICAgIC8vIFNob3J0LWN1dFxuICAgIGlmICh3ID09PSAwKSByZXR1cm4gMjY7XG5cbiAgICB2YXIgdCA9IHc7XG4gICAgdmFyIHIgPSAwO1xuICAgIGlmICgodCAmIDB4MWZmZikgPT09IDApIHtcbiAgICAgIHIgKz0gMTM7XG4gICAgICB0ID4+Pj0gMTM7XG4gICAgfVxuICAgIGlmICgodCAmIDB4N2YpID09PSAwKSB7XG4gICAgICByICs9IDc7XG4gICAgICB0ID4+Pj0gNztcbiAgICB9XG4gICAgaWYgKCh0ICYgMHhmKSA9PT0gMCkge1xuICAgICAgciArPSA0O1xuICAgICAgdCA+Pj49IDQ7XG4gICAgfVxuICAgIGlmICgodCAmIDB4MykgPT09IDApIHtcbiAgICAgIHIgKz0gMjtcbiAgICAgIHQgPj4+PSAyO1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDEpID09PSAwKSB7XG4gICAgICByKys7XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIC8vIFJldHVybiBudW1iZXIgb2YgdXNlZCBiaXRzIGluIGEgQk5cbiAgQk4ucHJvdG90eXBlLmJpdExlbmd0aCA9IGZ1bmN0aW9uIGJpdExlbmd0aCAoKSB7XG4gICAgdmFyIHcgPSB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV07XG4gICAgdmFyIGhpID0gdGhpcy5fY291bnRCaXRzKHcpO1xuICAgIHJldHVybiAodGhpcy5sZW5ndGggLSAxKSAqIDI2ICsgaGk7XG4gIH07XG5cbiAgZnVuY3Rpb24gdG9CaXRBcnJheSAobnVtKSB7XG4gICAgdmFyIHcgPSBuZXcgQXJyYXkobnVtLmJpdExlbmd0aCgpKTtcblxuICAgIGZvciAodmFyIGJpdCA9IDA7IGJpdCA8IHcubGVuZ3RoOyBiaXQrKykge1xuICAgICAgdmFyIG9mZiA9IChiaXQgLyAyNikgfCAwO1xuICAgICAgdmFyIHdiaXQgPSBiaXQgJSAyNjtcblxuICAgICAgd1tiaXRdID0gKG51bS53b3Jkc1tvZmZdICYgKDEgPDwgd2JpdCkpID4+PiB3Yml0O1xuICAgIH1cblxuICAgIHJldHVybiB3O1xuICB9XG5cbiAgLy8gTnVtYmVyIG9mIHRyYWlsaW5nIHplcm8gYml0c1xuICBCTi5wcm90b3R5cGUuemVyb0JpdHMgPSBmdW5jdGlvbiB6ZXJvQml0cyAoKSB7XG4gICAgaWYgKHRoaXMuaXNaZXJvKCkpIHJldHVybiAwO1xuXG4gICAgdmFyIHIgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGIgPSB0aGlzLl96ZXJvQml0cyh0aGlzLndvcmRzW2ldKTtcbiAgICAgIHIgKz0gYjtcbiAgICAgIGlmIChiICE9PSAyNikgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ieXRlTGVuZ3RoID0gZnVuY3Rpb24gYnl0ZUxlbmd0aCAoKSB7XG4gICAgcmV0dXJuIE1hdGguY2VpbCh0aGlzLmJpdExlbmd0aCgpIC8gOCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvVHdvcyA9IGZ1bmN0aW9uIHRvVHdvcyAod2lkdGgpIHtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXMuYWJzKCkuaW5vdG4od2lkdGgpLmlhZGRuKDEpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5mcm9tVHdvcyA9IGZ1bmN0aW9uIGZyb21Ud29zICh3aWR0aCkge1xuICAgIGlmICh0aGlzLnRlc3RuKHdpZHRoIC0gMSkpIHtcbiAgICAgIHJldHVybiB0aGlzLm5vdG4od2lkdGgpLmlhZGRuKDEpLmluZWcoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNOZWcgPSBmdW5jdGlvbiBpc05lZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMubmVnYXRpdmUgIT09IDA7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG5lZ2F0aXZlIGNsb25lIG9mIGB0aGlzYFxuICBCTi5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnICgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmluZWcoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaW5lZyA9IGZ1bmN0aW9uIGluZWcgKCkge1xuICAgIGlmICghdGhpcy5pc1plcm8oKSkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSBePSAxO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIE9yIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdW9yID0gZnVuY3Rpb24gaXVvciAobnVtKSB7XG4gICAgd2hpbGUgKHRoaXMubGVuZ3RoIDwgbnVtLmxlbmd0aCkge1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCsrXSA9IDA7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldIHwgbnVtLndvcmRzW2ldO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlvciA9IGZ1bmN0aW9uIGlvciAobnVtKSB7XG4gICAgYXNzZXJ0KCh0aGlzLm5lZ2F0aXZlIHwgbnVtLm5lZ2F0aXZlKSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXVvcihudW0pO1xuICB9O1xuXG4gIC8vIE9yIGBudW1gIHdpdGggYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5vciA9IGZ1bmN0aW9uIG9yIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pb3IodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVvciA9IGZ1bmN0aW9uIHVvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdW9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml1b3IodGhpcyk7XG4gIH07XG5cbiAgLy8gQW5kIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdWFuZCA9IGZ1bmN0aW9uIGl1YW5kIChudW0pIHtcbiAgICAvLyBiID0gbWluLWxlbmd0aChudW0sIHRoaXMpXG4gICAgdmFyIGI7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkge1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXSAmIG51bS53b3Jkc1tpXTtcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGIubGVuZ3RoO1xuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaWFuZCA9IGZ1bmN0aW9uIGlhbmQgKG51bSkge1xuICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1YW5kKG51bSk7XG4gIH07XG5cbiAgLy8gQW5kIGBudW1gIHdpdGggYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5hbmQgPSBmdW5jdGlvbiBhbmQgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaWFuZChudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pYW5kKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51YW5kID0gZnVuY3Rpb24gdWFuZCAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdWFuZChudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pdWFuZCh0aGlzKTtcbiAgfTtcblxuICAvLyBYb3IgYG51bWAgd2l0aCBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLml1eG9yID0gZnVuY3Rpb24gaXV4b3IgKG51bSkge1xuICAgIC8vIGEubGVuZ3RoID4gYi5sZW5ndGhcbiAgICB2YXIgYTtcbiAgICB2YXIgYjtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldIF4gYi53b3Jkc1tpXTtcbiAgICB9XG5cbiAgICBpZiAodGhpcyAhPT0gYSkge1xuICAgICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gYS5sZW5ndGg7XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5peG9yID0gZnVuY3Rpb24gaXhvciAobnVtKSB7XG4gICAgYXNzZXJ0KCh0aGlzLm5lZ2F0aXZlIHwgbnVtLm5lZ2F0aXZlKSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXV4b3IobnVtKTtcbiAgfTtcblxuICAvLyBYb3IgYG51bWAgd2l0aCBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnhvciA9IGZ1bmN0aW9uIHhvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5peG9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml4b3IodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnV4b3IgPSBmdW5jdGlvbiB1eG9yIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLml1eG9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml1eG9yKHRoaXMpO1xuICB9O1xuXG4gIC8vIE5vdCBgYHRoaXNgYCB3aXRoIGBgd2lkdGhgYCBiaXR3aWR0aFxuICBCTi5wcm90b3R5cGUuaW5vdG4gPSBmdW5jdGlvbiBpbm90biAod2lkdGgpIHtcbiAgICBhc3NlcnQodHlwZW9mIHdpZHRoID09PSAnbnVtYmVyJyAmJiB3aWR0aCA+PSAwKTtcblxuICAgIHZhciBieXRlc05lZWRlZCA9IE1hdGguY2VpbCh3aWR0aCAvIDI2KSB8IDA7XG4gICAgdmFyIGJpdHNMZWZ0ID0gd2lkdGggJSAyNjtcblxuICAgIC8vIEV4dGVuZCB0aGUgYnVmZmVyIHdpdGggbGVhZGluZyB6ZXJvZXNcbiAgICB0aGlzLl9leHBhbmQoYnl0ZXNOZWVkZWQpO1xuXG4gICAgaWYgKGJpdHNMZWZ0ID4gMCkge1xuICAgICAgYnl0ZXNOZWVkZWQtLTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgY29tcGxldGUgd29yZHNcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzTmVlZGVkOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB+dGhpcy53b3Jkc1tpXSAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgdGhlIHJlc2lkdWVcbiAgICBpZiAoYml0c0xlZnQgPiAwKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gfnRoaXMud29yZHNbaV0gJiAoMHgzZmZmZmZmID4+ICgyNiAtIGJpdHNMZWZ0KSk7XG4gICAgfVxuXG4gICAgLy8gQW5kIHJlbW92ZSBsZWFkaW5nIHplcm9lc1xuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLm5vdG4gPSBmdW5jdGlvbiBub3RuICh3aWR0aCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW5vdG4od2lkdGgpO1xuICB9O1xuXG4gIC8vIFNldCBgYml0YCBvZiBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnNldG4gPSBmdW5jdGlvbiBzZXRuIChiaXQsIHZhbCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0ID09PSAnbnVtYmVyJyAmJiBiaXQgPj0gMCk7XG5cbiAgICB2YXIgb2ZmID0gKGJpdCAvIDI2KSB8IDA7XG4gICAgdmFyIHdiaXQgPSBiaXQgJSAyNjtcblxuICAgIHRoaXMuX2V4cGFuZChvZmYgKyAxKTtcblxuICAgIGlmICh2YWwpIHtcbiAgICAgIHRoaXMud29yZHNbb2ZmXSA9IHRoaXMud29yZHNbb2ZmXSB8ICgxIDw8IHdiaXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLndvcmRzW29mZl0gPSB0aGlzLndvcmRzW29mZl0gJiB+KDEgPDwgd2JpdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBBZGQgYG51bWAgdG8gYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pYWRkID0gZnVuY3Rpb24gaWFkZCAobnVtKSB7XG4gICAgdmFyIHI7XG5cbiAgICAvLyBuZWdhdGl2ZSArIHBvc2l0aXZlXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDAgJiYgbnVtLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHIgPSB0aGlzLmlzdWIobnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgXj0gMTtcbiAgICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuXG4gICAgLy8gcG9zaXRpdmUgKyBuZWdhdGl2ZVxuICAgIH0gZWxzZSBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBudW0ubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDA7XG4gICAgICByID0gdGhpcy5pc3ViKG51bSk7XG4gICAgICBudW0ubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHIuX25vcm1TaWduKCk7XG4gICAgfVxuXG4gICAgLy8gYS5sZW5ndGggPiBiLmxlbmd0aFxuICAgIHZhciBhLCBiO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHtcbiAgICAgIGEgPSB0aGlzO1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IG51bTtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIChiLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgICAgY2FycnkgPSByID4+PiAyNjtcbiAgICB9XG4gICAgZm9yICg7IGNhcnJ5ICE9PSAwICYmIGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7XG4gICAgICBjYXJyeSA9IHIgPj4+IDI2O1xuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gYS5sZW5ndGg7XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoXSA9IGNhcnJ5O1xuICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICAvLyBDb3B5IHRoZSByZXN0IG9mIHRoZSB3b3Jkc1xuICAgIH0gZWxzZSBpZiAoYSAhPT0gdGhpcykge1xuICAgICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIEFkZCBgbnVtYCB0byBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCAobnVtKSB7XG4gICAgdmFyIHJlcztcbiAgICBpZiAobnVtLm5lZ2F0aXZlICE9PSAwICYmIHRoaXMubmVnYXRpdmUgPT09IDApIHtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDA7XG4gICAgICByZXMgPSB0aGlzLnN1YihudW0pO1xuICAgICAgbnVtLm5lZ2F0aXZlIF49IDE7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH0gZWxzZSBpZiAobnVtLm5lZ2F0aXZlID09PSAwICYmIHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgcmVzID0gbnVtLnN1Yih0aGlzKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlhZGQobnVtKTtcblxuICAgIHJldHVybiBudW0uY2xvbmUoKS5pYWRkKHRoaXMpO1xuICB9O1xuXG4gIC8vIFN1YnRyYWN0IGBudW1gIGZyb20gYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pc3ViID0gZnVuY3Rpb24gaXN1YiAobnVtKSB7XG4gICAgLy8gdGhpcyAtICgtbnVtKSA9IHRoaXMgKyBudW1cbiAgICBpZiAobnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgdmFyIHIgPSB0aGlzLmlhZGQobnVtKTtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gci5fbm9ybVNpZ24oKTtcblxuICAgIC8vIC10aGlzIC0gbnVtID0gLSh0aGlzICsgbnVtKVxuICAgIH0gZWxzZSBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmlhZGQobnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHRoaXMuX25vcm1TaWduKCk7XG4gICAgfVxuXG4gICAgLy8gQXQgdGhpcyBwb2ludCBib3RoIG51bWJlcnMgYXJlIHBvc2l0aXZlXG4gICAgdmFyIGNtcCA9IHRoaXMuY21wKG51bSk7XG5cbiAgICAvLyBPcHRpbWl6YXRpb24gLSB6ZXJvaWZ5XG4gICAgaWYgKGNtcCA9PT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgICB0aGlzLndvcmRzWzBdID0gMDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIGEgPiBiXG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKGNtcCA+IDApIHtcbiAgICAgIGEgPSB0aGlzO1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IG51bTtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSAtIChiLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gciA+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgIH1cbiAgICBmb3IgKDsgY2FycnkgIT09IDAgJiYgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIHIgPSAoYS53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHIgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICAvLyBDb3B5IHJlc3Qgb2YgdGhlIHdvcmRzXG4gICAgaWYgKGNhcnJ5ID09PSAwICYmIGkgPCBhLmxlbmd0aCAmJiBhICE9PSB0aGlzKSB7XG4gICAgICBmb3IgKDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGEud29yZHNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1heCh0aGlzLmxlbmd0aCwgaSk7XG5cbiAgICBpZiAoYSAhPT0gdGhpcykge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBTdWJ0cmFjdCBgbnVtYCBmcm9tIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc3ViID0gZnVuY3Rpb24gc3ViIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzdWIobnVtKTtcbiAgfTtcblxuICBmdW5jdGlvbiBzbWFsbE11bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIG91dC5uZWdhdGl2ZSA9IG51bS5uZWdhdGl2ZSBeIHNlbGYubmVnYXRpdmU7XG4gICAgdmFyIGxlbiA9IChzZWxmLmxlbmd0aCArIG51bS5sZW5ndGgpIHwgMDtcbiAgICBvdXQubGVuZ3RoID0gbGVuO1xuICAgIGxlbiA9IChsZW4gLSAxKSB8IDA7XG5cbiAgICAvLyBQZWVsIG9uZSBpdGVyYXRpb24gKGNvbXBpbGVyIGNhbid0IGRvIGl0LCBiZWNhdXNlIG9mIGNvZGUgY29tcGxleGl0eSlcbiAgICB2YXIgYSA9IHNlbGYud29yZHNbMF0gfCAwO1xuICAgIHZhciBiID0gbnVtLndvcmRzWzBdIHwgMDtcbiAgICB2YXIgciA9IGEgKiBiO1xuXG4gICAgdmFyIGxvID0gciAmIDB4M2ZmZmZmZjtcbiAgICB2YXIgY2FycnkgPSAociAvIDB4NDAwMDAwMCkgfCAwO1xuICAgIG91dC53b3Jkc1swXSA9IGxvO1xuXG4gICAgZm9yICh2YXIgayA9IDE7IGsgPCBsZW47IGsrKykge1xuICAgICAgLy8gU3VtIGFsbCB3b3JkcyB3aXRoIHRoZSBzYW1lIGBpICsgaiA9IGtgIGFuZCBhY2N1bXVsYXRlIGBuY2FycnlgLFxuICAgICAgLy8gbm90ZSB0aGF0IG5jYXJyeSBjb3VsZCBiZSA+PSAweDNmZmZmZmZcbiAgICAgIHZhciBuY2FycnkgPSBjYXJyeSA+Pj4gMjY7XG4gICAgICB2YXIgcndvcmQgPSBjYXJyeSAmIDB4M2ZmZmZmZjtcbiAgICAgIHZhciBtYXhKID0gTWF0aC5taW4oaywgbnVtLmxlbmd0aCAtIDEpO1xuICAgICAgZm9yICh2YXIgaiA9IE1hdGgubWF4KDAsIGsgLSBzZWxmLmxlbmd0aCArIDEpOyBqIDw9IG1heEo7IGorKykge1xuICAgICAgICB2YXIgaSA9IChrIC0gaikgfCAwO1xuICAgICAgICBhID0gc2VsZi53b3Jkc1tpXSB8IDA7XG4gICAgICAgIGIgPSBudW0ud29yZHNbal0gfCAwO1xuICAgICAgICByID0gYSAqIGIgKyByd29yZDtcbiAgICAgICAgbmNhcnJ5ICs9IChyIC8gMHg0MDAwMDAwKSB8IDA7XG4gICAgICAgIHJ3b3JkID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgIH1cbiAgICAgIG91dC53b3Jkc1trXSA9IHJ3b3JkIHwgMDtcbiAgICAgIGNhcnJ5ID0gbmNhcnJ5IHwgMDtcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICBvdXQud29yZHNba10gPSBjYXJyeSB8IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dC5sZW5ndGgtLTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0LnN0cmlwKCk7XG4gIH1cblxuICAvLyBUT0RPKGluZHV0bnkpOiBpdCBtYXkgYmUgcmVhc29uYWJsZSB0byBvbWl0IGl0IGZvciB1c2VycyB3aG8gZG9uJ3QgbmVlZFxuICAvLyB0byB3b3JrIHdpdGggMjU2LWJpdCBudW1iZXJzLCBvdGhlcndpc2UgaXQgZ2l2ZXMgMjAlIGltcHJvdmVtZW50IGZvciAyNTYtYml0XG4gIC8vIG11bHRpcGxpY2F0aW9uIChsaWtlIGVsbGlwdGljIHNlY3AyNTZrMSkuXG4gIHZhciBjb21iMTBNdWxUbyA9IGZ1bmN0aW9uIGNvbWIxME11bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIHZhciBhID0gc2VsZi53b3JkcztcbiAgICB2YXIgYiA9IG51bS53b3JkcztcbiAgICB2YXIgbyA9IG91dC53b3JkcztcbiAgICB2YXIgYyA9IDA7XG4gICAgdmFyIGxvO1xuICAgIHZhciBtaWQ7XG4gICAgdmFyIGhpO1xuICAgIHZhciBhMCA9IGFbMF0gfCAwO1xuICAgIHZhciBhbDAgPSBhMCAmIDB4MWZmZjtcbiAgICB2YXIgYWgwID0gYTAgPj4+IDEzO1xuICAgIHZhciBhMSA9IGFbMV0gfCAwO1xuICAgIHZhciBhbDEgPSBhMSAmIDB4MWZmZjtcbiAgICB2YXIgYWgxID0gYTEgPj4+IDEzO1xuICAgIHZhciBhMiA9IGFbMl0gfCAwO1xuICAgIHZhciBhbDIgPSBhMiAmIDB4MWZmZjtcbiAgICB2YXIgYWgyID0gYTIgPj4+IDEzO1xuICAgIHZhciBhMyA9IGFbM10gfCAwO1xuICAgIHZhciBhbDMgPSBhMyAmIDB4MWZmZjtcbiAgICB2YXIgYWgzID0gYTMgPj4+IDEzO1xuICAgIHZhciBhNCA9IGFbNF0gfCAwO1xuICAgIHZhciBhbDQgPSBhNCAmIDB4MWZmZjtcbiAgICB2YXIgYWg0ID0gYTQgPj4+IDEzO1xuICAgIHZhciBhNSA9IGFbNV0gfCAwO1xuICAgIHZhciBhbDUgPSBhNSAmIDB4MWZmZjtcbiAgICB2YXIgYWg1ID0gYTUgPj4+IDEzO1xuICAgIHZhciBhNiA9IGFbNl0gfCAwO1xuICAgIHZhciBhbDYgPSBhNiAmIDB4MWZmZjtcbiAgICB2YXIgYWg2ID0gYTYgPj4+IDEzO1xuICAgIHZhciBhNyA9IGFbN10gfCAwO1xuICAgIHZhciBhbDcgPSBhNyAmIDB4MWZmZjtcbiAgICB2YXIgYWg3ID0gYTcgPj4+IDEzO1xuICAgIHZhciBhOCA9IGFbOF0gfCAwO1xuICAgIHZhciBhbDggPSBhOCAmIDB4MWZmZjtcbiAgICB2YXIgYWg4ID0gYTggPj4+IDEzO1xuICAgIHZhciBhOSA9IGFbOV0gfCAwO1xuICAgIHZhciBhbDkgPSBhOSAmIDB4MWZmZjtcbiAgICB2YXIgYWg5ID0gYTkgPj4+IDEzO1xuICAgIHZhciBiMCA9IGJbMF0gfCAwO1xuICAgIHZhciBibDAgPSBiMCAmIDB4MWZmZjtcbiAgICB2YXIgYmgwID0gYjAgPj4+IDEzO1xuICAgIHZhciBiMSA9IGJbMV0gfCAwO1xuICAgIHZhciBibDEgPSBiMSAmIDB4MWZmZjtcbiAgICB2YXIgYmgxID0gYjEgPj4+IDEzO1xuICAgIHZhciBiMiA9IGJbMl0gfCAwO1xuICAgIHZhciBibDIgPSBiMiAmIDB4MWZmZjtcbiAgICB2YXIgYmgyID0gYjIgPj4+IDEzO1xuICAgIHZhciBiMyA9IGJbM10gfCAwO1xuICAgIHZhciBibDMgPSBiMyAmIDB4MWZmZjtcbiAgICB2YXIgYmgzID0gYjMgPj4+IDEzO1xuICAgIHZhciBiNCA9IGJbNF0gfCAwO1xuICAgIHZhciBibDQgPSBiNCAmIDB4MWZmZjtcbiAgICB2YXIgYmg0ID0gYjQgPj4+IDEzO1xuICAgIHZhciBiNSA9IGJbNV0gfCAwO1xuICAgIHZhciBibDUgPSBiNSAmIDB4MWZmZjtcbiAgICB2YXIgYmg1ID0gYjUgPj4+IDEzO1xuICAgIHZhciBiNiA9IGJbNl0gfCAwO1xuICAgIHZhciBibDYgPSBiNiAmIDB4MWZmZjtcbiAgICB2YXIgYmg2ID0gYjYgPj4+IDEzO1xuICAgIHZhciBiNyA9IGJbN10gfCAwO1xuICAgIHZhciBibDcgPSBiNyAmIDB4MWZmZjtcbiAgICB2YXIgYmg3ID0gYjcgPj4+IDEzO1xuICAgIHZhciBiOCA9IGJbOF0gfCAwO1xuICAgIHZhciBibDggPSBiOCAmIDB4MWZmZjtcbiAgICB2YXIgYmg4ID0gYjggPj4+IDEzO1xuICAgIHZhciBiOSA9IGJbOV0gfCAwO1xuICAgIHZhciBibDkgPSBiOSAmIDB4MWZmZjtcbiAgICB2YXIgYmg5ID0gYjkgPj4+IDEzO1xuXG4gICAgb3V0Lm5lZ2F0aXZlID0gc2VsZi5uZWdhdGl2ZSBeIG51bS5uZWdhdGl2ZTtcbiAgICBvdXQubGVuZ3RoID0gMTk7XG4gICAgLyogayA9IDAgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDAsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMCwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMCwgYmgwKTtcbiAgICB2YXIgdzAgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcwID4+PiAyNikpIHwgMDtcbiAgICB3MCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDEsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMSwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMSwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDEpKSB8IDA7XG4gICAgdmFyIHcxID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MSA+Pj4gMjYpKSB8IDA7XG4gICAgdzEgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAyICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwyLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDIsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDIsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoMikpIHwgMDtcbiAgICB2YXIgdzIgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcyID4+PiAyNikpIHwgMDtcbiAgICB3MiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDMgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDMsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMywgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMywgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoMykpIHwgMDtcbiAgICB2YXIgdzMgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHczID4+PiAyNikpIHwgMDtcbiAgICB3MyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDQgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDQsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNCwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNCwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDQpKSB8IDA7XG4gICAgdmFyIHc0ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NCA+Pj4gMjYpKSB8IDA7XG4gICAgdzQgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA1ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw1LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDUsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDUsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoNSkpIHwgMDtcbiAgICB2YXIgdzUgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc1ID4+PiAyNikpIHwgMDtcbiAgICB3NSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDYgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDYsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNiwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNiwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoNikpIHwgMDtcbiAgICB2YXIgdzYgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc2ID4+PiAyNikpIHwgMDtcbiAgICB3NiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDcgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDcsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNywgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNywgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDcpKSB8IDA7XG4gICAgdmFyIHc3ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NyA+Pj4gMjYpKSB8IDA7XG4gICAgdzcgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA4ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw4LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDgsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDgsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoOCkpIHwgMDtcbiAgICB2YXIgdzggPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc4ID4+PiAyNikpIHwgMDtcbiAgICB3OCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDkgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzkgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc5ID4+PiAyNikpIHwgMDtcbiAgICB3OSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEwICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDEpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMSk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEwID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTAgPj4+IDI2KSkgfCAwO1xuICAgIHcxMCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDExICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDIpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMik7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMikpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMik7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTEgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxMSA+Pj4gMjYpKSB8IDA7XG4gICAgdzExICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTIgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMyk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmgzKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmwzKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmgzKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEyID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTIgPj4+IDI2KSkgfCAwO1xuICAgIHcxMiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEzICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDQpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEzID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTMgPj4+IDI2KSkgfCAwO1xuICAgIHcxMyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE0ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDUpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNSk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTQgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxNCA+Pj4gMjYpKSB8IDA7XG4gICAgdzE0ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTUgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsNik7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg2KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw2KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg2KTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE1ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTUgPj4+IDI2KSkgfCAwO1xuICAgIHcxNSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE2ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDcpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNyk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNykpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNyk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE2ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTYgPj4+IDI2KSkgfCAwO1xuICAgIHcxNiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE3ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDgpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoOCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsOCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoOCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTcgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxNyA+Pj4gMjYpKSB8IDA7XG4gICAgdzE3ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTggKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsOSk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg5KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw5KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg5KTtcbiAgICB2YXIgdzE4ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTggPj4+IDI2KSkgfCAwO1xuICAgIHcxOCAmPSAweDNmZmZmZmY7XG4gICAgb1swXSA9IHcwO1xuICAgIG9bMV0gPSB3MTtcbiAgICBvWzJdID0gdzI7XG4gICAgb1szXSA9IHczO1xuICAgIG9bNF0gPSB3NDtcbiAgICBvWzVdID0gdzU7XG4gICAgb1s2XSA9IHc2O1xuICAgIG9bN10gPSB3NztcbiAgICBvWzhdID0gdzg7XG4gICAgb1s5XSA9IHc5O1xuICAgIG9bMTBdID0gdzEwO1xuICAgIG9bMTFdID0gdzExO1xuICAgIG9bMTJdID0gdzEyO1xuICAgIG9bMTNdID0gdzEzO1xuICAgIG9bMTRdID0gdzE0O1xuICAgIG9bMTVdID0gdzE1O1xuICAgIG9bMTZdID0gdzE2O1xuICAgIG9bMTddID0gdzE3O1xuICAgIG9bMThdID0gdzE4O1xuICAgIGlmIChjICE9PSAwKSB7XG4gICAgICBvWzE5XSA9IGM7XG4gICAgICBvdXQubGVuZ3RoKys7XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG4gIH07XG5cbiAgLy8gUG9seWZpbGwgY29tYlxuICBpZiAoIU1hdGguaW11bCkge1xuICAgIGNvbWIxME11bFRvID0gc21hbGxNdWxUbztcbiAgfVxuXG4gIGZ1bmN0aW9uIGJpZ011bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIG91dC5uZWdhdGl2ZSA9IG51bS5uZWdhdGl2ZSBeIHNlbGYubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IHNlbGYubGVuZ3RoICsgbnVtLmxlbmd0aDtcblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgdmFyIGhuY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGsgPSAwOyBrIDwgb3V0Lmxlbmd0aCAtIDE7IGsrKykge1xuICAgICAgLy8gU3VtIGFsbCB3b3JkcyB3aXRoIHRoZSBzYW1lIGBpICsgaiA9IGtgIGFuZCBhY2N1bXVsYXRlIGBuY2FycnlgLFxuICAgICAgLy8gbm90ZSB0aGF0IG5jYXJyeSBjb3VsZCBiZSA+PSAweDNmZmZmZmZcbiAgICAgIHZhciBuY2FycnkgPSBobmNhcnJ5O1xuICAgICAgaG5jYXJyeSA9IDA7XG4gICAgICB2YXIgcndvcmQgPSBjYXJyeSAmIDB4M2ZmZmZmZjtcbiAgICAgIHZhciBtYXhKID0gTWF0aC5taW4oaywgbnVtLmxlbmd0aCAtIDEpO1xuICAgICAgZm9yICh2YXIgaiA9IE1hdGgubWF4KDAsIGsgLSBzZWxmLmxlbmd0aCArIDEpOyBqIDw9IG1heEo7IGorKykge1xuICAgICAgICB2YXIgaSA9IGsgLSBqO1xuICAgICAgICB2YXIgYSA9IHNlbGYud29yZHNbaV0gfCAwO1xuICAgICAgICB2YXIgYiA9IG51bS53b3Jkc1tqXSB8IDA7XG4gICAgICAgIHZhciByID0gYSAqIGI7XG5cbiAgICAgICAgdmFyIGxvID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgICAgbmNhcnJ5ID0gKG5jYXJyeSArICgociAvIDB4NDAwMDAwMCkgfCAwKSkgfCAwO1xuICAgICAgICBsbyA9IChsbyArIHJ3b3JkKSB8IDA7XG4gICAgICAgIHJ3b3JkID0gbG8gJiAweDNmZmZmZmY7XG4gICAgICAgIG5jYXJyeSA9IChuY2FycnkgKyAobG8gPj4+IDI2KSkgfCAwO1xuXG4gICAgICAgIGhuY2FycnkgKz0gbmNhcnJ5ID4+PiAyNjtcbiAgICAgICAgbmNhcnJ5ICY9IDB4M2ZmZmZmZjtcbiAgICAgIH1cbiAgICAgIG91dC53b3Jkc1trXSA9IHJ3b3JkO1xuICAgICAgY2FycnkgPSBuY2Fycnk7XG4gICAgICBuY2FycnkgPSBobmNhcnJ5O1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIG91dC53b3Jkc1trXSA9IGNhcnJ5O1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQubGVuZ3RoLS07XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dC5zdHJpcCgpO1xuICB9XG5cbiAgZnVuY3Rpb24ganVtYm9NdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICB2YXIgZmZ0bSA9IG5ldyBGRlRNKCk7XG4gICAgcmV0dXJuIGZmdG0ubXVscChzZWxmLCBudW0sIG91dCk7XG4gIH1cblxuICBCTi5wcm90b3R5cGUubXVsVG8gPSBmdW5jdGlvbiBtdWxUbyAobnVtLCBvdXQpIHtcbiAgICB2YXIgcmVzO1xuICAgIHZhciBsZW4gPSB0aGlzLmxlbmd0aCArIG51bS5sZW5ndGg7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxMCAmJiBudW0ubGVuZ3RoID09PSAxMCkge1xuICAgICAgcmVzID0gY29tYjEwTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSBpZiAobGVuIDwgNjMpIHtcbiAgICAgIHJlcyA9IHNtYWxsTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSBpZiAobGVuIDwgMTAyNCkge1xuICAgICAgcmVzID0gYmlnTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXMgPSBqdW1ib011bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIENvb2xleS1UdWtleSBhbGdvcml0aG0gZm9yIEZGVFxuICAvLyBzbGlnaHRseSByZXZpc2l0ZWQgdG8gcmVseSBvbiBsb29waW5nIGluc3RlYWQgb2YgcmVjdXJzaW9uXG5cbiAgZnVuY3Rpb24gRkZUTSAoeCwgeSkge1xuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcbiAgfVxuXG4gIEZGVE0ucHJvdG90eXBlLm1ha2VSQlQgPSBmdW5jdGlvbiBtYWtlUkJUIChOKSB7XG4gICAgdmFyIHQgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIGwgPSBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyhOKSAtIDE7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHRbaV0gPSB0aGlzLnJldkJpbihpLCBsLCBOKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdDtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGJpbmFyeS1yZXZlcnNlZCByZXByZXNlbnRhdGlvbiBvZiBgeGBcbiAgRkZUTS5wcm90b3R5cGUucmV2QmluID0gZnVuY3Rpb24gcmV2QmluICh4LCBsLCBOKSB7XG4gICAgaWYgKHggPT09IDAgfHwgeCA9PT0gTiAtIDEpIHJldHVybiB4O1xuXG4gICAgdmFyIHJiID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgcmIgfD0gKHggJiAxKSA8PCAobCAtIGkgLSAxKTtcbiAgICAgIHggPj49IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJiO1xuICB9O1xuXG4gIC8vIFBlcmZvcm1zIFwidHdlZWRsaW5nXCIgcGhhc2UsIHRoZXJlZm9yZSAnZW11bGF0aW5nJ1xuICAvLyBiZWhhdmlvdXIgb2YgdGhlIHJlY3Vyc2l2ZSBhbGdvcml0aG1cbiAgRkZUTS5wcm90b3R5cGUucGVybXV0ZSA9IGZ1bmN0aW9uIHBlcm11dGUgKHJidCwgcndzLCBpd3MsIHJ0d3MsIGl0d3MsIE4pIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgcnR3c1tpXSA9IHJ3c1tyYnRbaV1dO1xuICAgICAgaXR3c1tpXSA9IGl3c1tyYnRbaV1dO1xuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS50cmFuc2Zvcm0gPSBmdW5jdGlvbiB0cmFuc2Zvcm0gKHJ3cywgaXdzLCBydHdzLCBpdHdzLCBOLCByYnQpIHtcbiAgICB0aGlzLnBlcm11dGUocmJ0LCByd3MsIGl3cywgcnR3cywgaXR3cywgTik7XG5cbiAgICBmb3IgKHZhciBzID0gMTsgcyA8IE47IHMgPDw9IDEpIHtcbiAgICAgIHZhciBsID0gcyA8PCAxO1xuXG4gICAgICB2YXIgcnR3ZGYgPSBNYXRoLmNvcygyICogTWF0aC5QSSAvIGwpO1xuICAgICAgdmFyIGl0d2RmID0gTWF0aC5zaW4oMiAqIE1hdGguUEkgLyBsKTtcblxuICAgICAgZm9yICh2YXIgcCA9IDA7IHAgPCBOOyBwICs9IGwpIHtcbiAgICAgICAgdmFyIHJ0d2RmXyA9IHJ0d2RmO1xuICAgICAgICB2YXIgaXR3ZGZfID0gaXR3ZGY7XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzOyBqKyspIHtcbiAgICAgICAgICB2YXIgcmUgPSBydHdzW3AgKyBqXTtcbiAgICAgICAgICB2YXIgaWUgPSBpdHdzW3AgKyBqXTtcblxuICAgICAgICAgIHZhciBybyA9IHJ0d3NbcCArIGogKyBzXTtcbiAgICAgICAgICB2YXIgaW8gPSBpdHdzW3AgKyBqICsgc107XG5cbiAgICAgICAgICB2YXIgcnggPSBydHdkZl8gKiBybyAtIGl0d2RmXyAqIGlvO1xuXG4gICAgICAgICAgaW8gPSBydHdkZl8gKiBpbyArIGl0d2RmXyAqIHJvO1xuICAgICAgICAgIHJvID0gcng7XG5cbiAgICAgICAgICBydHdzW3AgKyBqXSA9IHJlICsgcm87XG4gICAgICAgICAgaXR3c1twICsgal0gPSBpZSArIGlvO1xuXG4gICAgICAgICAgcnR3c1twICsgaiArIHNdID0gcmUgLSBybztcbiAgICAgICAgICBpdHdzW3AgKyBqICsgc10gPSBpZSAtIGlvO1xuXG4gICAgICAgICAgLyoganNoaW50IG1heGRlcHRoIDogZmFsc2UgKi9cbiAgICAgICAgICBpZiAoaiAhPT0gbCkge1xuICAgICAgICAgICAgcnggPSBydHdkZiAqIHJ0d2RmXyAtIGl0d2RmICogaXR3ZGZfO1xuXG4gICAgICAgICAgICBpdHdkZl8gPSBydHdkZiAqIGl0d2RmXyArIGl0d2RmICogcnR3ZGZfO1xuICAgICAgICAgICAgcnR3ZGZfID0gcng7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLmd1ZXNzTGVuMTNiID0gZnVuY3Rpb24gZ3Vlc3NMZW4xM2IgKG4sIG0pIHtcbiAgICB2YXIgTiA9IE1hdGgubWF4KG0sIG4pIHwgMTtcbiAgICB2YXIgb2RkID0gTiAmIDE7XG4gICAgdmFyIGkgPSAwO1xuICAgIGZvciAoTiA9IE4gLyAyIHwgMDsgTjsgTiA9IE4gPj4+IDEpIHtcbiAgICAgIGkrKztcbiAgICB9XG5cbiAgICByZXR1cm4gMSA8PCBpICsgMSArIG9kZDtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5jb25qdWdhdGUgPSBmdW5jdGlvbiBjb25qdWdhdGUgKHJ3cywgaXdzLCBOKSB7XG4gICAgaWYgKE4gPD0gMSkgcmV0dXJuO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOIC8gMjsgaSsrKSB7XG4gICAgICB2YXIgdCA9IHJ3c1tpXTtcblxuICAgICAgcndzW2ldID0gcndzW04gLSBpIC0gMV07XG4gICAgICByd3NbTiAtIGkgLSAxXSA9IHQ7XG5cbiAgICAgIHQgPSBpd3NbaV07XG5cbiAgICAgIGl3c1tpXSA9IC1pd3NbTiAtIGkgLSAxXTtcbiAgICAgIGl3c1tOIC0gaSAtIDFdID0gLXQ7XG4gICAgfVxuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLm5vcm1hbGl6ZTEzYiA9IGZ1bmN0aW9uIG5vcm1hbGl6ZTEzYiAod3MsIE4pIHtcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTiAvIDI7IGkrKykge1xuICAgICAgdmFyIHcgPSBNYXRoLnJvdW5kKHdzWzIgKiBpICsgMV0gLyBOKSAqIDB4MjAwMCArXG4gICAgICAgIE1hdGgucm91bmQod3NbMiAqIGldIC8gTikgK1xuICAgICAgICBjYXJyeTtcblxuICAgICAgd3NbaV0gPSB3ICYgMHgzZmZmZmZmO1xuXG4gICAgICBpZiAodyA8IDB4NDAwMDAwMCkge1xuICAgICAgICBjYXJyeSA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXJyeSA9IHcgLyAweDQwMDAwMDAgfCAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB3cztcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5jb252ZXJ0MTNiID0gZnVuY3Rpb24gY29udmVydDEzYiAod3MsIGxlbiwgcndzLCBOKSB7XG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjYXJyeSA9IGNhcnJ5ICsgKHdzW2ldIHwgMCk7XG5cbiAgICAgIHJ3c1syICogaV0gPSBjYXJyeSAmIDB4MWZmZjsgY2FycnkgPSBjYXJyeSA+Pj4gMTM7XG4gICAgICByd3NbMiAqIGkgKyAxXSA9IGNhcnJ5ICYgMHgxZmZmOyBjYXJyeSA9IGNhcnJ5ID4+PiAxMztcbiAgICB9XG5cbiAgICAvLyBQYWQgd2l0aCB6ZXJvZXNcbiAgICBmb3IgKGkgPSAyICogbGVuOyBpIDwgTjsgKytpKSB7XG4gICAgICByd3NbaV0gPSAwO1xuICAgIH1cblxuICAgIGFzc2VydChjYXJyeSA9PT0gMCk7XG4gICAgYXNzZXJ0KChjYXJyeSAmIH4weDFmZmYpID09PSAwKTtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5zdHViID0gZnVuY3Rpb24gc3R1YiAoTikge1xuICAgIHZhciBwaCA9IG5ldyBBcnJheShOKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgcGhbaV0gPSAwO1xuICAgIH1cblxuICAgIHJldHVybiBwaDtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5tdWxwID0gZnVuY3Rpb24gbXVscCAoeCwgeSwgb3V0KSB7XG4gICAgdmFyIE4gPSAyICogdGhpcy5ndWVzc0xlbjEzYih4Lmxlbmd0aCwgeS5sZW5ndGgpO1xuXG4gICAgdmFyIHJidCA9IHRoaXMubWFrZVJCVChOKTtcblxuICAgIHZhciBfID0gdGhpcy5zdHViKE4pO1xuXG4gICAgdmFyIHJ3cyA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgcndzdCA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgaXdzdCA9IG5ldyBBcnJheShOKTtcblxuICAgIHZhciBucndzID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciBucndzdCA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgbml3c3QgPSBuZXcgQXJyYXkoTik7XG5cbiAgICB2YXIgcm13cyA9IG91dC53b3JkcztcbiAgICBybXdzLmxlbmd0aCA9IE47XG5cbiAgICB0aGlzLmNvbnZlcnQxM2IoeC53b3JkcywgeC5sZW5ndGgsIHJ3cywgTik7XG4gICAgdGhpcy5jb252ZXJ0MTNiKHkud29yZHMsIHkubGVuZ3RoLCBucndzLCBOKTtcblxuICAgIHRoaXMudHJhbnNmb3JtKHJ3cywgXywgcndzdCwgaXdzdCwgTiwgcmJ0KTtcbiAgICB0aGlzLnRyYW5zZm9ybShucndzLCBfLCBucndzdCwgbml3c3QsIE4sIHJidCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgdmFyIHJ4ID0gcndzdFtpXSAqIG5yd3N0W2ldIC0gaXdzdFtpXSAqIG5pd3N0W2ldO1xuICAgICAgaXdzdFtpXSA9IHJ3c3RbaV0gKiBuaXdzdFtpXSArIGl3c3RbaV0gKiBucndzdFtpXTtcbiAgICAgIHJ3c3RbaV0gPSByeDtcbiAgICB9XG5cbiAgICB0aGlzLmNvbmp1Z2F0ZShyd3N0LCBpd3N0LCBOKTtcbiAgICB0aGlzLnRyYW5zZm9ybShyd3N0LCBpd3N0LCBybXdzLCBfLCBOLCByYnQpO1xuICAgIHRoaXMuY29uanVnYXRlKHJtd3MsIF8sIE4pO1xuICAgIHRoaXMubm9ybWFsaXplMTNiKHJtd3MsIE4pO1xuXG4gICAgb3V0Lm5lZ2F0aXZlID0geC5uZWdhdGl2ZSBeIHkubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IHgubGVuZ3RoICsgeS5sZW5ndGg7XG4gICAgcmV0dXJuIG91dC5zdHJpcCgpO1xuICB9O1xuXG4gIC8vIE11bHRpcGx5IGB0aGlzYCBieSBgbnVtYFxuICBCTi5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsIChudW0pIHtcbiAgICB2YXIgb3V0ID0gbmV3IEJOKG51bGwpO1xuICAgIG91dC53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCArIG51bS5sZW5ndGgpO1xuICAgIHJldHVybiB0aGlzLm11bFRvKG51bSwgb3V0KTtcbiAgfTtcblxuICAvLyBNdWx0aXBseSBlbXBsb3lpbmcgRkZUXG4gIEJOLnByb3RvdHlwZS5tdWxmID0gZnVuY3Rpb24gbXVsZiAobnVtKSB7XG4gICAgdmFyIG91dCA9IG5ldyBCTihudWxsKTtcbiAgICBvdXQud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoKTtcbiAgICByZXR1cm4ganVtYm9NdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gIH07XG5cbiAgLy8gSW4tcGxhY2UgTXVsdGlwbGljYXRpb25cbiAgQk4ucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLm11bFRvKG51bSwgdGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmltdWxuID0gZnVuY3Rpb24gaW11bG4gKG51bSkge1xuICAgIGFzc2VydCh0eXBlb2YgbnVtID09PSAnbnVtYmVyJyk7XG4gICAgYXNzZXJ0KG51bSA8IDB4NDAwMDAwMCk7XG5cbiAgICAvLyBDYXJyeVxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9ICh0aGlzLndvcmRzW2ldIHwgMCkgKiBudW07XG4gICAgICB2YXIgbG8gPSAodyAmIDB4M2ZmZmZmZikgKyAoY2FycnkgJiAweDNmZmZmZmYpO1xuICAgICAgY2FycnkgPj49IDI2O1xuICAgICAgY2FycnkgKz0gKHcgLyAweDQwMDAwMDApIHwgMDtcbiAgICAgIC8vIE5PVEU6IGxvIGlzIDI3Yml0IG1heGltdW1cbiAgICAgIGNhcnJ5ICs9IGxvID4+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBsbyAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLm11bG4gPSBmdW5jdGlvbiBtdWxuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmltdWxuKG51bSk7XG4gIH07XG5cbiAgLy8gYHRoaXNgICogYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5zcXIgPSBmdW5jdGlvbiBzcXIgKCkge1xuICAgIHJldHVybiB0aGlzLm11bCh0aGlzKTtcbiAgfTtcblxuICAvLyBgdGhpc2AgKiBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLmlzcXIgPSBmdW5jdGlvbiBpc3FyICgpIHtcbiAgICByZXR1cm4gdGhpcy5pbXVsKHRoaXMuY2xvbmUoKSk7XG4gIH07XG5cbiAgLy8gTWF0aC5wb3coYHRoaXNgLCBgbnVtYClcbiAgQk4ucHJvdG90eXBlLnBvdyA9IGZ1bmN0aW9uIHBvdyAobnVtKSB7XG4gICAgdmFyIHcgPSB0b0JpdEFycmF5KG51bSk7XG4gICAgaWYgKHcubGVuZ3RoID09PSAwKSByZXR1cm4gbmV3IEJOKDEpO1xuXG4gICAgLy8gU2tpcCBsZWFkaW5nIHplcm9lc1xuICAgIHZhciByZXMgPSB0aGlzO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdy5sZW5ndGg7IGkrKywgcmVzID0gcmVzLnNxcigpKSB7XG4gICAgICBpZiAod1tpXSAhPT0gMCkgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKCsraSA8IHcubGVuZ3RoKSB7XG4gICAgICBmb3IgKHZhciBxID0gcmVzLnNxcigpOyBpIDwgdy5sZW5ndGg7IGkrKywgcSA9IHEuc3FyKCkpIHtcbiAgICAgICAgaWYgKHdbaV0gPT09IDApIGNvbnRpbnVlO1xuXG4gICAgICAgIHJlcyA9IHJlcy5tdWwocSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBTaGlmdC1sZWZ0IGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdXNobG4gPSBmdW5jdGlvbiBpdXNobG4gKGJpdHMpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gICAgdmFyIHIgPSBiaXRzICUgMjY7XG4gICAgdmFyIHMgPSAoYml0cyAtIHIpIC8gMjY7XG4gICAgdmFyIGNhcnJ5TWFzayA9ICgweDNmZmZmZmYgPj4+ICgyNiAtIHIpKSA8PCAoMjYgLSByKTtcbiAgICB2YXIgaTtcblxuICAgIGlmIChyICE9PSAwKSB7XG4gICAgICB2YXIgY2FycnkgPSAwO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgbmV3Q2FycnkgPSB0aGlzLndvcmRzW2ldICYgY2FycnlNYXNrO1xuICAgICAgICB2YXIgYyA9ICgodGhpcy53b3Jkc1tpXSB8IDApIC0gbmV3Q2FycnkpIDw8IHI7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBjIHwgY2Fycnk7XG4gICAgICAgIGNhcnJ5ID0gbmV3Q2FycnkgPj4+ICgyNiAtIHIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2FycnkpIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGNhcnJ5O1xuICAgICAgICB0aGlzLmxlbmd0aCsrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzICE9PSAwKSB7XG4gICAgICBmb3IgKGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIHRoaXMud29yZHNbaSArIHNdID0gdGhpcy53b3Jkc1tpXTtcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gMDsgaSA8IHM7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5sZW5ndGggKz0gcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc2hsbiA9IGZ1bmN0aW9uIGlzaGxuIChiaXRzKSB7XG4gICAgLy8gVE9ETyhpbmR1dG55KTogaW1wbGVtZW50IG1lXG4gICAgYXNzZXJ0KHRoaXMubmVnYXRpdmUgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1c2hsbihiaXRzKTtcbiAgfTtcblxuICAvLyBTaGlmdC1yaWdodCBpbi1wbGFjZVxuICAvLyBOT1RFOiBgaGludGAgaXMgYSBsb3dlc3QgYml0IGJlZm9yZSB0cmFpbGluZyB6ZXJvZXNcbiAgLy8gTk9URTogaWYgYGV4dGVuZGVkYCBpcyBwcmVzZW50IC0gaXQgd2lsbCBiZSBmaWxsZWQgd2l0aCBkZXN0cm95ZWQgYml0c1xuICBCTi5wcm90b3R5cGUuaXVzaHJuID0gZnVuY3Rpb24gaXVzaHJuIChiaXRzLCBoaW50LCBleHRlbmRlZCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0cyA9PT0gJ251bWJlcicgJiYgYml0cyA+PSAwKTtcbiAgICB2YXIgaDtcbiAgICBpZiAoaGludCkge1xuICAgICAgaCA9IChoaW50IC0gKGhpbnQgJSAyNikpIC8gMjY7XG4gICAgfSBlbHNlIHtcbiAgICAgIGggPSAwO1xuICAgIH1cblxuICAgIHZhciByID0gYml0cyAlIDI2O1xuICAgIHZhciBzID0gTWF0aC5taW4oKGJpdHMgLSByKSAvIDI2LCB0aGlzLmxlbmd0aCk7XG4gICAgdmFyIG1hc2sgPSAweDNmZmZmZmYgXiAoKDB4M2ZmZmZmZiA+Pj4gcikgPDwgcik7XG4gICAgdmFyIG1hc2tlZFdvcmRzID0gZXh0ZW5kZWQ7XG5cbiAgICBoIC09IHM7XG4gICAgaCA9IE1hdGgubWF4KDAsIGgpO1xuXG4gICAgLy8gRXh0ZW5kZWQgbW9kZSwgY29weSBtYXNrZWQgcGFydFxuICAgIGlmIChtYXNrZWRXb3Jkcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzOyBpKyspIHtcbiAgICAgICAgbWFza2VkV29yZHMud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldO1xuICAgICAgfVxuICAgICAgbWFza2VkV29yZHMubGVuZ3RoID0gcztcbiAgICB9XG5cbiAgICBpZiAocyA9PT0gMCkge1xuICAgICAgLy8gTm8tb3AsIHdlIHNob3VsZCBub3QgbW92ZSBhbnl0aGluZyBhdCBhbGxcbiAgICB9IGVsc2UgaWYgKHRoaXMubGVuZ3RoID4gcykge1xuICAgICAgdGhpcy5sZW5ndGggLT0gcztcbiAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSB0aGlzLndvcmRzW2kgKyBzXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgfVxuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMCAmJiAoY2FycnkgIT09IDAgfHwgaSA+PSBoKTsgaS0tKSB7XG4gICAgICB2YXIgd29yZCA9IHRoaXMud29yZHNbaV0gfCAwO1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IChjYXJyeSA8PCAoMjYgLSByKSkgfCAod29yZCA+Pj4gcik7XG4gICAgICBjYXJyeSA9IHdvcmQgJiBtYXNrO1xuICAgIH1cblxuICAgIC8vIFB1c2ggY2FycmllZCBiaXRzIGFzIGEgbWFza1xuICAgIGlmIChtYXNrZWRXb3JkcyAmJiBjYXJyeSAhPT0gMCkge1xuICAgICAgbWFza2VkV29yZHMud29yZHNbbWFza2VkV29yZHMubGVuZ3RoKytdID0gY2Fycnk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLndvcmRzWzBdID0gMDtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc2hybiA9IGZ1bmN0aW9uIGlzaHJuIChiaXRzLCBoaW50LCBleHRlbmRlZCkge1xuICAgIC8vIFRPRE8oaW5kdXRueSk6IGltcGxlbWVudCBtZVxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdXNocm4oYml0cywgaGludCwgZXh0ZW5kZWQpO1xuICB9O1xuXG4gIC8vIFNoaWZ0LWxlZnRcbiAgQk4ucHJvdG90eXBlLnNobG4gPSBmdW5jdGlvbiBzaGxuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc2hsbihiaXRzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudXNobG4gPSBmdW5jdGlvbiB1c2hsbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXVzaGxuKGJpdHMpO1xuICB9O1xuXG4gIC8vIFNoaWZ0LXJpZ2h0XG4gIEJOLnByb3RvdHlwZS5zaHJuID0gZnVuY3Rpb24gc2hybiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXNocm4oYml0cyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVzaHJuID0gZnVuY3Rpb24gdXNocm4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLml1c2hybihiaXRzKTtcbiAgfTtcblxuICAvLyBUZXN0IGlmIG4gYml0IGlzIHNldFxuICBCTi5wcm90b3R5cGUudGVzdG4gPSBmdW5jdGlvbiB0ZXN0biAoYml0KSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXQgPT09ICdudW1iZXInICYmIGJpdCA+PSAwKTtcbiAgICB2YXIgciA9IGJpdCAlIDI2O1xuICAgIHZhciBzID0gKGJpdCAtIHIpIC8gMjY7XG4gICAgdmFyIHEgPSAxIDw8IHI7XG5cbiAgICAvLyBGYXN0IGNhc2U6IGJpdCBpcyBtdWNoIGhpZ2hlciB0aGFuIGFsbCBleGlzdGluZyB3b3Jkc1xuICAgIGlmICh0aGlzLmxlbmd0aCA8PSBzKSByZXR1cm4gZmFsc2U7XG5cbiAgICAvLyBDaGVjayBiaXQgYW5kIHJldHVyblxuICAgIHZhciB3ID0gdGhpcy53b3Jkc1tzXTtcblxuICAgIHJldHVybiAhISh3ICYgcSk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG9ubHkgbG93ZXJzIGJpdHMgb2YgbnVtYmVyIChpbi1wbGFjZSlcbiAgQk4ucHJvdG90eXBlLmltYXNrbiA9IGZ1bmN0aW9uIGltYXNrbiAoYml0cykge1xuICAgIGFzc2VydCh0eXBlb2YgYml0cyA9PT0gJ251bWJlcicgJiYgYml0cyA+PSAwKTtcbiAgICB2YXIgciA9IGJpdHMgJSAyNjtcbiAgICB2YXIgcyA9IChiaXRzIC0gcikgLyAyNjtcblxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwLCAnaW1hc2tuIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZSBudW1iZXJzJyk7XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPD0gcykge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaWYgKHIgIT09IDApIHtcbiAgICAgIHMrKztcbiAgICB9XG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1pbihzLCB0aGlzLmxlbmd0aCk7XG5cbiAgICBpZiAociAhPT0gMCkge1xuICAgICAgdmFyIG1hc2sgPSAweDNmZmZmZmYgXiAoKDB4M2ZmZmZmZiA+Pj4gcikgPDwgcik7XG4gICAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV0gJj0gbWFzaztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIC8vIFJldHVybiBvbmx5IGxvd2VycyBiaXRzIG9mIG51bWJlclxuICBCTi5wcm90b3R5cGUubWFza24gPSBmdW5jdGlvbiBtYXNrbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW1hc2tuKGJpdHMpO1xuICB9O1xuXG4gIC8vIEFkZCBwbGFpbiBudW1iZXIgYG51bWAgdG8gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5pYWRkbiA9IGZ1bmN0aW9uIGlhZGRuIChudW0pIHtcbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuICAgIGlmIChudW0gPCAwKSByZXR1cm4gdGhpcy5pc3VibigtbnVtKTtcblxuICAgIC8vIFBvc3NpYmxlIHNpZ24gY2hhbmdlXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSAmJiAodGhpcy53b3Jkc1swXSB8IDApIDwgbnVtKSB7XG4gICAgICAgIHRoaXMud29yZHNbMF0gPSBudW0gLSAodGhpcy53b3Jkc1swXSB8IDApO1xuICAgICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5pc3VibihudW0pO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aG91dCBjaGVja3NcbiAgICByZXR1cm4gdGhpcy5faWFkZG4obnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2lhZGRuID0gZnVuY3Rpb24gX2lhZGRuIChudW0pIHtcbiAgICB0aGlzLndvcmRzWzBdICs9IG51bTtcblxuICAgIC8vIENhcnJ5XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aCAmJiB0aGlzLndvcmRzW2ldID49IDB4NDAwMDAwMDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldIC09IDB4NDAwMDAwMDtcbiAgICAgIGlmIChpID09PSB0aGlzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0gPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0rKztcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1heCh0aGlzLmxlbmd0aCwgaSArIDEpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gU3VidHJhY3QgcGxhaW4gbnVtYmVyIGBudW1gIGZyb20gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5pc3VibiA9IGZ1bmN0aW9uIGlzdWJuIChudW0pIHtcbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuICAgIGlmIChudW0gPCAwKSByZXR1cm4gdGhpcy5pYWRkbigtbnVtKTtcblxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHRoaXMuaWFkZG4obnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdGhpcy53b3Jkc1swXSAtPSBudW07XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA8IDApIHtcbiAgICAgIHRoaXMud29yZHNbMF0gPSAtdGhpcy53b3Jkc1swXTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDYXJyeVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aCAmJiB0aGlzLndvcmRzW2ldIDwgMDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gKz0gMHg0MDAwMDAwO1xuICAgICAgICB0aGlzLndvcmRzW2kgKyAxXSAtPSAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmFkZG4gPSBmdW5jdGlvbiBhZGRuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlhZGRuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnN1Ym4gPSBmdW5jdGlvbiBzdWJuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzdWJuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlhYnMgPSBmdW5jdGlvbiBpYWJzICgpIHtcbiAgICB0aGlzLm5lZ2F0aXZlID0gMDtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5hYnMgPSBmdW5jdGlvbiBhYnMgKCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaWFicygpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faXNobG5zdWJtdWwgPSBmdW5jdGlvbiBfaXNobG5zdWJtdWwgKG51bSwgbXVsLCBzaGlmdCkge1xuICAgIHZhciBsZW4gPSBudW0ubGVuZ3RoICsgc2hpZnQ7XG4gICAgdmFyIGk7XG5cbiAgICB0aGlzLl9leHBhbmQobGVuKTtcblxuICAgIHZhciB3O1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yIChpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdyA9ICh0aGlzLndvcmRzW2kgKyBzaGlmdF0gfCAwKSArIGNhcnJ5O1xuICAgICAgdmFyIHJpZ2h0ID0gKG51bS53b3Jkc1tpXSB8IDApICogbXVsO1xuICAgICAgdyAtPSByaWdodCAmIDB4M2ZmZmZmZjtcbiAgICAgIGNhcnJ5ID0gKHcgPj4gMjYpIC0gKChyaWdodCAvIDB4NDAwMDAwMCkgfCAwKTtcbiAgICAgIHRoaXMud29yZHNbaSArIHNoaWZ0XSA9IHcgJiAweDNmZmZmZmY7XG4gICAgfVxuICAgIGZvciAoOyBpIDwgdGhpcy5sZW5ndGggLSBzaGlmdDsgaSsrKSB7XG4gICAgICB3ID0gKHRoaXMud29yZHNbaSArIHNoaWZ0XSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2kgKyBzaGlmdF0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cblxuICAgIGlmIChjYXJyeSA9PT0gMCkgcmV0dXJuIHRoaXMuc3RyaXAoKTtcblxuICAgIC8vIFN1YnRyYWN0aW9uIG92ZXJmbG93XG4gICAgYXNzZXJ0KGNhcnJ5ID09PSAtMSk7XG4gICAgY2FycnkgPSAwO1xuICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB3ID0gLSh0aGlzLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gdyA+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cbiAgICB0aGlzLm5lZ2F0aXZlID0gMTtcblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl93b3JkRGl2ID0gZnVuY3Rpb24gX3dvcmREaXYgKG51bSwgbW9kZSkge1xuICAgIHZhciBzaGlmdCA9IHRoaXMubGVuZ3RoIC0gbnVtLmxlbmd0aDtcblxuICAgIHZhciBhID0gdGhpcy5jbG9uZSgpO1xuICAgIHZhciBiID0gbnVtO1xuXG4gICAgLy8gTm9ybWFsaXplXG4gICAgdmFyIGJoaSA9IGIud29yZHNbYi5sZW5ndGggLSAxXSB8IDA7XG4gICAgdmFyIGJoaUJpdHMgPSB0aGlzLl9jb3VudEJpdHMoYmhpKTtcbiAgICBzaGlmdCA9IDI2IC0gYmhpQml0cztcbiAgICBpZiAoc2hpZnQgIT09IDApIHtcbiAgICAgIGIgPSBiLnVzaGxuKHNoaWZ0KTtcbiAgICAgIGEuaXVzaGxuKHNoaWZ0KTtcbiAgICAgIGJoaSA9IGIud29yZHNbYi5sZW5ndGggLSAxXSB8IDA7XG4gICAgfVxuXG4gICAgLy8gSW5pdGlhbGl6ZSBxdW90aWVudFxuICAgIHZhciBtID0gYS5sZW5ndGggLSBiLmxlbmd0aDtcbiAgICB2YXIgcTtcblxuICAgIGlmIChtb2RlICE9PSAnbW9kJykge1xuICAgICAgcSA9IG5ldyBCTihudWxsKTtcbiAgICAgIHEubGVuZ3RoID0gbSArIDE7XG4gICAgICBxLndvcmRzID0gbmV3IEFycmF5KHEubGVuZ3RoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcS5sZW5ndGg7IGkrKykge1xuICAgICAgICBxLndvcmRzW2ldID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZGlmZiA9IGEuY2xvbmUoKS5faXNobG5zdWJtdWwoYiwgMSwgbSk7XG4gICAgaWYgKGRpZmYubmVnYXRpdmUgPT09IDApIHtcbiAgICAgIGEgPSBkaWZmO1xuICAgICAgaWYgKHEpIHtcbiAgICAgICAgcS53b3Jkc1ttXSA9IDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaiA9IG0gLSAxOyBqID49IDA7IGotLSkge1xuICAgICAgdmFyIHFqID0gKGEud29yZHNbYi5sZW5ndGggKyBqXSB8IDApICogMHg0MDAwMDAwICtcbiAgICAgICAgKGEud29yZHNbYi5sZW5ndGggKyBqIC0gMV0gfCAwKTtcblxuICAgICAgLy8gTk9URTogKHFqIC8gYmhpKSBpcyAoMHgzZmZmZmZmICogMHg0MDAwMDAwICsgMHgzZmZmZmZmKSAvIDB4MjAwMDAwMCBtYXhcbiAgICAgIC8vICgweDdmZmZmZmYpXG4gICAgICBxaiA9IE1hdGgubWluKChxaiAvIGJoaSkgfCAwLCAweDNmZmZmZmYpO1xuXG4gICAgICBhLl9pc2hsbnN1Ym11bChiLCBxaiwgaik7XG4gICAgICB3aGlsZSAoYS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICBxai0tO1xuICAgICAgICBhLm5lZ2F0aXZlID0gMDtcbiAgICAgICAgYS5faXNobG5zdWJtdWwoYiwgMSwgaik7XG4gICAgICAgIGlmICghYS5pc1plcm8oKSkge1xuICAgICAgICAgIGEubmVnYXRpdmUgXj0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHEpIHtcbiAgICAgICAgcS53b3Jkc1tqXSA9IHFqO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocSkge1xuICAgICAgcS5zdHJpcCgpO1xuICAgIH1cbiAgICBhLnN0cmlwKCk7XG5cbiAgICAvLyBEZW5vcm1hbGl6ZVxuICAgIGlmIChtb2RlICE9PSAnZGl2JyAmJiBzaGlmdCAhPT0gMCkge1xuICAgICAgYS5pdXNocm4oc2hpZnQpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBkaXY6IHEgfHwgbnVsbCxcbiAgICAgIG1vZDogYVxuICAgIH07XG4gIH07XG5cbiAgLy8gTk9URTogMSkgYG1vZGVgIGNhbiBiZSBzZXQgdG8gYG1vZGAgdG8gcmVxdWVzdCBtb2Qgb25seSxcbiAgLy8gICAgICAgdG8gYGRpdmAgdG8gcmVxdWVzdCBkaXYgb25seSwgb3IgYmUgYWJzZW50IHRvXG4gIC8vICAgICAgIHJlcXVlc3QgYm90aCBkaXYgJiBtb2RcbiAgLy8gICAgICAgMikgYHBvc2l0aXZlYCBpcyB0cnVlIGlmIHVuc2lnbmVkIG1vZCBpcyByZXF1ZXN0ZWRcbiAgQk4ucHJvdG90eXBlLmRpdm1vZCA9IGZ1bmN0aW9uIGRpdm1vZCAobnVtLCBtb2RlLCBwb3NpdGl2ZSkge1xuICAgIGFzc2VydCghbnVtLmlzWmVybygpKTtcblxuICAgIGlmICh0aGlzLmlzWmVybygpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IG5ldyBCTigwKSxcbiAgICAgICAgbW9kOiBuZXcgQk4oMClcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIGRpdiwgbW9kLCByZXM7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDAgJiYgbnVtLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLm5lZygpLmRpdm1vZChudW0sIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHtcbiAgICAgICAgZGl2ID0gcmVzLmRpdi5uZWcoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vZGUgIT09ICdkaXYnKSB7XG4gICAgICAgIG1vZCA9IHJlcy5tb2QubmVnKCk7XG4gICAgICAgIGlmIChwb3NpdGl2ZSAmJiBtb2QubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgICBtb2QuaWFkZChudW0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogZGl2LFxuICAgICAgICBtb2Q6IG1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBudW0ubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHJlcyA9IHRoaXMuZGl2bW9kKG51bS5uZWcoKSwgbW9kZSk7XG5cbiAgICAgIGlmIChtb2RlICE9PSAnbW9kJykge1xuICAgICAgICBkaXYgPSByZXMuZGl2Lm5lZygpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IGRpdixcbiAgICAgICAgbW9kOiByZXMubW9kXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICgodGhpcy5uZWdhdGl2ZSAmIG51bS5uZWdhdGl2ZSkgIT09IDApIHtcbiAgICAgIHJlcyA9IHRoaXMubmVnKCkuZGl2bW9kKG51bS5uZWcoKSwgbW9kZSk7XG5cbiAgICAgIGlmIChtb2RlICE9PSAnZGl2Jykge1xuICAgICAgICBtb2QgPSByZXMubW9kLm5lZygpO1xuICAgICAgICBpZiAocG9zaXRpdmUgJiYgbW9kLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgICAgbW9kLmlzdWIobnVtKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IHJlcy5kaXYsXG4gICAgICAgIG1vZDogbW9kXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIEJvdGggbnVtYmVycyBhcmUgcG9zaXRpdmUgYXQgdGhpcyBwb2ludFxuXG4gICAgLy8gU3RyaXAgYm90aCBudW1iZXJzIHRvIGFwcHJveGltYXRlIHNoaWZ0IHZhbHVlXG4gICAgaWYgKG51bS5sZW5ndGggPiB0aGlzLmxlbmd0aCB8fCB0aGlzLmNtcChudW0pIDwgMCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBuZXcgQk4oMCksXG4gICAgICAgIG1vZDogdGhpc1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBWZXJ5IHNob3J0IHJlZHVjdGlvblxuICAgIGlmIChudW0ubGVuZ3RoID09PSAxKSB7XG4gICAgICBpZiAobW9kZSA9PT0gJ2RpdicpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkaXY6IHRoaXMuZGl2bihudW0ud29yZHNbMF0pLFxuICAgICAgICAgIG1vZDogbnVsbFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBpZiAobW9kZSA9PT0gJ21vZCcpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkaXY6IG51bGwsXG4gICAgICAgICAgbW9kOiBuZXcgQk4odGhpcy5tb2RuKG51bS53b3Jkc1swXSkpXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogdGhpcy5kaXZuKG51bS53b3Jkc1swXSksXG4gICAgICAgIG1vZDogbmV3IEJOKHRoaXMubW9kbihudW0ud29yZHNbMF0pKVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fd29yZERpdihudW0sIG1vZGUpO1xuICB9O1xuXG4gIC8vIEZpbmQgYHRoaXNgIC8gYG51bWBcbiAgQk4ucHJvdG90eXBlLmRpdiA9IGZ1bmN0aW9uIGRpdiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZGl2bW9kKG51bSwgJ2RpdicsIGZhbHNlKS5kaXY7XG4gIH07XG5cbiAgLy8gRmluZCBgdGhpc2AgJSBgbnVtYFxuICBCTi5wcm90b3R5cGUubW9kID0gZnVuY3Rpb24gbW9kIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5kaXZtb2QobnVtLCAnbW9kJywgZmFsc2UpLm1vZDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudW1vZCA9IGZ1bmN0aW9uIHVtb2QgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmRpdm1vZChudW0sICdtb2QnLCB0cnVlKS5tb2Q7XG4gIH07XG5cbiAgLy8gRmluZCBSb3VuZChgdGhpc2AgLyBgbnVtYClcbiAgQk4ucHJvdG90eXBlLmRpdlJvdW5kID0gZnVuY3Rpb24gZGl2Um91bmQgKG51bSkge1xuICAgIHZhciBkbSA9IHRoaXMuZGl2bW9kKG51bSk7XG5cbiAgICAvLyBGYXN0IGNhc2UgLSBleGFjdCBkaXZpc2lvblxuICAgIGlmIChkbS5tb2QuaXNaZXJvKCkpIHJldHVybiBkbS5kaXY7XG5cbiAgICB2YXIgbW9kID0gZG0uZGl2Lm5lZ2F0aXZlICE9PSAwID8gZG0ubW9kLmlzdWIobnVtKSA6IGRtLm1vZDtcblxuICAgIHZhciBoYWxmID0gbnVtLnVzaHJuKDEpO1xuICAgIHZhciByMiA9IG51bS5hbmRsbigxKTtcbiAgICB2YXIgY21wID0gbW9kLmNtcChoYWxmKTtcblxuICAgIC8vIFJvdW5kIGRvd25cbiAgICBpZiAoY21wIDwgMCB8fCByMiA9PT0gMSAmJiBjbXAgPT09IDApIHJldHVybiBkbS5kaXY7XG5cbiAgICAvLyBSb3VuZCB1cFxuICAgIHJldHVybiBkbS5kaXYubmVnYXRpdmUgIT09IDAgPyBkbS5kaXYuaXN1Ym4oMSkgOiBkbS5kaXYuaWFkZG4oMSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLm1vZG4gPSBmdW5jdGlvbiBtb2RuIChudW0pIHtcbiAgICBhc3NlcnQobnVtIDw9IDB4M2ZmZmZmZik7XG4gICAgdmFyIHAgPSAoMSA8PCAyNikgJSBudW07XG5cbiAgICB2YXIgYWNjID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgYWNjID0gKHAgKiBhY2MgKyAodGhpcy53b3Jkc1tpXSB8IDApKSAlIG51bTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9O1xuXG4gIC8vIEluLXBsYWNlIGRpdmlzaW9uIGJ5IG51bWJlclxuICBCTi5wcm90b3R5cGUuaWRpdm4gPSBmdW5jdGlvbiBpZGl2biAobnVtKSB7XG4gICAgYXNzZXJ0KG51bSA8PSAweDNmZmZmZmYpO1xuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIHcgPSAodGhpcy53b3Jkc1tpXSB8IDApICsgY2FycnkgKiAweDQwMDAwMDA7XG4gICAgICB0aGlzLndvcmRzW2ldID0gKHcgLyBudW0pIHwgMDtcbiAgICAgIGNhcnJ5ID0gdyAlIG51bTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5kaXZuID0gZnVuY3Rpb24gZGl2biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pZGl2bihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5lZ2NkID0gZnVuY3Rpb24gZWdjZCAocCkge1xuICAgIGFzc2VydChwLm5lZ2F0aXZlID09PSAwKTtcbiAgICBhc3NlcnQoIXAuaXNaZXJvKCkpO1xuXG4gICAgdmFyIHggPSB0aGlzO1xuICAgIHZhciB5ID0gcC5jbG9uZSgpO1xuXG4gICAgaWYgKHgubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHggPSB4LnVtb2QocCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHggPSB4LmNsb25lKCk7XG4gICAgfVxuXG4gICAgLy8gQSAqIHggKyBCICogeSA9IHhcbiAgICB2YXIgQSA9IG5ldyBCTigxKTtcbiAgICB2YXIgQiA9IG5ldyBCTigwKTtcblxuICAgIC8vIEMgKiB4ICsgRCAqIHkgPSB5XG4gICAgdmFyIEMgPSBuZXcgQk4oMCk7XG4gICAgdmFyIEQgPSBuZXcgQk4oMSk7XG5cbiAgICB2YXIgZyA9IDA7XG5cbiAgICB3aGlsZSAoeC5pc0V2ZW4oKSAmJiB5LmlzRXZlbigpKSB7XG4gICAgICB4Lml1c2hybigxKTtcbiAgICAgIHkuaXVzaHJuKDEpO1xuICAgICAgKytnO1xuICAgIH1cblxuICAgIHZhciB5cCA9IHkuY2xvbmUoKTtcbiAgICB2YXIgeHAgPSB4LmNsb25lKCk7XG5cbiAgICB3aGlsZSAoIXguaXNaZXJvKCkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpbSA9IDE7ICh4LndvcmRzWzBdICYgaW0pID09PSAwICYmIGkgPCAyNjsgKytpLCBpbSA8PD0gMSk7XG4gICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgeC5pdXNocm4oaSk7XG4gICAgICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKEEuaXNPZGQoKSB8fCBCLmlzT2RkKCkpIHtcbiAgICAgICAgICAgIEEuaWFkZCh5cCk7XG4gICAgICAgICAgICBCLmlzdWIoeHApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIEEuaXVzaHJuKDEpO1xuICAgICAgICAgIEIuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGogPSAwLCBqbSA9IDE7ICh5LndvcmRzWzBdICYgam0pID09PSAwICYmIGogPCAyNjsgKytqLCBqbSA8PD0gMSk7XG4gICAgICBpZiAoaiA+IDApIHtcbiAgICAgICAgeS5pdXNocm4oaik7XG4gICAgICAgIHdoaWxlIChqLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKEMuaXNPZGQoKSB8fCBELmlzT2RkKCkpIHtcbiAgICAgICAgICAgIEMuaWFkZCh5cCk7XG4gICAgICAgICAgICBELmlzdWIoeHApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIEMuaXVzaHJuKDEpO1xuICAgICAgICAgIEQuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh4LmNtcCh5KSA+PSAwKSB7XG4gICAgICAgIHguaXN1Yih5KTtcbiAgICAgICAgQS5pc3ViKEMpO1xuICAgICAgICBCLmlzdWIoRCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB5LmlzdWIoeCk7XG4gICAgICAgIEMuaXN1YihBKTtcbiAgICAgICAgRC5pc3ViKEIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBhOiBDLFxuICAgICAgYjogRCxcbiAgICAgIGdjZDogeS5pdXNobG4oZylcbiAgICB9O1xuICB9O1xuXG4gIC8vIFRoaXMgaXMgcmVkdWNlZCBpbmNhcm5hdGlvbiBvZiB0aGUgYmluYXJ5IEVFQVxuICAvLyBhYm92ZSwgZGVzaWduYXRlZCB0byBpbnZlcnQgbWVtYmVycyBvZiB0aGVcbiAgLy8gX3ByaW1lXyBmaWVsZHMgRihwKSBhdCBhIG1heGltYWwgc3BlZWRcbiAgQk4ucHJvdG90eXBlLl9pbnZtcCA9IGZ1bmN0aW9uIF9pbnZtcCAocCkge1xuICAgIGFzc2VydChwLm5lZ2F0aXZlID09PSAwKTtcbiAgICBhc3NlcnQoIXAuaXNaZXJvKCkpO1xuXG4gICAgdmFyIGEgPSB0aGlzO1xuICAgIHZhciBiID0gcC5jbG9uZSgpO1xuXG4gICAgaWYgKGEubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIGEgPSBhLnVtb2QocCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBhLmNsb25lKCk7XG4gICAgfVxuXG4gICAgdmFyIHgxID0gbmV3IEJOKDEpO1xuICAgIHZhciB4MiA9IG5ldyBCTigwKTtcblxuICAgIHZhciBkZWx0YSA9IGIuY2xvbmUoKTtcblxuICAgIHdoaWxlIChhLmNtcG4oMSkgPiAwICYmIGIuY21wbigxKSA+IDApIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpbSA9IDE7IChhLndvcmRzWzBdICYgaW0pID09PSAwICYmIGkgPCAyNjsgKytpLCBpbSA8PD0gMSk7XG4gICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgYS5pdXNocm4oaSk7XG4gICAgICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKHgxLmlzT2RkKCkpIHtcbiAgICAgICAgICAgIHgxLmlhZGQoZGVsdGEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHgxLml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBqID0gMCwgam0gPSAxOyAoYi53b3Jkc1swXSAmIGptKSA9PT0gMCAmJiBqIDwgMjY7ICsraiwgam0gPDw9IDEpO1xuICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgIGIuaXVzaHJuKGopO1xuICAgICAgICB3aGlsZSAoai0tID4gMCkge1xuICAgICAgICAgIGlmICh4Mi5pc09kZCgpKSB7XG4gICAgICAgICAgICB4Mi5pYWRkKGRlbHRhKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB4Mi5pdXNocm4oMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGEuY21wKGIpID49IDApIHtcbiAgICAgICAgYS5pc3ViKGIpO1xuICAgICAgICB4MS5pc3ViKHgyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGIuaXN1YihhKTtcbiAgICAgICAgeDIuaXN1Yih4MSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHJlcztcbiAgICBpZiAoYS5jbXBuKDEpID09PSAwKSB7XG4gICAgICByZXMgPSB4MTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzID0geDI7XG4gICAgfVxuXG4gICAgaWYgKHJlcy5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzLmlhZGQocCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ2NkID0gZnVuY3Rpb24gZ2NkIChudW0pIHtcbiAgICBpZiAodGhpcy5pc1plcm8oKSkgcmV0dXJuIG51bS5hYnMoKTtcbiAgICBpZiAobnVtLmlzWmVybygpKSByZXR1cm4gdGhpcy5hYnMoKTtcblxuICAgIHZhciBhID0gdGhpcy5jbG9uZSgpO1xuICAgIHZhciBiID0gbnVtLmNsb25lKCk7XG4gICAgYS5uZWdhdGl2ZSA9IDA7XG4gICAgYi5uZWdhdGl2ZSA9IDA7XG5cbiAgICAvLyBSZW1vdmUgY29tbW9uIGZhY3RvciBvZiB0d29cbiAgICBmb3IgKHZhciBzaGlmdCA9IDA7IGEuaXNFdmVuKCkgJiYgYi5pc0V2ZW4oKTsgc2hpZnQrKykge1xuICAgICAgYS5pdXNocm4oMSk7XG4gICAgICBiLml1c2hybigxKTtcbiAgICB9XG5cbiAgICBkbyB7XG4gICAgICB3aGlsZSAoYS5pc0V2ZW4oKSkge1xuICAgICAgICBhLml1c2hybigxKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChiLmlzRXZlbigpKSB7XG4gICAgICAgIGIuaXVzaHJuKDEpO1xuICAgICAgfVxuXG4gICAgICB2YXIgciA9IGEuY21wKGIpO1xuICAgICAgaWYgKHIgPCAwKSB7XG4gICAgICAgIC8vIFN3YXAgYGFgIGFuZCBgYmAgdG8gbWFrZSBgYWAgYWx3YXlzIGJpZ2dlciB0aGFuIGBiYFxuICAgICAgICB2YXIgdCA9IGE7XG4gICAgICAgIGEgPSBiO1xuICAgICAgICBiID0gdDtcbiAgICAgIH0gZWxzZSBpZiAociA9PT0gMCB8fCBiLmNtcG4oMSkgPT09IDApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGEuaXN1YihiKTtcbiAgICB9IHdoaWxlICh0cnVlKTtcblxuICAgIHJldHVybiBiLml1c2hsbihzaGlmdCk7XG4gIH07XG5cbiAgLy8gSW52ZXJ0IG51bWJlciBpbiB0aGUgZmllbGQgRihudW0pXG4gIEJOLnByb3RvdHlwZS5pbnZtID0gZnVuY3Rpb24gaW52bSAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZWdjZChudW0pLmEudW1vZChudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc0V2ZW4gPSBmdW5jdGlvbiBpc0V2ZW4gKCkge1xuICAgIHJldHVybiAodGhpcy53b3Jkc1swXSAmIDEpID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc09kZCA9IGZ1bmN0aW9uIGlzT2RkICgpIHtcbiAgICByZXR1cm4gKHRoaXMud29yZHNbMF0gJiAxKSA9PT0gMTtcbiAgfTtcblxuICAvLyBBbmQgZmlyc3Qgd29yZCBhbmQgbnVtXG4gIEJOLnByb3RvdHlwZS5hbmRsbiA9IGZ1bmN0aW9uIGFuZGxuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy53b3Jkc1swXSAmIG51bTtcbiAgfTtcblxuICAvLyBJbmNyZW1lbnQgYXQgdGhlIGJpdCBwb3NpdGlvbiBpbi1saW5lXG4gIEJOLnByb3RvdHlwZS5iaW5jbiA9IGZ1bmN0aW9uIGJpbmNuIChiaXQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdCA9PT0gJ251bWJlcicpO1xuICAgIHZhciByID0gYml0ICUgMjY7XG4gICAgdmFyIHMgPSAoYml0IC0gcikgLyAyNjtcbiAgICB2YXIgcSA9IDEgPDwgcjtcblxuICAgIC8vIEZhc3QgY2FzZTogYml0IGlzIG11Y2ggaGlnaGVyIHRoYW4gYWxsIGV4aXN0aW5nIHdvcmRzXG4gICAgaWYgKHRoaXMubGVuZ3RoIDw9IHMpIHtcbiAgICAgIHRoaXMuX2V4cGFuZChzICsgMSk7XG4gICAgICB0aGlzLndvcmRzW3NdIHw9IHE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgYml0IGFuZCBwcm9wYWdhdGUsIGlmIG5lZWRlZFxuICAgIHZhciBjYXJyeSA9IHE7XG4gICAgZm9yICh2YXIgaSA9IHM7IGNhcnJ5ICE9PSAwICYmIGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9IHRoaXMud29yZHNbaV0gfCAwO1xuICAgICAgdyArPSBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gdyA+Pj4gMjY7XG4gICAgICB3ICY9IDB4M2ZmZmZmZjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB3O1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc1plcm8gPSBmdW5jdGlvbiBpc1plcm8gKCkge1xuICAgIHJldHVybiB0aGlzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLndvcmRzWzBdID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jbXBuID0gZnVuY3Rpb24gY21wbiAobnVtKSB7XG4gICAgdmFyIG5lZ2F0aXZlID0gbnVtIDwgMDtcblxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmICFuZWdhdGl2ZSkgcmV0dXJuIC0xO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG5lZ2F0aXZlKSByZXR1cm4gMTtcblxuICAgIHRoaXMuc3RyaXAoKTtcblxuICAgIHZhciByZXM7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gMSkge1xuICAgICAgcmVzID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKG5lZ2F0aXZlKSB7XG4gICAgICAgIG51bSA9IC1udW07XG4gICAgICB9XG5cbiAgICAgIGFzc2VydChudW0gPD0gMHgzZmZmZmZmLCAnTnVtYmVyIGlzIHRvbyBiaWcnKTtcblxuICAgICAgdmFyIHcgPSB0aGlzLndvcmRzWzBdIHwgMDtcbiAgICAgIHJlcyA9IHcgPT09IG51bSA/IDAgOiB3IDwgbnVtID8gLTEgOiAxO1xuICAgIH1cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkgcmV0dXJuIC1yZXMgfCAwO1xuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy8gQ29tcGFyZSB0d28gbnVtYmVycyBhbmQgcmV0dXJuOlxuICAvLyAxIC0gaWYgYHRoaXNgID4gYG51bWBcbiAgLy8gMCAtIGlmIGB0aGlzYCA9PSBgbnVtYFxuICAvLyAtMSAtIGlmIGB0aGlzYCA8IGBudW1gXG4gIEJOLnByb3RvdHlwZS5jbXAgPSBmdW5jdGlvbiBjbXAgKG51bSkge1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkgcmV0dXJuIC0xO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG51bS5uZWdhdGl2ZSAhPT0gMCkgcmV0dXJuIDE7XG5cbiAgICB2YXIgcmVzID0gdGhpcy51Y21wKG51bSk7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHJldHVybiAtcmVzIHwgMDtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIFVuc2lnbmVkIGNvbXBhcmlzb25cbiAgQk4ucHJvdG90eXBlLnVjbXAgPSBmdW5jdGlvbiB1Y21wIChudW0pIHtcbiAgICAvLyBBdCB0aGlzIHBvaW50IGJvdGggbnVtYmVycyBoYXZlIHRoZSBzYW1lIHNpZ25cbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gMTtcbiAgICBpZiAodGhpcy5sZW5ndGggPCBudW0ubGVuZ3RoKSByZXR1cm4gLTE7XG5cbiAgICB2YXIgcmVzID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGEgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHZhciBiID0gbnVtLndvcmRzW2ldIHwgMDtcblxuICAgICAgaWYgKGEgPT09IGIpIGNvbnRpbnVlO1xuICAgICAgaWYgKGEgPCBiKSB7XG4gICAgICAgIHJlcyA9IC0xO1xuICAgICAgfSBlbHNlIGlmIChhID4gYikge1xuICAgICAgICByZXMgPSAxO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmd0biA9IGZ1bmN0aW9uIGd0biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAxO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndCA9IGZ1bmN0aW9uIGd0IChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA9PT0gMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3RlbiA9IGZ1bmN0aW9uIGd0ZW4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA+PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndGUgPSBmdW5jdGlvbiBndGUgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID49IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0biA9IGZ1bmN0aW9uIGx0biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAtMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubHQgPSBmdW5jdGlvbiBsdCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPT09IC0xO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdGVuID0gZnVuY3Rpb24gbHRlbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pIDw9IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0ZSA9IGZ1bmN0aW9uIGx0ZSAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPD0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZXFuID0gZnVuY3Rpb24gZXFuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPT09IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmVxID0gZnVuY3Rpb24gZXEgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID09PSAwO1xuICB9O1xuXG4gIC8vXG4gIC8vIEEgcmVkdWNlIGNvbnRleHQsIGNvdWxkIGJlIHVzaW5nIG1vbnRnb21lcnkgb3Igc29tZXRoaW5nIGJldHRlciwgZGVwZW5kaW5nXG4gIC8vIG9uIHRoZSBgbWAgaXRzZWxmLlxuICAvL1xuICBCTi5yZWQgPSBmdW5jdGlvbiByZWQgKG51bSkge1xuICAgIHJldHVybiBuZXcgUmVkKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvUmVkID0gZnVuY3Rpb24gdG9SZWQgKGN0eCkge1xuICAgIGFzc2VydCghdGhpcy5yZWQsICdBbHJlYWR5IGEgbnVtYmVyIGluIHJlZHVjdGlvbiBjb250ZXh0Jyk7XG4gICAgYXNzZXJ0KHRoaXMubmVnYXRpdmUgPT09IDAsICdyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlcycpO1xuICAgIHJldHVybiBjdHguY29udmVydFRvKHRoaXMpLl9mb3JjZVJlZChjdHgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5mcm9tUmVkID0gZnVuY3Rpb24gZnJvbVJlZCAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAnZnJvbVJlZCB3b3JrcyBvbmx5IHdpdGggbnVtYmVycyBpbiByZWR1Y3Rpb24gY29udGV4dCcpO1xuICAgIHJldHVybiB0aGlzLnJlZC5jb252ZXJ0RnJvbSh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2ZvcmNlUmVkID0gZnVuY3Rpb24gX2ZvcmNlUmVkIChjdHgpIHtcbiAgICB0aGlzLnJlZCA9IGN0eDtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZm9yY2VSZWQgPSBmdW5jdGlvbiBmb3JjZVJlZCAoY3R4KSB7XG4gICAgYXNzZXJ0KCF0aGlzLnJlZCwgJ0FscmVhZHkgYSBudW1iZXIgaW4gcmVkdWN0aW9uIGNvbnRleHQnKTtcbiAgICByZXR1cm4gdGhpcy5fZm9yY2VSZWQoY3R4KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkQWRkID0gZnVuY3Rpb24gcmVkQWRkIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRBZGQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmFkZCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJQWRkID0gZnVuY3Rpb24gcmVkSUFkZCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSUFkZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaWFkZCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRTdWIgPSBmdW5jdGlvbiByZWRTdWIgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFN1YiB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc3ViKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZElTdWIgPSBmdW5jdGlvbiByZWRJU3ViIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRJU3ViIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5pc3ViKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZFNobCA9IGZ1bmN0aW9uIHJlZFNobCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU2hsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5zaGwodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkTXVsID0gZnVuY3Rpb24gcmVkTXVsIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRNdWwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTIodGhpcywgbnVtKTtcbiAgICByZXR1cm4gdGhpcy5yZWQubXVsKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZElNdWwgPSBmdW5jdGlvbiByZWRJTXVsIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRNdWwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTIodGhpcywgbnVtKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaW11bCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRTcXIgPSBmdW5jdGlvbiByZWRTcXIgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFNxciB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc3FyKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJU3FyID0gZnVuY3Rpb24gcmVkSVNxciAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSVNxciB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaXNxcih0aGlzKTtcbiAgfTtcblxuICAvLyBTcXVhcmUgcm9vdCBvdmVyIHBcbiAgQk4ucHJvdG90eXBlLnJlZFNxcnQgPSBmdW5jdGlvbiByZWRTcXJ0ICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTcXJ0IHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5zcXJ0KHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJbnZtID0gZnVuY3Rpb24gcmVkSW52bSAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSW52bSB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaW52bSh0aGlzKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gbmVnYXRpdmUgY2xvbmUgb2YgYHRoaXNgICUgYHJlZCBtb2R1bG9gXG4gIEJOLnByb3RvdHlwZS5yZWROZWcgPSBmdW5jdGlvbiByZWROZWcgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZE5lZyB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQubmVnKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRQb3cgPSBmdW5jdGlvbiByZWRQb3cgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCAmJiAhbnVtLnJlZCwgJ3JlZFBvdyhub3JtYWxOdW0pJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnBvdyh0aGlzLCBudW0pO1xuICB9O1xuXG4gIC8vIFByaW1lIG51bWJlcnMgd2l0aCBlZmZpY2llbnQgcmVkdWN0aW9uXG4gIHZhciBwcmltZXMgPSB7XG4gICAgazI1NjogbnVsbCxcbiAgICBwMjI0OiBudWxsLFxuICAgIHAxOTI6IG51bGwsXG4gICAgcDI1NTE5OiBudWxsXG4gIH07XG5cbiAgLy8gUHNldWRvLU1lcnNlbm5lIHByaW1lXG4gIGZ1bmN0aW9uIE1QcmltZSAobmFtZSwgcCkge1xuICAgIC8vIFAgPSAyIF4gTiAtIEtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMucCA9IG5ldyBCTihwLCAxNik7XG4gICAgdGhpcy5uID0gdGhpcy5wLmJpdExlbmd0aCgpO1xuICAgIHRoaXMuayA9IG5ldyBCTigxKS5pdXNobG4odGhpcy5uKS5pc3ViKHRoaXMucCk7XG5cbiAgICB0aGlzLnRtcCA9IHRoaXMuX3RtcCgpO1xuICB9XG5cbiAgTVByaW1lLnByb3RvdHlwZS5fdG1wID0gZnVuY3Rpb24gX3RtcCAoKSB7XG4gICAgdmFyIHRtcCA9IG5ldyBCTihudWxsKTtcbiAgICB0bXAud29yZHMgPSBuZXcgQXJyYXkoTWF0aC5jZWlsKHRoaXMubiAvIDEzKSk7XG4gICAgcmV0dXJuIHRtcDtcbiAgfTtcblxuICBNUHJpbWUucHJvdG90eXBlLmlyZWR1Y2UgPSBmdW5jdGlvbiBpcmVkdWNlIChudW0pIHtcbiAgICAvLyBBc3N1bWVzIHRoYXQgYG51bWAgaXMgbGVzcyB0aGFuIGBQXjJgXG4gICAgLy8gbnVtID0gSEkgKiAoMiBeIE4gLSBLKSArIEhJICogSyArIExPID0gSEkgKiBLICsgTE8gKG1vZCBQKVxuICAgIHZhciByID0gbnVtO1xuICAgIHZhciBybGVuO1xuXG4gICAgZG8ge1xuICAgICAgdGhpcy5zcGxpdChyLCB0aGlzLnRtcCk7XG4gICAgICByID0gdGhpcy5pbXVsSyhyKTtcbiAgICAgIHIgPSByLmlhZGQodGhpcy50bXApO1xuICAgICAgcmxlbiA9IHIuYml0TGVuZ3RoKCk7XG4gICAgfSB3aGlsZSAocmxlbiA+IHRoaXMubik7XG5cbiAgICB2YXIgY21wID0gcmxlbiA8IHRoaXMubiA/IC0xIDogci51Y21wKHRoaXMucCk7XG4gICAgaWYgKGNtcCA9PT0gMCkge1xuICAgICAgci53b3Jkc1swXSA9IDA7XG4gICAgICByLmxlbmd0aCA9IDE7XG4gICAgfSBlbHNlIGlmIChjbXAgPiAwKSB7XG4gICAgICByLmlzdWIodGhpcy5wKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHIuc3RyaXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyByIGlzIEJOIHY0IGluc3RhbmNlXG4gICAgICAgIHIuc3RyaXAoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHIgaXMgQk4gdjUgaW5zdGFuY2VcbiAgICAgICAgci5fc3RyaXAoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBNUHJpbWUucHJvdG90eXBlLnNwbGl0ID0gZnVuY3Rpb24gc3BsaXQgKGlucHV0LCBvdXQpIHtcbiAgICBpbnB1dC5pdXNocm4odGhpcy5uLCAwLCBvdXQpO1xuICB9O1xuXG4gIE1QcmltZS5wcm90b3R5cGUuaW11bEsgPSBmdW5jdGlvbiBpbXVsSyAobnVtKSB7XG4gICAgcmV0dXJuIG51bS5pbXVsKHRoaXMuayk7XG4gIH07XG5cbiAgZnVuY3Rpb24gSzI1NiAoKSB7XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJ2syNTYnLFxuICAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmYzJmJyk7XG4gIH1cbiAgaW5oZXJpdHMoSzI1NiwgTVByaW1lKTtcblxuICBLMjU2LnByb3RvdHlwZS5zcGxpdCA9IGZ1bmN0aW9uIHNwbGl0IChpbnB1dCwgb3V0cHV0KSB7XG4gICAgLy8gMjU2ID0gOSAqIDI2ICsgMjJcbiAgICB2YXIgbWFzayA9IDB4M2ZmZmZmO1xuXG4gICAgdmFyIG91dExlbiA9IE1hdGgubWluKGlucHV0Lmxlbmd0aCwgOSk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvdXRMZW47IGkrKykge1xuICAgICAgb3V0cHV0LndvcmRzW2ldID0gaW5wdXQud29yZHNbaV07XG4gICAgfVxuICAgIG91dHB1dC5sZW5ndGggPSBvdXRMZW47XG5cbiAgICBpZiAoaW5wdXQubGVuZ3RoIDw9IDkpIHtcbiAgICAgIGlucHV0LndvcmRzWzBdID0gMDtcbiAgICAgIGlucHV0Lmxlbmd0aCA9IDE7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gU2hpZnQgYnkgOSBsaW1ic1xuICAgIHZhciBwcmV2ID0gaW5wdXQud29yZHNbOV07XG4gICAgb3V0cHV0LndvcmRzW291dHB1dC5sZW5ndGgrK10gPSBwcmV2ICYgbWFzaztcblxuICAgIGZvciAoaSA9IDEwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBuZXh0ID0gaW5wdXQud29yZHNbaV0gfCAwO1xuICAgICAgaW5wdXQud29yZHNbaSAtIDEwXSA9ICgobmV4dCAmIG1hc2spIDw8IDQpIHwgKHByZXYgPj4+IDIyKTtcbiAgICAgIHByZXYgPSBuZXh0O1xuICAgIH1cbiAgICBwcmV2ID4+Pj0gMjI7XG4gICAgaW5wdXQud29yZHNbaSAtIDEwXSA9IHByZXY7XG4gICAgaWYgKHByZXYgPT09IDAgJiYgaW5wdXQubGVuZ3RoID4gMTApIHtcbiAgICAgIGlucHV0Lmxlbmd0aCAtPSAxMDtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5wdXQubGVuZ3RoIC09IDk7XG4gICAgfVxuICB9O1xuXG4gIEsyNTYucHJvdG90eXBlLmltdWxLID0gZnVuY3Rpb24gaW11bEsgKG51bSkge1xuICAgIC8vIEsgPSAweDEwMDAwMDNkMSA9IFsgMHg0MCwgMHgzZDEgXVxuICAgIG51bS53b3Jkc1tudW0ubGVuZ3RoXSA9IDA7XG4gICAgbnVtLndvcmRzW251bS5sZW5ndGggKyAxXSA9IDA7XG4gICAgbnVtLmxlbmd0aCArPSAyO1xuXG4gICAgLy8gYm91bmRlZCBhdDogMHg0MCAqIDB4M2ZmZmZmZiArIDB4M2QwID0gMHgxMDAwMDAzOTBcbiAgICB2YXIgbG8gPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9IG51bS53b3Jkc1tpXSB8IDA7XG4gICAgICBsbyArPSB3ICogMHgzZDE7XG4gICAgICBudW0ud29yZHNbaV0gPSBsbyAmIDB4M2ZmZmZmZjtcbiAgICAgIGxvID0gdyAqIDB4NDAgKyAoKGxvIC8gMHg0MDAwMDAwKSB8IDApO1xuICAgIH1cblxuICAgIC8vIEZhc3QgbGVuZ3RoIHJlZHVjdGlvblxuICAgIGlmIChudW0ud29yZHNbbnVtLmxlbmd0aCAtIDFdID09PSAwKSB7XG4gICAgICBudW0ubGVuZ3RoLS07XG4gICAgICBpZiAobnVtLndvcmRzW251bS5sZW5ndGggLSAxXSA9PT0gMCkge1xuICAgICAgICBudW0ubGVuZ3RoLS07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudW07XG4gIH07XG5cbiAgZnVuY3Rpb24gUDIyNCAoKSB7XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJ3AyMjQnLFxuICAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIDAwMDAwMDAwIDAwMDAwMDAwIDAwMDAwMDAxJyk7XG4gIH1cbiAgaW5oZXJpdHMoUDIyNCwgTVByaW1lKTtcblxuICBmdW5jdGlvbiBQMTkyICgpIHtcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAncDE5MicsXG4gICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZmZmYgZmZmZmZmZmYnKTtcbiAgfVxuICBpbmhlcml0cyhQMTkyLCBNUHJpbWUpO1xuXG4gIGZ1bmN0aW9uIFAyNTUxOSAoKSB7XG4gICAgLy8gMiBeIDI1NSAtIDE5XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJzI1NTE5JyxcbiAgICAgICc3ZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmVkJyk7XG4gIH1cbiAgaW5oZXJpdHMoUDI1NTE5LCBNUHJpbWUpO1xuXG4gIFAyNTUxOS5wcm90b3R5cGUuaW11bEsgPSBmdW5jdGlvbiBpbXVsSyAobnVtKSB7XG4gICAgLy8gSyA9IDB4MTNcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaGkgPSAobnVtLndvcmRzW2ldIHwgMCkgKiAweDEzICsgY2Fycnk7XG4gICAgICB2YXIgbG8gPSBoaSAmIDB4M2ZmZmZmZjtcbiAgICAgIGhpID4+Pj0gMjY7XG5cbiAgICAgIG51bS53b3Jkc1tpXSA9IGxvO1xuICAgICAgY2FycnkgPSBoaTtcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICBudW0ud29yZHNbbnVtLmxlbmd0aCsrXSA9IGNhcnJ5O1xuICAgIH1cbiAgICByZXR1cm4gbnVtO1xuICB9O1xuXG4gIC8vIEV4cG9ydGVkIG1vc3RseSBmb3IgdGVzdGluZyBwdXJwb3NlcywgdXNlIHBsYWluIG5hbWUgaW5zdGVhZFxuICBCTi5fcHJpbWUgPSBmdW5jdGlvbiBwcmltZSAobmFtZSkge1xuICAgIC8vIENhY2hlZCB2ZXJzaW9uIG9mIHByaW1lXG4gICAgaWYgKHByaW1lc1tuYW1lXSkgcmV0dXJuIHByaW1lc1tuYW1lXTtcblxuICAgIHZhciBwcmltZTtcbiAgICBpZiAobmFtZSA9PT0gJ2syNTYnKSB7XG4gICAgICBwcmltZSA9IG5ldyBLMjU2KCk7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAncDIyNCcpIHtcbiAgICAgIHByaW1lID0gbmV3IFAyMjQoKTtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdwMTkyJykge1xuICAgICAgcHJpbWUgPSBuZXcgUDE5MigpO1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ3AyNTUxOScpIHtcbiAgICAgIHByaW1lID0gbmV3IFAyNTUxOSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gcHJpbWUgJyArIG5hbWUpO1xuICAgIH1cbiAgICBwcmltZXNbbmFtZV0gPSBwcmltZTtcblxuICAgIHJldHVybiBwcmltZTtcbiAgfTtcblxuICAvL1xuICAvLyBCYXNlIHJlZHVjdGlvbiBlbmdpbmVcbiAgLy9cbiAgZnVuY3Rpb24gUmVkIChtKSB7XG4gICAgaWYgKHR5cGVvZiBtID09PSAnc3RyaW5nJykge1xuICAgICAgdmFyIHByaW1lID0gQk4uX3ByaW1lKG0pO1xuICAgICAgdGhpcy5tID0gcHJpbWUucDtcbiAgICAgIHRoaXMucHJpbWUgPSBwcmltZTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzZXJ0KG0uZ3RuKDEpLCAnbW9kdWx1cyBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAxJyk7XG4gICAgICB0aGlzLm0gPSBtO1xuICAgICAgdGhpcy5wcmltZSA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgUmVkLnByb3RvdHlwZS5fdmVyaWZ5MSA9IGZ1bmN0aW9uIF92ZXJpZnkxIChhKSB7XG4gICAgYXNzZXJ0KGEubmVnYXRpdmUgPT09IDAsICdyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlcycpO1xuICAgIGFzc2VydChhLnJlZCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLl92ZXJpZnkyID0gZnVuY3Rpb24gX3ZlcmlmeTIgKGEsIGIpIHtcbiAgICBhc3NlcnQoKGEubmVnYXRpdmUgfCBiLm5lZ2F0aXZlKSA9PT0gMCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmVzJyk7XG4gICAgYXNzZXJ0KGEucmVkICYmIGEucmVkID09PSBiLnJlZCxcbiAgICAgICdyZWQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pbW9kID0gZnVuY3Rpb24gaW1vZCAoYSkge1xuICAgIGlmICh0aGlzLnByaW1lKSByZXR1cm4gdGhpcy5wcmltZS5pcmVkdWNlKGEpLl9mb3JjZVJlZCh0aGlzKTtcbiAgICByZXR1cm4gYS51bW9kKHRoaXMubSkuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnIChhKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkpIHtcbiAgICAgIHJldHVybiBhLmNsb25lKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMubS5zdWIoYSkuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLmFkZChiKTtcbiAgICBpZiAocmVzLmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcy5pc3ViKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaWFkZCA9IGZ1bmN0aW9uIGlhZGQgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuaWFkZChiKTtcbiAgICBpZiAocmVzLmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcy5pc3ViKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zdWIgPSBmdW5jdGlvbiBzdWIgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuc3ViKGIpO1xuICAgIGlmIChyZXMuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcy5pYWRkKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaXN1YiA9IGZ1bmN0aW9uIGlzdWIgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuaXN1YihiKTtcbiAgICBpZiAocmVzLmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMuaWFkZCh0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc2hsID0gZnVuY3Rpb24gc2hsIChhLCBudW0pIHtcbiAgICB0aGlzLl92ZXJpZnkxKGEpO1xuICAgIHJldHVybiB0aGlzLmltb2QoYS51c2hsbihudW0pKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcbiAgICByZXR1cm4gdGhpcy5pbW9kKGEuaW11bChiKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuICAgIHJldHVybiB0aGlzLmltb2QoYS5tdWwoYikpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaXNxciA9IGZ1bmN0aW9uIGlzcXIgKGEpIHtcbiAgICByZXR1cm4gdGhpcy5pbXVsKGEsIGEuY2xvbmUoKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zcXIgPSBmdW5jdGlvbiBzcXIgKGEpIHtcbiAgICByZXR1cm4gdGhpcy5tdWwoYSwgYSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zcXJ0ID0gZnVuY3Rpb24gc3FydCAoYSkge1xuICAgIGlmIChhLmlzWmVybygpKSByZXR1cm4gYS5jbG9uZSgpO1xuXG4gICAgdmFyIG1vZDMgPSB0aGlzLm0uYW5kbG4oMyk7XG4gICAgYXNzZXJ0KG1vZDMgJSAyID09PSAxKTtcblxuICAgIC8vIEZhc3QgY2FzZVxuICAgIGlmIChtb2QzID09PSAzKSB7XG4gICAgICB2YXIgcG93ID0gdGhpcy5tLmFkZChuZXcgQk4oMSkpLml1c2hybigyKTtcbiAgICAgIHJldHVybiB0aGlzLnBvdyhhLCBwb3cpO1xuICAgIH1cblxuICAgIC8vIFRvbmVsbGktU2hhbmtzIGFsZ29yaXRobSAoVG90YWxseSB1bm9wdGltaXplZCBhbmQgc2xvdylcbiAgICAvL1xuICAgIC8vIEZpbmQgUSBhbmQgUywgdGhhdCBRICogMiBeIFMgPSAoUCAtIDEpXG4gICAgdmFyIHEgPSB0aGlzLm0uc3VibigxKTtcbiAgICB2YXIgcyA9IDA7XG4gICAgd2hpbGUgKCFxLmlzWmVybygpICYmIHEuYW5kbG4oMSkgPT09IDApIHtcbiAgICAgIHMrKztcbiAgICAgIHEuaXVzaHJuKDEpO1xuICAgIH1cbiAgICBhc3NlcnQoIXEuaXNaZXJvKCkpO1xuXG4gICAgdmFyIG9uZSA9IG5ldyBCTigxKS50b1JlZCh0aGlzKTtcbiAgICB2YXIgbk9uZSA9IG9uZS5yZWROZWcoKTtcblxuICAgIC8vIEZpbmQgcXVhZHJhdGljIG5vbi1yZXNpZHVlXG4gICAgLy8gTk9URTogTWF4IGlzIHN1Y2ggYmVjYXVzZSBvZiBnZW5lcmFsaXplZCBSaWVtYW5uIGh5cG90aGVzaXMuXG4gICAgdmFyIGxwb3cgPSB0aGlzLm0uc3VibigxKS5pdXNocm4oMSk7XG4gICAgdmFyIHogPSB0aGlzLm0uYml0TGVuZ3RoKCk7XG4gICAgeiA9IG5ldyBCTigyICogeiAqIHopLnRvUmVkKHRoaXMpO1xuXG4gICAgd2hpbGUgKHRoaXMucG93KHosIGxwb3cpLmNtcChuT25lKSAhPT0gMCkge1xuICAgICAgei5yZWRJQWRkKG5PbmUpO1xuICAgIH1cblxuICAgIHZhciBjID0gdGhpcy5wb3coeiwgcSk7XG4gICAgdmFyIHIgPSB0aGlzLnBvdyhhLCBxLmFkZG4oMSkuaXVzaHJuKDEpKTtcbiAgICB2YXIgdCA9IHRoaXMucG93KGEsIHEpO1xuICAgIHZhciBtID0gcztcbiAgICB3aGlsZSAodC5jbXAob25lKSAhPT0gMCkge1xuICAgICAgdmFyIHRtcCA9IHQ7XG4gICAgICBmb3IgKHZhciBpID0gMDsgdG1wLmNtcChvbmUpICE9PSAwOyBpKyspIHtcbiAgICAgICAgdG1wID0gdG1wLnJlZFNxcigpO1xuICAgICAgfVxuICAgICAgYXNzZXJ0KGkgPCBtKTtcbiAgICAgIHZhciBiID0gdGhpcy5wb3coYywgbmV3IEJOKDEpLml1c2hsbihtIC0gaSAtIDEpKTtcblxuICAgICAgciA9IHIucmVkTXVsKGIpO1xuICAgICAgYyA9IGIucmVkU3FyKCk7XG4gICAgICB0ID0gdC5yZWRNdWwoYyk7XG4gICAgICBtID0gaTtcbiAgICB9XG5cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmludm0gPSBmdW5jdGlvbiBpbnZtIChhKSB7XG4gICAgdmFyIGludiA9IGEuX2ludm1wKHRoaXMubSk7XG4gICAgaWYgKGludi5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgaW52Lm5lZ2F0aXZlID0gMDtcbiAgICAgIHJldHVybiB0aGlzLmltb2QoaW52KS5yZWROZWcoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuaW1vZChpbnYpO1xuICAgIH1cbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnBvdyA9IGZ1bmN0aW9uIHBvdyAoYSwgbnVtKSB7XG4gICAgaWYgKG51bS5pc1plcm8oKSkgcmV0dXJuIG5ldyBCTigxKS50b1JlZCh0aGlzKTtcbiAgICBpZiAobnVtLmNtcG4oMSkgPT09IDApIHJldHVybiBhLmNsb25lKCk7XG5cbiAgICB2YXIgd2luZG93U2l6ZSA9IDQ7XG4gICAgdmFyIHduZCA9IG5ldyBBcnJheSgxIDw8IHdpbmRvd1NpemUpO1xuICAgIHduZFswXSA9IG5ldyBCTigxKS50b1JlZCh0aGlzKTtcbiAgICB3bmRbMV0gPSBhO1xuICAgIGZvciAodmFyIGkgPSAyOyBpIDwgd25kLmxlbmd0aDsgaSsrKSB7XG4gICAgICB3bmRbaV0gPSB0aGlzLm11bCh3bmRbaSAtIDFdLCBhKTtcbiAgICB9XG5cbiAgICB2YXIgcmVzID0gd25kWzBdO1xuICAgIHZhciBjdXJyZW50ID0gMDtcbiAgICB2YXIgY3VycmVudExlbiA9IDA7XG4gICAgdmFyIHN0YXJ0ID0gbnVtLmJpdExlbmd0aCgpICUgMjY7XG4gICAgaWYgKHN0YXJ0ID09PSAwKSB7XG4gICAgICBzdGFydCA9IDI2O1xuICAgIH1cblxuICAgIGZvciAoaSA9IG51bS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIHdvcmQgPSBudW0ud29yZHNbaV07XG4gICAgICBmb3IgKHZhciBqID0gc3RhcnQgLSAxOyBqID49IDA7IGotLSkge1xuICAgICAgICB2YXIgYml0ID0gKHdvcmQgPj4gaikgJiAxO1xuICAgICAgICBpZiAocmVzICE9PSB3bmRbMF0pIHtcbiAgICAgICAgICByZXMgPSB0aGlzLnNxcihyZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJpdCA9PT0gMCAmJiBjdXJyZW50ID09PSAwKSB7XG4gICAgICAgICAgY3VycmVudExlbiA9IDA7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50IDw8PSAxO1xuICAgICAgICBjdXJyZW50IHw9IGJpdDtcbiAgICAgICAgY3VycmVudExlbisrO1xuICAgICAgICBpZiAoY3VycmVudExlbiAhPT0gd2luZG93U2l6ZSAmJiAoaSAhPT0gMCB8fCBqICE9PSAwKSkgY29udGludWU7XG5cbiAgICAgICAgcmVzID0gdGhpcy5tdWwocmVzLCB3bmRbY3VycmVudF0pO1xuICAgICAgICBjdXJyZW50TGVuID0gMDtcbiAgICAgICAgY3VycmVudCA9IDA7XG4gICAgICB9XG4gICAgICBzdGFydCA9IDI2O1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5jb252ZXJ0VG8gPSBmdW5jdGlvbiBjb252ZXJ0VG8gKG51bSkge1xuICAgIHZhciByID0gbnVtLnVtb2QodGhpcy5tKTtcblxuICAgIHJldHVybiByID09PSBudW0gPyByLmNsb25lKCkgOiByO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuY29udmVydEZyb20gPSBmdW5jdGlvbiBjb252ZXJ0RnJvbSAobnVtKSB7XG4gICAgdmFyIHJlcyA9IG51bS5jbG9uZSgpO1xuICAgIHJlcy5yZWQgPSBudWxsO1xuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy9cbiAgLy8gTW9udGdvbWVyeSBtZXRob2QgZW5naW5lXG4gIC8vXG5cbiAgQk4ubW9udCA9IGZ1bmN0aW9uIG1vbnQgKG51bSkge1xuICAgIHJldHVybiBuZXcgTW9udChudW0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIE1vbnQgKG0pIHtcbiAgICBSZWQuY2FsbCh0aGlzLCBtKTtcblxuICAgIHRoaXMuc2hpZnQgPSB0aGlzLm0uYml0TGVuZ3RoKCk7XG4gICAgaWYgKHRoaXMuc2hpZnQgJSAyNiAhPT0gMCkge1xuICAgICAgdGhpcy5zaGlmdCArPSAyNiAtICh0aGlzLnNoaWZ0ICUgMjYpO1xuICAgIH1cblxuICAgIHRoaXMuciA9IG5ldyBCTigxKS5pdXNobG4odGhpcy5zaGlmdCk7XG4gICAgdGhpcy5yMiA9IHRoaXMuaW1vZCh0aGlzLnIuc3FyKCkpO1xuICAgIHRoaXMucmludiA9IHRoaXMuci5faW52bXAodGhpcy5tKTtcblxuICAgIHRoaXMubWludiA9IHRoaXMucmludi5tdWwodGhpcy5yKS5pc3VibigxKS5kaXYodGhpcy5tKTtcbiAgICB0aGlzLm1pbnYgPSB0aGlzLm1pbnYudW1vZCh0aGlzLnIpO1xuICAgIHRoaXMubWludiA9IHRoaXMuci5zdWIodGhpcy5taW52KTtcbiAgfVxuICBpbmhlcml0cyhNb250LCBSZWQpO1xuXG4gIE1vbnQucHJvdG90eXBlLmNvbnZlcnRUbyA9IGZ1bmN0aW9uIGNvbnZlcnRUbyAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChudW0udXNobG4odGhpcy5zaGlmdCkpO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLmNvbnZlcnRGcm9tID0gZnVuY3Rpb24gY29udmVydEZyb20gKG51bSkge1xuICAgIHZhciByID0gdGhpcy5pbW9kKG51bS5tdWwodGhpcy5yaW52KSk7XG4gICAgci5yZWQgPSBudWxsO1xuICAgIHJldHVybiByO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsIChhLCBiKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkgfHwgYi5pc1plcm8oKSkge1xuICAgICAgYS53b3Jkc1swXSA9IDA7XG4gICAgICBhLmxlbmd0aCA9IDE7XG4gICAgICByZXR1cm4gYTtcbiAgICB9XG5cbiAgICB2YXIgdCA9IGEuaW11bChiKTtcbiAgICB2YXIgYyA9IHQubWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubWludikuaW1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm0pO1xuICAgIHZhciB1ID0gdC5pc3ViKGMpLml1c2hybih0aGlzLnNoaWZ0KTtcbiAgICB2YXIgcmVzID0gdTtcblxuICAgIGlmICh1LmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcyA9IHUuaXN1Yih0aGlzLm0pO1xuICAgIH0gZWxzZSBpZiAodS5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzID0gdS5pYWRkKHRoaXMubSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsIChhLCBiKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkgfHwgYi5pc1plcm8oKSkgcmV0dXJuIG5ldyBCTigwKS5fZm9yY2VSZWQodGhpcyk7XG5cbiAgICB2YXIgdCA9IGEubXVsKGIpO1xuICAgIHZhciBjID0gdC5tYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5taW52KS5pbWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubSk7XG4gICAgdmFyIHUgPSB0LmlzdWIoYykuaXVzaHJuKHRoaXMuc2hpZnQpO1xuICAgIHZhciByZXMgPSB1O1xuICAgIGlmICh1LmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcyA9IHUuaXN1Yih0aGlzLm0pO1xuICAgIH0gZWxzZSBpZiAodS5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzID0gdS5pYWRkKHRoaXMubSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0gKGEpIHtcbiAgICAvLyAoQVIpXi0xICogUl4yID0gKEFeLTEgKiBSXi0xKSAqIFJeMiA9IEFeLTEgKiBSXG4gICAgdmFyIHJlcyA9IHRoaXMuaW1vZChhLl9pbnZtcCh0aGlzLm0pLm11bCh0aGlzLnIyKSk7XG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG59KSh0eXBlb2YgbW9kdWxlID09PSAndW5kZWZpbmVkJyB8fCBtb2R1bGUsIHRoaXMpO1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJhc3NlcnQiLCJ2YWwiLCJtc2ciLCJFcnJvciIsImluaGVyaXRzIiwiY3RvciIsInN1cGVyQ3RvciIsInN1cGVyXyIsIlRlbXBDdG9yIiwicHJvdG90eXBlIiwiY29uc3RydWN0b3IiLCJCTiIsIm51bWJlciIsImJhc2UiLCJlbmRpYW4iLCJpc0JOIiwibmVnYXRpdmUiLCJ3b3JkcyIsImxlbmd0aCIsInJlZCIsIl9pbml0Iiwid29yZFNpemUiLCJCdWZmZXIiLCJ3aW5kb3ciLCJyZXF1aXJlIiwiZSIsIm51bSIsIkFycmF5IiwiaXNBcnJheSIsIm1heCIsImxlZnQiLCJyaWdodCIsImNtcCIsIm1pbiIsImluaXQiLCJfaW5pdE51bWJlciIsIl9pbml0QXJyYXkiLCJ0b1N0cmluZyIsInJlcGxhY2UiLCJzdGFydCIsIl9wYXJzZUhleCIsIl9wYXJzZUJhc2UiLCJ0b0FycmF5IiwiTWF0aCIsImNlaWwiLCJpIiwiaiIsInciLCJvZmYiLCJzdHJpcCIsInBhcnNlSGV4NEJpdHMiLCJzdHJpbmciLCJpbmRleCIsImMiLCJjaGFyQ29kZUF0IiwicGFyc2VIZXhCeXRlIiwibG93ZXJCb3VuZCIsInIiLCJwYXJzZUxlbmd0aCIsInBhcnNlQmFzZSIsInN0ciIsImVuZCIsIm11bCIsImxlbiIsImxpbWJMZW4iLCJsaW1iUG93IiwidG90YWwiLCJtb2QiLCJ3b3JkIiwiaW11bG4iLCJfaWFkZG4iLCJwb3ciLCJjb3B5IiwiZGVzdCIsImNsb25lIiwiX2V4cGFuZCIsInNpemUiLCJfbm9ybVNpZ24iLCJpbnNwZWN0IiwiemVyb3MiLCJncm91cFNpemVzIiwiZ3JvdXBCYXNlcyIsInBhZGRpbmciLCJvdXQiLCJjYXJyeSIsImdyb3VwU2l6ZSIsImdyb3VwQmFzZSIsImlzWmVybyIsIm1vZG4iLCJpZGl2biIsInRvTnVtYmVyIiwicmV0IiwidG9KU09OIiwidG9CdWZmZXIiLCJ0b0FycmF5TGlrZSIsIkFycmF5VHlwZSIsImJ5dGVMZW5ndGgiLCJyZXFMZW5ndGgiLCJsaXR0bGVFbmRpYW4iLCJyZXMiLCJiIiwicSIsImFuZGxuIiwiaXVzaHJuIiwiY2x6MzIiLCJfY291bnRCaXRzIiwidCIsIl96ZXJvQml0cyIsImJpdExlbmd0aCIsImhpIiwidG9CaXRBcnJheSIsImJpdCIsIndiaXQiLCJ6ZXJvQml0cyIsInRvVHdvcyIsIndpZHRoIiwiYWJzIiwiaW5vdG4iLCJpYWRkbiIsImZyb21Ud29zIiwidGVzdG4iLCJub3RuIiwiaW5lZyIsImlzTmVnIiwibmVnIiwiaXVvciIsImlvciIsIm9yIiwidW9yIiwiaXVhbmQiLCJpYW5kIiwiYW5kIiwidWFuZCIsIml1eG9yIiwiYSIsIml4b3IiLCJ4b3IiLCJ1eG9yIiwiYnl0ZXNOZWVkZWQiLCJiaXRzTGVmdCIsInNldG4iLCJpYWRkIiwiaXN1YiIsImFkZCIsInN1YiIsInNtYWxsTXVsVG8iLCJzZWxmIiwibG8iLCJrIiwibmNhcnJ5IiwicndvcmQiLCJtYXhKIiwiY29tYjEwTXVsVG8iLCJvIiwibWlkIiwiYTAiLCJhbDAiLCJhaDAiLCJhMSIsImFsMSIsImFoMSIsImEyIiwiYWwyIiwiYWgyIiwiYTMiLCJhbDMiLCJhaDMiLCJhNCIsImFsNCIsImFoNCIsImE1IiwiYWw1IiwiYWg1IiwiYTYiLCJhbDYiLCJhaDYiLCJhNyIsImFsNyIsImFoNyIsImE4IiwiYWw4IiwiYWg4IiwiYTkiLCJhbDkiLCJhaDkiLCJiMCIsImJsMCIsImJoMCIsImIxIiwiYmwxIiwiYmgxIiwiYjIiLCJibDIiLCJiaDIiLCJiMyIsImJsMyIsImJoMyIsImI0IiwiYmw0IiwiYmg0IiwiYjUiLCJibDUiLCJiaDUiLCJiNiIsImJsNiIsImJoNiIsImI3IiwiYmw3IiwiYmg3IiwiYjgiLCJibDgiLCJiaDgiLCJiOSIsImJsOSIsImJoOSIsImltdWwiLCJ3MCIsIncxIiwidzIiLCJ3MyIsInc0IiwidzUiLCJ3NiIsInc3IiwidzgiLCJ3OSIsIncxMCIsIncxMSIsIncxMiIsIncxMyIsIncxNCIsIncxNSIsIncxNiIsIncxNyIsIncxOCIsImJpZ011bFRvIiwiaG5jYXJyeSIsImp1bWJvTXVsVG8iLCJmZnRtIiwiRkZUTSIsIm11bHAiLCJtdWxUbyIsIngiLCJ5IiwibWFrZVJCVCIsIk4iLCJsIiwicmV2QmluIiwicmIiLCJwZXJtdXRlIiwicmJ0IiwicndzIiwiaXdzIiwicnR3cyIsIml0d3MiLCJ0cmFuc2Zvcm0iLCJzIiwicnR3ZGYiLCJjb3MiLCJQSSIsIml0d2RmIiwic2luIiwicCIsInJ0d2RmXyIsIml0d2RmXyIsInJlIiwiaWUiLCJybyIsImlvIiwicngiLCJndWVzc0xlbjEzYiIsIm4iLCJtIiwib2RkIiwiY29uanVnYXRlIiwibm9ybWFsaXplMTNiIiwid3MiLCJyb3VuZCIsImNvbnZlcnQxM2IiLCJzdHViIiwicGgiLCJfIiwicndzdCIsIml3c3QiLCJucndzIiwibnJ3c3QiLCJuaXdzdCIsInJtd3MiLCJtdWxmIiwibXVsbiIsInNxciIsImlzcXIiLCJpdXNobG4iLCJiaXRzIiwiY2FycnlNYXNrIiwibmV3Q2FycnkiLCJpc2hsbiIsImhpbnQiLCJleHRlbmRlZCIsImgiLCJtYXNrIiwibWFza2VkV29yZHMiLCJpc2hybiIsInNobG4iLCJ1c2hsbiIsInNocm4iLCJ1c2hybiIsImltYXNrbiIsIm1hc2tuIiwiaXN1Ym4iLCJhZGRuIiwic3VibiIsImlhYnMiLCJfaXNobG5zdWJtdWwiLCJzaGlmdCIsIl93b3JkRGl2IiwibW9kZSIsImJoaSIsImJoaUJpdHMiLCJkaWZmIiwicWoiLCJkaXYiLCJkaXZtb2QiLCJwb3NpdGl2ZSIsImRpdm4iLCJ1bW9kIiwiZGl2Um91bmQiLCJkbSIsImhhbGYiLCJyMiIsImFjYyIsImVnY2QiLCJBIiwiQiIsIkMiLCJEIiwiZyIsImlzRXZlbiIsInlwIiwieHAiLCJpbSIsImlzT2RkIiwiam0iLCJnY2QiLCJfaW52bXAiLCJ4MSIsIngyIiwiZGVsdGEiLCJjbXBuIiwiaW52bSIsImJpbmNuIiwidWNtcCIsImd0biIsImd0IiwiZ3RlbiIsImd0ZSIsImx0biIsImx0IiwibHRlbiIsImx0ZSIsImVxbiIsImVxIiwiUmVkIiwidG9SZWQiLCJjdHgiLCJjb252ZXJ0VG8iLCJfZm9yY2VSZWQiLCJmcm9tUmVkIiwiY29udmVydEZyb20iLCJmb3JjZVJlZCIsInJlZEFkZCIsInJlZElBZGQiLCJyZWRTdWIiLCJyZWRJU3ViIiwicmVkU2hsIiwic2hsIiwicmVkTXVsIiwiX3ZlcmlmeTIiLCJyZWRJTXVsIiwicmVkU3FyIiwiX3ZlcmlmeTEiLCJyZWRJU3FyIiwicmVkU3FydCIsInNxcnQiLCJyZWRJbnZtIiwicmVkTmVnIiwicmVkUG93IiwicHJpbWVzIiwiazI1NiIsInAyMjQiLCJwMTkyIiwicDI1NTE5IiwiTVByaW1lIiwibmFtZSIsInRtcCIsIl90bXAiLCJpcmVkdWNlIiwicmxlbiIsInNwbGl0IiwiaW11bEsiLCJ1bmRlZmluZWQiLCJfc3RyaXAiLCJpbnB1dCIsIksyNTYiLCJjYWxsIiwib3V0cHV0Iiwib3V0TGVuIiwicHJldiIsIm5leHQiLCJQMjI0IiwiUDE5MiIsIlAyNTUxOSIsIl9wcmltZSIsInByaW1lIiwiaW1vZCIsIm1vZDMiLCJvbmUiLCJuT25lIiwibHBvdyIsInoiLCJpbnYiLCJ3aW5kb3dTaXplIiwid25kIiwiY3VycmVudCIsImN1cnJlbnRMZW4iLCJtb250IiwiTW9udCIsInJpbnYiLCJtaW52IiwidSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/node_modules/eth-lib/node_modules/bn.js/lib/bn.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/index.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/index.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NIL: () => (/* reexport safe */ _nil_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]),\n/* harmony export */   parse: () => (/* reexport safe */ _parse_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"]),\n/* harmony export */   stringify: () => (/* reexport safe */ _stringify_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"]),\n/* harmony export */   v1: () => (/* reexport safe */ _v1_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]),\n/* harmony export */   v3: () => (/* reexport safe */ _v3_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]),\n/* harmony export */   v4: () => (/* reexport safe */ _v4_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]),\n/* harmony export */   v5: () => (/* reexport safe */ _v5_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]),\n/* harmony export */   validate: () => (/* reexport safe */ _validate_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"]),\n/* harmony export */   version: () => (/* reexport safe */ _version_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _v1_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v1.js */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/v1.js\");\n/* harmony import */ var _v3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./v3.js */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/v3.js\");\n/* harmony import */ var _v4_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./v4.js */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var _v5_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./v5.js */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/v5.js\");\n/* harmony import */ var _nil_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./nil.js */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/nil.js\");\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./version.js */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/version.js\");\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./validate.js */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/validate.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./stringify.js */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/stringify.js\");\n/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./parse.js */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/parse.js\");\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0U7QUFDUTtBQUNFO0FBQ0U7QUFDUiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BhbGNoL2FsY2hlbXktd2ViMy9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL2luZGV4LmpzP2RiM2QiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgZGVmYXVsdCBhcyB2MSB9IGZyb20gJy4vdjEuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB2MyB9IGZyb20gJy4vdjMuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB2NCB9IGZyb20gJy4vdjQuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB2NSB9IGZyb20gJy4vdjUuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBOSUwgfSBmcm9tICcuL25pbC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHZlcnNpb24gfSBmcm9tICcuL3ZlcnNpb24uanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB2YWxpZGF0ZSB9IGZyb20gJy4vdmFsaWRhdGUuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBzdHJpbmdpZnkgfSBmcm9tICcuL3N0cmluZ2lmeS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHBhcnNlIH0gZnJvbSAnLi9wYXJzZS5qcyc7Il0sIm5hbWVzIjpbImRlZmF1bHQiLCJ2MSIsInYzIiwidjQiLCJ2NSIsIk5JTCIsInZlcnNpb24iLCJ2YWxpZGF0ZSIsInN0cmluZ2lmeSIsInBhcnNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/md5.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/md5.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction md5(bytes) {\n    if (Array.isArray(bytes)) {\n        bytes = Buffer.from(bytes);\n    } else if (typeof bytes === \"string\") {\n        bytes = Buffer.from(bytes, \"utf8\");\n    }\n    return crypto__WEBPACK_IMPORTED_MODULE_0___default().createHash(\"md5\").update(bytes).digest();\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (md5);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvbWQ1LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE0QjtBQUU1QixTQUFTQyxJQUFJQyxLQUFLO0lBQ2hCLElBQUlDLE1BQU1DLE9BQU8sQ0FBQ0YsUUFBUTtRQUN4QkEsUUFBUUcsT0FBT0MsSUFBSSxDQUFDSjtJQUN0QixPQUFPLElBQUksT0FBT0EsVUFBVSxVQUFVO1FBQ3BDQSxRQUFRRyxPQUFPQyxJQUFJLENBQUNKLE9BQU87SUFDN0I7SUFFQSxPQUFPRix3REFBaUIsQ0FBQyxPQUFPUSxNQUFNLENBQUNOLE9BQU9PLE1BQU07QUFDdEQ7QUFFQSxpRUFBZVIsR0FBR0EsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BhbGNoL2FsY2hlbXktd2ViMy9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL21kNS5qcz84NWNlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcnlwdG8gZnJvbSAnY3J5cHRvJztcblxuZnVuY3Rpb24gbWQ1KGJ5dGVzKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGJ5dGVzKSkge1xuICAgIGJ5dGVzID0gQnVmZmVyLmZyb20oYnl0ZXMpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBieXRlcyA9PT0gJ3N0cmluZycpIHtcbiAgICBieXRlcyA9IEJ1ZmZlci5mcm9tKGJ5dGVzLCAndXRmOCcpO1xuICB9XG5cbiAgcmV0dXJuIGNyeXB0by5jcmVhdGVIYXNoKCdtZDUnKS51cGRhdGUoYnl0ZXMpLmRpZ2VzdCgpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtZDU7Il0sIm5hbWVzIjpbImNyeXB0byIsIm1kNSIsImJ5dGVzIiwiQXJyYXkiLCJpc0FycmF5IiwiQnVmZmVyIiwiZnJvbSIsImNyZWF0ZUhhc2giLCJ1cGRhdGUiLCJkaWdlc3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/md5.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/native.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/native.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    randomUUID: (crypto__WEBPACK_IMPORTED_MODULE_0___default().randomUUID)\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvbmF0aXZlLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE0QjtBQUM1QixpRUFBZTtJQUNiQyxZQUFZRCwwREFBaUI7QUFDL0IsQ0FBQyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvbmF0aXZlLmpzP2ZlNjciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyeXB0byBmcm9tICdjcnlwdG8nO1xuZXhwb3J0IGRlZmF1bHQge1xuICByYW5kb21VVUlEOiBjcnlwdG8ucmFuZG9tVVVJRFxufTsiXSwibmFtZXMiOlsiY3J5cHRvIiwicmFuZG9tVVVJRCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/native.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/nil.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/nil.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"00000000-0000-0000-0000-000000000000\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvbmlsLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSx3Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AYWxjaC9hbGNoZW15LXdlYjMvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS9uaWwuanM/MjU2NCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCAnMDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwJzsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/nil.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/parse.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/parse.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/validate.js\");\n\nfunction parse(uuid) {\n    if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(uuid)) {\n        throw TypeError(\"Invalid UUID\");\n    }\n    let v;\n    const arr = new Uint8Array(16); // Parse ########-....-....-....-............\n    arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n    arr[1] = v >>> 16 & 0xff;\n    arr[2] = v >>> 8 & 0xff;\n    arr[3] = v & 0xff; // Parse ........-####-....-....-............\n    arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n    arr[5] = v & 0xff; // Parse ........-....-####-....-............\n    arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n    arr[7] = v & 0xff; // Parse ........-....-....-####-............\n    arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n    arr[9] = v & 0xff; // Parse ........-....-....-....-############\n    // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n    arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;\n    arr[11] = v / 0x100000000 & 0xff;\n    arr[12] = v >>> 24 & 0xff;\n    arr[13] = v >>> 16 & 0xff;\n    arr[14] = v >>> 8 & 0xff;\n    arr[15] = v & 0xff;\n    return arr;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (parse);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvcGFyc2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBcUM7QUFFckMsU0FBU0MsTUFBTUMsSUFBSTtJQUNqQixJQUFJLENBQUNGLHdEQUFRQSxDQUFDRSxPQUFPO1FBQ25CLE1BQU1DLFVBQVU7SUFDbEI7SUFFQSxJQUFJQztJQUNKLE1BQU1DLE1BQU0sSUFBSUMsV0FBVyxLQUFLLDZDQUE2QztJQUU3RUQsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDRCxJQUFJRyxTQUFTTCxLQUFLTSxLQUFLLENBQUMsR0FBRyxJQUFJLEdBQUUsTUFBTztJQUNsREgsR0FBRyxDQUFDLEVBQUUsR0FBR0QsTUFBTSxLQUFLO0lBQ3BCQyxHQUFHLENBQUMsRUFBRSxHQUFHRCxNQUFNLElBQUk7SUFDbkJDLEdBQUcsQ0FBQyxFQUFFLEdBQUdELElBQUksTUFBTSw2Q0FBNkM7SUFFaEVDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQ0QsSUFBSUcsU0FBU0wsS0FBS00sS0FBSyxDQUFDLEdBQUcsS0FBSyxHQUFFLE1BQU87SUFDbkRILEdBQUcsQ0FBQyxFQUFFLEdBQUdELElBQUksTUFBTSw2Q0FBNkM7SUFFaEVDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQ0QsSUFBSUcsU0FBU0wsS0FBS00sS0FBSyxDQUFDLElBQUksS0FBSyxHQUFFLE1BQU87SUFDcERILEdBQUcsQ0FBQyxFQUFFLEdBQUdELElBQUksTUFBTSw2Q0FBNkM7SUFFaEVDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQ0QsSUFBSUcsU0FBU0wsS0FBS00sS0FBSyxDQUFDLElBQUksS0FBSyxHQUFFLE1BQU87SUFDcERILEdBQUcsQ0FBQyxFQUFFLEdBQUdELElBQUksTUFBTSw2Q0FBNkM7SUFDaEUsMEVBQTBFO0lBRTFFQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUNELElBQUlHLFNBQVNMLEtBQUtNLEtBQUssQ0FBQyxJQUFJLEtBQUssR0FBRSxJQUFLLGdCQUFnQjtJQUNuRUgsR0FBRyxDQUFDLEdBQUcsR0FBR0QsSUFBSSxjQUFjO0lBQzVCQyxHQUFHLENBQUMsR0FBRyxHQUFHRCxNQUFNLEtBQUs7SUFDckJDLEdBQUcsQ0FBQyxHQUFHLEdBQUdELE1BQU0sS0FBSztJQUNyQkMsR0FBRyxDQUFDLEdBQUcsR0FBR0QsTUFBTSxJQUFJO0lBQ3BCQyxHQUFHLENBQUMsR0FBRyxHQUFHRCxJQUFJO0lBQ2QsT0FBT0M7QUFDVDtBQUVBLGlFQUFlSixLQUFLQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvcGFyc2UuanM/NDZmNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdmFsaWRhdGUgZnJvbSAnLi92YWxpZGF0ZS5qcyc7XG5cbmZ1bmN0aW9uIHBhcnNlKHV1aWQpIHtcbiAgaWYgKCF2YWxpZGF0ZSh1dWlkKSkge1xuICAgIHRocm93IFR5cGVFcnJvcignSW52YWxpZCBVVUlEJyk7XG4gIH1cblxuICBsZXQgdjtcbiAgY29uc3QgYXJyID0gbmV3IFVpbnQ4QXJyYXkoMTYpOyAvLyBQYXJzZSAjIyMjIyMjIy0uLi4uLS4uLi4tLi4uLi0uLi4uLi4uLi4uLi5cblxuICBhcnJbMF0gPSAodiA9IHBhcnNlSW50KHV1aWQuc2xpY2UoMCwgOCksIDE2KSkgPj4+IDI0O1xuICBhcnJbMV0gPSB2ID4+PiAxNiAmIDB4ZmY7XG4gIGFyclsyXSA9IHYgPj4+IDggJiAweGZmO1xuICBhcnJbM10gPSB2ICYgMHhmZjsgLy8gUGFyc2UgLi4uLi4uLi4tIyMjIy0uLi4uLS4uLi4tLi4uLi4uLi4uLi4uXG5cbiAgYXJyWzRdID0gKHYgPSBwYXJzZUludCh1dWlkLnNsaWNlKDksIDEzKSwgMTYpKSA+Pj4gODtcbiAgYXJyWzVdID0gdiAmIDB4ZmY7IC8vIFBhcnNlIC4uLi4uLi4uLS4uLi4tIyMjIy0uLi4uLS4uLi4uLi4uLi4uLlxuXG4gIGFycls2XSA9ICh2ID0gcGFyc2VJbnQodXVpZC5zbGljZSgxNCwgMTgpLCAxNikpID4+PiA4O1xuICBhcnJbN10gPSB2ICYgMHhmZjsgLy8gUGFyc2UgLi4uLi4uLi4tLi4uLi0uLi4uLSMjIyMtLi4uLi4uLi4uLi4uXG5cbiAgYXJyWzhdID0gKHYgPSBwYXJzZUludCh1dWlkLnNsaWNlKDE5LCAyMyksIDE2KSkgPj4+IDg7XG4gIGFycls5XSA9IHYgJiAweGZmOyAvLyBQYXJzZSAuLi4uLi4uLi0uLi4uLS4uLi4tLi4uLi0jIyMjIyMjIyMjIyNcbiAgLy8gKFVzZSBcIi9cIiB0byBhdm9pZCAzMi1iaXQgdHJ1bmNhdGlvbiB3aGVuIGJpdC1zaGlmdGluZyBoaWdoLW9yZGVyIGJ5dGVzKVxuXG4gIGFyclsxMF0gPSAodiA9IHBhcnNlSW50KHV1aWQuc2xpY2UoMjQsIDM2KSwgMTYpKSAvIDB4MTAwMDAwMDAwMDAgJiAweGZmO1xuICBhcnJbMTFdID0gdiAvIDB4MTAwMDAwMDAwICYgMHhmZjtcbiAgYXJyWzEyXSA9IHYgPj4+IDI0ICYgMHhmZjtcbiAgYXJyWzEzXSA9IHYgPj4+IDE2ICYgMHhmZjtcbiAgYXJyWzE0XSA9IHYgPj4+IDggJiAweGZmO1xuICBhcnJbMTVdID0gdiAmIDB4ZmY7XG4gIHJldHVybiBhcnI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHBhcnNlOyJdLCJuYW1lcyI6WyJ2YWxpZGF0ZSIsInBhcnNlIiwidXVpZCIsIlR5cGVFcnJvciIsInYiLCJhcnIiLCJVaW50OEFycmF5IiwicGFyc2VJbnQiLCJzbGljZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/parse.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/regex.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/regex.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvcmVnZXguanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLHFIQUFxSCxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvcmVnZXguanM/ZTI3NyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCAvXig/OlswLTlhLWZdezh9LVswLTlhLWZdezR9LVsxLTVdWzAtOWEtZl17M30tWzg5YWJdWzAtOWEtZl17M30tWzAtOWEtZl17MTJ9fDAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMCkkL2k7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/regex.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/rng.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/rng.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ rng)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n\nconst rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate\nlet poolPtr = rnds8Pool.length;\nfunction rng() {\n    if (poolPtr > rnds8Pool.length - 16) {\n        crypto__WEBPACK_IMPORTED_MODULE_0___default().randomFillSync(rnds8Pool);\n        poolPtr = 0;\n    }\n    return rnds8Pool.slice(poolPtr, poolPtr += 16);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvcm5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE0QjtBQUM1QixNQUFNQyxZQUFZLElBQUlDLFdBQVcsTUFBTSxxQ0FBcUM7QUFFNUUsSUFBSUMsVUFBVUYsVUFBVUcsTUFBTTtBQUNmLFNBQVNDO0lBQ3RCLElBQUlGLFVBQVVGLFVBQVVHLE1BQU0sR0FBRyxJQUFJO1FBQ25DSiw0REFBcUIsQ0FBQ0M7UUFDdEJFLFVBQVU7SUFDWjtJQUVBLE9BQU9GLFVBQVVNLEtBQUssQ0FBQ0osU0FBU0EsV0FBVztBQUM3QyIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BhbGNoL2FsY2hlbXktd2ViMy9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3JuZy5qcz9jYjExIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcnlwdG8gZnJvbSAnY3J5cHRvJztcbmNvbnN0IHJuZHM4UG9vbCA9IG5ldyBVaW50OEFycmF5KDI1Nik7IC8vICMgb2YgcmFuZG9tIHZhbHVlcyB0byBwcmUtYWxsb2NhdGVcblxubGV0IHBvb2xQdHIgPSBybmRzOFBvb2wubGVuZ3RoO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcm5nKCkge1xuICBpZiAocG9vbFB0ciA+IHJuZHM4UG9vbC5sZW5ndGggLSAxNikge1xuICAgIGNyeXB0by5yYW5kb21GaWxsU3luYyhybmRzOFBvb2wpO1xuICAgIHBvb2xQdHIgPSAwO1xuICB9XG5cbiAgcmV0dXJuIHJuZHM4UG9vbC5zbGljZShwb29sUHRyLCBwb29sUHRyICs9IDE2KTtcbn0iXSwibmFtZXMiOlsiY3J5cHRvIiwicm5kczhQb29sIiwiVWludDhBcnJheSIsInBvb2xQdHIiLCJsZW5ndGgiLCJybmciLCJyYW5kb21GaWxsU3luYyIsInNsaWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/rng.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/sha1.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/sha1.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction sha1(bytes) {\n    if (Array.isArray(bytes)) {\n        bytes = Buffer.from(bytes);\n    } else if (typeof bytes === \"string\") {\n        bytes = Buffer.from(bytes, \"utf8\");\n    }\n    return crypto__WEBPACK_IMPORTED_MODULE_0___default().createHash(\"sha1\").update(bytes).digest();\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (sha1);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvc2hhMS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBNEI7QUFFNUIsU0FBU0MsS0FBS0MsS0FBSztJQUNqQixJQUFJQyxNQUFNQyxPQUFPLENBQUNGLFFBQVE7UUFDeEJBLFFBQVFHLE9BQU9DLElBQUksQ0FBQ0o7SUFDdEIsT0FBTyxJQUFJLE9BQU9BLFVBQVUsVUFBVTtRQUNwQ0EsUUFBUUcsT0FBT0MsSUFBSSxDQUFDSixPQUFPO0lBQzdCO0lBRUEsT0FBT0Ysd0RBQWlCLENBQUMsUUFBUVEsTUFBTSxDQUFDTixPQUFPTyxNQUFNO0FBQ3ZEO0FBRUEsaUVBQWVSLElBQUlBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AYWxjaC9hbGNoZW15LXdlYjMvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS9zaGExLmpzPzk0MWYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyeXB0byBmcm9tICdjcnlwdG8nO1xuXG5mdW5jdGlvbiBzaGExKGJ5dGVzKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGJ5dGVzKSkge1xuICAgIGJ5dGVzID0gQnVmZmVyLmZyb20oYnl0ZXMpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBieXRlcyA9PT0gJ3N0cmluZycpIHtcbiAgICBieXRlcyA9IEJ1ZmZlci5mcm9tKGJ5dGVzLCAndXRmOCcpO1xuICB9XG5cbiAgcmV0dXJuIGNyeXB0by5jcmVhdGVIYXNoKCdzaGExJykudXBkYXRlKGJ5dGVzKS5kaWdlc3QoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc2hhMTsiXSwibmFtZXMiOlsiY3J5cHRvIiwic2hhMSIsImJ5dGVzIiwiQXJyYXkiLCJpc0FycmF5IiwiQnVmZmVyIiwiZnJvbSIsImNyZWF0ZUhhc2giLCJ1cGRhdGUiLCJkaWdlc3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/sha1.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/stringify.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/stringify.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   unsafeStringify: () => (/* binding */ unsafeStringify)\n/* harmony export */ });\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/validate.js\");\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */ const byteToHex = [];\nfor(let i = 0; i < 256; ++i){\n    byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nfunction unsafeStringify(arr, offset = 0) {\n    // Note: Be careful editing this code!  It's been tuned for performance\n    // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n    return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + \"-\" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + \"-\" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + \"-\" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + \"-\" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\nfunction stringify(arr, offset = 0) {\n    const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n    // of the following:\n    // - One or more input array values don't map to a hex octet (leading to\n    // \"undefined\" in the uuid)\n    // - Invalid input values for the RFC `version` or `variant` fields\n    if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(uuid)) {\n        throw TypeError(\"Stringified UUID is invalid\");\n    }\n    return uuid;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stringify);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvc3RyaW5naWZ5LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFxQztBQUNyQzs7O0NBR0MsR0FFRCxNQUFNQyxZQUFZLEVBQUU7QUFFcEIsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUksS0FBSyxFQUFFQSxFQUFHO0lBQzVCRCxVQUFVRSxJQUFJLENBQUMsQ0FBQ0QsSUFBSSxLQUFJLEVBQUdFLFFBQVEsQ0FBQyxJQUFJQyxLQUFLLENBQUM7QUFDaEQ7QUFFTyxTQUFTQyxnQkFBZ0JDLEdBQUcsRUFBRUMsU0FBUyxDQUFDO0lBQzdDLHVFQUF1RTtJQUN2RSxvRkFBb0Y7SUFDcEYsT0FBT1AsU0FBUyxDQUFDTSxHQUFHLENBQUNDLFNBQVMsRUFBRSxDQUFDLEdBQUdQLFNBQVMsQ0FBQ00sR0FBRyxDQUFDQyxTQUFTLEVBQUUsQ0FBQyxHQUFHUCxTQUFTLENBQUNNLEdBQUcsQ0FBQ0MsU0FBUyxFQUFFLENBQUMsR0FBR1AsU0FBUyxDQUFDTSxHQUFHLENBQUNDLFNBQVMsRUFBRSxDQUFDLEdBQUcsTUFBTVAsU0FBUyxDQUFDTSxHQUFHLENBQUNDLFNBQVMsRUFBRSxDQUFDLEdBQUdQLFNBQVMsQ0FBQ00sR0FBRyxDQUFDQyxTQUFTLEVBQUUsQ0FBQyxHQUFHLE1BQU1QLFNBQVMsQ0FBQ00sR0FBRyxDQUFDQyxTQUFTLEVBQUUsQ0FBQyxHQUFHUCxTQUFTLENBQUNNLEdBQUcsQ0FBQ0MsU0FBUyxFQUFFLENBQUMsR0FBRyxNQUFNUCxTQUFTLENBQUNNLEdBQUcsQ0FBQ0MsU0FBUyxFQUFFLENBQUMsR0FBR1AsU0FBUyxDQUFDTSxHQUFHLENBQUNDLFNBQVMsRUFBRSxDQUFDLEdBQUcsTUFBTVAsU0FBUyxDQUFDTSxHQUFHLENBQUNDLFNBQVMsR0FBRyxDQUFDLEdBQUdQLFNBQVMsQ0FBQ00sR0FBRyxDQUFDQyxTQUFTLEdBQUcsQ0FBQyxHQUFHUCxTQUFTLENBQUNNLEdBQUcsQ0FBQ0MsU0FBUyxHQUFHLENBQUMsR0FBR1AsU0FBUyxDQUFDTSxHQUFHLENBQUNDLFNBQVMsR0FBRyxDQUFDLEdBQUdQLFNBQVMsQ0FBQ00sR0FBRyxDQUFDQyxTQUFTLEdBQUcsQ0FBQyxHQUFHUCxTQUFTLENBQUNNLEdBQUcsQ0FBQ0MsU0FBUyxHQUFHLENBQUM7QUFDcGY7QUFFQSxTQUFTQyxVQUFVRixHQUFHLEVBQUVDLFNBQVMsQ0FBQztJQUNoQyxNQUFNRSxPQUFPSixnQkFBZ0JDLEtBQUtDLFNBQVMsNEVBQTRFO0lBQ3ZILG9CQUFvQjtJQUNwQix3RUFBd0U7SUFDeEUsMkJBQTJCO0lBQzNCLG1FQUFtRTtJQUVuRSxJQUFJLENBQUNSLHdEQUFRQSxDQUFDVSxPQUFPO1FBQ25CLE1BQU1DLFVBQVU7SUFDbEI7SUFFQSxPQUFPRDtBQUNUO0FBRUEsaUVBQWVELFNBQVNBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AYWxjaC9hbGNoZW15LXdlYjMvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS9zdHJpbmdpZnkuanM/ZTRmMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdmFsaWRhdGUgZnJvbSAnLi92YWxpZGF0ZS5qcyc7XG4vKipcbiAqIENvbnZlcnQgYXJyYXkgb2YgMTYgYnl0ZSB2YWx1ZXMgdG8gVVVJRCBzdHJpbmcgZm9ybWF0IG9mIHRoZSBmb3JtOlxuICogWFhYWFhYWFgtWFhYWC1YWFhYLVhYWFgtWFhYWFhYWFhYWFhYXG4gKi9cblxuY29uc3QgYnl0ZVRvSGV4ID0gW107XG5cbmZvciAobGV0IGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcbiAgYnl0ZVRvSGV4LnB1c2goKGkgKyAweDEwMCkudG9TdHJpbmcoMTYpLnNsaWNlKDEpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVuc2FmZVN0cmluZ2lmeShhcnIsIG9mZnNldCA9IDApIHtcbiAgLy8gTm90ZTogQmUgY2FyZWZ1bCBlZGl0aW5nIHRoaXMgY29kZSEgIEl0J3MgYmVlbiB0dW5lZCBmb3IgcGVyZm9ybWFuY2VcbiAgLy8gYW5kIHdvcmtzIGluIHdheXMgeW91IG1heSBub3QgZXhwZWN0LiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3V1aWRqcy91dWlkL3B1bGwvNDM0XG4gIHJldHVybiBieXRlVG9IZXhbYXJyW29mZnNldCArIDBdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMV1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAyXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDNdXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA1XV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDZdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgN11dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA4XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDldXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTBdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTFdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTJdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTNdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTRdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTVdXTtcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5KGFyciwgb2Zmc2V0ID0gMCkge1xuICBjb25zdCB1dWlkID0gdW5zYWZlU3RyaW5naWZ5KGFyciwgb2Zmc2V0KTsgLy8gQ29uc2lzdGVuY3kgY2hlY2sgZm9yIHZhbGlkIFVVSUQuICBJZiB0aGlzIHRocm93cywgaXQncyBsaWtlbHkgZHVlIHRvIG9uZVxuICAvLyBvZiB0aGUgZm9sbG93aW5nOlxuICAvLyAtIE9uZSBvciBtb3JlIGlucHV0IGFycmF5IHZhbHVlcyBkb24ndCBtYXAgdG8gYSBoZXggb2N0ZXQgKGxlYWRpbmcgdG9cbiAgLy8gXCJ1bmRlZmluZWRcIiBpbiB0aGUgdXVpZClcbiAgLy8gLSBJbnZhbGlkIGlucHV0IHZhbHVlcyBmb3IgdGhlIFJGQyBgdmVyc2lvbmAgb3IgYHZhcmlhbnRgIGZpZWxkc1xuXG4gIGlmICghdmFsaWRhdGUodXVpZCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ1N0cmluZ2lmaWVkIFVVSUQgaXMgaW52YWxpZCcpO1xuICB9XG5cbiAgcmV0dXJuIHV1aWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0cmluZ2lmeTsiXSwibmFtZXMiOlsidmFsaWRhdGUiLCJieXRlVG9IZXgiLCJpIiwicHVzaCIsInRvU3RyaW5nIiwic2xpY2UiLCJ1bnNhZmVTdHJpbmdpZnkiLCJhcnIiLCJvZmZzZXQiLCJzdHJpbmdpZnkiLCJ1dWlkIiwiVHlwZUVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/stringify.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/v1.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/v1.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rng.js */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/rng.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/stringify.js\");\n\n // **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\nlet _nodeId;\nlet _clockseq; // Previous uuid creation time\nlet _lastMSecs = 0;\nlet _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\nfunction v1(options, buf, offset) {\n    let i = buf && offset || 0;\n    const b = buf || new Array(16);\n    options = options || {};\n    let node = options.node || _nodeId;\n    let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n    // specified.  We do this lazily to minimize issues related to insufficient\n    // system entropy.  See #189\n    if (node == null || clockseq == null) {\n        const seedBytes = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n        if (node == null) {\n            // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n            node = _nodeId = [\n                seedBytes[0] | 0x01,\n                seedBytes[1],\n                seedBytes[2],\n                seedBytes[3],\n                seedBytes[4],\n                seedBytes[5]\n            ];\n        }\n        if (clockseq == null) {\n            // Per 4.2.2, randomize (14 bit) clockseq\n            clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n        }\n    } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n    // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n    // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n    // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n    let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n    // cycle to simulate higher resolution clock\n    let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n    const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n    if (dt < 0 && options.clockseq === undefined) {\n        clockseq = clockseq + 1 & 0x3fff;\n    } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n    // time interval\n    if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n        nsecs = 0;\n    } // Per 4.2.1.2 Throw error if too many uuids are requested\n    if (nsecs >= 10000) {\n        throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n    }\n    _lastMSecs = msecs;\n    _lastNSecs = nsecs;\n    _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n    msecs += 12219292800000; // `time_low`\n    const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n    b[i++] = tl >>> 24 & 0xff;\n    b[i++] = tl >>> 16 & 0xff;\n    b[i++] = tl >>> 8 & 0xff;\n    b[i++] = tl & 0xff; // `time_mid`\n    const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n    b[i++] = tmh >>> 8 & 0xff;\n    b[i++] = tmh & 0xff; // `time_high_and_version`\n    b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n    b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n    b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n    b[i++] = clockseq & 0xff; // `node`\n    for(let n = 0; n < 6; ++n){\n        b[i + n] = node[n];\n    }\n    return buf || (0,_stringify_js__WEBPACK_IMPORTED_MODULE_1__.unsafeStringify)(b);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v1);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/v1.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/v3.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/v3.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _v35_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v35.js */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/v35.js\");\n/* harmony import */ var _md5_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./md5.js */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/md5.js\");\n\n\nconst v3 = (0,_v35_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"v3\", 0x30, _md5_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v3);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTJCO0FBQ0E7QUFDM0IsTUFBTUUsS0FBS0YsbURBQUdBLENBQUMsTUFBTSxNQUFNQywrQ0FBR0E7QUFDOUIsaUVBQWVDLEVBQUVBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AYWxjaC9hbGNoZW15LXdlYjMvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS92My5qcz85Nzk2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB2MzUgZnJvbSAnLi92MzUuanMnO1xuaW1wb3J0IG1kNSBmcm9tICcuL21kNS5qcyc7XG5jb25zdCB2MyA9IHYzNSgndjMnLCAweDMwLCBtZDUpO1xuZXhwb3J0IGRlZmF1bHQgdjM7Il0sIm5hbWVzIjpbInYzNSIsIm1kNSIsInYzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/v3.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/v35.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/v35.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DNS: () => (/* binding */ DNS),\n/* harmony export */   URL: () => (/* binding */ URL),\n/* harmony export */   \"default\": () => (/* binding */ v35)\n/* harmony export */ });\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/stringify.js\");\n/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parse.js */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/parse.js\");\n\n\nfunction stringToBytes(str) {\n    str = unescape(encodeURIComponent(str)); // UTF8 escape\n    const bytes = [];\n    for(let i = 0; i < str.length; ++i){\n        bytes.push(str.charCodeAt(i));\n    }\n    return bytes;\n}\nconst DNS = \"6ba7b810-9dad-11d1-80b4-00c04fd430c8\";\nconst URL = \"6ba7b811-9dad-11d1-80b4-00c04fd430c8\";\nfunction v35(name, version, hashfunc) {\n    function generateUUID(value, namespace, buf, offset) {\n        var _namespace;\n        if (typeof value === \"string\") {\n            value = stringToBytes(value);\n        }\n        if (typeof namespace === \"string\") {\n            namespace = (0,_parse_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(namespace);\n        }\n        if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {\n            throw TypeError(\"Namespace must be array-like (16 iterable integer values, 0-255)\");\n        } // Compute hash of namespace and value, Per 4.3\n        // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n        // hashfunc([...namespace, ... value])`\n        let bytes = new Uint8Array(16 + value.length);\n        bytes.set(namespace);\n        bytes.set(value, namespace.length);\n        bytes = hashfunc(bytes);\n        bytes[6] = bytes[6] & 0x0f | version;\n        bytes[8] = bytes[8] & 0x3f | 0x80;\n        if (buf) {\n            offset = offset || 0;\n            for(let i = 0; i < 16; ++i){\n                buf[offset + i] = bytes[i];\n            }\n            return buf;\n        }\n        return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_1__.unsafeStringify)(bytes);\n    } // Function#name is not settable on some platforms (#270)\n    try {\n        generateUUID.name = name; // eslint-disable-next-line no-empty\n    } catch (err) {} // For CommonJS default export support\n    generateUUID.DNS = DNS;\n    generateUUID.URL = URL;\n    return generateUUID;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjM1LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQWlEO0FBQ2xCO0FBRS9CLFNBQVNFLGNBQWNDLEdBQUc7SUFDeEJBLE1BQU1DLFNBQVNDLG1CQUFtQkYsT0FBTyxjQUFjO0lBRXZELE1BQU1HLFFBQVEsRUFBRTtJQUVoQixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUosSUFBSUssTUFBTSxFQUFFLEVBQUVELEVBQUc7UUFDbkNELE1BQU1HLElBQUksQ0FBQ04sSUFBSU8sVUFBVSxDQUFDSDtJQUM1QjtJQUVBLE9BQU9EO0FBQ1Q7QUFFTyxNQUFNSyxNQUFNLHVDQUF1QztBQUNuRCxNQUFNQyxNQUFNLHVDQUF1QztBQUMzQyxTQUFTQyxJQUFJQyxJQUFJLEVBQUVDLE9BQU8sRUFBRUMsUUFBUTtJQUNqRCxTQUFTQyxhQUFhQyxLQUFLLEVBQUVDLFNBQVMsRUFBRUMsR0FBRyxFQUFFQyxNQUFNO1FBQ2pELElBQUlDO1FBRUosSUFBSSxPQUFPSixVQUFVLFVBQVU7WUFDN0JBLFFBQVFoQixjQUFjZ0I7UUFDeEI7UUFFQSxJQUFJLE9BQU9DLGNBQWMsVUFBVTtZQUNqQ0EsWUFBWWxCLHFEQUFLQSxDQUFDa0I7UUFDcEI7UUFFQSxJQUFJLENBQUMsQ0FBQ0csYUFBYUgsU0FBUSxNQUFPLFFBQVFHLGVBQWUsS0FBSyxJQUFJLEtBQUssSUFBSUEsV0FBV2QsTUFBTSxNQUFNLElBQUk7WUFDcEcsTUFBTWUsVUFBVTtRQUNsQixFQUFFLCtDQUErQztRQUNqRCwyRUFBMkU7UUFDM0UsdUNBQXVDO1FBR3ZDLElBQUlqQixRQUFRLElBQUlrQixXQUFXLEtBQUtOLE1BQU1WLE1BQU07UUFDNUNGLE1BQU1tQixHQUFHLENBQUNOO1FBQ1ZiLE1BQU1tQixHQUFHLENBQUNQLE9BQU9DLFVBQVVYLE1BQU07UUFDakNGLFFBQVFVLFNBQVNWO1FBQ2pCQSxLQUFLLENBQUMsRUFBRSxHQUFHQSxLQUFLLENBQUMsRUFBRSxHQUFHLE9BQU9TO1FBQzdCVCxLQUFLLENBQUMsRUFBRSxHQUFHQSxLQUFLLENBQUMsRUFBRSxHQUFHLE9BQU87UUFFN0IsSUFBSWMsS0FBSztZQUNQQyxTQUFTQSxVQUFVO1lBRW5CLElBQUssSUFBSWQsSUFBSSxHQUFHQSxJQUFJLElBQUksRUFBRUEsRUFBRztnQkFDM0JhLEdBQUcsQ0FBQ0MsU0FBU2QsRUFBRSxHQUFHRCxLQUFLLENBQUNDLEVBQUU7WUFDNUI7WUFFQSxPQUFPYTtRQUNUO1FBRUEsT0FBT3BCLDhEQUFlQSxDQUFDTTtJQUN6QixFQUFFLHlEQUF5RDtJQUczRCxJQUFJO1FBQ0ZXLGFBQWFILElBQUksR0FBR0EsTUFBTSxvQ0FBb0M7SUFDaEUsRUFBRSxPQUFPWSxLQUFLLENBQUMsRUFBRSxzQ0FBc0M7SUFHdkRULGFBQWFOLEdBQUcsR0FBR0E7SUFDbkJNLGFBQWFMLEdBQUcsR0FBR0E7SUFDbkIsT0FBT0s7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BhbGNoL2FsY2hlbXktd2ViMy9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3YzNS5qcz80NDgxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVuc2FmZVN0cmluZ2lmeSB9IGZyb20gJy4vc3RyaW5naWZ5LmpzJztcbmltcG9ydCBwYXJzZSBmcm9tICcuL3BhcnNlLmpzJztcblxuZnVuY3Rpb24gc3RyaW5nVG9CeXRlcyhzdHIpIHtcbiAgc3RyID0gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KHN0cikpOyAvLyBVVEY4IGVzY2FwZVxuXG4gIGNvbnN0IGJ5dGVzID0gW107XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICBieXRlcy5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpKTtcbiAgfVxuXG4gIHJldHVybiBieXRlcztcbn1cblxuZXhwb3J0IGNvbnN0IEROUyA9ICc2YmE3YjgxMC05ZGFkLTExZDEtODBiNC0wMGMwNGZkNDMwYzgnO1xuZXhwb3J0IGNvbnN0IFVSTCA9ICc2YmE3YjgxMS05ZGFkLTExZDEtODBiNC0wMGMwNGZkNDMwYzgnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdjM1KG5hbWUsIHZlcnNpb24sIGhhc2hmdW5jKSB7XG4gIGZ1bmN0aW9uIGdlbmVyYXRlVVVJRCh2YWx1ZSwgbmFtZXNwYWNlLCBidWYsIG9mZnNldCkge1xuICAgIHZhciBfbmFtZXNwYWNlO1xuXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhbHVlID0gc3RyaW5nVG9CeXRlcyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBuYW1lc3BhY2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICBuYW1lc3BhY2UgPSBwYXJzZShuYW1lc3BhY2UpO1xuICAgIH1cblxuICAgIGlmICgoKF9uYW1lc3BhY2UgPSBuYW1lc3BhY2UpID09PSBudWxsIHx8IF9uYW1lc3BhY2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9uYW1lc3BhY2UubGVuZ3RoKSAhPT0gMTYpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignTmFtZXNwYWNlIG11c3QgYmUgYXJyYXktbGlrZSAoMTYgaXRlcmFibGUgaW50ZWdlciB2YWx1ZXMsIDAtMjU1KScpO1xuICAgIH0gLy8gQ29tcHV0ZSBoYXNoIG9mIG5hbWVzcGFjZSBhbmQgdmFsdWUsIFBlciA0LjNcbiAgICAvLyBGdXR1cmU6IFVzZSBzcHJlYWQgc3ludGF4IHdoZW4gc3VwcG9ydGVkIG9uIGFsbCBwbGF0Zm9ybXMsIGUuZy4gYGJ5dGVzID1cbiAgICAvLyBoYXNoZnVuYyhbLi4ubmFtZXNwYWNlLCAuLi4gdmFsdWVdKWBcblxuXG4gICAgbGV0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoMTYgKyB2YWx1ZS5sZW5ndGgpO1xuICAgIGJ5dGVzLnNldChuYW1lc3BhY2UpO1xuICAgIGJ5dGVzLnNldCh2YWx1ZSwgbmFtZXNwYWNlLmxlbmd0aCk7XG4gICAgYnl0ZXMgPSBoYXNoZnVuYyhieXRlcyk7XG4gICAgYnl0ZXNbNl0gPSBieXRlc1s2XSAmIDB4MGYgfCB2ZXJzaW9uO1xuICAgIGJ5dGVzWzhdID0gYnl0ZXNbOF0gJiAweDNmIHwgMHg4MDtcblxuICAgIGlmIChidWYpIHtcbiAgICAgIG9mZnNldCA9IG9mZnNldCB8fCAwO1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyArK2kpIHtcbiAgICAgICAgYnVmW29mZnNldCArIGldID0gYnl0ZXNbaV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBidWY7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuc2FmZVN0cmluZ2lmeShieXRlcyk7XG4gIH0gLy8gRnVuY3Rpb24jbmFtZSBpcyBub3Qgc2V0dGFibGUgb24gc29tZSBwbGF0Zm9ybXMgKCMyNzApXG5cblxuICB0cnkge1xuICAgIGdlbmVyYXRlVVVJRC5uYW1lID0gbmFtZTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVtcHR5XG4gIH0gY2F0Y2ggKGVycikge30gLy8gRm9yIENvbW1vbkpTIGRlZmF1bHQgZXhwb3J0IHN1cHBvcnRcblxuXG4gIGdlbmVyYXRlVVVJRC5ETlMgPSBETlM7XG4gIGdlbmVyYXRlVVVJRC5VUkwgPSBVUkw7XG4gIHJldHVybiBnZW5lcmF0ZVVVSUQ7XG59Il0sIm5hbWVzIjpbInVuc2FmZVN0cmluZ2lmeSIsInBhcnNlIiwic3RyaW5nVG9CeXRlcyIsInN0ciIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiYnl0ZXMiLCJpIiwibGVuZ3RoIiwicHVzaCIsImNoYXJDb2RlQXQiLCJETlMiLCJVUkwiLCJ2MzUiLCJuYW1lIiwidmVyc2lvbiIsImhhc2hmdW5jIiwiZ2VuZXJhdGVVVUlEIiwidmFsdWUiLCJuYW1lc3BhY2UiLCJidWYiLCJvZmZzZXQiLCJfbmFtZXNwYWNlIiwiVHlwZUVycm9yIiwiVWludDhBcnJheSIsInNldCIsImVyciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/v35.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/v4.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/v4.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _native_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./native.js */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/native.js\");\n/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rng.js */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/rng.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stringify.js */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/stringify.js\");\n\n\n\nfunction v4(options, buf, offset) {\n    if (_native_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].randomUUID && !buf && !options) {\n        return _native_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].randomUUID();\n    }\n    options = options || {};\n    const rnds = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n    rnds[6] = rnds[6] & 0x0f | 0x40;\n    rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n    if (buf) {\n        offset = offset || 0;\n        for(let i = 0; i < 16; ++i){\n            buf[offset + i] = rnds[i];\n        }\n        return buf;\n    }\n    return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_2__.unsafeStringify)(rnds);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v4);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFpQztBQUNOO0FBQ3NCO0FBRWpELFNBQVNHLEdBQUdDLE9BQU8sRUFBRUMsR0FBRyxFQUFFQyxNQUFNO0lBQzlCLElBQUlOLGtEQUFNQSxDQUFDTyxVQUFVLElBQUksQ0FBQ0YsT0FBTyxDQUFDRCxTQUFTO1FBQ3pDLE9BQU9KLGtEQUFNQSxDQUFDTyxVQUFVO0lBQzFCO0lBRUFILFVBQVVBLFdBQVcsQ0FBQztJQUN0QixNQUFNSSxPQUFPSixRQUFRSyxNQUFNLElBQUksQ0FBQ0wsUUFBUUgsR0FBRyxJQUFJQSwrQ0FBRSxLQUFNLGdFQUFnRTtJQUV2SE8sSUFBSSxDQUFDLEVBQUUsR0FBR0EsSUFBSSxDQUFDLEVBQUUsR0FBRyxPQUFPO0lBQzNCQSxJQUFJLENBQUMsRUFBRSxHQUFHQSxJQUFJLENBQUMsRUFBRSxHQUFHLE9BQU8sTUFBTSxvQ0FBb0M7SUFFckUsSUFBSUgsS0FBSztRQUNQQyxTQUFTQSxVQUFVO1FBRW5CLElBQUssSUFBSUksSUFBSSxHQUFHQSxJQUFJLElBQUksRUFBRUEsRUFBRztZQUMzQkwsR0FBRyxDQUFDQyxTQUFTSSxFQUFFLEdBQUdGLElBQUksQ0FBQ0UsRUFBRTtRQUMzQjtRQUVBLE9BQU9MO0lBQ1Q7SUFFQSxPQUFPSCw4REFBZUEsQ0FBQ007QUFDekI7QUFFQSxpRUFBZUwsRUFBRUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BhbGNoL2FsY2hlbXktd2ViMy9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3Y0LmpzP2JlNzMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG5hdGl2ZSBmcm9tICcuL25hdGl2ZS5qcyc7XG5pbXBvcnQgcm5nIGZyb20gJy4vcm5nLmpzJztcbmltcG9ydCB7IHVuc2FmZVN0cmluZ2lmeSB9IGZyb20gJy4vc3RyaW5naWZ5LmpzJztcblxuZnVuY3Rpb24gdjQob3B0aW9ucywgYnVmLCBvZmZzZXQpIHtcbiAgaWYgKG5hdGl2ZS5yYW5kb21VVUlEICYmICFidWYgJiYgIW9wdGlvbnMpIHtcbiAgICByZXR1cm4gbmF0aXZlLnJhbmRvbVVVSUQoKTtcbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBjb25zdCBybmRzID0gb3B0aW9ucy5yYW5kb20gfHwgKG9wdGlvbnMucm5nIHx8IHJuZykoKTsgLy8gUGVyIDQuNCwgc2V0IGJpdHMgZm9yIHZlcnNpb24gYW5kIGBjbG9ja19zZXFfaGlfYW5kX3Jlc2VydmVkYFxuXG4gIHJuZHNbNl0gPSBybmRzWzZdICYgMHgwZiB8IDB4NDA7XG4gIHJuZHNbOF0gPSBybmRzWzhdICYgMHgzZiB8IDB4ODA7IC8vIENvcHkgYnl0ZXMgdG8gYnVmZmVyLCBpZiBwcm92aWRlZFxuXG4gIGlmIChidWYpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfHwgMDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7ICsraSkge1xuICAgICAgYnVmW29mZnNldCArIGldID0gcm5kc1tpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYnVmO1xuICB9XG5cbiAgcmV0dXJuIHVuc2FmZVN0cmluZ2lmeShybmRzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdjQ7Il0sIm5hbWVzIjpbIm5hdGl2ZSIsInJuZyIsInVuc2FmZVN0cmluZ2lmeSIsInY0Iiwib3B0aW9ucyIsImJ1ZiIsIm9mZnNldCIsInJhbmRvbVVVSUQiLCJybmRzIiwicmFuZG9tIiwiaSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/v4.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/v5.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/v5.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _v35_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v35.js */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/v35.js\");\n/* harmony import */ var _sha1_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sha1.js */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/sha1.js\");\n\n\nconst v5 = (0,_v35_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"v5\", 0x50, _sha1_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v5);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTJCO0FBQ0U7QUFDN0IsTUFBTUUsS0FBS0YsbURBQUdBLENBQUMsTUFBTSxNQUFNQyxnREFBSUE7QUFDL0IsaUVBQWVDLEVBQUVBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AYWxjaC9hbGNoZW15LXdlYjMvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS92NS5qcz80MjM0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB2MzUgZnJvbSAnLi92MzUuanMnO1xuaW1wb3J0IHNoYTEgZnJvbSAnLi9zaGExLmpzJztcbmNvbnN0IHY1ID0gdjM1KCd2NScsIDB4NTAsIHNoYTEpO1xuZXhwb3J0IGRlZmF1bHQgdjU7Il0sIm5hbWVzIjpbInYzNSIsInNoYTEiLCJ2NSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/v5.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/validate.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/validate.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _regex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regex.js */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/regex.js\");\n\nfunction validate(uuid) {\n    return typeof uuid === \"string\" && _regex_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].test(uuid);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (validate);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdmFsaWRhdGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBK0I7QUFFL0IsU0FBU0MsU0FBU0MsSUFBSTtJQUNwQixPQUFPLE9BQU9BLFNBQVMsWUFBWUYsaURBQUtBLENBQUNHLElBQUksQ0FBQ0Q7QUFDaEQ7QUFFQSxpRUFBZUQsUUFBUUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BhbGNoL2FsY2hlbXktd2ViMy9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3ZhbGlkYXRlLmpzPzk3YzIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJFR0VYIGZyb20gJy4vcmVnZXguanMnO1xuXG5mdW5jdGlvbiB2YWxpZGF0ZSh1dWlkKSB7XG4gIHJldHVybiB0eXBlb2YgdXVpZCA9PT0gJ3N0cmluZycgJiYgUkVHRVgudGVzdCh1dWlkKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdmFsaWRhdGU7Il0sIm5hbWVzIjpbIlJFR0VYIiwidmFsaWRhdGUiLCJ1dWlkIiwidGVzdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/validate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/version.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/version.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/validate.js\");\n\nfunction version(uuid) {\n    if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(uuid)) {\n        throw TypeError(\"Invalid UUID\");\n    }\n    return parseInt(uuid.slice(14, 15), 16);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (version);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFxQztBQUVyQyxTQUFTQyxRQUFRQyxJQUFJO0lBQ25CLElBQUksQ0FBQ0Ysd0RBQVFBLENBQUNFLE9BQU87UUFDbkIsTUFBTUMsVUFBVTtJQUNsQjtJQUVBLE9BQU9DLFNBQVNGLEtBQUtHLEtBQUssQ0FBQyxJQUFJLEtBQUs7QUFDdEM7QUFFQSxpRUFBZUosT0FBT0EsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BhbGNoL2FsY2hlbXktd2ViMy9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3ZlcnNpb24uanM/NGFkMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdmFsaWRhdGUgZnJvbSAnLi92YWxpZGF0ZS5qcyc7XG5cbmZ1bmN0aW9uIHZlcnNpb24odXVpZCkge1xuICBpZiAoIXZhbGlkYXRlKHV1aWQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdJbnZhbGlkIFVVSUQnKTtcbiAgfVxuXG4gIHJldHVybiBwYXJzZUludCh1dWlkLnNsaWNlKDE0LCAxNSksIDE2KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdmVyc2lvbjsiXSwibmFtZXMiOlsidmFsaWRhdGUiLCJ2ZXJzaW9uIiwidXVpZCIsIlR5cGVFcnJvciIsInBhcnNlSW50Iiwic2xpY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/version.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-core/lib/extend.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/node_modules/web3-core/lib/extend.js ***!
  \******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */ /**\n * @file extend.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */ \nvar formatters = (__webpack_require__(/*! web3-core-helpers */ \"(ssr)/./node_modules/web3-core-helpers/lib/index.js\").formatters);\nvar Method = __webpack_require__(/*! web3-core-method */ \"(ssr)/./node_modules/web3-core-method/lib/index.js\");\nvar utils = __webpack_require__(/*! web3-utils */ \"(ssr)/./node_modules/web3-utils/lib/index.js\");\nvar extend = function(pckg) {\n    /* jshint maxcomplexity:5 */ var ex = function(extension) {\n        var extendedObject;\n        if (extension.property) {\n            if (!pckg[extension.property]) {\n                pckg[extension.property] = {};\n            }\n            extendedObject = pckg[extension.property];\n        } else {\n            extendedObject = pckg;\n        }\n        if (extension.methods) {\n            extension.methods.forEach(function(method) {\n                if (!(method instanceof Method)) {\n                    method = new Method(method);\n                }\n                method.attachToObject(extendedObject);\n                method.setRequestManager(pckg._requestManager);\n            });\n        }\n        return pckg;\n    };\n    ex.formatters = formatters;\n    ex.utils = utils;\n    ex.Method = Method;\n    return ex;\n};\nmodule.exports = extend;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL25vZGVfbW9kdWxlcy93ZWIzLWNvcmUvbGliL2V4dGVuZC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0NBZUMsR0FDRDs7OztDQUlDLEdBQ1k7QUFDYixJQUFJQSxhQUFhQyxnSEFBdUM7QUFDeEQsSUFBSUMsU0FBU0QsbUJBQU9BLENBQUM7QUFDckIsSUFBSUUsUUFBUUYsbUJBQU9BLENBQUM7QUFDcEIsSUFBSUcsU0FBUyxTQUFVQyxJQUFJO0lBQ3ZCLDBCQUEwQixHQUMxQixJQUFJQyxLQUFLLFNBQVVDLFNBQVM7UUFDeEIsSUFBSUM7UUFDSixJQUFJRCxVQUFVRSxRQUFRLEVBQUU7WUFDcEIsSUFBSSxDQUFDSixJQUFJLENBQUNFLFVBQVVFLFFBQVEsQ0FBQyxFQUFFO2dCQUMzQkosSUFBSSxDQUFDRSxVQUFVRSxRQUFRLENBQUMsR0FBRyxDQUFDO1lBQ2hDO1lBQ0FELGlCQUFpQkgsSUFBSSxDQUFDRSxVQUFVRSxRQUFRLENBQUM7UUFDN0MsT0FDSztZQUNERCxpQkFBaUJIO1FBQ3JCO1FBQ0EsSUFBSUUsVUFBVUcsT0FBTyxFQUFFO1lBQ25CSCxVQUFVRyxPQUFPLENBQUNDLE9BQU8sQ0FBQyxTQUFVQyxNQUFNO2dCQUN0QyxJQUFJLENBQUVBLENBQUFBLGtCQUFrQlYsTUFBSyxHQUFJO29CQUM3QlUsU0FBUyxJQUFJVixPQUFPVTtnQkFDeEI7Z0JBQ0FBLE9BQU9DLGNBQWMsQ0FBQ0w7Z0JBQ3RCSSxPQUFPRSxpQkFBaUIsQ0FBQ1QsS0FBS1UsZUFBZTtZQUNqRDtRQUNKO1FBQ0EsT0FBT1Y7SUFDWDtJQUNBQyxHQUFHTixVQUFVLEdBQUdBO0lBQ2hCTSxHQUFHSCxLQUFLLEdBQUdBO0lBQ1hHLEdBQUdKLE1BQU0sR0FBR0E7SUFDWixPQUFPSTtBQUNYO0FBQ0FVLE9BQU9DLE9BQU8sR0FBR2IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AYWxjaC9hbGNoZW15LXdlYjMvbm9kZV9tb2R1bGVzL3dlYjMtY29yZS9saWIvZXh0ZW5kLmpzPzIwNzciXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiBUaGlzIGZpbGUgaXMgcGFydCBvZiB3ZWIzLmpzLlxuXG4gd2ViMy5qcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuXG4gd2ViMy5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuXG4gWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gYWxvbmcgd2l0aCB3ZWIzLmpzLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuICovXG4vKipcbiAqIEBmaWxlIGV4dGVuZC5qc1xuICogQGF1dGhvciBGYWJpYW4gVm9nZWxzdGVsbGVyIDxmYWJpYW5AZXRoZXJldW0ub3JnPlxuICogQGRhdGUgMjAxN1xuICovXG5cInVzZSBzdHJpY3RcIjtcbnZhciBmb3JtYXR0ZXJzID0gcmVxdWlyZSgnd2ViMy1jb3JlLWhlbHBlcnMnKS5mb3JtYXR0ZXJzO1xudmFyIE1ldGhvZCA9IHJlcXVpcmUoJ3dlYjMtY29yZS1tZXRob2QnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJ3dlYjMtdXRpbHMnKTtcbnZhciBleHRlbmQgPSBmdW5jdGlvbiAocGNrZykge1xuICAgIC8qIGpzaGludCBtYXhjb21wbGV4aXR5OjUgKi9cbiAgICB2YXIgZXggPSBmdW5jdGlvbiAoZXh0ZW5zaW9uKSB7XG4gICAgICAgIHZhciBleHRlbmRlZE9iamVjdDtcbiAgICAgICAgaWYgKGV4dGVuc2lvbi5wcm9wZXJ0eSkge1xuICAgICAgICAgICAgaWYgKCFwY2tnW2V4dGVuc2lvbi5wcm9wZXJ0eV0pIHtcbiAgICAgICAgICAgICAgICBwY2tnW2V4dGVuc2lvbi5wcm9wZXJ0eV0gPSB7fTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGV4dGVuZGVkT2JqZWN0ID0gcGNrZ1tleHRlbnNpb24ucHJvcGVydHldO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZXh0ZW5kZWRPYmplY3QgPSBwY2tnO1xuICAgICAgICB9XG4gICAgICAgIGlmIChleHRlbnNpb24ubWV0aG9kcykge1xuICAgICAgICAgICAgZXh0ZW5zaW9uLm1ldGhvZHMuZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEobWV0aG9kIGluc3RhbmNlb2YgTWV0aG9kKSkge1xuICAgICAgICAgICAgICAgICAgICBtZXRob2QgPSBuZXcgTWV0aG9kKG1ldGhvZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG1ldGhvZC5hdHRhY2hUb09iamVjdChleHRlbmRlZE9iamVjdCk7XG4gICAgICAgICAgICAgICAgbWV0aG9kLnNldFJlcXVlc3RNYW5hZ2VyKHBja2cuX3JlcXVlc3RNYW5hZ2VyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwY2tnO1xuICAgIH07XG4gICAgZXguZm9ybWF0dGVycyA9IGZvcm1hdHRlcnM7XG4gICAgZXgudXRpbHMgPSB1dGlscztcbiAgICBleC5NZXRob2QgPSBNZXRob2Q7XG4gICAgcmV0dXJuIGV4O1xufTtcbm1vZHVsZS5leHBvcnRzID0gZXh0ZW5kO1xuIl0sIm5hbWVzIjpbImZvcm1hdHRlcnMiLCJyZXF1aXJlIiwiTWV0aG9kIiwidXRpbHMiLCJleHRlbmQiLCJwY2tnIiwiZXgiLCJleHRlbnNpb24iLCJleHRlbmRlZE9iamVjdCIsInByb3BlcnR5IiwibWV0aG9kcyIsImZvckVhY2giLCJtZXRob2QiLCJhdHRhY2hUb09iamVjdCIsInNldFJlcXVlc3RNYW5hZ2VyIiwiX3JlcXVlc3RNYW5hZ2VyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-core/lib/extend.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-core/lib/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/node_modules/web3-core/lib/index.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ /**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */ const requestManager = __webpack_require__(/*! web3-core-requestmanager */ \"(ssr)/./node_modules/web3-core-requestmanager/lib/index.js\");\nconst extend = __webpack_require__(/*! ./extend */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-core/lib/extend.js\");\nconst packageInit = (pkg, args)=>{\n    args = Array.prototype.slice.call(args);\n    if (!pkg) {\n        throw new Error('You need to instantiate using the \"new\" keyword.');\n    }\n    // make property of pkg._provider, which can properly set providers\n    Object.defineProperty(pkg, \"currentProvider\", {\n        get: ()=>{\n            return pkg._provider;\n        },\n        set: (value)=>{\n            return pkg.setProvider(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // inherit from parent package or create a new RequestManager\n    if (args[0] && args[0]._requestManager) {\n        pkg._requestManager = args[0]._requestManager;\n    } else {\n        pkg._requestManager = new requestManager.Manager(args[0], args[1]);\n    }\n    // add givenProvider\n    pkg.givenProvider = requestManager.Manager.givenProvider;\n    pkg.providers = requestManager.Manager.providers;\n    pkg._provider = pkg._requestManager.provider;\n    // add SETPROVIDER function (don't overwrite if already existing)\n    if (!pkg.setProvider) {\n        pkg.setProvider = (provider, net)=>{\n            pkg._requestManager.setProvider(provider, net);\n            pkg._provider = pkg._requestManager.provider;\n            return true;\n        };\n    }\n    pkg.setRequestManager = (manager)=>{\n        pkg._requestManager = manager;\n        pkg._provider = manager.provider;\n    };\n    // attach batch request creation\n    pkg.BatchRequest = requestManager.BatchManager.bind(null, pkg._requestManager);\n    // attach extend function\n    pkg.extend = extend(pkg);\n};\nconst addProviders = (pkg)=>{\n    pkg.givenProvider = requestManager.Manager.givenProvider;\n    pkg.providers = requestManager.Manager.providers;\n};\nmodule.exports = {\n    packageInit,\n    addProviders\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL25vZGVfbW9kdWxlcy93ZWIzLWNvcmUvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7QUFlQSxHQUNBOzs7O0NBSUMsR0FDRCxNQUFNQSxpQkFBaUJDLG1CQUFPQSxDQUFDLDRGQUEwQjtBQUN6RCxNQUFNQyxTQUFTRCxtQkFBT0EsQ0FBQyw4RkFBVTtBQUNqQyxNQUFNRSxjQUFjLENBQUNDLEtBQUtDO0lBQ3RCQSxPQUFPQyxNQUFNQyxTQUFTLENBQUNDLEtBQUssQ0FBQ0MsSUFBSSxDQUFDSjtJQUNsQyxJQUFJLENBQUNELEtBQUs7UUFDTixNQUFNLElBQUlNLE1BQU07SUFDcEI7SUFDQSxtRUFBbUU7SUFDbkVDLE9BQU9DLGNBQWMsQ0FBQ1IsS0FBSyxtQkFBbUI7UUFDMUNTLEtBQUs7WUFDRCxPQUFPVCxJQUFJVSxTQUFTO1FBQ3hCO1FBQ0FDLEtBQUssQ0FBQ0M7WUFDRixPQUFPWixJQUFJYSxXQUFXLENBQUNEO1FBQzNCO1FBQ0FFLFlBQVk7UUFDWkMsY0FBYztJQUNsQjtJQUNBLDZEQUE2RDtJQUM3RCxJQUFJZCxJQUFJLENBQUMsRUFBRSxJQUFJQSxJQUFJLENBQUMsRUFBRSxDQUFDZSxlQUFlLEVBQUU7UUFDcENoQixJQUFJZ0IsZUFBZSxHQUFHZixJQUFJLENBQUMsRUFBRSxDQUFDZSxlQUFlO0lBQ2pELE9BQ0s7UUFDRGhCLElBQUlnQixlQUFlLEdBQUcsSUFBSXBCLGVBQWVxQixPQUFPLENBQUNoQixJQUFJLENBQUMsRUFBRSxFQUFFQSxJQUFJLENBQUMsRUFBRTtJQUNyRTtJQUNBLG9CQUFvQjtJQUNwQkQsSUFBSWtCLGFBQWEsR0FBR3RCLGVBQWVxQixPQUFPLENBQUNDLGFBQWE7SUFDeERsQixJQUFJbUIsU0FBUyxHQUFHdkIsZUFBZXFCLE9BQU8sQ0FBQ0UsU0FBUztJQUNoRG5CLElBQUlVLFNBQVMsR0FBR1YsSUFBSWdCLGVBQWUsQ0FBQ0ksUUFBUTtJQUM1QyxpRUFBaUU7SUFDakUsSUFBSSxDQUFDcEIsSUFBSWEsV0FBVyxFQUFFO1FBQ2xCYixJQUFJYSxXQUFXLEdBQUcsQ0FBQ08sVUFBVUM7WUFDekJyQixJQUFJZ0IsZUFBZSxDQUFDSCxXQUFXLENBQUNPLFVBQVVDO1lBQzFDckIsSUFBSVUsU0FBUyxHQUFHVixJQUFJZ0IsZUFBZSxDQUFDSSxRQUFRO1lBQzVDLE9BQU87UUFDWDtJQUNKO0lBQ0FwQixJQUFJc0IsaUJBQWlCLEdBQUcsQ0FBQ0M7UUFDckJ2QixJQUFJZ0IsZUFBZSxHQUFHTztRQUN0QnZCLElBQUlVLFNBQVMsR0FBR2EsUUFBUUgsUUFBUTtJQUNwQztJQUNBLGdDQUFnQztJQUNoQ3BCLElBQUl3QixZQUFZLEdBQUc1QixlQUFlNkIsWUFBWSxDQUFDQyxJQUFJLENBQUMsTUFBTTFCLElBQUlnQixlQUFlO0lBQzdFLHlCQUF5QjtJQUN6QmhCLElBQUlGLE1BQU0sR0FBR0EsT0FBT0U7QUFDeEI7QUFDQSxNQUFNMkIsZUFBZSxDQUFDM0I7SUFDbEJBLElBQUlrQixhQUFhLEdBQUd0QixlQUFlcUIsT0FBTyxDQUFDQyxhQUFhO0lBQ3hEbEIsSUFBSW1CLFNBQVMsR0FBR3ZCLGVBQWVxQixPQUFPLENBQUNFLFNBQVM7QUFDcEQ7QUFDQVMsT0FBT0MsT0FBTyxHQUFHO0lBQ2I5QjtJQUNBNEI7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BhbGNoL2FsY2hlbXktd2ViMy9ub2RlX21vZHVsZXMvd2ViMy1jb3JlL2xpYi9pbmRleC5qcz9mNjhhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gICAgVGhpcyBmaWxlIGlzIHBhcnQgb2Ygd2ViMy5qcy5cblxuICAgIHdlYjMuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICAgIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICAgIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gICAgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cblxuICAgIHdlYjMuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICAgIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAgICBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cblxuICAgIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICAgIGFsb25nIHdpdGggd2ViMy5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiovXG4vKipcbiAqIEBmaWxlIGluZGV4LmpzXG4gKiBAYXV0aG9yIEZhYmlhbiBWb2dlbHN0ZWxsZXIgPGZhYmlhbkBldGhlcmV1bS5vcmc+XG4gKiBAZGF0ZSAyMDE3XG4gKi9cbmNvbnN0IHJlcXVlc3RNYW5hZ2VyID0gcmVxdWlyZShcIndlYjMtY29yZS1yZXF1ZXN0bWFuYWdlclwiKTtcbmNvbnN0IGV4dGVuZCA9IHJlcXVpcmUoXCIuL2V4dGVuZFwiKTtcbmNvbnN0IHBhY2thZ2VJbml0ID0gKHBrZywgYXJncykgPT4ge1xuICAgIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmdzKTtcbiAgICBpZiAoIXBrZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBuZWVkIHRvIGluc3RhbnRpYXRlIHVzaW5nIHRoZSBcIm5ld1wiIGtleXdvcmQuJyk7XG4gICAgfVxuICAgIC8vIG1ha2UgcHJvcGVydHkgb2YgcGtnLl9wcm92aWRlciwgd2hpY2ggY2FuIHByb3Blcmx5IHNldCBwcm92aWRlcnNcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocGtnLCAnY3VycmVudFByb3ZpZGVyJywge1xuICAgICAgICBnZXQ6ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBwa2cuX3Byb3ZpZGVyO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6ICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHBrZy5zZXRQcm92aWRlcih2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIC8vIGluaGVyaXQgZnJvbSBwYXJlbnQgcGFja2FnZSBvciBjcmVhdGUgYSBuZXcgUmVxdWVzdE1hbmFnZXJcbiAgICBpZiAoYXJnc1swXSAmJiBhcmdzWzBdLl9yZXF1ZXN0TWFuYWdlcikge1xuICAgICAgICBwa2cuX3JlcXVlc3RNYW5hZ2VyID0gYXJnc1swXS5fcmVxdWVzdE1hbmFnZXI7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBwa2cuX3JlcXVlc3RNYW5hZ2VyID0gbmV3IHJlcXVlc3RNYW5hZ2VyLk1hbmFnZXIoYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgfVxuICAgIC8vIGFkZCBnaXZlblByb3ZpZGVyXG4gICAgcGtnLmdpdmVuUHJvdmlkZXIgPSByZXF1ZXN0TWFuYWdlci5NYW5hZ2VyLmdpdmVuUHJvdmlkZXI7XG4gICAgcGtnLnByb3ZpZGVycyA9IHJlcXVlc3RNYW5hZ2VyLk1hbmFnZXIucHJvdmlkZXJzO1xuICAgIHBrZy5fcHJvdmlkZXIgPSBwa2cuX3JlcXVlc3RNYW5hZ2VyLnByb3ZpZGVyO1xuICAgIC8vIGFkZCBTRVRQUk9WSURFUiBmdW5jdGlvbiAoZG9uJ3Qgb3ZlcndyaXRlIGlmIGFscmVhZHkgZXhpc3RpbmcpXG4gICAgaWYgKCFwa2cuc2V0UHJvdmlkZXIpIHtcbiAgICAgICAgcGtnLnNldFByb3ZpZGVyID0gKHByb3ZpZGVyLCBuZXQpID0+IHtcbiAgICAgICAgICAgIHBrZy5fcmVxdWVzdE1hbmFnZXIuc2V0UHJvdmlkZXIocHJvdmlkZXIsIG5ldCk7XG4gICAgICAgICAgICBwa2cuX3Byb3ZpZGVyID0gcGtnLl9yZXF1ZXN0TWFuYWdlci5wcm92aWRlcjtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBwa2cuc2V0UmVxdWVzdE1hbmFnZXIgPSAobWFuYWdlcikgPT4ge1xuICAgICAgICBwa2cuX3JlcXVlc3RNYW5hZ2VyID0gbWFuYWdlcjtcbiAgICAgICAgcGtnLl9wcm92aWRlciA9IG1hbmFnZXIucHJvdmlkZXI7XG4gICAgfTtcbiAgICAvLyBhdHRhY2ggYmF0Y2ggcmVxdWVzdCBjcmVhdGlvblxuICAgIHBrZy5CYXRjaFJlcXVlc3QgPSByZXF1ZXN0TWFuYWdlci5CYXRjaE1hbmFnZXIuYmluZChudWxsLCBwa2cuX3JlcXVlc3RNYW5hZ2VyKTtcbiAgICAvLyBhdHRhY2ggZXh0ZW5kIGZ1bmN0aW9uXG4gICAgcGtnLmV4dGVuZCA9IGV4dGVuZChwa2cpO1xufTtcbmNvbnN0IGFkZFByb3ZpZGVycyA9IChwa2cpID0+IHtcbiAgICBwa2cuZ2l2ZW5Qcm92aWRlciA9IHJlcXVlc3RNYW5hZ2VyLk1hbmFnZXIuZ2l2ZW5Qcm92aWRlcjtcbiAgICBwa2cucHJvdmlkZXJzID0gcmVxdWVzdE1hbmFnZXIuTWFuYWdlci5wcm92aWRlcnM7XG59O1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgcGFja2FnZUluaXQsXG4gICAgYWRkUHJvdmlkZXJzXG59O1xuIl0sIm5hbWVzIjpbInJlcXVlc3RNYW5hZ2VyIiwicmVxdWlyZSIsImV4dGVuZCIsInBhY2thZ2VJbml0IiwicGtnIiwiYXJncyIsIkFycmF5IiwicHJvdG90eXBlIiwic2xpY2UiLCJjYWxsIiwiRXJyb3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldCIsIl9wcm92aWRlciIsInNldCIsInZhbHVlIiwic2V0UHJvdmlkZXIiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwiX3JlcXVlc3RNYW5hZ2VyIiwiTWFuYWdlciIsImdpdmVuUHJvdmlkZXIiLCJwcm92aWRlcnMiLCJwcm92aWRlciIsIm5ldCIsInNldFJlcXVlc3RNYW5hZ2VyIiwibWFuYWdlciIsIkJhdGNoUmVxdWVzdCIsIkJhdGNoTWFuYWdlciIsImJpbmQiLCJhZGRQcm92aWRlcnMiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-core/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-eth-accounts/lib/index.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/node_modules/web3-eth-accounts/lib/index.js ***!
  \*************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */ /**\n * @file accounts.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */ \nvar core = __webpack_require__(/*! web3-core */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-core/lib/index.js\");\nvar Method = __webpack_require__(/*! web3-core-method */ \"(ssr)/./node_modules/web3-core-method/lib/index.js\");\nvar Account = __webpack_require__(/*! eth-lib/lib/account */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/eth-lib/lib/account.js\");\nvar cryp = __webpack_require__(/*! crypto */ \"crypto\");\nvar scrypt = __webpack_require__(/*! scrypt-js */ \"(ssr)/./node_modules/scrypt-js/scrypt.js\");\nvar uuid = __webpack_require__(/*! uuid */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/uuid/dist/esm-node/index.js\");\nvar utils = __webpack_require__(/*! web3-utils */ \"(ssr)/./node_modules/web3-utils/lib/index.js\");\nvar helpers = __webpack_require__(/*! web3-core-helpers */ \"(ssr)/./node_modules/web3-core-helpers/lib/index.js\");\nvar { TransactionFactory } = __webpack_require__(/*! @ethereumjs/tx */ \"(ssr)/./node_modules/@ethereumjs/tx/dist/index.js\");\nvar Common = (__webpack_require__(/*! @ethereumjs/common */ \"(ssr)/./node_modules/@ethereumjs/common/dist/index.js\")[\"default\"]);\nvar HardForks = (__webpack_require__(/*! @ethereumjs/common */ \"(ssr)/./node_modules/@ethereumjs/common/dist/index.js\").Hardfork);\nvar ethereumjsUtil = __webpack_require__(/*! @ethereumjs/util */ \"(ssr)/./node_modules/@ethereumjs/util/dist/index.js\");\nvar isNot = function(value) {\n    return typeof value === \"undefined\" || value === null;\n};\nvar isExist = function(value) {\n    return typeof value !== \"undefined\" && value !== null;\n};\nvar Accounts = function Accounts() {\n    var _this = this;\n    // sets _requestmanager\n    core.packageInit(this, arguments);\n    // remove unecessary core functions\n    delete this.BatchRequest;\n    delete this.extend;\n    var _ethereumCall = [\n        new Method({\n            name: \"getNetworkId\",\n            call: \"net_version\",\n            params: 0,\n            outputFormatter: parseInt\n        }),\n        new Method({\n            name: \"getChainId\",\n            call: \"eth_chainId\",\n            params: 0,\n            outputFormatter: utils.hexToNumber\n        }),\n        new Method({\n            name: \"getGasPrice\",\n            call: \"eth_gasPrice\",\n            params: 0\n        }),\n        new Method({\n            name: \"getTransactionCount\",\n            call: \"eth_getTransactionCount\",\n            params: 2,\n            inputFormatter: [\n                function(address) {\n                    if (utils.isAddress(address)) {\n                        return address;\n                    } else {\n                        throw new Error(\"Address \" + address + ' is not a valid address to get the \"transactionCount\".');\n                    }\n                },\n                function() {\n                    return \"latest\";\n                }\n            ]\n        }),\n        new Method({\n            name: \"getBlockByNumber\",\n            call: \"eth_getBlockByNumber\",\n            params: 2,\n            inputFormatter: [\n                function(blockNumber) {\n                    return blockNumber ? utils.toHex(blockNumber) : \"latest\";\n                },\n                function() {\n                    return false;\n                }\n            ]\n        })\n    ];\n    // attach methods to this._ethereumCall\n    this._ethereumCall = {};\n    _ethereumCall.forEach((method)=>{\n        method.attachToObject(_this._ethereumCall);\n        method.setRequestManager(_this._requestManager);\n    });\n    this.wallet = new Wallet(this);\n};\nAccounts.prototype._addAccountFunctions = function(account) {\n    var _this = this;\n    // add sign functions\n    account.signTransaction = function signTransaction(tx, callback) {\n        return _this.signTransaction(tx, account.privateKey, callback);\n    };\n    account.sign = function sign(data) {\n        return _this.sign(data, account.privateKey);\n    };\n    account.encrypt = function encrypt(password, options) {\n        return _this.encrypt(account.privateKey, password, options);\n    };\n    return account;\n};\nAccounts.prototype.create = function create(entropy) {\n    return this._addAccountFunctions(Account.create(entropy || utils.randomHex(32)));\n};\nAccounts.prototype.privateKeyToAccount = function privateKeyToAccount(privateKey, ignoreLength) {\n    if (!privateKey.startsWith(\"0x\")) {\n        privateKey = \"0x\" + privateKey;\n    }\n    // 64 hex characters + hex-prefix\n    if (!ignoreLength && privateKey.length !== 66) {\n        throw new Error(\"Private key must be 32 bytes long\");\n    }\n    return this._addAccountFunctions(Account.fromPrivate(privateKey));\n};\nAccounts.prototype.signTransaction = function signTransaction(tx, privateKey, callback) {\n    var _this = this, error = false, transactionOptions = {}, hasTxSigningOptions = !!(tx && (tx.chain && tx.hardfork || tx.common));\n    callback = callback || function() {};\n    if (!tx) {\n        error = new Error(\"No transaction object given!\");\n        callback(error);\n        return Promise.reject(error);\n    }\n    if (isExist(tx.common) && isNot(tx.common.customChain)) {\n        error = new Error(\"If tx.common is provided it must have tx.common.customChain\");\n        callback(error);\n        return Promise.reject(error);\n    }\n    if (isExist(tx.common) && isNot(tx.common.customChain.chainId)) {\n        error = new Error(\"If tx.common is provided it must have tx.common.customChain and tx.common.customChain.chainId\");\n        callback(error);\n        return Promise.reject(error);\n    }\n    if (isExist(tx.common) && isExist(tx.common.customChain.chainId) && isExist(tx.chainId) && tx.chainId !== tx.common.customChain.chainId) {\n        error = new Error(\"Chain Id doesnt match in tx.chainId tx.common.customChain.chainId\");\n        callback(error);\n        return Promise.reject(error);\n    }\n    function signed(tx) {\n        const error = _validateTransactionForSigning(tx);\n        if (error) {\n            callback(error);\n            return Promise.reject(error);\n        }\n        try {\n            var transaction = helpers.formatters.inputCallFormatter(Object.assign({}, tx));\n            transaction.data = transaction.data || \"0x\";\n            transaction.value = transaction.value || \"0x\";\n            transaction.gasLimit = transaction.gasLimit || transaction.gas;\n            if (transaction.type === \"0x1\" && transaction.accessList === undefined) transaction.accessList = [];\n            // Because tx has no @ethereumjs/tx signing options we use fetched vals.\n            if (!hasTxSigningOptions) {\n                transactionOptions.common = Common.forCustomChain(\"mainnet\", {\n                    name: \"custom-network\",\n                    networkId: transaction.networkId,\n                    chainId: transaction.chainId\n                }, transaction.hardfork || HardForks.London);\n                delete transaction.networkId;\n            } else {\n                if (transaction.common) {\n                    transactionOptions.common = Common.forCustomChain(transaction.common.baseChain || \"mainnet\", {\n                        name: transaction.common.customChain.name || \"custom-network\",\n                        networkId: transaction.common.customChain.networkId,\n                        chainId: transaction.common.customChain.chainId\n                    }, transaction.common.hardfork || HardForks.London);\n                    delete transaction.common;\n                }\n                if (transaction.chain) {\n                    transactionOptions.chain = transaction.chain;\n                    delete transaction.chain;\n                }\n                if (transaction.hardfork) {\n                    transactionOptions.hardfork = transaction.hardfork;\n                    delete transaction.hardfork;\n                }\n            }\n            if (privateKey.startsWith(\"0x\")) {\n                privateKey = privateKey.substring(2);\n            }\n            var ethTx = TransactionFactory.fromTxData(transaction, transactionOptions);\n            var signedTx = ethTx.sign(Buffer.from(privateKey, \"hex\"));\n            var validationErrors = signedTx.validate(true);\n            if (validationErrors.length > 0) {\n                let errorString = \"Signer Error: \";\n                for (const validationError of validationErrors){\n                    errorString += `${errorString} ${validationError}.`;\n                }\n                throw new Error(errorString);\n            }\n            var rlpEncoded = signedTx.serialize().toString(\"hex\");\n            var rawTransaction = \"0x\" + rlpEncoded;\n            var transactionHash = utils.keccak256(rawTransaction);\n            var result = {\n                messageHash: \"0x\" + Buffer.from(signedTx.getMessageToSign(true)).toString(\"hex\"),\n                v: \"0x\" + signedTx.v.toString(\"hex\"),\n                r: \"0x\" + signedTx.r.toString(\"hex\"),\n                s: \"0x\" + signedTx.s.toString(\"hex\"),\n                rawTransaction: rawTransaction,\n                transactionHash: transactionHash\n            };\n            callback(null, result);\n            return result;\n        } catch (e) {\n            callback(e);\n            return Promise.reject(e);\n        }\n    }\n    tx.type = _handleTxType(tx);\n    // Resolve immediately if nonce, chainId, price and signing options are provided\n    if (tx.nonce !== undefined && tx.chainId !== undefined && (tx.gasPrice !== undefined || tx.maxFeePerGas !== undefined && tx.maxPriorityFeePerGas !== undefined) && hasTxSigningOptions) {\n        return Promise.resolve(signed(tx));\n    }\n    // Otherwise, get the missing info from the Ethereum Node\n    return Promise.all([\n        isNot(tx.common) || isNot(tx.common.customChain.chainId) ? isNot(tx.chainId) ? _this._ethereumCall.getChainId() : tx.chainId : undefined,\n        isNot(tx.nonce) ? _this._ethereumCall.getTransactionCount(_this.privateKeyToAccount(privateKey).address) : tx.nonce,\n        isNot(hasTxSigningOptions) ? _this._ethereumCall.getNetworkId() : 1,\n        _handleTxPricing(_this, tx)\n    ]).then(function(args) {\n        const [txchainId, txnonce, txnetworkId, txgasInfo] = args;\n        if (isNot(txchainId) && isNot(tx.common) && isNot(tx.common.customChain.chainId) || isNot(txnonce) || isNot(txnetworkId) || isNot(txgasInfo)) {\n            throw new Error('One of the values \"chainId\", \"networkId\", \"gasPrice\", or \"nonce\" couldn\\'t be fetched: ' + JSON.stringify(args));\n        }\n        return signed({\n            ...tx,\n            ...isNot(tx.common) || isNot(tx.common.customChain.chainId) ? {\n                chainId: txchainId\n            } : {},\n            nonce: txnonce,\n            networkId: txnetworkId,\n            ...txgasInfo // Will either be gasPrice or maxFeePerGas and maxPriorityFeePerGas\n        });\n    });\n};\nfunction _validateTransactionForSigning(tx) {\n    if (tx.common && tx.chain && tx.hardfork) {\n        return new Error(\"Please provide the @ethereumjs/common object or the chain and hardfork property but not all together.\");\n    }\n    if (tx.chain && !tx.hardfork || tx.hardfork && !tx.chain) {\n        return new Error(\"When specifying chain and hardfork, both values must be defined. \" + 'Received \"chain\": ' + tx.chain + ', \"hardfork\": ' + tx.hardfork);\n    }\n    if (!tx.gas && !tx.gasLimit && !tx.maxPriorityFeePerGas && !tx.maxFeePerGas) {\n        return new Error('\"gas\" is missing');\n    }\n    if (tx.gas && tx.gasPrice) {\n        if (tx.gas < 0 || tx.gasPrice < 0) {\n            return new Error(\"Gas or gasPrice is lower than 0\");\n        }\n    } else {\n        if (tx.maxPriorityFeePerGas < 0 || tx.maxFeePerGas < 0) {\n            return new Error(\"maxPriorityFeePerGas or maxFeePerGas is lower than 0\");\n        }\n    }\n    if (tx.nonce < 0 || tx.chainId < 0) {\n        return new Error(\"Nonce or chainId is lower than 0\");\n    }\n    return;\n}\nfunction _handleTxType(tx) {\n    // Taken from https://github.com/ethers-io/ethers.js/blob/2a7ce0e72a1e0c9469e10392b0329e75e341cf18/packages/abstract-signer/src.ts/index.ts#L215\n    const hasEip1559 = tx.maxFeePerGas !== undefined || tx.maxPriorityFeePerGas !== undefined;\n    let txType;\n    if (tx.type !== undefined) {\n        txType = utils.toHex(tx.type);\n    } else if (tx.type === undefined && hasEip1559) {\n        txType = \"0x2\";\n    }\n    if (tx.gasPrice !== undefined && (txType === \"0x2\" || hasEip1559)) throw Error(\"eip-1559 transactions don't support gasPrice\");\n    if ((txType === \"0x1\" || txType === \"0x0\") && hasEip1559) throw Error(\"pre-eip-1559 transaction don't support maxFeePerGas/maxPriorityFeePerGas\");\n    if (hasEip1559 || tx.common && tx.common.hardfork && tx.common.hardfork.toLowerCase() === HardForks.London || tx.hardfork && tx.hardfork.toLowerCase() === HardForks.London) {\n        txType = \"0x2\";\n    } else if (tx.accessList || tx.common && tx.common.hardfork && tx.common.hardfork.toLowerCase() === HardForks.Berlin || tx.hardfork && tx.hardfork.toLowerCase() === HardForks.Berlin) {\n        txType = \"0x1\";\n    }\n    return txType;\n}\nfunction _handleTxPricing(_this, tx) {\n    return new Promise((resolve, reject)=>{\n        try {\n            if ((tx.type === undefined || tx.type < \"0x2\") && tx.gasPrice !== undefined) {\n                // Legacy transaction, return provided gasPrice\n                resolve({\n                    gasPrice: tx.gasPrice\n                });\n            } else if (tx.type === \"0x2\" && tx.maxFeePerGas && tx.maxPriorityFeePerGas) {\n                // EIP-1559 transaction, return provided maxFeePerGas and maxPriorityFeePerGas\n                resolve({\n                    maxFeePerGas: tx.maxFeePerGas,\n                    maxPriorityFeePerGas: tx.maxPriorityFeePerGas\n                });\n            } else {\n                Promise.all([\n                    _this._ethereumCall.getBlockByNumber(),\n                    _this._ethereumCall.getGasPrice()\n                ]).then((responses)=>{\n                    const [block, gasPrice] = responses;\n                    if (tx.type === \"0x2\" && block && block.baseFeePerGas) {\n                        // The network supports EIP-1559\n                        // Taken from https://github.com/ethers-io/ethers.js/blob/ba6854bdd5a912fe873d5da494cb5c62c190adde/packages/abstract-provider/src.ts/index.ts#L230\n                        let maxPriorityFeePerGas, maxFeePerGas;\n                        if (tx.gasPrice) {\n                            // Using legacy gasPrice property on an eip-1559 network,\n                            // so use gasPrice as both fee properties\n                            maxPriorityFeePerGas = tx.gasPrice;\n                            maxFeePerGas = tx.gasPrice;\n                            delete tx.gasPrice;\n                        } else {\n                            maxPriorityFeePerGas = tx.maxPriorityFeePerGas || \"0x9502F900\"; // 2.5 Gwei\n                            maxFeePerGas = tx.maxFeePerGas || utils.toHex(utils.toBN(block.baseFeePerGas).mul(utils.toBN(2)).add(utils.toBN(maxPriorityFeePerGas)));\n                        }\n                        resolve({\n                            maxFeePerGas,\n                            maxPriorityFeePerGas\n                        });\n                    } else {\n                        if (tx.maxPriorityFeePerGas || tx.maxFeePerGas) throw Error(\"Network doesn't support eip-1559\");\n                        resolve({\n                            gasPrice\n                        });\n                    }\n                }).catch((error)=>{\n                    reject(error);\n                });\n            }\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n/* jshint ignore:start */ Accounts.prototype.recoverTransaction = function recoverTransaction(rawTx, txOptions = {}) {\n    // Rely on EthereumJs/tx to determine the type of transaction\n    const data = Buffer.from(rawTx.slice(2), \"hex\");\n    const tx = TransactionFactory.fromSerializedData(data);\n    //update checksum\n    return utils.toChecksumAddress(tx.getSenderAddress().toString(\"hex\"));\n};\n/* jshint ignore:end */ Accounts.prototype.hashMessage = function hashMessage(data) {\n    var messageHex = utils.isHexStrict(data) ? data : utils.utf8ToHex(data);\n    var messageBytes = utils.hexToBytes(messageHex);\n    var messageBuffer = Buffer.from(messageBytes);\n    var preamble = \"\\x19Ethereum Signed Message:\\n\" + messageBytes.length;\n    var preambleBuffer = Buffer.from(preamble);\n    var ethMessage = Buffer.concat([\n        preambleBuffer,\n        messageBuffer\n    ]);\n    return ethereumjsUtil.bufferToHex(utils.keccak256(ethMessage));\n};\nAccounts.prototype.sign = function sign(data, privateKey) {\n    if (!privateKey.startsWith(\"0x\")) {\n        privateKey = \"0x\" + privateKey;\n    }\n    // 64 hex characters + hex-prefix\n    if (privateKey.length !== 66) {\n        throw new Error(\"Private key must be 32 bytes long\");\n    }\n    var hash = this.hashMessage(data);\n    var signature = Account.sign(hash, privateKey);\n    var vrs = Account.decodeSignature(signature);\n    return {\n        message: data,\n        messageHash: hash,\n        v: vrs[0],\n        r: vrs[1],\n        s: vrs[2],\n        signature: signature\n    };\n};\nAccounts.prototype.recover = function recover(message, signature, preFixed) {\n    var args = [].slice.apply(arguments);\n    if (!!message && typeof message === \"object\") {\n        return this.recover(message.messageHash, Account.encodeSignature([\n            message.v,\n            message.r,\n            message.s\n        ]), true);\n    }\n    if (!preFixed) {\n        message = this.hashMessage(message);\n    }\n    if (args.length >= 4) {\n        preFixed = args.slice(-1)[0];\n        preFixed = typeof preFixed === \"boolean\" ? !!preFixed : false;\n        return this.recover(message, Account.encodeSignature(args.slice(1, 4)), preFixed); // v, r, s\n    }\n    return Account.recover(message, signature);\n};\n// Taken from https://github.com/ethereumjs/ethereumjs-wallet\nAccounts.prototype.decrypt = function(v3Keystore, password, nonStrict) {\n    /* jshint maxcomplexity: 10 */ if (!(typeof password === \"string\")) {\n        throw new Error(\"No password given.\");\n    }\n    var json = !!v3Keystore && typeof v3Keystore === \"object\" ? v3Keystore : JSON.parse(nonStrict ? v3Keystore.toLowerCase() : v3Keystore);\n    if (json.version !== 3) {\n        throw new Error(\"Not a valid V3 wallet\");\n    }\n    var derivedKey;\n    var kdfparams;\n    if (json.crypto.kdf === \"scrypt\") {\n        kdfparams = json.crypto.kdfparams;\n        // FIXME: support progress reporting callback\n        derivedKey = scrypt.syncScrypt(Buffer.from(password), Buffer.from(kdfparams.salt, \"hex\"), kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);\n    } else if (json.crypto.kdf === \"pbkdf2\") {\n        kdfparams = json.crypto.kdfparams;\n        if (kdfparams.prf !== \"hmac-sha256\") {\n            throw new Error(\"Unsupported parameters to PBKDF2\");\n        }\n        derivedKey = cryp.pbkdf2Sync(Buffer.from(password), Buffer.from(kdfparams.salt, \"hex\"), kdfparams.c, kdfparams.dklen, \"sha256\");\n    } else {\n        throw new Error(\"Unsupported key derivation scheme\");\n    }\n    var ciphertext = Buffer.from(json.crypto.ciphertext, \"hex\");\n    var mac = utils.sha3(Buffer.from([\n        ...derivedKey.slice(16, 32),\n        ...ciphertext\n    ])).replace(\"0x\", \"\");\n    if (mac !== json.crypto.mac) {\n        throw new Error(\"Key derivation failed - possibly wrong password\");\n    }\n    var decipher = cryp.createDecipheriv(json.crypto.cipher, derivedKey.slice(0, 16), Buffer.from(json.crypto.cipherparams.iv, \"hex\"));\n    var seed = \"0x\" + Buffer.from([\n        ...decipher.update(ciphertext),\n        ...decipher.final()\n    ]).toString(\"hex\");\n    return this.privateKeyToAccount(seed, true);\n};\nAccounts.prototype.encrypt = function(privateKey, password, options) {\n    /* jshint maxcomplexity: 20 */ var account = this.privateKeyToAccount(privateKey, true);\n    options = options || {};\n    var salt = options.salt || cryp.randomBytes(32);\n    var iv = options.iv || cryp.randomBytes(16);\n    var derivedKey;\n    var kdf = options.kdf || \"scrypt\";\n    var kdfparams = {\n        dklen: options.dklen || 32,\n        salt: salt.toString(\"hex\")\n    };\n    if (kdf === \"pbkdf2\") {\n        kdfparams.c = options.c || 262144;\n        kdfparams.prf = \"hmac-sha256\";\n        derivedKey = cryp.pbkdf2Sync(Buffer.from(password), Buffer.from(kdfparams.salt, \"hex\"), kdfparams.c, kdfparams.dklen, \"sha256\");\n    } else if (kdf === \"scrypt\") {\n        // FIXME: support progress reporting callback\n        kdfparams.n = options.n || 8192; // 2048 4096 8192 16384\n        kdfparams.r = options.r || 8;\n        kdfparams.p = options.p || 1;\n        derivedKey = scrypt.syncScrypt(Buffer.from(password), Buffer.from(kdfparams.salt, \"hex\"), kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);\n    } else {\n        throw new Error(\"Unsupported kdf\");\n    }\n    var cipher = cryp.createCipheriv(options.cipher || \"aes-128-ctr\", derivedKey.slice(0, 16), iv);\n    if (!cipher) {\n        throw new Error(\"Unsupported cipher\");\n    }\n    var ciphertext = Buffer.from([\n        ...cipher.update(Buffer.from(account.privateKey.replace(\"0x\", \"\"), \"hex\")),\n        ...cipher.final()\n    ]);\n    var mac = utils.sha3(Buffer.from([\n        ...derivedKey.slice(16, 32),\n        ...ciphertext\n    ])).replace(\"0x\", \"\");\n    return {\n        version: 3,\n        id: uuid.v4({\n            random: options.uuid || cryp.randomBytes(16)\n        }),\n        address: account.address.toLowerCase().replace(\"0x\", \"\"),\n        crypto: {\n            ciphertext: ciphertext.toString(\"hex\"),\n            cipherparams: {\n                iv: iv.toString(\"hex\")\n            },\n            cipher: options.cipher || \"aes-128-ctr\",\n            kdf: kdf,\n            kdfparams: kdfparams,\n            mac: mac.toString(\"hex\")\n        }\n    };\n};\n// Note: this is trying to follow closely the specs on\n// http://web3js.readthedocs.io/en/1.0/web3-eth-accounts.html\nfunction Wallet(accounts) {\n    this._accounts = accounts;\n    this.length = 0;\n    this.defaultKeyName = \"web3js_wallet\";\n}\nWallet.prototype._findSafeIndex = function(pointer) {\n    pointer = pointer || 0;\n    if (this.hasOwnProperty(pointer)) {\n        return this._findSafeIndex(pointer + 1);\n    } else {\n        return pointer;\n    }\n};\nWallet.prototype._currentIndexes = function() {\n    var keys = Object.keys(this);\n    var indexes = keys.map(function(key) {\n        return parseInt(key);\n    }).filter(function(n) {\n        return n < 9e20;\n    });\n    return indexes;\n};\nWallet.prototype.create = function(numberOfAccounts, entropy) {\n    for(var i = 0; i < numberOfAccounts; ++i){\n        this.add(this._accounts.create(entropy).privateKey);\n    }\n    return this;\n};\nWallet.prototype.add = function(account) {\n    if (typeof account === \"string\") {\n        account = this._accounts.privateKeyToAccount(account);\n    }\n    if (!this[account.address]) {\n        account = this._accounts.privateKeyToAccount(account.privateKey);\n        account.index = this._findSafeIndex();\n        this[account.index] = account;\n        this[account.address] = account;\n        this[account.address.toLowerCase()] = account;\n        this.length++;\n        return account;\n    } else {\n        return this[account.address];\n    }\n};\nWallet.prototype.remove = function(addressOrIndex) {\n    var account = this[addressOrIndex];\n    if (account && account.address) {\n        // address\n        this[account.address].privateKey = null;\n        delete this[account.address];\n        // address lowercase\n        if (this[account.address.toLowerCase()]) {\n            this[account.address.toLowerCase()].privateKey = null;\n            delete this[account.address.toLowerCase()];\n        }\n        // index\n        this[account.index].privateKey = null;\n        delete this[account.index];\n        this.length--;\n        return true;\n    } else {\n        return false;\n    }\n};\nWallet.prototype.clear = function() {\n    var _this = this;\n    var indexes = this._currentIndexes();\n    indexes.forEach(function(index) {\n        _this.remove(index);\n    });\n    return this;\n};\nWallet.prototype.encrypt = function(password, options) {\n    var _this = this;\n    var indexes = this._currentIndexes();\n    var accounts = indexes.map(function(index) {\n        return _this[index].encrypt(password, options);\n    });\n    return accounts;\n};\nWallet.prototype.decrypt = function(encryptedWallet, password) {\n    var _this = this;\n    encryptedWallet.forEach(function(keystore) {\n        var account = _this._accounts.decrypt(keystore, password);\n        if (account) {\n            _this.add(account);\n        } else {\n            throw new Error(\"Couldn't decrypt accounts. Password wrong?\");\n        }\n    });\n    return this;\n};\nWallet.prototype.save = function(password, keyName) {\n    localStorage.setItem(keyName || this.defaultKeyName, JSON.stringify(this.encrypt(password)));\n    return true;\n};\nWallet.prototype.load = function(password, keyName) {\n    var keystore = localStorage.getItem(keyName || this.defaultKeyName);\n    if (keystore) {\n        try {\n            keystore = JSON.parse(keystore);\n        } catch (e) {}\n    }\n    return this.decrypt(keystore || [], password);\n};\nif (!storageAvailable(\"localStorage\")) {\n    delete Wallet.prototype.save;\n    delete Wallet.prototype.load;\n}\n/**\n * Checks whether a storage type is available or not\n * For more info on how this works, please refer to MDN documentation\n * https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API#Feature-detecting_localStorage\n *\n * @method storageAvailable\n * @param {String} type the type of storage ('localStorage', 'sessionStorage')\n * @returns {Boolean} a boolean indicating whether the specified storage is available or not\n */ function storageAvailable(type) {\n    var storage;\n    try {\n        storage = self[type];\n        var x = \"__storage_test__\";\n        storage.setItem(x, x);\n        storage.removeItem(x);\n        return true;\n    } catch (e) {\n        return e && // everything except Firefox\n        (e.code === 22 || // Firefox\n        e.code === 1014 || // test name field too, because code might not be present\n        // everything except Firefox\n        e.name === \"QuotaExceededError\" || // Firefox\n        e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") && // acknowledge QuotaExceededError only if there's something already stored\n        storage && storage.length !== 0;\n    }\n}\nmodule.exports = Accounts;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-eth-accounts/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-eth-contract/lib/index.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/node_modules/web3-eth-contract/lib/index.js ***!
  \*************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ /**\n * @file contract.js\n *\n * To initialize a contract use:\n *\n *  var Contract = require('web3-eth-contract');\n *  Contract.setProvider('ws://localhost:8546');\n *  var contract = new Contract(abi, address, ...);\n *\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */ \nvar core = __webpack_require__(/*! web3-core */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-core/lib/index.js\");\nvar Method = __webpack_require__(/*! web3-core-method */ \"(ssr)/./node_modules/web3-core-method/lib/index.js\");\nvar utils = __webpack_require__(/*! web3-utils */ \"(ssr)/./node_modules/web3-utils/lib/index.js\");\nvar Subscription = (__webpack_require__(/*! web3-core-subscriptions */ \"(ssr)/./node_modules/web3-core-subscriptions/lib/index.js\").subscription);\nvar formatters = (__webpack_require__(/*! web3-core-helpers */ \"(ssr)/./node_modules/web3-core-helpers/lib/index.js\").formatters);\nvar errors = (__webpack_require__(/*! web3-core-helpers */ \"(ssr)/./node_modules/web3-core-helpers/lib/index.js\").errors);\nvar promiEvent = __webpack_require__(/*! web3-core-promievent */ \"(ssr)/./node_modules/web3-core-promievent/lib/index.js\");\nvar abi = __webpack_require__(/*! web3-eth-abi */ \"(ssr)/./node_modules/web3-eth-abi/lib/index.js\");\n/**\n * Should be called to create new contract instance\n *\n * @method Contract\n * @constructor\n * @param {Array} jsonInterface\n * @param {String} address\n * @param {Object} options\n */ var Contract = function Contract(jsonInterface, address, options) {\n    var _this = this, args = Array.prototype.slice.call(arguments);\n    if (!(this instanceof Contract)) {\n        throw new Error('Please use the \"new\" keyword to instantiate a web3.eth.Contract() object!');\n    }\n    this.setProvider = function() {\n        core.packageInit(_this, arguments);\n        _this.clearSubscriptions = _this._requestManager.clearSubscriptions;\n    };\n    // sets _requestmanager\n    core.packageInit(this, [\n        this.constructor\n    ]);\n    this.clearSubscriptions = this._requestManager.clearSubscriptions;\n    if (!jsonInterface || !Array.isArray(jsonInterface)) {\n        throw errors.ContractMissingABIError();\n    }\n    // create the options object\n    this.options = {};\n    var lastArg = args[args.length - 1];\n    if (!!lastArg && typeof lastArg === \"object\" && !Array.isArray(lastArg)) {\n        options = lastArg;\n        this.options = {\n            ...this.options,\n            ...this._getOrSetDefaultOptions(options)\n        };\n        if (!!address && typeof address === \"object\") {\n            address = null;\n        }\n    }\n    // set address\n    Object.defineProperty(this.options, \"address\", {\n        set: function(value) {\n            if (value) {\n                _this._address = utils.toChecksumAddress(formatters.inputAddressFormatter(value));\n            }\n        },\n        get: function() {\n            return _this._address;\n        },\n        enumerable: true\n    });\n    // add method and event signatures, when the jsonInterface gets set\n    Object.defineProperty(this.options, \"jsonInterface\", {\n        set: function(value) {\n            _this.methods = {};\n            _this.events = {};\n            _this._jsonInterface = value.map(function(method) {\n                var func, funcName;\n                // make constant and payable backwards compatible\n                method.constant = method.stateMutability === \"view\" || method.stateMutability === \"pure\" || method.constant;\n                method.payable = method.stateMutability === \"payable\" || method.payable;\n                if (method.name) {\n                    funcName = utils._jsonInterfaceMethodToString(method);\n                }\n                // function\n                if (method.type === \"function\") {\n                    method.signature = abi.encodeFunctionSignature(funcName);\n                    func = _this._createTxObject.bind({\n                        method: method,\n                        parent: _this\n                    });\n                    // add method only if not one already exists\n                    if (!_this.methods[method.name]) {\n                        _this.methods[method.name] = func;\n                    } else {\n                        var cascadeFunc = _this._createTxObject.bind({\n                            method: method,\n                            parent: _this,\n                            nextMethod: _this.methods[method.name]\n                        });\n                        _this.methods[method.name] = cascadeFunc;\n                    }\n                    // definitely add the method based on its signature\n                    _this.methods[method.signature] = func;\n                    // add method by name\n                    _this.methods[funcName] = func;\n                // event\n                } else if (method.type === \"event\") {\n                    method.signature = abi.encodeEventSignature(funcName);\n                    var event = _this._on.bind(_this, method.signature);\n                    // add method only if not already exists\n                    if (!_this.events[method.name] || _this.events[method.name].name === \"bound \") _this.events[method.name] = event;\n                    // definitely add the method based on its signature\n                    _this.events[method.signature] = event;\n                    // add event by name\n                    _this.events[funcName] = event;\n                }\n                return method;\n            });\n            // add allEvents\n            _this.events.allEvents = _this._on.bind(_this, \"allevents\");\n            return _this._jsonInterface;\n        },\n        get: function() {\n            return _this._jsonInterface;\n        },\n        enumerable: true\n    });\n    // get default account from the Class\n    var defaultAccount = this.constructor.defaultAccount;\n    var defaultBlock = this.constructor.defaultBlock || \"latest\";\n    Object.defineProperty(this, \"handleRevert\", {\n        get: function() {\n            if (_this.options.handleRevert === false || _this.options.handleRevert === true) {\n                return _this.options.handleRevert;\n            }\n            return this.constructor.handleRevert;\n        },\n        set: function(val) {\n            _this.options.handleRevert = val;\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, \"defaultCommon\", {\n        get: function() {\n            return _this.options.common || this.constructor.defaultCommon;\n        },\n        set: function(val) {\n            _this.options.common = val;\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, \"defaultHardfork\", {\n        get: function() {\n            return _this.options.hardfork || this.constructor.defaultHardfork;\n        },\n        set: function(val) {\n            _this.options.hardfork = val;\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, \"defaultChain\", {\n        get: function() {\n            return _this.options.chain || this.constructor.defaultChain;\n        },\n        set: function(val) {\n            _this.options.chain = val;\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, \"transactionPollingTimeout\", {\n        get: function() {\n            if (_this.options.transactionPollingTimeout === 0) {\n                return _this.options.transactionPollingTimeout;\n            }\n            return _this.options.transactionPollingTimeout || this.constructor.transactionPollingTimeout;\n        },\n        set: function(val) {\n            _this.options.transactionPollingTimeout = val;\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, \"transactionPollingInterval\", {\n        get: function() {\n            if (_this.options.transactionPollingInterval === 0) {\n                return _this.options.transactionPollingInterval;\n            }\n            return _this.options.transactionPollingInterval || this.constructor.transactionPollingInterval;\n        },\n        set: function(val) {\n            _this.options.transactionPollingInterval = val;\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, \"transactionConfirmationBlocks\", {\n        get: function() {\n            if (_this.options.transactionConfirmationBlocks === 0) {\n                return _this.options.transactionConfirmationBlocks;\n            }\n            return _this.options.transactionConfirmationBlocks || this.constructor.transactionConfirmationBlocks;\n        },\n        set: function(val) {\n            _this.options.transactionConfirmationBlocks = val;\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, \"transactionBlockTimeout\", {\n        get: function() {\n            if (_this.options.transactionBlockTimeout === 0) {\n                return _this.options.transactionBlockTimeout;\n            }\n            return _this.options.transactionBlockTimeout || this.constructor.transactionBlockTimeout;\n        },\n        set: function(val) {\n            _this.options.transactionBlockTimeout = val;\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, \"blockHeaderTimeout\", {\n        get: function() {\n            if (_this.options.blockHeaderTimeout === 0) {\n                return _this.options.blockHeaderTimeout;\n            }\n            return _this.options.blockHeaderTimeout || this.constructor.blockHeaderTimeout;\n        },\n        set: function(val) {\n            _this.options.blockHeaderTimeout = val;\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, \"defaultAccount\", {\n        get: function() {\n            return defaultAccount;\n        },\n        set: function(val) {\n            if (val) {\n                defaultAccount = utils.toChecksumAddress(formatters.inputAddressFormatter(val));\n            }\n            return val;\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, \"defaultBlock\", {\n        get: function() {\n            return defaultBlock;\n        },\n        set: function(val) {\n            defaultBlock = val;\n            return val;\n        },\n        enumerable: true\n    });\n    // properties\n    this.methods = {};\n    this.events = {};\n    this._address = null;\n    this._jsonInterface = [];\n    // set getter/setter properties\n    this.options.address = address;\n    this.options.jsonInterface = jsonInterface;\n};\n/**\n * Sets the new provider, creates a new requestManager, registers the \"data\" listener on the provider and sets the\n * accounts module for the Contract class.\n *\n * @method setProvider\n *\n * @param {string|provider} provider\n * @param {Accounts} accounts\n *\n * @returns void\n */ Contract.setProvider = function(provider, accounts) {\n    // Contract.currentProvider = provider;\n    core.packageInit(this, [\n        provider\n    ]);\n    this._ethAccounts = accounts;\n};\n/**\n * Get the callback and modify the array if necessary\n *\n * @method _getCallback\n * @param {Array} args\n * @return {Function} the callback\n */ Contract.prototype._getCallback = function getCallback(args) {\n    if (args && !!args[args.length - 1] && typeof args[args.length - 1] === \"function\") {\n        return args.pop(); // modify the args array!\n    }\n};\n/**\n * Checks that no listener with name \"newListener\" or \"removeListener\" is added.\n *\n * @method _checkListener\n * @param {String} type\n * @param {String} event\n * @return {Object} the contract instance\n */ Contract.prototype._checkListener = function(type, event) {\n    if (event === type) {\n        throw errors.ContractReservedEventError(type);\n    }\n};\n/**\n * Use default values, if options are not available\n *\n * @method _getOrSetDefaultOptions\n * @param {Object} options the options gived by the user\n * @return {Object} the options with gaps filled by defaults\n */ Contract.prototype._getOrSetDefaultOptions = function getOrSetDefaultOptions(options) {\n    var _options = {\n        ...options\n    };\n    var gasPrice = _options.gasPrice ? String(_options.gasPrice) : null;\n    var from = _options.from ? utils.toChecksumAddress(formatters.inputAddressFormatter(_options.from)) : null;\n    _options.data = _options.data || this.options.data;\n    _options.from = from || this.options.from;\n    _options.gasPrice = gasPrice || this.options.gasPrice;\n    _options.gas = _options.gas || _options.gasLimit || this.options.gas;\n    // TODO replace with only gasLimit?\n    delete _options.gasLimit;\n    return _options;\n};\n/**\n * Should be used to encode indexed params and options to one final object\n *\n * @method _encodeEventABI\n * @param {Object} event\n * @param {Object} options\n * @return {Object} everything combined together and encoded\n */ Contract.prototype._encodeEventABI = function(event, options) {\n    options = options || {};\n    var filter = options.filter || {}, result = {};\n    [\n        \"fromBlock\",\n        \"toBlock\"\n    ].filter(function(f) {\n        return options[f] !== undefined;\n    }).forEach(function(f) {\n        result[f] = formatters.inputBlockNumberFormatter(options[f]);\n    });\n    let topics = [];\n    if (options.topics && Array.isArray(options.topics)) {\n        topics = [\n            ...options.topics\n        ];\n    } else {\n        topics = [];\n        // add event signature\n        if (event && !event.anonymous && event.name !== \"ALLEVENTS\") {\n            topics.push(event.signature || abi.encodeEventSignature(utils.jsonInterfaceMethodToString(event)));\n        }\n        // add event topics (indexed arguments)\n        if (event.name !== \"ALLEVENTS\" && event.inputs) {\n            for (const input of event.inputs){\n                if (!input.indexed) {\n                    continue;\n                }\n                const value = filter[input.name];\n                if (!value) {\n                    // eslint-disable-next-line no-null/no-null\n                    topics.push(null);\n                    continue;\n                }\n                if (Array.isArray(value)) {\n                    topics.push(value.map((v)=>abi.encodeParameter(input.type, v)));\n                } else {\n                    topics.push(abi.encodeParameter(input.type, value));\n                }\n            }\n        }\n    }\n    if (topics.length) {\n        result.topics = topics;\n    }\n    if (this.options.address) {\n        result.address = this.options.address.toLowerCase();\n    }\n    return result;\n};\n/**\n * Should be used to decode indexed params and options\n *\n * @method _decodeEventABI\n * @param {Object} data\n * @return {Object} result object with decoded indexed && not indexed params\n */ Contract.prototype._decodeEventABI = function(data) {\n    var event = this;\n    data.data = data.data || \"\";\n    data.topics = data.topics || [];\n    var result = formatters.outputLogFormatter(data);\n    // if allEvents get the right event\n    if (event.name === \"ALLEVENTS\") {\n        event = event.jsonInterface.find(function(intf) {\n            return intf.signature === data.topics[0];\n        }) || {\n            anonymous: true\n        };\n    }\n    // create empty inputs if none are present (e.g. anonymous events on allEvents)\n    event.inputs = event.inputs || [];\n    // Handle case where an event signature shadows the current ABI with non-identical\n    // arg indexing. If # of topics doesn't match, event is anon.\n    if (!event.anonymous) {\n        let indexedInputs = 0;\n        event.inputs.forEach((input)=>input.indexed ? indexedInputs++ : null);\n        if (indexedInputs > 0 && data.topics.length !== indexedInputs + 1) {\n            event = {\n                anonymous: true,\n                inputs: []\n            };\n        }\n    }\n    var argTopics = event.anonymous ? data.topics : data.topics.slice(1);\n    result.returnValues = abi.decodeLog(event.inputs, data.data, argTopics);\n    delete result.returnValues.__length__;\n    // add name\n    result.event = event.name;\n    // add signature\n    result.signature = event.anonymous || !data.topics[0] ? null : data.topics[0];\n    // move the data and topics to \"raw\"\n    result.raw = {\n        data: result.data,\n        topics: result.topics\n    };\n    delete result.data;\n    delete result.topics;\n    return result;\n};\n/**\n * Encodes an ABI for a method, including signature or the method.\n * Or when constructor encodes only the constructor parameters.\n *\n * @method _encodeMethodABI\n * @param {Mixed} args the arguments to encode\n * @param {String} the encoded ABI\n */ Contract.prototype._encodeMethodABI = function _encodeMethodABI() {\n    var methodSignature = this._method.signature, args = this.arguments || [];\n    var signature = false, paramsABI = this._parent.options.jsonInterface.filter(function(json) {\n        return methodSignature === \"constructor\" && json.type === methodSignature || (json.signature === methodSignature || json.signature === methodSignature.replace(\"0x\", \"\") || json.name === methodSignature) && json.type === \"function\";\n    }).map(function(json) {\n        var inputLength = Array.isArray(json.inputs) ? json.inputs.length : 0;\n        if (inputLength !== args.length) {\n            throw new Error(\"The number of arguments is not matching the methods required number. You need to pass \" + inputLength + \" arguments.\");\n        }\n        if (json.type === \"function\") {\n            signature = json.signature;\n        }\n        return Array.isArray(json.inputs) ? json.inputs : [];\n    }).map(function(inputs) {\n        return abi.encodeParameters(inputs, args).replace(\"0x\", \"\");\n    })[0] || \"\";\n    // return constructor\n    if (methodSignature === \"constructor\") {\n        if (!this._deployData) throw new Error(\"The contract has no contract data option set. This is necessary to append the constructor parameters.\");\n        if (!this._deployData.startsWith(\"0x\")) {\n            this._deployData = \"0x\" + this._deployData;\n        }\n        return this._deployData + paramsABI;\n    }\n    // return method\n    var returnValue = signature ? signature + paramsABI : paramsABI;\n    if (!returnValue) {\n        throw new Error(\"Couldn't find a matching contract method named \\\"\" + this._method.name + '\".');\n    }\n    return returnValue;\n};\n/**\n * Decode method return values\n *\n * @method _decodeMethodReturn\n * @param {Array} outputs\n * @param {String} returnValues\n * @return {Object} decoded output return values\n */ Contract.prototype._decodeMethodReturn = function(outputs, returnValues) {\n    if (!returnValues) {\n        return null;\n    }\n    returnValues = returnValues.length >= 2 ? returnValues.slice(2) : returnValues;\n    var result = abi.decodeParameters(outputs, returnValues);\n    if (result.__length__ === 1) {\n        return result[0];\n    }\n    delete result.__length__;\n    return result;\n};\n/**\n * Deploys a contract and fire events based on its state: transactionHash, receipt\n *\n * All event listeners will be removed, once the last possible event is fired (\"error\", or \"receipt\")\n *\n * @method deploy\n * @param {Object} options\n * @param {Function} callback\n * @return {Object} EventEmitter possible events are \"error\", \"transactionHash\" and \"receipt\"\n */ Contract.prototype.deploy = function(options, callback) {\n    options = options || {};\n    options.arguments = options.arguments || [];\n    options = this._getOrSetDefaultOptions(options);\n    // throw error, if no \"data\" is specified\n    if (!options.data) {\n        if (typeof callback === \"function\") {\n            return callback(errors.ContractMissingDeployDataError());\n        }\n        throw errors.ContractMissingDeployDataError();\n    }\n    var constructor = this.options.jsonInterface.find((method)=>{\n        return method.type === \"constructor\";\n    }) || {};\n    constructor.signature = \"constructor\";\n    return this._createTxObject.apply({\n        method: constructor,\n        parent: this,\n        deployData: options.data,\n        _ethAccounts: this.constructor._ethAccounts\n    }, options.arguments);\n};\n/**\n * Gets the event signature and outputFormatters\n *\n * @method _generateEventOptions\n * @param {Object} event\n * @param {Object} options\n * @param {Function} callback\n * @return {Object} the event options object\n */ Contract.prototype._generateEventOptions = function() {\n    var args = Array.prototype.slice.call(arguments);\n    // get the callback\n    var callback = this._getCallback(args);\n    // get the options\n    var options = (!!args[args.length - 1] && typeof args[args.length - 1]) === \"object\" ? args.pop() : {};\n    var eventName = typeof args[0] === \"string\" ? args[0] : \"allevents\";\n    var event = eventName.toLowerCase() === \"allevents\" ? {\n        name: \"ALLEVENTS\",\n        jsonInterface: this.options.jsonInterface\n    } : this.options.jsonInterface.find(function(json) {\n        return json.type === \"event\" && (json.name === eventName || json.signature === \"0x\" + eventName.replace(\"0x\", \"\"));\n    });\n    if (!event) {\n        throw errors.ContractEventDoesNotExistError(eventName);\n    }\n    if (!utils.isAddress(this.options.address)) {\n        throw errors.ContractNoAddressDefinedError();\n    }\n    return {\n        params: this._encodeEventABI(event, options),\n        event: event,\n        filter: options.filter || {},\n        callback: callback\n    };\n};\n/**\n * Adds event listeners and creates a subscription, and remove it once its fired.\n *\n * @method clone\n * @return {Object} the event subscription\n */ Contract.prototype.clone = function() {\n    return new this.constructor(this.options.jsonInterface, this.options.address, this.options);\n};\n/**\n * Adds event listeners and creates a subscription, and remove it once its fired.\n *\n * @method once\n * @param {String} event\n * @param {Object} options\n * @param {Function} callback\n * @return {Object} the event subscription\n */ Contract.prototype.once = function(event, options, callback) {\n    var args = Array.prototype.slice.call(arguments);\n    // get the callback\n    callback = this._getCallback(args);\n    if (!callback) {\n        throw errors.ContractOnceRequiresCallbackError();\n    }\n    // don't allow fromBlock\n    if (options) delete options.fromBlock;\n    // don't return as once shouldn't provide \"on\"\n    this._on(event, options, function(err, res, sub) {\n        sub.unsubscribe();\n        if (typeof callback === \"function\") {\n            callback(err, res, sub);\n        }\n    });\n    return undefined;\n};\n/**\n * Adds event listeners and creates a subscription.\n *\n * @method _on\n *\n * @param {String} event\n * @param {Object} options\n * @param {Function} callback\n *\n * @return {Object} the event subscription\n */ Contract.prototype._on = function() {\n    var subOptions = this._generateEventOptions.apply(this, arguments);\n    if (subOptions.params && subOptions.params.toBlock) {\n        delete subOptions.params.toBlock;\n        console.warn(\"Invalid option: toBlock. Use getPastEvents for specific range.\");\n    }\n    // prevent the event \"newListener\" and \"removeListener\" from being overwritten\n    this._checkListener(\"newListener\", subOptions.event.name);\n    this._checkListener(\"removeListener\", subOptions.event.name);\n    // TODO check if listener already exists? and reuse subscription if options are the same.\n    // create new subscription\n    var subscription = new Subscription({\n        subscription: {\n            params: 1,\n            inputFormatter: [\n                formatters.inputLogFormatter\n            ],\n            outputFormatter: this._decodeEventABI.bind(subOptions.event),\n            // DUBLICATE, also in web3-eth\n            subscriptionHandler: function(output) {\n                if (output.removed) {\n                    this.emit(\"changed\", output);\n                } else {\n                    this.emit(\"data\", output);\n                }\n                if (typeof this.callback === \"function\") {\n                    this.callback(null, output, this);\n                }\n            }\n        },\n        type: \"eth\",\n        requestManager: this._requestManager\n    });\n    subscription.subscribe(\"logs\", subOptions.params, subOptions.callback || function() {});\n    return subscription;\n};\nconst filterAllEventsResults = (subOptions, data)=>{\n    if (subOptions.event && subOptions.event.name === \"ALLEVENTS\" && Array.isArray(data)) {\n        const filter = subOptions.filter || {};\n        const filterKeys = Object.keys(filter);\n        return filterKeys.length > 0 ? data.filter((log)=>typeof log === \"string\" ? true : filterKeys.every((k)=>Array.isArray(filter[k]) ? filter[k].some((v)=>String(log.returnValues[k]).toUpperCase() === String(v).toUpperCase()) : String(log.returnValues[k]).toUpperCase() === String(filter[k]).toUpperCase())) : data;\n    }\n    return data;\n};\n/**\n * Get past events from contracts\n *\n * @method getPastEvents\n * @param {String} event\n * @param {Object} options\n * @param {Function} callback\n * @return {Object} the promievent\n */ Contract.prototype.getPastEvents = function() {\n    var subOptions = this._generateEventOptions.apply(this, arguments);\n    var getPastLogs = new Method({\n        name: \"getPastLogs\",\n        call: \"eth_getLogs\",\n        params: 1,\n        inputFormatter: [\n            formatters.inputLogFormatter\n        ],\n        outputFormatter: this._decodeEventABI.bind(subOptions.event)\n    });\n    getPastLogs.setRequestManager(this._requestManager);\n    var call = getPastLogs.buildCall();\n    getPastLogs = null;\n    return call(subOptions.params, (err, data)=>{\n        if (typeof subOptions.callback === \"function\") {\n            subOptions.callback(err, filterAllEventsResults(subOptions, data));\n        }\n    }).then(filterAllEventsResults.bind(this, subOptions));\n};\n/**\n * returns the an object with call, send, estimate functions\n *\n * @method _createTxObject\n * @returns {Object} an object with functions to call the methods\n */ Contract.prototype._createTxObject = function _createTxObject() {\n    var args = Array.prototype.slice.call(arguments);\n    var txObject = {};\n    if (this.method.type === \"function\") {\n        txObject.call = this.parent._executeMethod.bind(txObject, \"call\");\n        txObject.call.request = this.parent._executeMethod.bind(txObject, \"call\", true); // to make batch requests\n    }\n    txObject.send = this.parent._executeMethod.bind(txObject, \"send\");\n    txObject.send.request = this.parent._executeMethod.bind(txObject, \"send\", true); // to make batch requests\n    txObject.encodeABI = this.parent._encodeMethodABI.bind(txObject);\n    txObject.estimateGas = this.parent._executeMethod.bind(txObject, \"estimate\");\n    txObject.createAccessList = this.parent._executeMethod.bind(txObject, \"createAccessList\");\n    if (args && this.method.inputs && args.length !== this.method.inputs.length) {\n        if (this.nextMethod) {\n            return this.nextMethod.apply(null, args);\n        }\n        throw errors.InvalidNumberOfParams(args.length, this.method.inputs.length, this.method.name);\n    }\n    txObject.arguments = args || [];\n    txObject._method = this.method;\n    txObject._parent = this.parent;\n    txObject._ethAccounts = this.parent.constructor._ethAccounts || this._ethAccounts;\n    if (this.deployData) {\n        txObject._deployData = this.deployData;\n    }\n    return txObject;\n};\n/**\n * Generates the options for the execute call\n *\n * @method _processExecuteArguments\n * @param {Array} args\n * @param {Promise} defer\n */ Contract.prototype._processExecuteArguments = function _processExecuteArguments(args, defer) {\n    var processedArgs = {};\n    processedArgs.type = args.shift();\n    // get the callback\n    processedArgs.callback = this._parent._getCallback(args);\n    // get block number to use for call\n    if (processedArgs.type === \"call\" && args[args.length - 1] !== true && (typeof args[args.length - 1] === \"string\" || isFinite(args[args.length - 1]))) processedArgs.defaultBlock = args.pop();\n    // get the options\n    processedArgs.options = (!!args[args.length - 1] && typeof args[args.length - 1]) === \"object\" ? args.pop() : {};\n    // get the generateRequest argument for batch requests\n    processedArgs.generateRequest = args[args.length - 1] === true ? args.pop() : false;\n    processedArgs.options = this._parent._getOrSetDefaultOptions(processedArgs.options);\n    processedArgs.options.data = this.encodeABI();\n    // add contract address\n    if (!this._deployData && !utils.isAddress(this._parent.options.address)) throw errors.ContractNoAddressDefinedError();\n    if (!this._deployData) processedArgs.options.to = this._parent.options.address;\n    // return error, if no \"data\" is specified\n    if (!processedArgs.options.data) return utils._fireError(new Error(\"Couldn't find a matching contract method, or the number of parameters is wrong.\"), defer.eventEmitter, defer.reject, processedArgs.callback);\n    return processedArgs;\n};\n/**\n * Executes a call, transact or estimateGas on a contract function\n *\n * @method _executeMethod\n * @param {String} type the type this execute function should execute\n * @param {Boolean} makeRequest if true, it simply returns the request parameters, rather than executing it\n */ Contract.prototype._executeMethod = function _executeMethod() {\n    var _this = this, args = this._parent._processExecuteArguments.call(this, Array.prototype.slice.call(arguments), defer), defer = promiEvent(args.type !== \"send\"), ethAccounts = _this.constructor._ethAccounts || _this._ethAccounts;\n    // simple return request for batch requests\n    if (args.generateRequest) {\n        var payload = {\n            params: [\n                formatters.inputCallFormatter.call(this._parent, args.options)\n            ],\n            callback: args.callback\n        };\n        if (args.type === \"call\") {\n            payload.params.push(formatters.inputDefaultBlockNumberFormatter.call(this._parent, args.defaultBlock));\n            payload.method = \"eth_call\";\n            payload.format = this._parent._decodeMethodReturn.bind(null, this._method.outputs);\n        } else {\n            payload.method = \"eth_sendTransaction\";\n        }\n        return payload;\n    }\n    switch(args.type){\n        case \"createAccessList\":\n            // return error, if no \"from\" is specified\n            if (!utils.isAddress(args.options.from)) {\n                return utils._fireError(errors.ContractNoFromAddressDefinedError(), defer.eventEmitter, defer.reject, args.callback);\n            }\n            var createAccessList = new Method({\n                name: \"createAccessList\",\n                call: \"eth_createAccessList\",\n                params: 2,\n                inputFormatter: [\n                    formatters.inputTransactionFormatter,\n                    formatters.inputDefaultBlockNumberFormatter\n                ],\n                requestManager: _this._parent._requestManager,\n                accounts: ethAccounts,\n                defaultAccount: _this._parent.defaultAccount,\n                defaultBlock: _this._parent.defaultBlock\n            }).createFunction();\n            return createAccessList(args.options, args.callback);\n        case \"estimate\":\n            var estimateGas = new Method({\n                name: \"estimateGas\",\n                call: \"eth_estimateGas\",\n                params: 1,\n                inputFormatter: [\n                    formatters.inputCallFormatter\n                ],\n                outputFormatter: utils.hexToNumber,\n                requestManager: _this._parent._requestManager,\n                accounts: ethAccounts,\n                defaultAccount: _this._parent.defaultAccount,\n                defaultBlock: _this._parent.defaultBlock\n            }).createFunction();\n            return estimateGas(args.options, args.callback);\n        case \"call\":\n            // TODO check errors: missing \"from\" should give error on deploy and send, call ?\n            var call = new Method({\n                name: \"call\",\n                call: \"eth_call\",\n                params: 2,\n                inputFormatter: [\n                    formatters.inputCallFormatter,\n                    formatters.inputDefaultBlockNumberFormatter\n                ],\n                // add output formatter for decoding\n                outputFormatter: function(result) {\n                    return _this._parent._decodeMethodReturn(_this._method.outputs, result);\n                },\n                requestManager: _this._parent._requestManager,\n                accounts: ethAccounts,\n                defaultAccount: _this._parent.defaultAccount,\n                defaultBlock: _this._parent.defaultBlock,\n                handleRevert: _this._parent.handleRevert,\n                abiCoder: abi\n            }).createFunction();\n            return call(args.options, args.defaultBlock, args.callback);\n        case \"send\":\n            // return error, if no \"from\" is specified\n            if (!utils.isAddress(args.options.from)) {\n                return utils._fireError(errors.ContractNoFromAddressDefinedError(), defer.eventEmitter, defer.reject, args.callback);\n            }\n            if (typeof this._method.payable === \"boolean\" && !this._method.payable && args.options.value && args.options.value > 0) {\n                return utils._fireError(new Error(\"Can not send value to non-payable contract method or constructor\"), defer.eventEmitter, defer.reject, args.callback);\n            }\n            // make sure receipt logs are decoded\n            var extraFormatters = {\n                receiptFormatter: function(receipt) {\n                    if (Array.isArray(receipt.logs)) {\n                        // decode logs\n                        var events = receipt.logs.map((log)=>{\n                            return _this._parent._decodeEventABI.call({\n                                name: \"ALLEVENTS\",\n                                jsonInterface: _this._parent.options.jsonInterface\n                            }, log);\n                        });\n                        // make log names keys\n                        receipt.events = {};\n                        var count = 0;\n                        events.forEach(function(ev) {\n                            if (ev.event) {\n                                // if > 1 of the same event, don't overwrite any existing events\n                                if (receipt.events[ev.event]) {\n                                    if (Array.isArray(receipt.events[ev.event])) {\n                                        receipt.events[ev.event].push(ev);\n                                    } else {\n                                        receipt.events[ev.event] = [\n                                            receipt.events[ev.event],\n                                            ev\n                                        ];\n                                    }\n                                } else {\n                                    receipt.events[ev.event] = ev;\n                                }\n                            } else {\n                                receipt.events[count] = ev;\n                                count++;\n                            }\n                        });\n                        delete receipt.logs;\n                    }\n                    return receipt;\n                },\n                contractDeployFormatter: function(receipt) {\n                    var newContract = _this._parent.clone();\n                    newContract.options.address = receipt.contractAddress;\n                    return newContract;\n                }\n            };\n            var sendTransaction = new Method({\n                name: \"sendTransaction\",\n                call: \"eth_sendTransaction\",\n                params: 1,\n                inputFormatter: [\n                    formatters.inputTransactionFormatter\n                ],\n                requestManager: _this._parent._requestManager,\n                accounts: _this.constructor._ethAccounts || _this._ethAccounts,\n                defaultAccount: _this._parent.defaultAccount,\n                defaultBlock: _this._parent.defaultBlock,\n                transactionBlockTimeout: _this._parent.transactionBlockTimeout,\n                transactionConfirmationBlocks: _this._parent.transactionConfirmationBlocks,\n                transactionPollingTimeout: _this._parent.transactionPollingTimeout,\n                transactionPollingInterval: _this._parent.transactionPollingInterval,\n                defaultCommon: _this._parent.defaultCommon,\n                defaultChain: _this._parent.defaultChain,\n                defaultHardfork: _this._parent.defaultHardfork,\n                handleRevert: _this._parent.handleRevert,\n                extraFormatters: extraFormatters,\n                abiCoder: abi\n            }).createFunction();\n            return sendTransaction(args.options, args.callback);\n        default:\n            throw new Error('Method \"' + args.type + '\" not implemented.');\n    }\n};\nmodule.exports = Contract;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-eth-contract/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-eth-ens/lib/ENS.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/node_modules/web3-eth-ens/lib/ENS.js ***!
  \******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*\n    This file is part of web3.js.\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ /**\n * @file ENS.js\n *\n * @author Samuel Furter <samuel@ethereum.org>\n * @date 2018\n */ \nvar config = __webpack_require__(/*! ./config */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-eth-ens/lib/config.js\");\nvar formatters = (__webpack_require__(/*! web3-core-helpers */ \"(ssr)/./node_modules/web3-core-helpers/lib/index.js\").formatters);\nvar utils = __webpack_require__(/*! web3-utils */ \"(ssr)/./node_modules/web3-utils/lib/index.js\");\nvar Registry = __webpack_require__(/*! ./contracts/Registry */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-eth-ens/lib/contracts/Registry.js\");\nvar ResolverMethodHandler = __webpack_require__(/*! ./lib/ResolverMethodHandler */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-eth-ens/lib/lib/ResolverMethodHandler.js\");\nvar contenthash = __webpack_require__(/*! ./lib/contentHash */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-eth-ens/lib/lib/contentHash.js\");\n/**\n * Constructs a new instance of ENS\n *\n * @param {Eth} eth\n *\n * @constructor\n */ function ENS(eth) {\n    this.eth = eth;\n    var registryAddress = null;\n    this._detectedAddress = null;\n    this._lastSyncCheck = null;\n    Object.defineProperty(this, \"registry\", {\n        get: function() {\n            return new Registry(this);\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, \"resolverMethodHandler\", {\n        get: function() {\n            return new ResolverMethodHandler(this.registry);\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, \"registryAddress\", {\n        get: function() {\n            return registryAddress;\n        },\n        set: function(value) {\n            if (value === null) {\n                registryAddress = value;\n                return;\n            }\n            registryAddress = formatters.inputAddressFormatter(value);\n        },\n        enumerable: true\n    });\n}\n/**\n * Returns true if the given interfaceId is supported and otherwise false.\n *\n * @method supportsInterface\n *\n * @param {string} name\n * @param {string} interfaceId\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<boolean>}\n */ ENS.prototype.supportsInterface = function(name, interfaceId, callback) {\n    return this.getResolver(name).then(function(resolver) {\n        if (!utils.isHexStrict(interfaceId)) {\n            interfaceId = utils.sha3(interfaceId).slice(0, 10);\n        }\n        return resolver.methods.supportsInterface(interfaceId).call(callback);\n    }).catch(function(error) {\n        if (typeof callback === \"function\") {\n            callback(error, null);\n            return;\n        }\n        throw error;\n    });\n};\n/**\n * Returns the Resolver by the given address\n *\n * @deprecated Please use the \"getResolver\" method instead of \"resolver\"\n *\n * @method resolver\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<Contract>}\n */ ENS.prototype.resolver = function(name, callback) {\n    return this.registry.resolver(name, callback);\n};\n/**\n * Returns the Resolver by the given address\n *\n * @method getResolver\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<Contract>}\n */ ENS.prototype.getResolver = function(name, callback) {\n    return this.registry.getResolver(name, callback);\n};\n/**\n * Does set the resolver of the given name\n *\n * @method setResolver\n *\n * @param {string} name\n * @param {string} address\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */ ENS.prototype.setResolver = function(name, address, txConfig, callback) {\n    return this.registry.setResolver(name, address, txConfig, callback);\n};\n/**\n * Sets the owner, resolver, and TTL for an ENS record in a single operation.\n *\n * @method setRecord\n *\n * @param {string} name\n * @param {string} owner\n * @param {string} resolver\n * @param {string | number} ttl\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */ ENS.prototype.setRecord = function(name, owner, resolver, ttl, txConfig, callback) {\n    return this.registry.setRecord(name, owner, resolver, ttl, txConfig, callback);\n};\n/**\n * Sets the owner, resolver and TTL for a subdomain, creating it if necessary.\n *\n * @method setSubnodeRecord\n *\n * @param {string} name\n * @param {string} label\n * @param {string} owner\n * @param {string} resolver\n * @param {string | number} ttl\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */ ENS.prototype.setSubnodeRecord = function(name, label, owner, resolver, ttl, txConfig, callback) {\n    return this.registry.setSubnodeRecord(name, label, owner, resolver, ttl, txConfig, callback);\n};\n/**\n * Sets or clears an approval by the given operator.\n *\n * @method setApprovalForAll\n *\n * @param {string} operator\n * @param {boolean} approved\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */ ENS.prototype.setApprovalForAll = function(operator, approved, txConfig, callback) {\n    return this.registry.setApprovalForAll(operator, approved, txConfig, callback);\n};\n/**\n * Returns true if the operator is approved\n *\n * @method isApprovedForAll\n *\n * @param {string} owner\n * @param {string} operator\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<boolean>}\n */ ENS.prototype.isApprovedForAll = function(owner, operator, callback) {\n    return this.registry.isApprovedForAll(owner, operator, callback);\n};\n/**\n * Returns true if the record exists\n *\n * @method recordExists\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<boolean>}\n */ ENS.prototype.recordExists = function(name, callback) {\n    return this.registry.recordExists(name, callback);\n};\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method setSubnodeOwner\n *\n * @param {string} name\n * @param {string} label\n * @param {string} address\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */ ENS.prototype.setSubnodeOwner = function(name, label, address, txConfig, callback) {\n    return this.registry.setSubnodeOwner(name, label, address, txConfig, callback);\n};\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method getTTL\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */ ENS.prototype.getTTL = function(name, callback) {\n    return this.registry.getTTL(name, callback);\n};\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method setTTL\n *\n * @param {string} name\n * @param {number} ttl\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */ ENS.prototype.setTTL = function(name, ttl, txConfig, callback) {\n    return this.registry.setTTL(name, ttl, txConfig, callback);\n};\n/**\n * Returns the owner by the given name and current configured or detected Registry\n *\n * @method getOwner\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */ ENS.prototype.getOwner = function(name, callback) {\n    return this.registry.getOwner(name, callback);\n};\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method setOwner\n *\n * @param {string} name\n * @param {string} address\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */ ENS.prototype.setOwner = function(name, address, txConfig, callback) {\n    return this.registry.setOwner(name, address, txConfig, callback);\n};\n/**\n * Returns the address record associated with a name.\n *\n * @method getAddress\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */ ENS.prototype.getAddress = function(name, callback) {\n    return this.resolverMethodHandler.method(name, \"addr\", []).call(callback);\n};\n/**\n * Sets a new address\n *\n * @method setAddress\n *\n * @param {string} name\n * @param {string} address\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */ ENS.prototype.setAddress = function(name, address, txConfig, callback) {\n    return this.resolverMethodHandler.method(name, \"setAddr\", [\n        address\n    ]).send(txConfig, callback);\n};\n/**\n * Returns the public key\n *\n * @method getPubkey\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */ ENS.prototype.getPubkey = function(name, callback) {\n    return this.resolverMethodHandler.method(name, \"pubkey\", [], null, callback).call(callback);\n};\n/**\n * Set the new public key\n *\n * @method setPubkey\n *\n * @param {string} name\n * @param {string} x\n * @param {string} y\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */ ENS.prototype.setPubkey = function(name, x, y, txConfig, callback) {\n    return this.resolverMethodHandler.method(name, \"setPubkey\", [\n        x,\n        y\n    ]).send(txConfig, callback);\n};\n/**\n * Returns the content\n *\n * @method getContent\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */ ENS.prototype.getContent = function(name, callback) {\n    return this.resolverMethodHandler.method(name, \"content\", []).call(callback);\n};\n/**\n * Set the content\n *\n * @method setContent\n *\n * @param {string} name\n * @param {string} hash\n * @param {function} callback\n * @param {TransactionConfig} txConfig\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */ ENS.prototype.setContent = function(name, hash, txConfig, callback) {\n    return this.resolverMethodHandler.method(name, \"setContent\", [\n        hash\n    ]).send(txConfig, callback);\n};\n/**\n * Returns the contenthash\n *\n * @method getContenthash\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<ContentHash>}\n */ ENS.prototype.getContenthash = function(name, callback) {\n    return this.resolverMethodHandler.method(name, \"contenthash\", [], contenthash.decode).call(callback);\n};\n/**\n * Set the contenthash\n *\n * @method setContent\n *\n * @param {string} name\n * @param {string} hash\n * @param {function} callback\n * @param {TransactionConfig} txConfig\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */ ENS.prototype.setContenthash = function(name, hash, txConfig, callback) {\n    var encoded;\n    try {\n        encoded = contenthash.encode(hash);\n    } catch (err) {\n        var error = new Error(\"Could not encode \" + hash + \". See docs for supported hash protocols.\");\n        if (typeof callback === \"function\") {\n            callback(error, null);\n            return;\n        }\n        throw error;\n    }\n    return this.resolverMethodHandler.method(name, \"setContenthash\", [\n        encoded\n    ]).send(txConfig, callback);\n};\n/**\n * Get the multihash\n *\n * @method getMultihash\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */ ENS.prototype.getMultihash = function(name, callback) {\n    return this.resolverMethodHandler.method(name, \"multihash\", []).call(callback);\n};\n/**\n * Set the multihash\n *\n * @method setMultihash\n *\n * @param {string} name\n * @param {string} hash\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */ ENS.prototype.setMultihash = function(name, hash, txConfig, callback) {\n    return this.resolverMethodHandler.method(name, \"multihash\", [\n        hash\n    ]).send(txConfig, callback);\n};\n/**\n * Checks if the current used network is synced and looks for ENS support there.\n * Throws an error if not.\n *\n * @returns {Promise<string>}\n */ ENS.prototype.checkNetwork = async function() {\n    var now = new Date() / 1000;\n    if (!this._lastSyncCheck || now - this._lastSyncCheck > 3600) {\n        var block = await this.eth.getBlock(\"latest\");\n        var headAge = now - block.timestamp;\n        if (headAge > 3600) {\n            throw new Error(\"Network not synced; last block was \" + headAge + \" seconds ago\");\n        }\n        this._lastSyncCheck = now;\n    }\n    if (this.registryAddress) {\n        return this.registryAddress;\n    }\n    if (!this._detectedAddress) {\n        var networkType = await this.eth.net.getNetworkType();\n        var addr = config.addresses[networkType];\n        if (typeof addr === \"undefined\") {\n            throw new Error(\"ENS is not supported on network \" + networkType);\n        }\n        this._detectedAddress = addr;\n        return this._detectedAddress;\n    }\n    return this._detectedAddress;\n};\nmodule.exports = ENS;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-eth-ens/lib/ENS.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-eth-ens/lib/config.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/node_modules/web3-eth-ens/lib/config.js ***!
  \*********************************************************************************/
/***/ ((module) => {

"use strict";
eval("/*\n    This file is part of web3.js.\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ /**\n * @file config.js\n *\n * @author Samuel Furter <samuel@ethereum.org>\n * @date 2017\n */ \n/**\n * Source: https://docs.ens.domains/ens-deployments\n *\n * @type {{addresses: {main: string, rinkeby: string, goerli: string, ropsten: string}}}\n */ var config = {\n    addresses: {\n        main: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n        ropsten: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n        rinkeby: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n        goerli: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\"\n    },\n    // These ids obtained at ensdomains docs:\n    // https://docs.ens.domains/contract-developer-guide/writing-a-resolver\n    interfaceIds: {\n        addr: \"0x3b3b57de\",\n        setAddr: \"0x3b3b57de\",\n        pubkey: \"0xc8690233\",\n        setPubkey: \"0xc8690233\",\n        contenthash: \"0xbc1c58d1\",\n        setContenthash: \"0xbc1c58d1\",\n        content: \"0xd8389dc5\",\n        setContent: \"0xd8389dc5\"\n    }\n};\nmodule.exports = config;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL25vZGVfbW9kdWxlcy93ZWIzLWV0aC1lbnMvbGliL2NvbmZpZy5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7O0FBWUEsR0FDQTs7Ozs7Q0FLQyxHQUNZO0FBQ2I7Ozs7Q0FJQyxHQUNELElBQUlBLFNBQVM7SUFDVEMsV0FBVztRQUNQQyxNQUFNO1FBQ05DLFNBQVM7UUFDVEMsU0FBUztRQUNUQyxRQUFRO0lBQ1o7SUFDQSx5Q0FBeUM7SUFDekMsdUVBQXVFO0lBQ3ZFQyxjQUFjO1FBQ1ZDLE1BQU07UUFDTkMsU0FBUztRQUNUQyxRQUFRO1FBQ1JDLFdBQVc7UUFDWEMsYUFBYTtRQUNiQyxnQkFBZ0I7UUFDaEJDLFNBQVM7UUFDVEMsWUFBWTtJQUNoQjtBQUNKO0FBQ0FDLE9BQU9DLE9BQU8sR0FBR2hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL25vZGVfbW9kdWxlcy93ZWIzLWV0aC1lbnMvbGliL2NvbmZpZy5qcz81YTQwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gICAgVGhpcyBmaWxlIGlzIHBhcnQgb2Ygd2ViMy5qcy5cbiAgICB3ZWIzLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAgICB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gICAgd2ViMy5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICAgIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICAgIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICAgIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICAgIGFsb25nIHdpdGggd2ViMy5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiovXG4vKipcbiAqIEBmaWxlIGNvbmZpZy5qc1xuICpcbiAqIEBhdXRob3IgU2FtdWVsIEZ1cnRlciA8c2FtdWVsQGV0aGVyZXVtLm9yZz5cbiAqIEBkYXRlIDIwMTdcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIFNvdXJjZTogaHR0cHM6Ly9kb2NzLmVucy5kb21haW5zL2Vucy1kZXBsb3ltZW50c1xuICpcbiAqIEB0eXBlIHt7YWRkcmVzc2VzOiB7bWFpbjogc3RyaW5nLCByaW5rZWJ5OiBzdHJpbmcsIGdvZXJsaTogc3RyaW5nLCByb3BzdGVuOiBzdHJpbmd9fX1cbiAqL1xudmFyIGNvbmZpZyA9IHtcbiAgICBhZGRyZXNzZXM6IHtcbiAgICAgICAgbWFpbjogXCIweDAwMDAwMDAwMDAwQzJFMDc0ZUM2OUEwZEZiMjk5N0JBNkM3ZDJlMWVcIixcbiAgICAgICAgcm9wc3RlbjogXCIweDAwMDAwMDAwMDAwQzJFMDc0ZUM2OUEwZEZiMjk5N0JBNkM3ZDJlMWVcIixcbiAgICAgICAgcmlua2VieTogXCIweDAwMDAwMDAwMDAwQzJFMDc0ZUM2OUEwZEZiMjk5N0JBNkM3ZDJlMWVcIixcbiAgICAgICAgZ29lcmxpOiBcIjB4MDAwMDAwMDAwMDBDMkUwNzRlQzY5QTBkRmIyOTk3QkE2QzdkMmUxZVwiXG4gICAgfSxcbiAgICAvLyBUaGVzZSBpZHMgb2J0YWluZWQgYXQgZW5zZG9tYWlucyBkb2NzOlxuICAgIC8vIGh0dHBzOi8vZG9jcy5lbnMuZG9tYWlucy9jb250cmFjdC1kZXZlbG9wZXItZ3VpZGUvd3JpdGluZy1hLXJlc29sdmVyXG4gICAgaW50ZXJmYWNlSWRzOiB7XG4gICAgICAgIGFkZHI6IFwiMHgzYjNiNTdkZVwiLFxuICAgICAgICBzZXRBZGRyOiBcIjB4M2IzYjU3ZGVcIixcbiAgICAgICAgcHVia2V5OiBcIjB4Yzg2OTAyMzNcIixcbiAgICAgICAgc2V0UHVia2V5OiBcIjB4Yzg2OTAyMzNcIixcbiAgICAgICAgY29udGVudGhhc2g6IFwiMHhiYzFjNThkMVwiLFxuICAgICAgICBzZXRDb250ZW50aGFzaDogXCIweGJjMWM1OGQxXCIsXG4gICAgICAgIGNvbnRlbnQ6IFwiMHhkODM4OWRjNVwiLFxuICAgICAgICBzZXRDb250ZW50OiBcIjB4ZDgzODlkYzVcIlxuICAgIH1cbn07XG5tb2R1bGUuZXhwb3J0cyA9IGNvbmZpZztcbiJdLCJuYW1lcyI6WyJjb25maWciLCJhZGRyZXNzZXMiLCJtYWluIiwicm9wc3RlbiIsInJpbmtlYnkiLCJnb2VybGkiLCJpbnRlcmZhY2VJZHMiLCJhZGRyIiwic2V0QWRkciIsInB1YmtleSIsInNldFB1YmtleSIsImNvbnRlbnRoYXNoIiwic2V0Q29udGVudGhhc2giLCJjb250ZW50Iiwic2V0Q29udGVudCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-eth-ens/lib/config.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-eth-ens/lib/contracts/Registry.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/node_modules/web3-eth-ens/lib/contracts/Registry.js ***!
  \*********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*\n    This file is part of web3.js.\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ /**\n * @file Registry.js\n *\n * @author Samuel Furter <samuel@ethereum.org>\n * @date 2018\n */ \nvar Contract = __webpack_require__(/*! web3-eth-contract */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-eth-contract/lib/index.js\");\nvar namehash = __webpack_require__(/*! eth-ens-namehash */ \"(ssr)/./node_modules/eth-ens-namehash/index.js\");\nvar PromiEvent = __webpack_require__(/*! web3-core-promievent */ \"(ssr)/./node_modules/web3-core-promievent/lib/index.js\");\nvar formatters = (__webpack_require__(/*! web3-core-helpers */ \"(ssr)/./node_modules/web3-core-helpers/lib/index.js\").formatters);\nvar utils = __webpack_require__(/*! web3-utils */ \"(ssr)/./node_modules/web3-utils/lib/index.js\");\nvar REGISTRY_ABI = __webpack_require__(/*! ../resources/ABI/Registry */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-eth-ens/lib/resources/ABI/Registry.js\");\nvar RESOLVER_ABI = __webpack_require__(/*! ../resources/ABI/Resolver */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-eth-ens/lib/resources/ABI/Resolver.js\");\n/**\n * A wrapper around the ENS registry contract.\n *\n * @method Registry\n * @param {Ens} ens\n * @constructor\n */ function Registry(ens) {\n    var self = this;\n    this.ens = ens;\n    this.contract = ens.checkNetwork().then(function(address) {\n        var contract = new Contract(REGISTRY_ABI, address);\n        contract.setProvider(self.ens.eth.currentProvider);\n        return contract;\n    });\n}\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @deprecated Please use the \"getOwner\" method instead of \"owner\"\n *\n * @method owner\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<string>}\n */ Registry.prototype.owner = function(name, callback) {\n    console.warn('Deprecated: Please use the \"getOwner\" method instead of \"owner\".');\n    return this.getOwner(name, callback);\n};\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method getOwner\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<string>}\n */ Registry.prototype.getOwner = function(name, callback) {\n    var promiEvent = new PromiEvent(true);\n    this.contract.then(function(contract) {\n        return contract.methods.owner(namehash.hash(name)).call();\n    }).then(function(receipt) {\n        if (typeof callback === \"function\") {\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n            callback(receipt, receipt);\n            return;\n        }\n        promiEvent.resolve(receipt);\n    }).catch(function(error) {\n        if (typeof callback === \"function\") {\n            callback(error, null);\n            return;\n        }\n        promiEvent.reject(error);\n    });\n    return promiEvent.eventEmitter;\n};\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method setOwner\n *\n * @param {string} name\n * @param {string} address\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */ Registry.prototype.setOwner = function(name, address, txConfig, callback) {\n    var promiEvent = new PromiEvent(true);\n    this.contract.then(function(contract) {\n        return contract.methods.setOwner(namehash.hash(name), formatters.inputAddressFormatter(address)).send(txConfig);\n    }).then(function(receipt) {\n        if (typeof callback === \"function\") {\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n            callback(receipt, receipt);\n            return;\n        }\n        promiEvent.resolve(receipt);\n    }).catch(function(error) {\n        if (typeof callback === \"function\") {\n            callback(error, null);\n            return;\n        }\n        promiEvent.reject(error);\n    });\n    return promiEvent.eventEmitter;\n};\n/**\n * Returns the TTL of the given node by his name\n *\n * @method getTTL\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returnss {Promise<string>}\n */ Registry.prototype.getTTL = function(name, callback) {\n    var promiEvent = new PromiEvent(true);\n    this.contract.then(function(contract) {\n        return contract.methods.ttl(namehash.hash(name)).call();\n    }).then(function(receipt) {\n        if (typeof callback === \"function\") {\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n            callback(receipt, receipt);\n            return;\n        }\n        promiEvent.resolve(receipt);\n    }).catch(function(error) {\n        if (typeof callback === \"function\") {\n            callback(error, null);\n            return;\n        }\n        promiEvent.reject(error);\n    });\n    return promiEvent.eventEmitter;\n};\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method setTTL\n *\n * @param {string} name\n * @param {number} ttl\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */ Registry.prototype.setTTL = function(name, ttl, txConfig, callback) {\n    var promiEvent = new PromiEvent(true);\n    this.contract.then(function(contract) {\n        return contract.methods.setTTL(namehash.hash(name), ttl).send(txConfig);\n    }).then(function(receipt) {\n        if (typeof callback === \"function\") {\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n            callback(receipt, receipt);\n            return;\n        }\n        promiEvent.resolve(receipt);\n    }).catch(function(error) {\n        if (typeof callback === \"function\") {\n            callback(error, null);\n            return;\n        }\n        promiEvent.reject(error);\n    });\n    return promiEvent.eventEmitter;\n};\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method setSubnodeOwner\n *\n * @param {string} name\n * @param {string} label\n * @param {string} address\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */ Registry.prototype.setSubnodeOwner = function(name, label, address, txConfig, callback) {\n    var promiEvent = new PromiEvent(true);\n    if (!utils.isHexStrict(label)) {\n        label = utils.sha3(label);\n    }\n    this.contract.then(function(contract) {\n        return contract.methods.setSubnodeOwner(namehash.hash(name), label, formatters.inputAddressFormatter(address)).send(txConfig);\n    }).then(function(receipt) {\n        if (typeof callback === \"function\") {\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n            callback(receipt, receipt);\n            return;\n        }\n        promiEvent.resolve(receipt);\n    }).catch(function(error) {\n        if (typeof callback === \"function\") {\n            callback(error, null);\n            return;\n        }\n        promiEvent.reject(error);\n    });\n    return promiEvent.eventEmitter;\n};\n/**\n * Sets the owner, resolver, and TTL for an ENS record in a single operation.\n *\n * @method setRecord\n *\n * @param {string} name\n * @param {string} owner\n * @param {string} resolver\n * @param {string | number} ttl\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */ Registry.prototype.setRecord = function(name, owner, resolver, ttl, txConfig, callback) {\n    var promiEvent = new PromiEvent(true);\n    this.contract.then(function(contract) {\n        return contract.methods.setRecord(namehash.hash(name), formatters.inputAddressFormatter(owner), formatters.inputAddressFormatter(resolver), ttl).send(txConfig);\n    }).then(function(receipt) {\n        if (typeof callback === \"function\") {\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n            callback(receipt, receipt);\n            return;\n        }\n        promiEvent.resolve(receipt);\n    }).catch(function(error) {\n        if (typeof callback === \"function\") {\n            callback(error, null);\n            return;\n        }\n        promiEvent.reject(error);\n    });\n    return promiEvent.eventEmitter;\n};\n/**\n * Sets the owner, resolver and TTL for a subdomain, creating it if necessary.\n *\n * @method setSubnodeRecord\n *\n * @param {string} name\n * @param {string} label\n * @param {string} owner\n * @param {string} resolver\n * @param {string | number} ttl\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */ Registry.prototype.setSubnodeRecord = function(name, label, owner, resolver, ttl, txConfig, callback) {\n    var promiEvent = new PromiEvent(true);\n    if (!utils.isHexStrict(label)) {\n        label = utils.sha3(label);\n    }\n    this.contract.then(function(contract) {\n        return contract.methods.setSubnodeRecord(namehash.hash(name), label, formatters.inputAddressFormatter(owner), formatters.inputAddressFormatter(resolver), ttl).send(txConfig);\n    }).then(function(receipt) {\n        if (typeof callback === \"function\") {\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n            callback(receipt, receipt);\n            return;\n        }\n        promiEvent.resolve(receipt);\n    }).catch(function(error) {\n        if (typeof callback === \"function\") {\n            callback(error, null);\n            return;\n        }\n        promiEvent.reject(error);\n    });\n    return promiEvent.eventEmitter;\n};\n/**\n * Sets or clears an approval by the given operator.\n *\n * @method setApprovalForAll\n *\n * @param {string} operator\n * @param {boolean} approved\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */ Registry.prototype.setApprovalForAll = function(operator, approved, txConfig, callback) {\n    var promiEvent = new PromiEvent(true);\n    this.contract.then(function(contract) {\n        return contract.methods.setApprovalForAll(formatters.inputAddressFormatter(operator), approved).send(txConfig);\n    }).then(function(receipt) {\n        if (typeof callback === \"function\") {\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n            callback(receipt, receipt);\n            return;\n        }\n        promiEvent.resolve(receipt);\n    }).catch(function(error) {\n        if (typeof callback === \"function\") {\n            callback(error, null);\n            return;\n        }\n        promiEvent.reject(error);\n    });\n    return promiEvent.eventEmitter;\n};\n/**\n * Returns true if the operator is approved\n *\n * @method isApprovedForAll\n *\n * @param {string} owner\n * @param {string} operator\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<boolean>}\n */ Registry.prototype.isApprovedForAll = function(owner, operator, callback) {\n    var promiEvent = new PromiEvent(true);\n    this.contract.then(function(contract) {\n        return contract.methods.isApprovedForAll(formatters.inputAddressFormatter(owner), formatters.inputAddressFormatter(operator)).call();\n    }).then(function(receipt) {\n        if (typeof callback === \"function\") {\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n            callback(receipt, receipt);\n            return;\n        }\n        promiEvent.resolve(receipt);\n    }).catch(function(error) {\n        if (typeof callback === \"function\") {\n            callback(error, null);\n            return;\n        }\n        promiEvent.reject(error);\n    });\n    return promiEvent.eventEmitter;\n};\n/**\n * Returns true if the record exists\n *\n * @method recordExists\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<boolean>}\n */ Registry.prototype.recordExists = function(name, callback) {\n    var promiEvent = new PromiEvent(true);\n    this.contract.then(function(contract) {\n        return contract.methods.recordExists(namehash.hash(name)).call();\n    }).then(function(receipt) {\n        if (typeof callback === \"function\") {\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n            callback(receipt, receipt);\n            return;\n        }\n        promiEvent.resolve(receipt);\n    }).catch(function(error) {\n        if (typeof callback === \"function\") {\n            callback(error, null);\n            return;\n        }\n        promiEvent.reject(error);\n    });\n    return promiEvent.eventEmitter;\n};\n/**\n * Returns the resolver contract associated with a name.\n *\n * @deprecated Please use the \"getResolver\" method instead of \"resolver\"\n *\n * @method resolver\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<Contract>}\n */ Registry.prototype.resolver = function(name, callback) {\n    console.warn('Deprecated: Please use the \"getResolver\" method instead of \"resolver\".');\n    return this.getResolver(name, callback);\n};\n/**\n * Returns the resolver contract associated with a name.\n *\n * @method getResolver\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<Contract>}\n */ Registry.prototype.getResolver = function(name, callback) {\n    var self = this;\n    return this.contract.then(function(contract) {\n        return contract.methods.resolver(namehash.hash(name)).call();\n    }).then(function(address) {\n        var contract = new Contract(RESOLVER_ABI, address);\n        contract.setProvider(self.ens.eth.currentProvider);\n        if (typeof callback === \"function\") {\n            // It's required to pass the contract to the first argument to be backward compatible and to have the required consistency\n            callback(contract, contract);\n            return;\n        }\n        return contract;\n    }).catch(function(error) {\n        if (typeof callback === \"function\") {\n            callback(error, null);\n            return;\n        }\n        throw error;\n    });\n};\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method setResolver\n *\n * @param {string} name\n * @param {string} address\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */ Registry.prototype.setResolver = function(name, address, txConfig, callback) {\n    var promiEvent = new PromiEvent(true);\n    this.contract.then(function(contract) {\n        return contract.methods.setResolver(namehash.hash(name), formatters.inputAddressFormatter(address)).send(txConfig);\n    }).then(function(receipt) {\n        if (typeof callback === \"function\") {\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n            callback(receipt, receipt);\n            return;\n        }\n        promiEvent.resolve(receipt);\n    }).catch(function(error) {\n        if (typeof callback === \"function\") {\n            callback(error, null);\n            return;\n        }\n        promiEvent.reject(error);\n    });\n    return promiEvent.eventEmitter;\n};\nmodule.exports = Registry;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-eth-ens/lib/contracts/Registry.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-eth-ens/lib/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/node_modules/web3-eth-ens/lib/index.js ***!
  \********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*\n    This file is part of web3.js.\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ /**\n * @file index.js\n *\n * @author Samuel Furter <samuel@ethereum.org>\n * @date 2018\n */ \nvar ENS = __webpack_require__(/*! ./ENS */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-eth-ens/lib/ENS.js\");\nmodule.exports = ENS;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL25vZGVfbW9kdWxlcy93ZWIzLWV0aC1lbnMvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7QUFZQSxHQUNBOzs7OztDQUtDLEdBQ1k7QUFDYixJQUFJQSxNQUFNQyxtQkFBT0EsQ0FBQztBQUNsQkMsT0FBT0MsT0FBTyxHQUFHSCIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BhbGNoL2FsY2hlbXktd2ViMy9ub2RlX21vZHVsZXMvd2ViMy1ldGgtZW5zL2xpYi9pbmRleC5qcz9jYjE1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gICAgVGhpcyBmaWxlIGlzIHBhcnQgb2Ygd2ViMy5qcy5cbiAgICB3ZWIzLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAgICB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gICAgd2ViMy5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICAgIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICAgIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICAgIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICAgIGFsb25nIHdpdGggd2ViMy5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiovXG4vKipcbiAqIEBmaWxlIGluZGV4LmpzXG4gKlxuICogQGF1dGhvciBTYW11ZWwgRnVydGVyIDxzYW11ZWxAZXRoZXJldW0ub3JnPlxuICogQGRhdGUgMjAxOFxuICovXG5cInVzZSBzdHJpY3RcIjtcbnZhciBFTlMgPSByZXF1aXJlKCcuL0VOUycpO1xubW9kdWxlLmV4cG9ydHMgPSBFTlM7XG4iXSwibmFtZXMiOlsiRU5TIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-eth-ens/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-eth-ens/lib/lib/ResolverMethodHandler.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/node_modules/web3-eth-ens/lib/lib/ResolverMethodHandler.js ***!
  \****************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*\n    This file is part of web3.js.\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ /**\n * @file ResolverMethodHandler.js\n *\n * @author Samuel Furter <samuel@ethereum.org>\n * @date 2018\n */ \nvar PromiEvent = __webpack_require__(/*! web3-core-promievent */ \"(ssr)/./node_modules/web3-core-promievent/lib/index.js\");\nvar namehash = __webpack_require__(/*! eth-ens-namehash */ \"(ssr)/./node_modules/eth-ens-namehash/index.js\");\nvar errors = (__webpack_require__(/*! web3-core-helpers */ \"(ssr)/./node_modules/web3-core-helpers/lib/index.js\").errors);\nvar interfaceIds = (__webpack_require__(/*! ../config */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-eth-ens/lib/config.js\").interfaceIds);\n/**\n * @param {Registry} registry\n * @constructor\n */ function ResolverMethodHandler(registry) {\n    this.registry = registry;\n}\n/**\n * Executes an resolver method and returns an eventifiedPromise\n *\n * @param {string} ensName\n * @param {string} methodName\n * @param {array} methodArguments\n * @param {function} callback\n * @returns {Object}\n */ ResolverMethodHandler.prototype.method = function(ensName, methodName, methodArguments, outputFormatter, callback) {\n    return {\n        call: this.call.bind({\n            ensName: ensName,\n            methodName: methodName,\n            methodArguments: methodArguments,\n            callback: callback,\n            parent: this,\n            outputFormatter: outputFormatter\n        }),\n        send: this.send.bind({\n            ensName: ensName,\n            methodName: methodName,\n            methodArguments: methodArguments,\n            callback: callback,\n            parent: this\n        })\n    };\n};\n/**\n * Executes call\n *\n * @returns {eventifiedPromise}\n */ ResolverMethodHandler.prototype.call = function(callback) {\n    var self = this;\n    var promiEvent = new PromiEvent();\n    var preparedArguments = this.parent.prepareArguments(this.ensName, this.methodArguments);\n    var outputFormatter = this.outputFormatter || null;\n    this.parent.registry.getResolver(this.ensName).then(async function(resolver) {\n        await self.parent.checkInterfaceSupport(resolver, self.methodName);\n        self.parent.handleCall(promiEvent, resolver.methods[self.methodName], preparedArguments, outputFormatter, callback);\n    }).catch(function(error) {\n        if (typeof callback === \"function\") {\n            callback(error, null);\n            return;\n        }\n        promiEvent.reject(error);\n    });\n    return promiEvent.eventEmitter;\n};\n/**\n * Executes send\n *\n * @param {Object} sendOptions\n * @param {function} callback\n * @returns {eventifiedPromise}\n */ ResolverMethodHandler.prototype.send = function(sendOptions, callback) {\n    var self = this;\n    var promiEvent = new PromiEvent();\n    var preparedArguments = this.parent.prepareArguments(this.ensName, this.methodArguments);\n    this.parent.registry.getResolver(this.ensName).then(async function(resolver) {\n        await self.parent.checkInterfaceSupport(resolver, self.methodName);\n        self.parent.handleSend(promiEvent, resolver.methods[self.methodName], preparedArguments, sendOptions, callback);\n    }).catch(function(error) {\n        if (typeof callback === \"function\") {\n            callback(error, null);\n            return;\n        }\n        promiEvent.reject(error);\n    });\n    return promiEvent.eventEmitter;\n};\n/**\n * Handles a call method\n *\n * @param {eventifiedPromise} promiEvent\n * @param {function} method\n * @param {array} preparedArguments\n * @param {function} callback\n * @returns {eventifiedPromise}\n */ ResolverMethodHandler.prototype.handleCall = function(promiEvent, method, preparedArguments, outputFormatter, callback) {\n    method.apply(this, preparedArguments).call().then(function(result) {\n        if (outputFormatter) {\n            result = outputFormatter(result);\n        }\n        if (typeof callback === \"function\") {\n            // It's required to pass the receipt to the second argument to be backwards compatible and to have the required consistency\n            callback(result, result);\n            return;\n        }\n        promiEvent.resolve(result);\n    }).catch(function(error) {\n        if (typeof callback === \"function\") {\n            callback(error, null);\n            return;\n        }\n        promiEvent.reject(error);\n    });\n    return promiEvent;\n};\n/**\n * Handles a send method\n *\n * @param {eventifiedPromise} promiEvent\n * @param {function} method\n * @param {array} preparedArguments\n * @param {Object} sendOptions\n * @param {function} callback\n * @returns {eventifiedPromise}\n */ ResolverMethodHandler.prototype.handleSend = function(promiEvent, method, preparedArguments, sendOptions, callback) {\n    method.apply(this, preparedArguments).send(sendOptions).on(\"sending\", function() {\n        promiEvent.eventEmitter.emit(\"sending\");\n    }).on(\"sent\", function() {\n        promiEvent.eventEmitter.emit(\"sent\");\n    }).on(\"transactionHash\", function(hash) {\n        promiEvent.eventEmitter.emit(\"transactionHash\", hash);\n    }).on(\"confirmation\", function(confirmationNumber, receipt) {\n        promiEvent.eventEmitter.emit(\"confirmation\", confirmationNumber, receipt);\n    }).on(\"receipt\", function(receipt) {\n        promiEvent.eventEmitter.emit(\"receipt\", receipt);\n        promiEvent.resolve(receipt);\n        if (typeof callback === \"function\") {\n            // It's required to pass the receipt to the second argument to be backwards compatible and to have the required consistency\n            callback(receipt, receipt);\n        }\n    }).on(\"error\", function(error) {\n        promiEvent.eventEmitter.emit(\"error\", error);\n        if (typeof callback === \"function\") {\n            callback(error, null);\n            return;\n        }\n        promiEvent.reject(error);\n    });\n    return promiEvent;\n};\n/**\n * Adds the ENS node to the arguments\n *\n * @param {string} name\n * @param {array} methodArguments\n *\n * @returns {array}\n */ ResolverMethodHandler.prototype.prepareArguments = function(name, methodArguments) {\n    var node = namehash.hash(name);\n    if (methodArguments.length > 0) {\n        methodArguments.unshift(node);\n        return methodArguments;\n    }\n    return [\n        node\n    ];\n};\n/**\n *\n *\n * @param {Contract} resolver\n * @param {string} methodName\n *\n * @returns {Promise}\n */ ResolverMethodHandler.prototype.checkInterfaceSupport = async function(resolver, methodName) {\n    // Skip validation for undocumented interface ids (ex: multihash)\n    if (!interfaceIds[methodName]) return;\n    var supported = false;\n    try {\n        supported = await resolver.methods.supportsInterface(interfaceIds[methodName]).call();\n    } catch (err) {\n        console.warn('Could not verify interface of resolver contract at \"' + resolver.options.address + '\". ');\n    }\n    if (!supported) {\n        throw errors.ResolverMethodMissingError(resolver.options.address, methodName);\n    }\n};\nmodule.exports = ResolverMethodHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-eth-ens/lib/lib/ResolverMethodHandler.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-eth-ens/lib/lib/contentHash.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/node_modules/web3-eth-ens/lib/lib/contentHash.js ***!
  \******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\nAdapted from ensdomains/ui\nhttps://github.com/ensdomains/ui/blob/3e62e440b53466eeec9dd1c63d73924eefbd88c1/src/utils/contents.js#L1-L85\n\nBSD 2-Clause License\n\nCopyright (c) 2019, Ethereum Name Service\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/ var contentHash = __webpack_require__(/*! content-hash */ \"(ssr)/./node_modules/content-hash/src/index.js\");\nfunction decode(encoded) {\n    var decoded = null;\n    var protocolType = null;\n    var error = null;\n    if (encoded && encoded.error) {\n        return {\n            protocolType: null,\n            decoded: encoded.error\n        };\n    }\n    if (encoded) {\n        try {\n            decoded = contentHash.decode(encoded);\n            var codec = contentHash.getCodec(encoded);\n            if (codec === \"ipfs-ns\") {\n                protocolType = \"ipfs\";\n            } else if (codec === \"swarm-ns\") {\n                protocolType = \"bzz\";\n            } else if (codec === \"onion\") {\n                protocolType = \"onion\";\n            } else if (codec === \"onion3\") {\n                protocolType = \"onion3\";\n            } else {\n                decoded = encoded;\n            }\n        } catch (e) {\n            error = e.message;\n        }\n    }\n    return {\n        protocolType: protocolType,\n        decoded: decoded,\n        error: error\n    };\n}\nfunction encode(text) {\n    var content, contentType;\n    var encoded = false;\n    if (!!text) {\n        var matched = text.match(/^(ipfs|bzz|onion|onion3):\\/\\/(.*)/) || text.match(/\\/(ipfs)\\/(.*)/);\n        if (matched) {\n            contentType = matched[1];\n            content = matched[2];\n        }\n        try {\n            if (contentType === \"ipfs\") {\n                if (content.length >= 4) {\n                    encoded = \"0x\" + contentHash.fromIpfs(content);\n                }\n            } else if (contentType === \"bzz\") {\n                if (content.length >= 4) {\n                    encoded = \"0x\" + contentHash.fromSwarm(content);\n                }\n            } else if (contentType === \"onion\") {\n                if (content.length === 16) {\n                    encoded = \"0x\" + contentHash.encode(\"onion\", content);\n                }\n            } else if (contentType === \"onion3\") {\n                if (content.length === 56) {\n                    encoded = \"0x\" + contentHash.encode(\"onion3\", content);\n                }\n            } else {\n                throw new Error(\"Could not encode content hash: unsupported content type\");\n            }\n        } catch (err) {\n            throw err;\n        }\n    }\n    return encoded;\n}\nmodule.exports = {\n    decode: decode,\n    encode: encode\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL25vZGVfbW9kdWxlcy93ZWIzLWV0aC1lbnMvbGliL2xpYi9jb250ZW50SGFzaC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE2QkEsR0FDQSxJQUFJQSxjQUFjQyxtQkFBT0EsQ0FBQztBQUMxQixTQUFTQyxPQUFPQyxPQUFPO0lBQ25CLElBQUlDLFVBQVU7SUFDZCxJQUFJQyxlQUFlO0lBQ25CLElBQUlDLFFBQVE7SUFDWixJQUFJSCxXQUFXQSxRQUFRRyxLQUFLLEVBQUU7UUFDMUIsT0FBTztZQUNIRCxjQUFjO1lBQ2RELFNBQVNELFFBQVFHLEtBQUs7UUFDMUI7SUFDSjtJQUNBLElBQUlILFNBQVM7UUFDVCxJQUFJO1lBQ0FDLFVBQVVKLFlBQVlFLE1BQU0sQ0FBQ0M7WUFDN0IsSUFBSUksUUFBUVAsWUFBWVEsUUFBUSxDQUFDTDtZQUNqQyxJQUFJSSxVQUFVLFdBQVc7Z0JBQ3JCRixlQUFlO1lBQ25CLE9BQ0ssSUFBSUUsVUFBVSxZQUFZO2dCQUMzQkYsZUFBZTtZQUNuQixPQUNLLElBQUlFLFVBQVUsU0FBUztnQkFDeEJGLGVBQWU7WUFDbkIsT0FDSyxJQUFJRSxVQUFVLFVBQVU7Z0JBQ3pCRixlQUFlO1lBQ25CLE9BQ0s7Z0JBQ0RELFVBQVVEO1lBQ2Q7UUFDSixFQUNBLE9BQU9NLEdBQUc7WUFDTkgsUUFBUUcsRUFBRUMsT0FBTztRQUNyQjtJQUNKO0lBQ0EsT0FBTztRQUNITCxjQUFjQTtRQUNkRCxTQUFTQTtRQUNURSxPQUFPQTtJQUNYO0FBQ0o7QUFDQSxTQUFTSyxPQUFPQyxJQUFJO0lBQ2hCLElBQUlDLFNBQVNDO0lBQ2IsSUFBSVgsVUFBVTtJQUNkLElBQUksQ0FBQyxDQUFDUyxNQUFNO1FBQ1IsSUFBSUcsVUFBVUgsS0FBS0ksS0FBSyxDQUFDLHdDQUF3Q0osS0FBS0ksS0FBSyxDQUFDO1FBQzVFLElBQUlELFNBQVM7WUFDVEQsY0FBY0MsT0FBTyxDQUFDLEVBQUU7WUFDeEJGLFVBQVVFLE9BQU8sQ0FBQyxFQUFFO1FBQ3hCO1FBQ0EsSUFBSTtZQUNBLElBQUlELGdCQUFnQixRQUFRO2dCQUN4QixJQUFJRCxRQUFRSSxNQUFNLElBQUksR0FBRztvQkFDckJkLFVBQVUsT0FBT0gsWUFBWWtCLFFBQVEsQ0FBQ0w7Z0JBQzFDO1lBQ0osT0FDSyxJQUFJQyxnQkFBZ0IsT0FBTztnQkFDNUIsSUFBSUQsUUFBUUksTUFBTSxJQUFJLEdBQUc7b0JBQ3JCZCxVQUFVLE9BQU9ILFlBQVltQixTQUFTLENBQUNOO2dCQUMzQztZQUNKLE9BQ0ssSUFBSUMsZ0JBQWdCLFNBQVM7Z0JBQzlCLElBQUlELFFBQVFJLE1BQU0sS0FBSyxJQUFJO29CQUN2QmQsVUFBVSxPQUFPSCxZQUFZVyxNQUFNLENBQUMsU0FBU0U7Z0JBQ2pEO1lBQ0osT0FDSyxJQUFJQyxnQkFBZ0IsVUFBVTtnQkFDL0IsSUFBSUQsUUFBUUksTUFBTSxLQUFLLElBQUk7b0JBQ3ZCZCxVQUFVLE9BQU9ILFlBQVlXLE1BQU0sQ0FBQyxVQUFVRTtnQkFDbEQ7WUFDSixPQUNLO2dCQUNELE1BQU0sSUFBSU8sTUFBTTtZQUNwQjtRQUNKLEVBQ0EsT0FBT0MsS0FBSztZQUNSLE1BQU1BO1FBQ1Y7SUFDSjtJQUNBLE9BQU9sQjtBQUNYO0FBQ0FtQixPQUFPQyxPQUFPLEdBQUc7SUFDYnJCLFFBQVFBO0lBQ1JTLFFBQVFBO0FBQ1oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AYWxjaC9hbGNoZW15LXdlYjMvbm9kZV9tb2R1bGVzL3dlYjMtZXRoLWVucy9saWIvbGliL2NvbnRlbnRIYXNoLmpzPzNhOTAiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbkFkYXB0ZWQgZnJvbSBlbnNkb21haW5zL3VpXG5odHRwczovL2dpdGh1Yi5jb20vZW5zZG9tYWlucy91aS9ibG9iLzNlNjJlNDQwYjUzNDY2ZWVlYzlkZDFjNjNkNzM5MjRlZWZiZDg4YzEvc3JjL3V0aWxzL2NvbnRlbnRzLmpzI0wxLUw4NVxuXG5CU0QgMi1DbGF1c2UgTGljZW5zZVxuXG5Db3B5cmlnaHQgKGMpIDIwMTksIEV0aGVyZXVtIE5hbWUgU2VydmljZVxuQWxsIHJpZ2h0cyByZXNlcnZlZC5cblxuUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG5tb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcblxuKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiAgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG5cbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uXG4gIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuXG5USElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFXG5ESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFXG5GT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTFxuREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1JcblNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSXG5DQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLFxuT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0Vcbk9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xudmFyIGNvbnRlbnRIYXNoID0gcmVxdWlyZSgnY29udGVudC1oYXNoJyk7XG5mdW5jdGlvbiBkZWNvZGUoZW5jb2RlZCkge1xuICAgIHZhciBkZWNvZGVkID0gbnVsbDtcbiAgICB2YXIgcHJvdG9jb2xUeXBlID0gbnVsbDtcbiAgICB2YXIgZXJyb3IgPSBudWxsO1xuICAgIGlmIChlbmNvZGVkICYmIGVuY29kZWQuZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHByb3RvY29sVHlwZTogbnVsbCxcbiAgICAgICAgICAgIGRlY29kZWQ6IGVuY29kZWQuZXJyb3JcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKGVuY29kZWQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGRlY29kZWQgPSBjb250ZW50SGFzaC5kZWNvZGUoZW5jb2RlZCk7XG4gICAgICAgICAgICB2YXIgY29kZWMgPSBjb250ZW50SGFzaC5nZXRDb2RlYyhlbmNvZGVkKTtcbiAgICAgICAgICAgIGlmIChjb2RlYyA9PT0gJ2lwZnMtbnMnKSB7XG4gICAgICAgICAgICAgICAgcHJvdG9jb2xUeXBlID0gJ2lwZnMnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY29kZWMgPT09ICdzd2FybS1ucycpIHtcbiAgICAgICAgICAgICAgICBwcm90b2NvbFR5cGUgPSAnYnp6JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNvZGVjID09PSAnb25pb24nKSB7XG4gICAgICAgICAgICAgICAgcHJvdG9jb2xUeXBlID0gJ29uaW9uJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNvZGVjID09PSAnb25pb24zJykge1xuICAgICAgICAgICAgICAgIHByb3RvY29sVHlwZSA9ICdvbmlvbjMnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVjb2RlZCA9IGVuY29kZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGVycm9yID0gZS5tZXNzYWdlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHByb3RvY29sVHlwZTogcHJvdG9jb2xUeXBlLFxuICAgICAgICBkZWNvZGVkOiBkZWNvZGVkLFxuICAgICAgICBlcnJvcjogZXJyb3JcbiAgICB9O1xufVxuZnVuY3Rpb24gZW5jb2RlKHRleHQpIHtcbiAgICB2YXIgY29udGVudCwgY29udGVudFR5cGU7XG4gICAgdmFyIGVuY29kZWQgPSBmYWxzZTtcbiAgICBpZiAoISF0ZXh0KSB7XG4gICAgICAgIHZhciBtYXRjaGVkID0gdGV4dC5tYXRjaCgvXihpcGZzfGJ6enxvbmlvbnxvbmlvbjMpOlxcL1xcLyguKikvKSB8fCB0ZXh0Lm1hdGNoKC9cXC8oaXBmcylcXC8oLiopLyk7XG4gICAgICAgIGlmIChtYXRjaGVkKSB7XG4gICAgICAgICAgICBjb250ZW50VHlwZSA9IG1hdGNoZWRbMV07XG4gICAgICAgICAgICBjb250ZW50ID0gbWF0Y2hlZFsyXTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKGNvbnRlbnRUeXBlID09PSAnaXBmcycpIHtcbiAgICAgICAgICAgICAgICBpZiAoY29udGVudC5sZW5ndGggPj0gNCkge1xuICAgICAgICAgICAgICAgICAgICBlbmNvZGVkID0gJzB4JyArIGNvbnRlbnRIYXNoLmZyb21JcGZzKGNvbnRlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNvbnRlbnRUeXBlID09PSAnYnp6Jykge1xuICAgICAgICAgICAgICAgIGlmIChjb250ZW50Lmxlbmd0aCA+PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIGVuY29kZWQgPSAnMHgnICsgY29udGVudEhhc2guZnJvbVN3YXJtKGNvbnRlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNvbnRlbnRUeXBlID09PSAnb25pb24nKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbnRlbnQubGVuZ3RoID09PSAxNikge1xuICAgICAgICAgICAgICAgICAgICBlbmNvZGVkID0gJzB4JyArIGNvbnRlbnRIYXNoLmVuY29kZSgnb25pb24nLCBjb250ZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjb250ZW50VHlwZSA9PT0gJ29uaW9uMycpIHtcbiAgICAgICAgICAgICAgICBpZiAoY29udGVudC5sZW5ndGggPT09IDU2KSB7XG4gICAgICAgICAgICAgICAgICAgIGVuY29kZWQgPSAnMHgnICsgY29udGVudEhhc2guZW5jb2RlKCdvbmlvbjMnLCBjb250ZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBlbmNvZGUgY29udGVudCBoYXNoOiB1bnN1cHBvcnRlZCBjb250ZW50IHR5cGUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVuY29kZWQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBkZWNvZGU6IGRlY29kZSxcbiAgICBlbmNvZGU6IGVuY29kZVxufTtcbiJdLCJuYW1lcyI6WyJjb250ZW50SGFzaCIsInJlcXVpcmUiLCJkZWNvZGUiLCJlbmNvZGVkIiwiZGVjb2RlZCIsInByb3RvY29sVHlwZSIsImVycm9yIiwiY29kZWMiLCJnZXRDb2RlYyIsImUiLCJtZXNzYWdlIiwiZW5jb2RlIiwidGV4dCIsImNvbnRlbnQiLCJjb250ZW50VHlwZSIsIm1hdGNoZWQiLCJtYXRjaCIsImxlbmd0aCIsImZyb21JcGZzIiwiZnJvbVN3YXJtIiwiRXJyb3IiLCJlcnIiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-eth-ens/lib/lib/contentHash.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-eth-ens/lib/resources/ABI/Registry.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/node_modules/web3-eth-ens/lib/resources/ABI/Registry.js ***!
  \*************************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\nvar REGISTRY = [\n    {\n        \"constant\": true,\n        \"inputs\": [\n            {\n                \"name\": \"node\",\n                \"type\": \"bytes32\"\n            }\n        ],\n        \"name\": \"resolver\",\n        \"outputs\": [\n            {\n                \"name\": \"\",\n                \"type\": \"address\"\n            }\n        ],\n        \"payable\": false,\n        \"type\": \"function\"\n    },\n    {\n        \"constant\": true,\n        \"inputs\": [\n            {\n                \"name\": \"node\",\n                \"type\": \"bytes32\"\n            }\n        ],\n        \"name\": \"owner\",\n        \"outputs\": [\n            {\n                \"name\": \"\",\n                \"type\": \"address\"\n            }\n        ],\n        \"payable\": false,\n        \"type\": \"function\"\n    },\n    {\n        \"constant\": false,\n        \"inputs\": [\n            {\n                \"name\": \"node\",\n                \"type\": \"bytes32\"\n            },\n            {\n                \"name\": \"label\",\n                \"type\": \"bytes32\"\n            },\n            {\n                \"name\": \"owner\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"setSubnodeOwner\",\n        \"outputs\": [],\n        \"payable\": false,\n        \"type\": \"function\"\n    },\n    {\n        \"constant\": false,\n        \"inputs\": [\n            {\n                \"name\": \"node\",\n                \"type\": \"bytes32\"\n            },\n            {\n                \"name\": \"ttl\",\n                \"type\": \"uint64\"\n            }\n        ],\n        \"name\": \"setTTL\",\n        \"outputs\": [],\n        \"payable\": false,\n        \"type\": \"function\"\n    },\n    {\n        \"constant\": true,\n        \"inputs\": [\n            {\n                \"name\": \"node\",\n                \"type\": \"bytes32\"\n            }\n        ],\n        \"name\": \"ttl\",\n        \"outputs\": [\n            {\n                \"name\": \"\",\n                \"type\": \"uint64\"\n            }\n        ],\n        \"payable\": false,\n        \"type\": \"function\"\n    },\n    {\n        \"constant\": false,\n        \"inputs\": [\n            {\n                \"name\": \"node\",\n                \"type\": \"bytes32\"\n            },\n            {\n                \"name\": \"resolver\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"setResolver\",\n        \"outputs\": [],\n        \"payable\": false,\n        \"type\": \"function\"\n    },\n    {\n        \"constant\": false,\n        \"inputs\": [\n            {\n                \"name\": \"node\",\n                \"type\": \"bytes32\"\n            },\n            {\n                \"name\": \"owner\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"setOwner\",\n        \"outputs\": [],\n        \"payable\": false,\n        \"type\": \"function\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": true,\n                \"name\": \"node\",\n                \"type\": \"bytes32\"\n            },\n            {\n                \"indexed\": false,\n                \"name\": \"owner\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"Transfer\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": true,\n                \"name\": \"node\",\n                \"type\": \"bytes32\"\n            },\n            {\n                \"indexed\": true,\n                \"name\": \"label\",\n                \"type\": \"bytes32\"\n            },\n            {\n                \"indexed\": false,\n                \"name\": \"owner\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"NewOwner\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": true,\n                \"name\": \"node\",\n                \"type\": \"bytes32\"\n            },\n            {\n                \"indexed\": false,\n                \"name\": \"resolver\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"NewResolver\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": true,\n                \"name\": \"node\",\n                \"type\": \"bytes32\"\n            },\n            {\n                \"indexed\": false,\n                \"name\": \"ttl\",\n                \"type\": \"uint64\"\n            }\n        ],\n        \"name\": \"NewTTL\",\n        \"type\": \"event\"\n    },\n    {\n        \"constant\": false,\n        \"inputs\": [\n            {\n                \"internalType\": \"bytes32\",\n                \"name\": \"node\",\n                \"type\": \"bytes32\"\n            },\n            {\n                \"internalType\": \"address\",\n                \"name\": \"owner\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"address\",\n                \"name\": \"resolver\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"uint64\",\n                \"name\": \"ttl\",\n                \"type\": \"uint64\"\n            }\n        ],\n        \"name\": \"setRecord\",\n        \"outputs\": [],\n        \"payable\": false,\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"constant\": false,\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"operator\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"approved\",\n                \"type\": \"bool\"\n            }\n        ],\n        \"name\": \"setApprovalForAll\",\n        \"outputs\": [],\n        \"payable\": false,\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": true,\n                \"internalType\": \"address\",\n                \"name\": \"owner\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": true,\n                \"internalType\": \"address\",\n                \"name\": \"operator\",\n                \"type\": \"address\"\n            },\n            {\n                \"indexed\": false,\n                \"internalType\": \"bool\",\n                \"name\": \"approved\",\n                \"type\": \"bool\"\n            }\n        ],\n        \"name\": \"ApprovalForAll\",\n        \"type\": \"event\"\n    },\n    {\n        \"constant\": true,\n        \"inputs\": [\n            {\n                \"internalType\": \"address\",\n                \"name\": \"owner\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"address\",\n                \"name\": \"operator\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"isApprovedForAll\",\n        \"outputs\": [\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"\",\n                \"type\": \"bool\"\n            }\n        ],\n        \"payable\": false,\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"constant\": true,\n        \"inputs\": [\n            {\n                \"internalType\": \"bytes32\",\n                \"name\": \"node\",\n                \"type\": \"bytes32\"\n            }\n        ],\n        \"name\": \"recordExists\",\n        \"outputs\": [\n            {\n                \"internalType\": \"bool\",\n                \"name\": \"\",\n                \"type\": \"bool\"\n            }\n        ],\n        \"payable\": false,\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"constant\": false,\n        \"inputs\": [\n            {\n                \"internalType\": \"bytes32\",\n                \"name\": \"node\",\n                \"type\": \"bytes32\"\n            },\n            {\n                \"internalType\": \"bytes32\",\n                \"name\": \"label\",\n                \"type\": \"bytes32\"\n            },\n            {\n                \"internalType\": \"address\",\n                \"name\": \"owner\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"address\",\n                \"name\": \"resolver\",\n                \"type\": \"address\"\n            },\n            {\n                \"internalType\": \"uint64\",\n                \"name\": \"ttl\",\n                \"type\": \"uint64\"\n            }\n        ],\n        \"name\": \"setSubnodeRecord\",\n        \"outputs\": [],\n        \"payable\": false,\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    }\n];\nmodule.exports = REGISTRY;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-eth-ens/lib/resources/ABI/Registry.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-eth-ens/lib/resources/ABI/Resolver.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/node_modules/web3-eth-ens/lib/resources/ABI/Resolver.js ***!
  \*************************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\nvar RESOLVER = [\n    {\n        \"constant\": true,\n        \"inputs\": [\n            {\n                \"name\": \"interfaceID\",\n                \"type\": \"bytes4\"\n            }\n        ],\n        \"name\": \"supportsInterface\",\n        \"outputs\": [\n            {\n                \"name\": \"\",\n                \"type\": \"bool\"\n            }\n        ],\n        \"payable\": false,\n        \"type\": \"function\"\n    },\n    {\n        \"constant\": true,\n        \"inputs\": [\n            {\n                \"name\": \"node\",\n                \"type\": \"bytes32\"\n            },\n            {\n                \"name\": \"contentTypes\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"ABI\",\n        \"outputs\": [\n            {\n                \"name\": \"contentType\",\n                \"type\": \"uint256\"\n            },\n            {\n                \"name\": \"data\",\n                \"type\": \"bytes\"\n            }\n        ],\n        \"payable\": false,\n        \"type\": \"function\"\n    },\n    {\n        \"constant\": false,\n        \"inputs\": [\n            {\n                \"name\": \"node\",\n                \"type\": \"bytes32\"\n            },\n            {\n                \"name\": \"hash\",\n                \"type\": \"bytes\"\n            }\n        ],\n        \"name\": \"setMultihash\",\n        \"outputs\": [],\n        \"payable\": false,\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"constant\": true,\n        \"inputs\": [\n            {\n                \"name\": \"node\",\n                \"type\": \"bytes32\"\n            }\n        ],\n        \"name\": \"multihash\",\n        \"outputs\": [\n            {\n                \"name\": \"\",\n                \"type\": \"bytes\"\n            }\n        ],\n        \"payable\": false,\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"constant\": false,\n        \"inputs\": [\n            {\n                \"name\": \"node\",\n                \"type\": \"bytes32\"\n            },\n            {\n                \"name\": \"x\",\n                \"type\": \"bytes32\"\n            },\n            {\n                \"name\": \"y\",\n                \"type\": \"bytes32\"\n            }\n        ],\n        \"name\": \"setPubkey\",\n        \"outputs\": [],\n        \"payable\": false,\n        \"type\": \"function\"\n    },\n    {\n        \"constant\": true,\n        \"inputs\": [\n            {\n                \"name\": \"node\",\n                \"type\": \"bytes32\"\n            }\n        ],\n        \"name\": \"content\",\n        \"outputs\": [\n            {\n                \"name\": \"ret\",\n                \"type\": \"bytes32\"\n            }\n        ],\n        \"payable\": false,\n        \"type\": \"function\"\n    },\n    {\n        \"constant\": true,\n        \"inputs\": [\n            {\n                \"name\": \"node\",\n                \"type\": \"bytes32\"\n            }\n        ],\n        \"name\": \"addr\",\n        \"outputs\": [\n            {\n                \"name\": \"ret\",\n                \"type\": \"address\"\n            }\n        ],\n        \"payable\": false,\n        \"type\": \"function\"\n    },\n    {\n        \"constant\": false,\n        \"inputs\": [\n            {\n                \"name\": \"node\",\n                \"type\": \"bytes32\"\n            },\n            {\n                \"name\": \"contentType\",\n                \"type\": \"uint256\"\n            },\n            {\n                \"name\": \"data\",\n                \"type\": \"bytes\"\n            }\n        ],\n        \"name\": \"setABI\",\n        \"outputs\": [],\n        \"payable\": false,\n        \"type\": \"function\"\n    },\n    {\n        \"constant\": true,\n        \"inputs\": [\n            {\n                \"name\": \"node\",\n                \"type\": \"bytes32\"\n            }\n        ],\n        \"name\": \"name\",\n        \"outputs\": [\n            {\n                \"name\": \"ret\",\n                \"type\": \"string\"\n            }\n        ],\n        \"payable\": false,\n        \"type\": \"function\"\n    },\n    {\n        \"constant\": false,\n        \"inputs\": [\n            {\n                \"name\": \"node\",\n                \"type\": \"bytes32\"\n            },\n            {\n                \"name\": \"name\",\n                \"type\": \"string\"\n            }\n        ],\n        \"name\": \"setName\",\n        \"outputs\": [],\n        \"payable\": false,\n        \"type\": \"function\"\n    },\n    {\n        \"constant\": false,\n        \"inputs\": [\n            {\n                \"name\": \"node\",\n                \"type\": \"bytes32\"\n            },\n            {\n                \"name\": \"hash\",\n                \"type\": \"bytes32\"\n            }\n        ],\n        \"name\": \"setContent\",\n        \"outputs\": [],\n        \"payable\": false,\n        \"type\": \"function\"\n    },\n    {\n        \"constant\": true,\n        \"inputs\": [\n            {\n                \"name\": \"node\",\n                \"type\": \"bytes32\"\n            }\n        ],\n        \"name\": \"pubkey\",\n        \"outputs\": [\n            {\n                \"name\": \"x\",\n                \"type\": \"bytes32\"\n            },\n            {\n                \"name\": \"y\",\n                \"type\": \"bytes32\"\n            }\n        ],\n        \"payable\": false,\n        \"type\": \"function\"\n    },\n    {\n        \"constant\": false,\n        \"inputs\": [\n            {\n                \"name\": \"node\",\n                \"type\": \"bytes32\"\n            },\n            {\n                \"name\": \"addr\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"setAddr\",\n        \"outputs\": [],\n        \"payable\": false,\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"name\": \"ensAddr\",\n                \"type\": \"address\"\n            }\n        ],\n        \"payable\": false,\n        \"type\": \"constructor\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": true,\n                \"name\": \"node\",\n                \"type\": \"bytes32\"\n            },\n            {\n                \"indexed\": false,\n                \"name\": \"a\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"AddrChanged\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": true,\n                \"name\": \"node\",\n                \"type\": \"bytes32\"\n            },\n            {\n                \"indexed\": false,\n                \"name\": \"hash\",\n                \"type\": \"bytes32\"\n            }\n        ],\n        \"name\": \"ContentChanged\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": true,\n                \"name\": \"node\",\n                \"type\": \"bytes32\"\n            },\n            {\n                \"indexed\": false,\n                \"name\": \"name\",\n                \"type\": \"string\"\n            }\n        ],\n        \"name\": \"NameChanged\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": true,\n                \"name\": \"node\",\n                \"type\": \"bytes32\"\n            },\n            {\n                \"indexed\": true,\n                \"name\": \"contentType\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"ABIChanged\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": true,\n                \"name\": \"node\",\n                \"type\": \"bytes32\"\n            },\n            {\n                \"indexed\": false,\n                \"name\": \"x\",\n                \"type\": \"bytes32\"\n            },\n            {\n                \"indexed\": false,\n                \"name\": \"y\",\n                \"type\": \"bytes32\"\n            }\n        ],\n        \"name\": \"PubkeyChanged\",\n        \"type\": \"event\"\n    },\n    {\n        \"anonymous\": false,\n        \"inputs\": [\n            {\n                \"indexed\": true,\n                \"name\": \"node\",\n                \"type\": \"bytes32\"\n            },\n            {\n                \"indexed\": false,\n                \"name\": \"hash\",\n                \"type\": \"bytes\"\n            }\n        ],\n        \"name\": \"ContenthashChanged\",\n        \"type\": \"event\"\n    },\n    {\n        \"constant\": true,\n        \"inputs\": [\n            {\n                \"name\": \"node\",\n                \"type\": \"bytes32\"\n            }\n        ],\n        \"name\": \"contenthash\",\n        \"outputs\": [\n            {\n                \"name\": \"\",\n                \"type\": \"bytes\"\n            }\n        ],\n        \"payable\": false,\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"constant\": false,\n        \"inputs\": [\n            {\n                \"name\": \"node\",\n                \"type\": \"bytes32\"\n            },\n            {\n                \"name\": \"hash\",\n                \"type\": \"bytes\"\n            }\n        ],\n        \"name\": \"setContenthash\",\n        \"outputs\": [],\n        \"payable\": false,\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    }\n];\nmodule.exports = RESOLVER;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-eth-ens/lib/resources/ABI/Resolver.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-eth-iban/lib/index.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/node_modules/web3-eth-iban/lib/index.js ***!
  \*********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ /**\n * @file iban.js\n *\n * Details: https://github.com/ethereum/wiki/wiki/ICAP:-Inter-exchange-Client-Address-Protocol\n *\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2015\n */ \nconst utils = __webpack_require__(/*! web3-utils */ \"(ssr)/./node_modules/web3-utils/lib/index.js\");\nconst BigNumber = __webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/bn.js/lib/bn.js\");\nconst leftPad = function(string, bytes) {\n    let result = string;\n    while(result.length < bytes * 2){\n        result = \"0\" + result;\n    }\n    return result;\n};\n/**\n * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to\n * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.\n *\n * @method iso13616Prepare\n * @param {String} iban the IBAN\n * @returns {String} the prepared IBAN\n */ const iso13616Prepare = function(iban) {\n    const A = \"A\".charCodeAt(0);\n    const Z = \"Z\".charCodeAt(0);\n    iban = iban.toUpperCase();\n    iban = iban.slice(4) + iban.slice(0, 4);\n    return iban.split(\"\").map(function(n) {\n        const code = n.charCodeAt(0);\n        if (code >= A && code <= Z) {\n            // A = 10, B = 11, ... Z = 35\n            return code - A + 10;\n        } else {\n            return n;\n        }\n    }).join(\"\");\n};\n/**\n * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.\n *\n * @method mod9710\n * @param {String} iban\n * @returns {Number}\n */ const mod9710 = function(iban) {\n    let remainder = iban;\n    let block;\n    while(remainder.length > 2){\n        block = remainder.slice(0, 9);\n        remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);\n    }\n    return parseInt(remainder, 10) % 97;\n};\n/**\n * This prototype should be used to create iban object from iban correct string\n *\n * @param {String} iban\n */ class Iban {\n    constructor(iban){\n        this._iban = iban;\n    }\n    /**\n     * This method should be used to create an ethereum address from a direct iban address\n     *\n     * @method toAddress\n     * @param {String} iban address\n     * @return {String} the ethereum address\n     */ static toAddress(ib) {\n        ib = new Iban(ib);\n        if (!ib.isDirect()) {\n            throw new Error(\"IBAN is indirect and can't be converted\");\n        }\n        return ib.toAddress();\n    }\n    /**\n     * This method should be used to create iban address from an ethereum address\n     *\n     * @method toIban\n     * @param {String} address\n     * @return {String} the IBAN address\n     */ static toIban(address) {\n        return Iban.fromAddress(address).toString();\n    }\n    /**\n     * This method should be used to create iban object from an ethereum address\n     *\n     * @method fromAddress\n     * @param {String} address\n     * @return {Iban} the IBAN object\n     */ static fromAddress(address) {\n        if (!utils.isAddress(address)) {\n            throw new Error(\"Provided address is not a valid address: \" + address);\n        }\n        address = address.replace(\"0x\", \"\").replace(\"0X\", \"\");\n        const asBn = new BigNumber(address, 16);\n        const base36 = asBn.toString(36);\n        const padded = leftPad(base36, 15);\n        return Iban.fromBban(padded.toUpperCase());\n    }\n    /**\n     * Convert the passed BBAN to an IBAN for this country specification.\n     * Please note that <i>\"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account\"</i>.\n     * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits\n     *\n     * @method fromBban\n     * @param {String} bban the BBAN to convert to IBAN\n     * @returns {Iban} the IBAN object\n     */ static fromBban(bban) {\n        const countryCode = \"XE\";\n        const remainder = mod9710(iso13616Prepare(countryCode + \"00\" + bban));\n        const checkDigit = (\"0\" + (98 - remainder)).slice(-2);\n        return new Iban(countryCode + checkDigit + bban);\n    }\n    /**\n     * Should be used to create IBAN object for given institution and identifier\n     *\n     * @method createIndirect\n     * @param {Object} options, required options are \"institution\" and \"identifier\"\n     * @return {Iban} the IBAN object\n     */ static createIndirect(options) {\n        return Iban.fromBban(\"ETH\" + options.institution + options.identifier);\n    }\n    /**\n     * This method should be used to check if given string is valid iban object\n     *\n     * @method isValid\n     * @param {String} iban string\n     * @return {Boolean} true if it is valid IBAN\n     */ static isValid(iban) {\n        const i = new Iban(iban);\n        return i.isValid();\n    }\n    /**\n     * Should be called to check if iban is correct\n     *\n     * @method isValid\n     * @returns {Boolean} true if it is, otherwise false\n     */ isValid() {\n        return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) && mod9710(iso13616Prepare(this._iban)) === 1;\n    }\n    /**\n     * Should be called to check if iban number is direct\n     *\n     * @method isDirect\n     * @returns {Boolean} true if it is, otherwise false\n     */ isDirect() {\n        return this._iban.length === 34 || this._iban.length === 35;\n    }\n    /**\n     * Should be called to check if iban number if indirect\n     *\n     * @method isIndirect\n     * @returns {Boolean} true if it is, otherwise false\n     */ isIndirect() {\n        return this._iban.length === 20;\n    }\n    /**\n     * Should be called to get iban checksum\n     * Uses the mod-97-10 checksumming protocol (ISO/IEC 7064:2003)\n     *\n     * @method checksum\n     * @returns {String} checksum\n     */ checksum() {\n        return this._iban.slice(2, 4);\n    }\n    /**\n     * Should be called to get institution identifier\n     * eg. XREG\n     *\n     * @method institution\n     * @returns {String} institution identifier\n     */ institution() {\n        return this.isIndirect() ? this._iban.slice(7, 11) : \"\";\n    }\n    /**\n     * Should be called to get client identifier within institution\n     * eg. GAVOFYORK\n     *\n     * @method client\n     * @returns {String} client identifier\n     */ client() {\n        return this.isIndirect() ? this._iban.slice(11) : \"\";\n    }\n    /**\n     * Should be called to get client direct address\n     *\n     * @method toAddress\n     * @returns {String} ethereum address\n     */ toAddress() {\n        if (this.isDirect()) {\n            const base36 = this._iban.slice(4);\n            const asBn = new BigNumber(base36, 36);\n            return utils.toChecksumAddress(asBn.toString(16, 20));\n        }\n        return \"\";\n    }\n    toString() {\n        return this._iban;\n    }\n}\nmodule.exports = Iban;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-eth-iban/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-eth-personal/lib/index.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/node_modules/web3-eth-personal/lib/index.js ***!
  \*************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ /**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */ \nvar core = __webpack_require__(/*! web3-core */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-core/lib/index.js\");\nvar Method = __webpack_require__(/*! web3-core-method */ \"(ssr)/./node_modules/web3-core-method/lib/index.js\");\nvar utils = __webpack_require__(/*! web3-utils */ \"(ssr)/./node_modules/web3-utils/lib/index.js\");\nvar Net = __webpack_require__(/*! web3-net */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-net/lib/index.js\");\nvar formatters = (__webpack_require__(/*! web3-core-helpers */ \"(ssr)/./node_modules/web3-core-helpers/lib/index.js\").formatters);\nvar Personal = function Personal() {\n    var _this = this;\n    // sets _requestmanager\n    core.packageInit(this, arguments);\n    this.net = new Net(this);\n    var defaultAccount = null;\n    var defaultBlock = \"latest\";\n    Object.defineProperty(this, \"defaultAccount\", {\n        get: function() {\n            return defaultAccount;\n        },\n        set: function(val) {\n            if (val) {\n                defaultAccount = utils.toChecksumAddress(formatters.inputAddressFormatter(val));\n            }\n            // update defaultBlock\n            methods.forEach(function(method) {\n                method.defaultAccount = defaultAccount;\n            });\n            return val;\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, \"defaultBlock\", {\n        get: function() {\n            return defaultBlock;\n        },\n        set: function(val) {\n            defaultBlock = val;\n            // update defaultBlock\n            methods.forEach(function(method) {\n                method.defaultBlock = defaultBlock;\n            });\n            return val;\n        },\n        enumerable: true\n    });\n    var methods = [\n        new Method({\n            name: \"getAccounts\",\n            call: \"personal_listAccounts\",\n            params: 0,\n            outputFormatter: utils.toChecksumAddress\n        }),\n        new Method({\n            name: \"newAccount\",\n            call: \"personal_newAccount\",\n            params: 1,\n            inputFormatter: [\n                null\n            ],\n            outputFormatter: utils.toChecksumAddress\n        }),\n        new Method({\n            name: \"unlockAccount\",\n            call: \"personal_unlockAccount\",\n            params: 3,\n            inputFormatter: [\n                formatters.inputAddressFormatter,\n                null,\n                null\n            ]\n        }),\n        new Method({\n            name: \"lockAccount\",\n            call: \"personal_lockAccount\",\n            params: 1,\n            inputFormatter: [\n                formatters.inputAddressFormatter\n            ]\n        }),\n        new Method({\n            name: \"importRawKey\",\n            call: \"personal_importRawKey\",\n            params: 2\n        }),\n        new Method({\n            name: \"sendTransaction\",\n            call: \"personal_sendTransaction\",\n            params: 2,\n            inputFormatter: [\n                formatters.inputTransactionFormatter,\n                null\n            ]\n        }),\n        new Method({\n            name: \"signTransaction\",\n            call: \"personal_signTransaction\",\n            params: 2,\n            inputFormatter: [\n                formatters.inputTransactionFormatter,\n                null\n            ]\n        }),\n        new Method({\n            name: \"sign\",\n            call: \"personal_sign\",\n            params: 3,\n            inputFormatter: [\n                formatters.inputSignFormatter,\n                formatters.inputAddressFormatter,\n                null\n            ]\n        }),\n        new Method({\n            name: \"ecRecover\",\n            call: \"personal_ecRecover\",\n            params: 2,\n            inputFormatter: [\n                formatters.inputSignFormatter,\n                null\n            ]\n        })\n    ];\n    methods.forEach(function(method) {\n        method.attachToObject(_this);\n        method.setRequestManager(_this._requestManager);\n        method.defaultBlock = _this.defaultBlock;\n        method.defaultAccount = _this.defaultAccount;\n    });\n};\ncore.addProviders(Personal);\nmodule.exports = Personal;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-eth-personal/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-eth/lib/getNetworkType.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/node_modules/web3-eth/lib/getNetworkType.js ***!
  \*************************************************************************************/
/***/ ((module) => {

"use strict";
eval("/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */ /**\n * @file getNetworkType.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */ \nvar getNetworkType = function(callback) {\n    var _this = this, id;\n    return this.net.getId().then(function(givenId) {\n        id = givenId;\n        return _this.getBlock(0);\n    }).then(function(genesis) {\n        var returnValue = \"private\";\n        if (genesis.hash === \"0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3\" && id === 1) {\n            returnValue = \"main\";\n        }\n        if (genesis.hash === \"0x41941023680923e0fe4d74a34bdac8141f2540e3ae90623718e47d66d1ca4a2d\" && id === 3) {\n            returnValue = \"ropsten\";\n        }\n        if (genesis.hash === \"0x6341fd3daf94b748c72ced5a5b26028f2474f5f00d824504e4fa37a75767e177\" && id === 4) {\n            returnValue = \"rinkeby\";\n        }\n        if (genesis.hash === \"0xbf7e331f7f7c1dd2e05159666b3bf8bc7a8a3a9eb1d518969eab529dd9b88c1a\" && id === 5) {\n            returnValue = \"goerli\";\n        }\n        if (genesis.hash === \"0xa3c565fc15c7478862d50ccd6561e3c06b24cc509bf388941c25ea985ce32cb9\" && id === 42) {\n            returnValue = \"kovan\";\n        }\n        if (typeof callback === \"function\") {\n            callback(null, returnValue);\n        }\n        return returnValue;\n    }).catch(function(err) {\n        if (typeof callback === \"function\") {\n            callback(err);\n        } else {\n            throw err;\n        }\n    });\n};\nmodule.exports = getNetworkType;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL25vZGVfbW9kdWxlcy93ZWIzLWV0aC9saWIvZ2V0TmV0d29ya1R5cGUuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztDQWVDLEdBQ0Q7Ozs7Q0FJQyxHQUNZO0FBQ2IsSUFBSUEsaUJBQWlCLFNBQVVDLFFBQVE7SUFDbkMsSUFBSUMsUUFBUSxJQUFJLEVBQUVDO0lBQ2xCLE9BQU8sSUFBSSxDQUFDQyxHQUFHLENBQUNDLEtBQUssR0FDaEJDLElBQUksQ0FBQyxTQUFVQyxPQUFPO1FBQ3ZCSixLQUFLSTtRQUNMLE9BQU9MLE1BQU1NLFFBQVEsQ0FBQztJQUMxQixHQUNLRixJQUFJLENBQUMsU0FBVUcsT0FBTztRQUN2QixJQUFJQyxjQUFjO1FBQ2xCLElBQUlELFFBQVFFLElBQUksS0FBSyx3RUFDakJSLE9BQU8sR0FBRztZQUNWTyxjQUFjO1FBQ2xCO1FBQ0EsSUFBSUQsUUFBUUUsSUFBSSxLQUFLLHdFQUNqQlIsT0FBTyxHQUFHO1lBQ1ZPLGNBQWM7UUFDbEI7UUFDQSxJQUFJRCxRQUFRRSxJQUFJLEtBQUssd0VBQ2pCUixPQUFPLEdBQUc7WUFDVk8sY0FBYztRQUNsQjtRQUNBLElBQUlELFFBQVFFLElBQUksS0FBSyx3RUFDakJSLE9BQU8sR0FBRztZQUNWTyxjQUFjO1FBQ2xCO1FBQ0EsSUFBSUQsUUFBUUUsSUFBSSxLQUFLLHdFQUNqQlIsT0FBTyxJQUFJO1lBQ1hPLGNBQWM7UUFDbEI7UUFDQSxJQUFJLE9BQU9ULGFBQWEsWUFBWTtZQUNoQ0EsU0FBUyxNQUFNUztRQUNuQjtRQUNBLE9BQU9BO0lBQ1gsR0FDS0UsS0FBSyxDQUFDLFNBQVVDLEdBQUc7UUFDcEIsSUFBSSxPQUFPWixhQUFhLFlBQVk7WUFDaENBLFNBQVNZO1FBQ2IsT0FDSztZQUNELE1BQU1BO1FBQ1Y7SUFDSjtBQUNKO0FBQ0FDLE9BQU9DLE9BQU8sR0FBR2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AYWxjaC9hbGNoZW15LXdlYjMvbm9kZV9tb2R1bGVzL3dlYjMtZXRoL2xpYi9nZXROZXR3b3JrVHlwZS5qcz80NGU3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gVGhpcyBmaWxlIGlzIHBhcnQgb2Ygd2ViMy5qcy5cblxuIHdlYjMuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cblxuIHdlYjMuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cblxuIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuIGFsb25nIHdpdGggd2ViMy5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqL1xuLyoqXG4gKiBAZmlsZSBnZXROZXR3b3JrVHlwZS5qc1xuICogQGF1dGhvciBGYWJpYW4gVm9nZWxzdGVsbGVyIDxmYWJpYW5AZXRoZXJldW0ub3JnPlxuICogQGRhdGUgMjAxN1xuICovXG5cInVzZSBzdHJpY3RcIjtcbnZhciBnZXROZXR3b3JrVHlwZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIHZhciBfdGhpcyA9IHRoaXMsIGlkO1xuICAgIHJldHVybiB0aGlzLm5ldC5nZXRJZCgpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChnaXZlbklkKSB7XG4gICAgICAgIGlkID0gZ2l2ZW5JZDtcbiAgICAgICAgcmV0dXJuIF90aGlzLmdldEJsb2NrKDApO1xuICAgIH0pXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChnZW5lc2lzKSB7XG4gICAgICAgIHZhciByZXR1cm5WYWx1ZSA9ICdwcml2YXRlJztcbiAgICAgICAgaWYgKGdlbmVzaXMuaGFzaCA9PT0gJzB4ZDRlNTY3NDBmODc2YWVmOGMwMTBiODZhNDBkNWY1Njc0NWExMThkMDkwNmEzNGU2OWFlYzhjMGRiMWNiOGZhMycgJiZcbiAgICAgICAgICAgIGlkID09PSAxKSB7XG4gICAgICAgICAgICByZXR1cm5WYWx1ZSA9ICdtYWluJztcbiAgICAgICAgfVxuICAgICAgICBpZiAoZ2VuZXNpcy5oYXNoID09PSAnMHg0MTk0MTAyMzY4MDkyM2UwZmU0ZDc0YTM0YmRhYzgxNDFmMjU0MGUzYWU5MDYyMzcxOGU0N2Q2NmQxY2E0YTJkJyAmJlxuICAgICAgICAgICAgaWQgPT09IDMpIHtcbiAgICAgICAgICAgIHJldHVyblZhbHVlID0gJ3JvcHN0ZW4nO1xuICAgICAgICB9XG4gICAgICAgIGlmIChnZW5lc2lzLmhhc2ggPT09ICcweDYzNDFmZDNkYWY5NGI3NDhjNzJjZWQ1YTViMjYwMjhmMjQ3NGY1ZjAwZDgyNDUwNGU0ZmEzN2E3NTc2N2UxNzcnICYmXG4gICAgICAgICAgICBpZCA9PT0gNCkge1xuICAgICAgICAgICAgcmV0dXJuVmFsdWUgPSAncmlua2VieSc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGdlbmVzaXMuaGFzaCA9PT0gJzB4YmY3ZTMzMWY3ZjdjMWRkMmUwNTE1OTY2NmIzYmY4YmM3YThhM2E5ZWIxZDUxODk2OWVhYjUyOWRkOWI4OGMxYScgJiZcbiAgICAgICAgICAgIGlkID09PSA1KSB7XG4gICAgICAgICAgICByZXR1cm5WYWx1ZSA9ICdnb2VybGknO1xuICAgICAgICB9XG4gICAgICAgIGlmIChnZW5lc2lzLmhhc2ggPT09ICcweGEzYzU2NWZjMTVjNzQ3ODg2MmQ1MGNjZDY1NjFlM2MwNmIyNGNjNTA5YmYzODg5NDFjMjVlYTk4NWNlMzJjYjknICYmXG4gICAgICAgICAgICBpZCA9PT0gNDIpIHtcbiAgICAgICAgICAgIHJldHVyblZhbHVlID0gJ2tvdmFuJztcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCByZXR1cm5WYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldHVyblZhbHVlO1xuICAgIH0pXG4gICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGdldE5ldHdvcmtUeXBlO1xuIl0sIm5hbWVzIjpbImdldE5ldHdvcmtUeXBlIiwiY2FsbGJhY2siLCJfdGhpcyIsImlkIiwibmV0IiwiZ2V0SWQiLCJ0aGVuIiwiZ2l2ZW5JZCIsImdldEJsb2NrIiwiZ2VuZXNpcyIsInJldHVyblZhbHVlIiwiaGFzaCIsImNhdGNoIiwiZXJyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-eth/lib/getNetworkType.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-eth/lib/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/node_modules/web3-eth/lib/index.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */ /**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */ \nvar core = __webpack_require__(/*! web3-core */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-core/lib/index.js\");\nvar helpers = __webpack_require__(/*! web3-core-helpers */ \"(ssr)/./node_modules/web3-core-helpers/lib/index.js\");\nvar Subscriptions = (__webpack_require__(/*! web3-core-subscriptions */ \"(ssr)/./node_modules/web3-core-subscriptions/lib/index.js\").subscriptions);\nvar Method = __webpack_require__(/*! web3-core-method */ \"(ssr)/./node_modules/web3-core-method/lib/index.js\");\nvar utils = __webpack_require__(/*! web3-utils */ \"(ssr)/./node_modules/web3-utils/lib/index.js\");\nvar Net = __webpack_require__(/*! web3-net */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-net/lib/index.js\");\nvar ENS = __webpack_require__(/*! web3-eth-ens */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-eth-ens/lib/index.js\");\nvar Personal = __webpack_require__(/*! web3-eth-personal */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-eth-personal/lib/index.js\");\nvar BaseContract = __webpack_require__(/*! web3-eth-contract */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-eth-contract/lib/index.js\");\nvar Iban = __webpack_require__(/*! web3-eth-iban */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-eth-iban/lib/index.js\");\nvar Accounts = __webpack_require__(/*! web3-eth-accounts */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-eth-accounts/lib/index.js\");\nvar abi = __webpack_require__(/*! web3-eth-abi */ \"(ssr)/./node_modules/web3-eth-abi/lib/index.js\");\nvar getNetworkType = __webpack_require__(/*! ./getNetworkType.js */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-eth/lib/getNetworkType.js\");\nvar formatter = helpers.formatters;\nvar blockCall = function(args) {\n    return typeof args[0] === \"string\" && args[0].indexOf(\"0x\") === 0 ? \"eth_getBlockByHash\" : \"eth_getBlockByNumber\";\n};\nvar transactionFromBlockCall = function(args) {\n    return typeof args[0] === \"string\" && args[0].indexOf(\"0x\") === 0 ? \"eth_getTransactionByBlockHashAndIndex\" : \"eth_getTransactionByBlockNumberAndIndex\";\n};\nvar uncleCall = function(args) {\n    return typeof args[0] === \"string\" && args[0].indexOf(\"0x\") === 0 ? \"eth_getUncleByBlockHashAndIndex\" : \"eth_getUncleByBlockNumberAndIndex\";\n};\nvar getBlockTransactionCountCall = function(args) {\n    return typeof args[0] === \"string\" && args[0].indexOf(\"0x\") === 0 ? \"eth_getBlockTransactionCountByHash\" : \"eth_getBlockTransactionCountByNumber\";\n};\nvar uncleCountCall = function(args) {\n    return typeof args[0] === \"string\" && args[0].indexOf(\"0x\") === 0 ? \"eth_getUncleCountByBlockHash\" : \"eth_getUncleCountByBlockNumber\";\n};\nvar Eth = function Eth() {\n    var _this = this;\n    // sets _requestmanager\n    core.packageInit(this, arguments);\n    // overwrite package setRequestManager\n    var setRequestManager = this.setRequestManager;\n    this.setRequestManager = function(manager) {\n        setRequestManager(manager);\n        _this.net.setRequestManager(manager);\n        _this.personal.setRequestManager(manager);\n        _this.accounts.setRequestManager(manager);\n        _this.Contract._requestManager = _this._requestManager;\n        _this.Contract.currentProvider = _this._provider;\n        return true;\n    };\n    // overwrite setProvider\n    var setProvider = this.setProvider;\n    this.setProvider = function() {\n        setProvider.apply(_this, arguments);\n        _this.setRequestManager(_this._requestManager);\n        // Set detectedAddress/lastSyncCheck back to null because the provider could be connected to a different chain now\n        _this.ens._detectedAddress = null;\n        _this.ens._lastSyncCheck = null;\n    };\n    var handleRevert = false;\n    var defaultAccount = null;\n    var defaultBlock = \"latest\";\n    var transactionBlockTimeout = 50;\n    var transactionConfirmationBlocks = 24;\n    var transactionPollingTimeout = 750;\n    var transactionPollingInterval = 1000;\n    var blockHeaderTimeout = 10; // 10 seconds\n    var maxListenersWarningThreshold = 100;\n    var defaultChain, defaultHardfork, defaultCommon;\n    Object.defineProperty(this, \"handleRevert\", {\n        get: function() {\n            return handleRevert;\n        },\n        set: function(val) {\n            handleRevert = val;\n            // also set on the Contract object\n            _this.Contract.handleRevert = handleRevert;\n            // update handleRevert\n            methods.forEach(function(method) {\n                method.handleRevert = handleRevert;\n            });\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, \"defaultCommon\", {\n        get: function() {\n            return defaultCommon;\n        },\n        set: function(val) {\n            defaultCommon = val;\n            // also set on the Contract object\n            _this.Contract.defaultCommon = defaultCommon;\n            // update defaultBlock\n            methods.forEach(function(method) {\n                method.defaultCommon = defaultCommon;\n            });\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, \"defaultHardfork\", {\n        get: function() {\n            return defaultHardfork;\n        },\n        set: function(val) {\n            defaultHardfork = val;\n            // also set on the Contract object\n            _this.Contract.defaultHardfork = defaultHardfork;\n            // update defaultBlock\n            methods.forEach(function(method) {\n                method.defaultHardfork = defaultHardfork;\n            });\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, \"defaultChain\", {\n        get: function() {\n            return defaultChain;\n        },\n        set: function(val) {\n            defaultChain = val;\n            // also set on the Contract object\n            _this.Contract.defaultChain = defaultChain;\n            // update defaultBlock\n            methods.forEach(function(method) {\n                method.defaultChain = defaultChain;\n            });\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, \"transactionPollingTimeout\", {\n        get: function() {\n            return transactionPollingTimeout;\n        },\n        set: function(val) {\n            transactionPollingTimeout = val;\n            // also set on the Contract object\n            _this.Contract.transactionPollingTimeout = transactionPollingTimeout;\n            // update defaultBlock\n            methods.forEach(function(method) {\n                method.transactionPollingTimeout = transactionPollingTimeout;\n            });\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, \"transactionPollingInterval\", {\n        get: function() {\n            return transactionPollingInterval;\n        },\n        set: function(val) {\n            transactionPollingInterval = val;\n            // also set on the Contract object\n            _this.Contract.transactionPollingInterval = transactionPollingInterval;\n            // update defaultBlock\n            methods.forEach(function(method) {\n                method.transactionPollingInterval = transactionPollingInterval;\n            });\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, \"transactionConfirmationBlocks\", {\n        get: function() {\n            return transactionConfirmationBlocks;\n        },\n        set: function(val) {\n            transactionConfirmationBlocks = val;\n            // also set on the Contract object\n            _this.Contract.transactionConfirmationBlocks = transactionConfirmationBlocks;\n            // update defaultBlock\n            methods.forEach(function(method) {\n                method.transactionConfirmationBlocks = transactionConfirmationBlocks;\n            });\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, \"transactionBlockTimeout\", {\n        get: function() {\n            return transactionBlockTimeout;\n        },\n        set: function(val) {\n            transactionBlockTimeout = val;\n            // also set on the Contract object\n            _this.Contract.transactionBlockTimeout = transactionBlockTimeout;\n            // update defaultBlock\n            methods.forEach(function(method) {\n                method.transactionBlockTimeout = transactionBlockTimeout;\n            });\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, \"blockHeaderTimeout\", {\n        get: function() {\n            return blockHeaderTimeout;\n        },\n        set: function(val) {\n            blockHeaderTimeout = val;\n            // also set on the Contract object\n            _this.Contract.blockHeaderTimeout = blockHeaderTimeout;\n            // update defaultBlock\n            methods.forEach(function(method) {\n                method.blockHeaderTimeout = blockHeaderTimeout;\n            });\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, \"defaultAccount\", {\n        get: function() {\n            return defaultAccount;\n        },\n        set: function(val) {\n            if (val) {\n                defaultAccount = utils.toChecksumAddress(formatter.inputAddressFormatter(val));\n            }\n            // also set on the Contract object\n            _this.Contract.defaultAccount = defaultAccount;\n            _this.personal.defaultAccount = defaultAccount;\n            // update defaultBlock\n            methods.forEach(function(method) {\n                method.defaultAccount = defaultAccount;\n            });\n            return val;\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, \"defaultBlock\", {\n        get: function() {\n            return defaultBlock;\n        },\n        set: function(val) {\n            defaultBlock = val;\n            // also set on the Contract object\n            _this.Contract.defaultBlock = defaultBlock;\n            _this.personal.defaultBlock = defaultBlock;\n            // update defaultBlock\n            methods.forEach(function(method) {\n                method.defaultBlock = defaultBlock;\n            });\n            return val;\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, \"maxListenersWarningThreshold\", {\n        get: function() {\n            return maxListenersWarningThreshold;\n        },\n        set: function(val) {\n            if (_this.currentProvider && _this.currentProvider.setMaxListeners) {\n                maxListenersWarningThreshold = val;\n                _this.currentProvider.setMaxListeners(val);\n            }\n        },\n        enumerable: true\n    });\n    this.clearSubscriptions = _this._requestManager.clearSubscriptions.bind(_this._requestManager);\n    this.removeSubscriptionById = _this._requestManager.removeSubscription.bind(_this._requestManager);\n    // add net\n    this.net = new Net(this);\n    // add chain detection\n    this.net.getNetworkType = getNetworkType.bind(this);\n    // add accounts\n    this.accounts = new Accounts(this);\n    // add personal\n    this.personal = new Personal(this);\n    this.personal.defaultAccount = this.defaultAccount;\n    // set warnings threshold\n    this.maxListenersWarningThreshold = maxListenersWarningThreshold;\n    // create a proxy Contract type for this instance, as a Contract's provider\n    // is stored as a class member rather than an instance variable. If we do\n    // not create this proxy type, changing the provider in one instance of\n    // web3-eth would subsequently change the provider for _all_ contract\n    // instances!\n    var self = this;\n    var Contract = function Contract() {\n        BaseContract.apply(this, arguments);\n        // when Eth.setProvider is called, call packageInit\n        // on all contract instances instantiated via this Eth\n        // instances. This will update the currentProvider for\n        // the contract instances\n        var _this = this;\n        var setProvider = self.setProvider;\n        self.setProvider = function() {\n            setProvider.apply(self, arguments);\n            core.packageInit(_this, [\n                self\n            ]);\n        };\n    };\n    Contract.setProvider = function() {\n        BaseContract.setProvider.apply(this, arguments);\n    };\n    // make our proxy Contract inherit from web3-eth-contract so that it has all\n    // the right functionality and so that instanceof and friends work properly\n    Contract.prototype = Object.create(BaseContract.prototype);\n    Contract.prototype.constructor = Contract;\n    // add contract\n    this.Contract = Contract;\n    this.Contract.defaultAccount = this.defaultAccount;\n    this.Contract.defaultBlock = this.defaultBlock;\n    this.Contract.transactionBlockTimeout = this.transactionBlockTimeout;\n    this.Contract.transactionConfirmationBlocks = this.transactionConfirmationBlocks;\n    this.Contract.transactionPollingTimeout = this.transactionPollingTimeout;\n    this.Contract.transactionPollingInterval = this.transactionPollingInterval;\n    this.Contract.blockHeaderTimeout = this.blockHeaderTimeout;\n    this.Contract.handleRevert = this.handleRevert;\n    this.Contract._requestManager = this._requestManager;\n    this.Contract._ethAccounts = this.accounts;\n    this.Contract.currentProvider = this._requestManager.provider;\n    // add IBAN\n    this.Iban = Iban;\n    // add ABI\n    this.abi = abi;\n    // add ENS\n    this.ens = new ENS(this);\n    var methods = [\n        new Method({\n            name: \"getNodeInfo\",\n            call: \"web3_clientVersion\"\n        }),\n        new Method({\n            name: \"getProtocolVersion\",\n            call: \"eth_protocolVersion\",\n            params: 0\n        }),\n        new Method({\n            name: \"getCoinbase\",\n            call: \"eth_coinbase\",\n            params: 0\n        }),\n        new Method({\n            name: \"isMining\",\n            call: \"eth_mining\",\n            params: 0\n        }),\n        new Method({\n            name: \"getHashrate\",\n            call: \"eth_hashrate\",\n            params: 0,\n            outputFormatter: utils.hexToNumber\n        }),\n        new Method({\n            name: \"isSyncing\",\n            call: \"eth_syncing\",\n            params: 0,\n            outputFormatter: formatter.outputSyncingFormatter\n        }),\n        new Method({\n            name: \"getGasPrice\",\n            call: \"eth_gasPrice\",\n            params: 0,\n            outputFormatter: formatter.outputBigNumberFormatter\n        }),\n        new Method({\n            name: \"getFeeHistory\",\n            call: \"eth_feeHistory\",\n            params: 3,\n            inputFormatter: [\n                utils.numberToHex,\n                formatter.inputBlockNumberFormatter,\n                null\n            ]\n        }),\n        new Method({\n            name: \"getAccounts\",\n            call: \"eth_accounts\",\n            params: 0,\n            outputFormatter: utils.toChecksumAddress\n        }),\n        new Method({\n            name: \"getBlockNumber\",\n            call: \"eth_blockNumber\",\n            params: 0,\n            outputFormatter: utils.hexToNumber\n        }),\n        new Method({\n            name: \"getBalance\",\n            call: \"eth_getBalance\",\n            params: 2,\n            inputFormatter: [\n                formatter.inputAddressFormatter,\n                formatter.inputDefaultBlockNumberFormatter\n            ],\n            outputFormatter: formatter.outputBigNumberFormatter\n        }),\n        new Method({\n            name: \"getStorageAt\",\n            call: \"eth_getStorageAt\",\n            params: 3,\n            inputFormatter: [\n                formatter.inputAddressFormatter,\n                utils.numberToHex,\n                formatter.inputDefaultBlockNumberFormatter\n            ]\n        }),\n        new Method({\n            name: \"getCode\",\n            call: \"eth_getCode\",\n            params: 2,\n            inputFormatter: [\n                formatter.inputAddressFormatter,\n                formatter.inputDefaultBlockNumberFormatter\n            ]\n        }),\n        new Method({\n            name: \"getBlock\",\n            call: blockCall,\n            params: 2,\n            inputFormatter: [\n                formatter.inputBlockNumberFormatter,\n                function(val) {\n                    return !!val;\n                }\n            ],\n            outputFormatter: formatter.outputBlockFormatter\n        }),\n        new Method({\n            name: \"getUncle\",\n            call: uncleCall,\n            params: 2,\n            inputFormatter: [\n                formatter.inputBlockNumberFormatter,\n                utils.numberToHex\n            ],\n            outputFormatter: formatter.outputBlockFormatter\n        }),\n        new Method({\n            name: \"getBlockTransactionCount\",\n            call: getBlockTransactionCountCall,\n            params: 1,\n            inputFormatter: [\n                formatter.inputBlockNumberFormatter\n            ],\n            outputFormatter: utils.hexToNumber\n        }),\n        new Method({\n            name: \"getBlockUncleCount\",\n            call: uncleCountCall,\n            params: 1,\n            inputFormatter: [\n                formatter.inputBlockNumberFormatter\n            ],\n            outputFormatter: utils.hexToNumber\n        }),\n        new Method({\n            name: \"getTransaction\",\n            call: \"eth_getTransactionByHash\",\n            params: 1,\n            inputFormatter: [\n                null\n            ],\n            outputFormatter: formatter.outputTransactionFormatter\n        }),\n        new Method({\n            name: \"getTransactionFromBlock\",\n            call: transactionFromBlockCall,\n            params: 2,\n            inputFormatter: [\n                formatter.inputBlockNumberFormatter,\n                utils.numberToHex\n            ],\n            outputFormatter: formatter.outputTransactionFormatter\n        }),\n        new Method({\n            name: \"getTransactionReceipt\",\n            call: \"eth_getTransactionReceipt\",\n            params: 1,\n            inputFormatter: [\n                null\n            ],\n            outputFormatter: formatter.outputTransactionReceiptFormatter\n        }),\n        new Method({\n            name: \"getTransactionCount\",\n            call: \"eth_getTransactionCount\",\n            params: 2,\n            inputFormatter: [\n                formatter.inputAddressFormatter,\n                formatter.inputDefaultBlockNumberFormatter\n            ],\n            outputFormatter: utils.hexToNumber\n        }),\n        new Method({\n            name: \"sendSignedTransaction\",\n            call: \"eth_sendRawTransaction\",\n            params: 1,\n            inputFormatter: [\n                null\n            ],\n            abiCoder: abi\n        }),\n        new Method({\n            name: \"signTransaction\",\n            call: \"eth_signTransaction\",\n            params: 1,\n            inputFormatter: [\n                formatter.inputTransactionFormatter\n            ]\n        }),\n        new Method({\n            name: \"sendTransaction\",\n            call: \"eth_sendTransaction\",\n            params: 1,\n            inputFormatter: [\n                formatter.inputTransactionFormatter\n            ],\n            abiCoder: abi\n        }),\n        new Method({\n            name: \"sign\",\n            call: \"eth_sign\",\n            params: 2,\n            inputFormatter: [\n                formatter.inputSignFormatter,\n                formatter.inputAddressFormatter\n            ],\n            transformPayload: function(payload) {\n                payload.params.reverse();\n                return payload;\n            }\n        }),\n        new Method({\n            name: \"call\",\n            call: \"eth_call\",\n            params: 2,\n            inputFormatter: [\n                formatter.inputCallFormatter,\n                formatter.inputDefaultBlockNumberFormatter\n            ],\n            abiCoder: abi\n        }),\n        new Method({\n            name: \"estimateGas\",\n            call: \"eth_estimateGas\",\n            params: 1,\n            inputFormatter: [\n                formatter.inputCallFormatter\n            ],\n            outputFormatter: utils.hexToNumber\n        }),\n        new Method({\n            name: \"submitWork\",\n            call: \"eth_submitWork\",\n            params: 3\n        }),\n        new Method({\n            name: \"getWork\",\n            call: \"eth_getWork\",\n            params: 0\n        }),\n        new Method({\n            name: \"getPastLogs\",\n            call: \"eth_getLogs\",\n            params: 1,\n            inputFormatter: [\n                formatter.inputLogFormatter\n            ],\n            outputFormatter: formatter.outputLogFormatter\n        }),\n        new Method({\n            name: \"getChainId\",\n            call: \"eth_chainId\",\n            params: 0,\n            outputFormatter: utils.hexToNumber\n        }),\n        new Method({\n            name: \"requestAccounts\",\n            call: \"eth_requestAccounts\",\n            params: 0,\n            outputFormatter: utils.toChecksumAddress\n        }),\n        new Method({\n            name: \"getProof\",\n            call: \"eth_getProof\",\n            params: 3,\n            inputFormatter: [\n                formatter.inputAddressFormatter,\n                formatter.inputStorageKeysFormatter,\n                formatter.inputDefaultBlockNumberFormatter\n            ],\n            outputFormatter: formatter.outputProofFormatter\n        }),\n        new Method({\n            name: \"getPendingTransactions\",\n            call: \"eth_pendingTransactions\",\n            params: 0,\n            outputFormatter: formatter.outputTransactionFormatter\n        }),\n        new Method({\n            name: \"createAccessList\",\n            call: \"eth_createAccessList\",\n            params: 2,\n            inputFormatter: [\n                formatter.inputTransactionFormatter,\n                formatter.inputDefaultBlockNumberFormatter\n            ]\n        }),\n        // subscriptions\n        new Subscriptions({\n            name: \"subscribe\",\n            type: \"eth\",\n            subscriptions: {\n                \"newBlockHeaders\": {\n                    // TODO rename on RPC side?\n                    subscriptionName: \"newHeads\",\n                    params: 0,\n                    outputFormatter: formatter.outputBlockFormatter\n                },\n                \"pendingTransactions\": {\n                    subscriptionName: \"newPendingTransactions\",\n                    params: 0\n                },\n                \"logs\": {\n                    params: 1,\n                    inputFormatter: [\n                        formatter.inputLogFormatter\n                    ],\n                    outputFormatter: formatter.outputLogFormatter,\n                    // DUBLICATE, also in web3-eth-contract\n                    subscriptionHandler: function(output) {\n                        if (output.removed) {\n                            this.emit(\"changed\", output);\n                        } else {\n                            this.emit(\"data\", output);\n                        }\n                        if (typeof this.callback === \"function\") {\n                            this.callback(null, output, this);\n                        }\n                    }\n                },\n                \"syncing\": {\n                    params: 0,\n                    outputFormatter: formatter.outputSyncingFormatter,\n                    subscriptionHandler: function(output) {\n                        var _this = this;\n                        // fire TRUE at start\n                        if (this._isSyncing !== true) {\n                            this._isSyncing = true;\n                            this.emit(\"changed\", _this._isSyncing);\n                            if (typeof this.callback === \"function\") {\n                                this.callback(null, _this._isSyncing, this);\n                            }\n                            setTimeout(function() {\n                                _this.emit(\"data\", output);\n                                if (typeof _this.callback === \"function\") {\n                                    _this.callback(null, output, _this);\n                                }\n                            }, 0);\n                        // fire sync status\n                        } else {\n                            this.emit(\"data\", output);\n                            if (typeof _this.callback === \"function\") {\n                                this.callback(null, output, this);\n                            }\n                            // wait for some time before fireing the FALSE\n                            clearTimeout(this._isSyncingTimeout);\n                            this._isSyncingTimeout = setTimeout(function() {\n                                if (output.currentBlock > output.highestBlock - 200) {\n                                    _this._isSyncing = false;\n                                    _this.emit(\"changed\", _this._isSyncing);\n                                    if (typeof _this.callback === \"function\") {\n                                        _this.callback(null, _this._isSyncing, _this);\n                                    }\n                                }\n                            }, 500);\n                        }\n                    }\n                }\n            }\n        })\n    ];\n    methods.forEach(function(method) {\n        method.attachToObject(_this);\n        method.setRequestManager(_this._requestManager, _this.accounts); // second param is the eth.accounts module (necessary for signing transactions locally)\n        method.defaultBlock = _this.defaultBlock;\n        method.defaultAccount = _this.defaultAccount;\n        method.transactionBlockTimeout = _this.transactionBlockTimeout;\n        method.transactionConfirmationBlocks = _this.transactionConfirmationBlocks;\n        method.transactionPollingTimeout = _this.transactionPollingTimeout;\n        method.transactionPollingInterval = _this.transactionPollingInterval;\n        method.handleRevert = _this.handleRevert;\n    });\n};\n// Adds the static givenProvider and providers property to the Eth module\ncore.addProviders(Eth);\nmodule.exports = Eth;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-eth/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-net/lib/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/node_modules/web3-net/lib/index.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ /**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */ \nvar core = __webpack_require__(/*! web3-core */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-core/lib/index.js\");\nvar Method = __webpack_require__(/*! web3-core-method */ \"(ssr)/./node_modules/web3-core-method/lib/index.js\");\nvar utils = __webpack_require__(/*! web3-utils */ \"(ssr)/./node_modules/web3-utils/lib/index.js\");\nvar Net = function() {\n    var _this = this;\n    // sets _requestmanager\n    core.packageInit(this, arguments);\n    [\n        new Method({\n            name: \"getId\",\n            call: \"net_version\",\n            params: 0,\n            outputFormatter: parseInt\n        }),\n        new Method({\n            name: \"isListening\",\n            call: \"net_listening\",\n            params: 0\n        }),\n        new Method({\n            name: \"getPeerCount\",\n            call: \"net_peerCount\",\n            params: 0,\n            outputFormatter: utils.hexToNumber\n        })\n    ].forEach(function(method) {\n        method.attachToObject(_this);\n        method.setRequestManager(_this._requestManager);\n    });\n};\ncore.addProviders(Net);\nmodule.exports = Net;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL25vZGVfbW9kdWxlcy93ZWIzLW5ldC9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztBQWVBLEdBQ0E7Ozs7Q0FJQyxHQUNZO0FBQ2IsSUFBSUEsT0FBT0MsbUJBQU9BLENBQUM7QUFDbkIsSUFBSUMsU0FBU0QsbUJBQU9BLENBQUM7QUFDckIsSUFBSUUsUUFBUUYsbUJBQU9BLENBQUM7QUFDcEIsSUFBSUcsTUFBTTtJQUNOLElBQUlDLFFBQVEsSUFBSTtJQUNoQix1QkFBdUI7SUFDdkJMLEtBQUtNLFdBQVcsQ0FBQyxJQUFJLEVBQUVDO0lBQ3ZCO1FBQ0ksSUFBSUwsT0FBTztZQUNQTSxNQUFNO1lBQ05DLE1BQU07WUFDTkMsUUFBUTtZQUNSQyxpQkFBaUJDO1FBQ3JCO1FBQ0EsSUFBSVYsT0FBTztZQUNQTSxNQUFNO1lBQ05DLE1BQU07WUFDTkMsUUFBUTtRQUNaO1FBQ0EsSUFBSVIsT0FBTztZQUNQTSxNQUFNO1lBQ05DLE1BQU07WUFDTkMsUUFBUTtZQUNSQyxpQkFBaUJSLE1BQU1VLFdBQVc7UUFDdEM7S0FDSCxDQUFDQyxPQUFPLENBQUMsU0FBVUMsTUFBTTtRQUN0QkEsT0FBT0MsY0FBYyxDQUFDWDtRQUN0QlUsT0FBT0UsaUJBQWlCLENBQUNaLE1BQU1hLGVBQWU7SUFDbEQ7QUFDSjtBQUNBbEIsS0FBS21CLFlBQVksQ0FBQ2Y7QUFDbEJnQixPQUFPQyxPQUFPLEdBQUdqQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BhbGNoL2FsY2hlbXktd2ViMy9ub2RlX21vZHVsZXMvd2ViMy1uZXQvbGliL2luZGV4LmpzPzAyMjciXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAgICBUaGlzIGZpbGUgaXMgcGFydCBvZiB3ZWIzLmpzLlxuXG4gICAgd2ViMy5qcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gICAgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAgICAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuXG4gICAgd2ViMy5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICAgIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICAgIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuXG4gICAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gICAgYWxvbmcgd2l0aCB3ZWIzLmpzLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuKi9cbi8qKlxuICogQGZpbGUgaW5kZXguanNcbiAqIEBhdXRob3IgRmFiaWFuIFZvZ2Vsc3RlbGxlciA8ZmFiaWFuQGV0aGVyZXVtLm9yZz5cbiAqIEBkYXRlIDIwMTdcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgY29yZSA9IHJlcXVpcmUoJ3dlYjMtY29yZScpO1xudmFyIE1ldGhvZCA9IHJlcXVpcmUoJ3dlYjMtY29yZS1tZXRob2QnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJ3dlYjMtdXRpbHMnKTtcbnZhciBOZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAvLyBzZXRzIF9yZXF1ZXN0bWFuYWdlclxuICAgIGNvcmUucGFja2FnZUluaXQodGhpcywgYXJndW1lbnRzKTtcbiAgICBbXG4gICAgICAgIG5ldyBNZXRob2Qoe1xuICAgICAgICAgICAgbmFtZTogJ2dldElkJyxcbiAgICAgICAgICAgIGNhbGw6ICduZXRfdmVyc2lvbicsXG4gICAgICAgICAgICBwYXJhbXM6IDAsXG4gICAgICAgICAgICBvdXRwdXRGb3JtYXR0ZXI6IHBhcnNlSW50XG4gICAgICAgIH0pLFxuICAgICAgICBuZXcgTWV0aG9kKHtcbiAgICAgICAgICAgIG5hbWU6ICdpc0xpc3RlbmluZycsXG4gICAgICAgICAgICBjYWxsOiAnbmV0X2xpc3RlbmluZycsXG4gICAgICAgICAgICBwYXJhbXM6IDBcbiAgICAgICAgfSksXG4gICAgICAgIG5ldyBNZXRob2Qoe1xuICAgICAgICAgICAgbmFtZTogJ2dldFBlZXJDb3VudCcsXG4gICAgICAgICAgICBjYWxsOiAnbmV0X3BlZXJDb3VudCcsXG4gICAgICAgICAgICBwYXJhbXM6IDAsXG4gICAgICAgICAgICBvdXRwdXRGb3JtYXR0ZXI6IHV0aWxzLmhleFRvTnVtYmVyXG4gICAgICAgIH0pXG4gICAgXS5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgICAgICAgbWV0aG9kLmF0dGFjaFRvT2JqZWN0KF90aGlzKTtcbiAgICAgICAgbWV0aG9kLnNldFJlcXVlc3RNYW5hZ2VyKF90aGlzLl9yZXF1ZXN0TWFuYWdlcik7XG4gICAgfSk7XG59O1xuY29yZS5hZGRQcm92aWRlcnMoTmV0KTtcbm1vZHVsZS5leHBvcnRzID0gTmV0O1xuIl0sIm5hbWVzIjpbImNvcmUiLCJyZXF1aXJlIiwiTWV0aG9kIiwidXRpbHMiLCJOZXQiLCJfdGhpcyIsInBhY2thZ2VJbml0IiwiYXJndW1lbnRzIiwibmFtZSIsImNhbGwiLCJwYXJhbXMiLCJvdXRwdXRGb3JtYXR0ZXIiLCJwYXJzZUludCIsImhleFRvTnVtYmVyIiwiZm9yRWFjaCIsIm1ldGhvZCIsImF0dGFjaFRvT2JqZWN0Iiwic2V0UmVxdWVzdE1hbmFnZXIiLCJfcmVxdWVzdE1hbmFnZXIiLCJhZGRQcm92aWRlcnMiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-net/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3/lib/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/node_modules/web3/lib/index.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ /**\n * @file index.js\n * @authors:\n *   Fabian Vogelsteller <fabian@ethereum.org>\n *   Gav Wood <gav@parity.io>\n *   Jeffrey Wilcke <jeffrey.wilcke@ethereum.org>\n *   Marek Kotewicz <marek@parity.io>\n *   Marian Oancea <marian@ethereum.org>\n * @date 2017\n */ \nvar version = (__webpack_require__(/*! ../package.json */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3/package.json\").version);\nvar core = __webpack_require__(/*! web3-core */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-core/lib/index.js\");\nvar Eth = __webpack_require__(/*! web3-eth */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-eth/lib/index.js\");\nvar Net = __webpack_require__(/*! web3-net */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-net/lib/index.js\");\nvar Personal = __webpack_require__(/*! web3-eth-personal */ \"(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3-eth-personal/lib/index.js\");\nvar Shh = __webpack_require__(/*! web3-shh */ \"(ssr)/./node_modules/web3-shh/lib/index.js\");\nvar Bzz = __webpack_require__(/*! web3-bzz */ \"(ssr)/./node_modules/web3-bzz/lib/index.js\");\nvar utils = __webpack_require__(/*! web3-utils */ \"(ssr)/./node_modules/web3-utils/lib/index.js\");\nvar Web3 = function Web3() {\n    var _this = this;\n    // sets _requestmanager etc\n    core.packageInit(this, arguments);\n    this.version = version;\n    this.utils = utils;\n    this.eth = new Eth(this);\n    this.shh = new Shh(this);\n    this.bzz = new Bzz(this);\n    // overwrite package setProvider\n    var setProvider = this.setProvider;\n    this.setProvider = function(provider, net) {\n        /*jshint unused: false */ setProvider.apply(_this, arguments);\n        _this.eth.setRequestManager(_this._requestManager);\n        _this.shh.setRequestManager(_this._requestManager);\n        _this.bzz.setProvider(provider);\n        return true;\n    };\n};\nWeb3.version = version;\nWeb3.utils = utils;\nWeb3.modules = {\n    Eth: Eth,\n    Net: Net,\n    Personal: Personal,\n    Shh: Shh,\n    Bzz: Bzz\n};\ncore.addProviders(Web3);\nmodule.exports = Web3;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFsY2gvYWxjaGVteS13ZWIzL25vZGVfbW9kdWxlcy93ZWIzL2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0FBZUEsR0FDQTs7Ozs7Ozs7O0NBU0MsR0FDWTtBQUNiLElBQUlBLFVBQVVDLDhIQUFrQztBQUNoRCxJQUFJQyxPQUFPRCxtQkFBT0EsQ0FBQztBQUNuQixJQUFJRSxNQUFNRixtQkFBT0EsQ0FBQztBQUNsQixJQUFJRyxNQUFNSCxtQkFBT0EsQ0FBQztBQUNsQixJQUFJSSxXQUFXSixtQkFBT0EsQ0FBQztBQUN2QixJQUFJSyxNQUFNTCxtQkFBT0EsQ0FBQztBQUNsQixJQUFJTSxNQUFNTixtQkFBT0EsQ0FBQztBQUNsQixJQUFJTyxRQUFRUCxtQkFBT0EsQ0FBQztBQUNwQixJQUFJUSxPQUFPLFNBQVNBO0lBQ2hCLElBQUlDLFFBQVEsSUFBSTtJQUNoQiwyQkFBMkI7SUFDM0JSLEtBQUtTLFdBQVcsQ0FBQyxJQUFJLEVBQUVDO0lBQ3ZCLElBQUksQ0FBQ1osT0FBTyxHQUFHQTtJQUNmLElBQUksQ0FBQ1EsS0FBSyxHQUFHQTtJQUNiLElBQUksQ0FBQ0ssR0FBRyxHQUFHLElBQUlWLElBQUksSUFBSTtJQUN2QixJQUFJLENBQUNXLEdBQUcsR0FBRyxJQUFJUixJQUFJLElBQUk7SUFDdkIsSUFBSSxDQUFDUyxHQUFHLEdBQUcsSUFBSVIsSUFBSSxJQUFJO0lBQ3ZCLGdDQUFnQztJQUNoQyxJQUFJUyxjQUFjLElBQUksQ0FBQ0EsV0FBVztJQUNsQyxJQUFJLENBQUNBLFdBQVcsR0FBRyxTQUFVQyxRQUFRLEVBQUVDLEdBQUc7UUFDdEMsdUJBQXVCLEdBQ3ZCRixZQUFZRyxLQUFLLENBQUNULE9BQU9FO1FBQ3pCRixNQUFNRyxHQUFHLENBQUNPLGlCQUFpQixDQUFDVixNQUFNVyxlQUFlO1FBQ2pEWCxNQUFNSSxHQUFHLENBQUNNLGlCQUFpQixDQUFDVixNQUFNVyxlQUFlO1FBQ2pEWCxNQUFNSyxHQUFHLENBQUNDLFdBQVcsQ0FBQ0M7UUFDdEIsT0FBTztJQUNYO0FBQ0o7QUFDQVIsS0FBS1QsT0FBTyxHQUFHQTtBQUNmUyxLQUFLRCxLQUFLLEdBQUdBO0FBQ2JDLEtBQUthLE9BQU8sR0FBRztJQUNYbkIsS0FBS0E7SUFDTEMsS0FBS0E7SUFDTEMsVUFBVUE7SUFDVkMsS0FBS0E7SUFDTEMsS0FBS0E7QUFDVDtBQUNBTCxLQUFLcUIsWUFBWSxDQUFDZDtBQUNsQmUsT0FBT0MsT0FBTyxHQUFHaEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AYWxjaC9hbGNoZW15LXdlYjMvbm9kZV9tb2R1bGVzL3dlYjMvbGliL2luZGV4LmpzPzVlYWUiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAgICBUaGlzIGZpbGUgaXMgcGFydCBvZiB3ZWIzLmpzLlxuXG4gICAgd2ViMy5qcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gICAgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAgICAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuXG4gICAgd2ViMy5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICAgIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICAgIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuXG4gICAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gICAgYWxvbmcgd2l0aCB3ZWIzLmpzLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuKi9cbi8qKlxuICogQGZpbGUgaW5kZXguanNcbiAqIEBhdXRob3JzOlxuICogICBGYWJpYW4gVm9nZWxzdGVsbGVyIDxmYWJpYW5AZXRoZXJldW0ub3JnPlxuICogICBHYXYgV29vZCA8Z2F2QHBhcml0eS5pbz5cbiAqICAgSmVmZnJleSBXaWxja2UgPGplZmZyZXkud2lsY2tlQGV0aGVyZXVtLm9yZz5cbiAqICAgTWFyZWsgS290ZXdpY3ogPG1hcmVrQHBhcml0eS5pbz5cbiAqICAgTWFyaWFuIE9hbmNlYSA8bWFyaWFuQGV0aGVyZXVtLm9yZz5cbiAqIEBkYXRlIDIwMTdcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgdmVyc2lvbiA9IHJlcXVpcmUoJy4uL3BhY2thZ2UuanNvbicpLnZlcnNpb247XG52YXIgY29yZSA9IHJlcXVpcmUoJ3dlYjMtY29yZScpO1xudmFyIEV0aCA9IHJlcXVpcmUoJ3dlYjMtZXRoJyk7XG52YXIgTmV0ID0gcmVxdWlyZSgnd2ViMy1uZXQnKTtcbnZhciBQZXJzb25hbCA9IHJlcXVpcmUoJ3dlYjMtZXRoLXBlcnNvbmFsJyk7XG52YXIgU2hoID0gcmVxdWlyZSgnd2ViMy1zaGgnKTtcbnZhciBCenogPSByZXF1aXJlKCd3ZWIzLWJ6eicpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnd2ViMy11dGlscycpO1xudmFyIFdlYjMgPSBmdW5jdGlvbiBXZWIzKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgLy8gc2V0cyBfcmVxdWVzdG1hbmFnZXIgZXRjXG4gICAgY29yZS5wYWNrYWdlSW5pdCh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHRoaXMudmVyc2lvbiA9IHZlcnNpb247XG4gICAgdGhpcy51dGlscyA9IHV0aWxzO1xuICAgIHRoaXMuZXRoID0gbmV3IEV0aCh0aGlzKTtcbiAgICB0aGlzLnNoaCA9IG5ldyBTaGgodGhpcyk7XG4gICAgdGhpcy5ienogPSBuZXcgQnp6KHRoaXMpO1xuICAgIC8vIG92ZXJ3cml0ZSBwYWNrYWdlIHNldFByb3ZpZGVyXG4gICAgdmFyIHNldFByb3ZpZGVyID0gdGhpcy5zZXRQcm92aWRlcjtcbiAgICB0aGlzLnNldFByb3ZpZGVyID0gZnVuY3Rpb24gKHByb3ZpZGVyLCBuZXQpIHtcbiAgICAgICAgLypqc2hpbnQgdW51c2VkOiBmYWxzZSAqL1xuICAgICAgICBzZXRQcm92aWRlci5hcHBseShfdGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgX3RoaXMuZXRoLnNldFJlcXVlc3RNYW5hZ2VyKF90aGlzLl9yZXF1ZXN0TWFuYWdlcik7XG4gICAgICAgIF90aGlzLnNoaC5zZXRSZXF1ZXN0TWFuYWdlcihfdGhpcy5fcmVxdWVzdE1hbmFnZXIpO1xuICAgICAgICBfdGhpcy5ienouc2V0UHJvdmlkZXIocHJvdmlkZXIpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xufTtcbldlYjMudmVyc2lvbiA9IHZlcnNpb247XG5XZWIzLnV0aWxzID0gdXRpbHM7XG5XZWIzLm1vZHVsZXMgPSB7XG4gICAgRXRoOiBFdGgsXG4gICAgTmV0OiBOZXQsXG4gICAgUGVyc29uYWw6IFBlcnNvbmFsLFxuICAgIFNoaDogU2hoLFxuICAgIEJ6ejogQnp6XG59O1xuY29yZS5hZGRQcm92aWRlcnMoV2ViMyk7XG5tb2R1bGUuZXhwb3J0cyA9IFdlYjM7XG4iXSwibmFtZXMiOlsidmVyc2lvbiIsInJlcXVpcmUiLCJjb3JlIiwiRXRoIiwiTmV0IiwiUGVyc29uYWwiLCJTaGgiLCJCenoiLCJ1dGlscyIsIldlYjMiLCJfdGhpcyIsInBhY2thZ2VJbml0IiwiYXJndW1lbnRzIiwiZXRoIiwic2hoIiwiYnp6Iiwic2V0UHJvdmlkZXIiLCJwcm92aWRlciIsIm5ldCIsImFwcGx5Iiwic2V0UmVxdWVzdE1hbmFnZXIiLCJfcmVxdWVzdE1hbmFnZXIiLCJtb2R1bGVzIiwiYWRkUHJvdmlkZXJzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@alch/alchemy-web3/node_modules/web3/package.json":
/*!************************************************************************!*\
  !*** ./node_modules/@alch/alchemy-web3/node_modules/web3/package.json ***!
  \************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"name":"web3","version":"1.10.3","description":"Ethereum JavaScript API","repository":"https://github.com/ethereum/web3.js","license":"LGPL-3.0","engines":{"node":">=8.0.0"},"main":"lib/index.js","browser":"dist/web3.min.js","bugs":{"url":"https://github.com/ethereum/web3.js/issues"},"keywords":["Ethereum","JavaScript","API"],"author":"ethereum.org","types":"types/index.d.ts","scripts":{"compile":"tsc -b tsconfig.json","dtslint":"dtslint --localTs ../../node_modules/typescript/lib types","postinstall":"echo \\"Web3.js 4.x alpha has been released for early testing and feedback. Checkout doc at https://docs.web3js.org/ \\""},"authors":[{"name":"Fabian Vogelsteller","email":"fabian@ethereum.org","homepage":"http://frozeman.de"},{"name":"Marek Kotewicz","email":"marek@parity.io","url":"https://github.com/debris"},{"name":"Marian Oancea","url":"https://github.com/cubedro"},{"name":"Gav Wood","email":"g@parity.io","homepage":"http://gavwood.com"},{"name":"Jeffery Wilcke","email":"jeffrey.wilcke@ethereum.org","url":"https://github.com/obscuren"}],"dependencies":{"web3-bzz":"1.10.3","web3-core":"1.10.3","web3-eth":"1.10.3","web3-eth-personal":"1.10.3","web3-net":"1.10.3","web3-shh":"1.10.3","web3-utils":"1.10.3"},"devDependencies":{"@types/node":"^12.12.6","dtslint":"^3.4.1","typescript":"4.9.5","web3-core-helpers":"1.10.3"},"gitHead":"24d310caa06af88cb1fe236b7d3b9d135f053d71"}');

/***/ })

};
;