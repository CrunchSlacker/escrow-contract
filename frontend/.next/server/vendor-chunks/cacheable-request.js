"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/cacheable-request";
exports.ids = ["vendor-chunks/cacheable-request"];
exports.modules = {

/***/ "(ssr)/./node_modules/cacheable-request/node_modules/get-stream/buffer-stream.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/cacheable-request/node_modules/get-stream/buffer-stream.js ***!
  \*********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { PassThrough: PassThroughStream } = __webpack_require__(/*! stream */ \"stream\");\nmodule.exports = (options)=>{\n    options = {\n        ...options\n    };\n    const { array } = options;\n    let { encoding } = options;\n    const isBuffer = encoding === \"buffer\";\n    let objectMode = false;\n    if (array) {\n        objectMode = !(encoding || isBuffer);\n    } else {\n        encoding = encoding || \"utf8\";\n    }\n    if (isBuffer) {\n        encoding = null;\n    }\n    const stream = new PassThroughStream({\n        objectMode\n    });\n    if (encoding) {\n        stream.setEncoding(encoding);\n    }\n    let length = 0;\n    const chunks = [];\n    stream.on(\"data\", (chunk)=>{\n        chunks.push(chunk);\n        if (objectMode) {\n            length = chunks.length;\n        } else {\n            length += chunk.length;\n        }\n    });\n    stream.getBufferedValue = ()=>{\n        if (array) {\n            return chunks;\n        }\n        return isBuffer ? Buffer.concat(chunks, length) : chunks.join(\"\");\n    };\n    stream.getBufferedLength = ()=>length;\n    return stream;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2FjaGVhYmxlLXJlcXVlc3Qvbm9kZV9tb2R1bGVzL2dldC1zdHJlYW0vYnVmZmVyLXN0cmVhbS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBLE1BQU0sRUFBQ0EsYUFBYUMsaUJBQWlCLEVBQUMsR0FBR0MsbUJBQU9BLENBQUM7QUFFakRDLE9BQU9DLE9BQU8sR0FBR0MsQ0FBQUE7SUFDaEJBLFVBQVU7UUFBQyxHQUFHQSxPQUFPO0lBQUE7SUFFckIsTUFBTSxFQUFDQyxLQUFLLEVBQUMsR0FBR0Q7SUFDaEIsSUFBSSxFQUFDRSxRQUFRLEVBQUMsR0FBR0Y7SUFDakIsTUFBTUcsV0FBV0QsYUFBYTtJQUM5QixJQUFJRSxhQUFhO0lBRWpCLElBQUlILE9BQU87UUFDVkcsYUFBYSxDQUFFRixDQUFBQSxZQUFZQyxRQUFPO0lBQ25DLE9BQU87UUFDTkQsV0FBV0EsWUFBWTtJQUN4QjtJQUVBLElBQUlDLFVBQVU7UUFDYkQsV0FBVztJQUNaO0lBRUEsTUFBTUcsU0FBUyxJQUFJVCxrQkFBa0I7UUFBQ1E7SUFBVTtJQUVoRCxJQUFJRixVQUFVO1FBQ2JHLE9BQU9DLFdBQVcsQ0FBQ0o7SUFDcEI7SUFFQSxJQUFJSyxTQUFTO0lBQ2IsTUFBTUMsU0FBUyxFQUFFO0lBRWpCSCxPQUFPSSxFQUFFLENBQUMsUUFBUUMsQ0FBQUE7UUFDakJGLE9BQU9HLElBQUksQ0FBQ0Q7UUFFWixJQUFJTixZQUFZO1lBQ2ZHLFNBQVNDLE9BQU9ELE1BQU07UUFDdkIsT0FBTztZQUNOQSxVQUFVRyxNQUFNSCxNQUFNO1FBQ3ZCO0lBQ0Q7SUFFQUYsT0FBT08sZ0JBQWdCLEdBQUc7UUFDekIsSUFBSVgsT0FBTztZQUNWLE9BQU9PO1FBQ1I7UUFFQSxPQUFPTCxXQUFXVSxPQUFPQyxNQUFNLENBQUNOLFFBQVFELFVBQVVDLE9BQU9PLElBQUksQ0FBQztJQUMvRDtJQUVBVixPQUFPVyxpQkFBaUIsR0FBRyxJQUFNVDtJQUVqQyxPQUFPRjtBQUNSIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvY2FjaGVhYmxlLXJlcXVlc3Qvbm9kZV9tb2R1bGVzL2dldC1zdHJlYW0vYnVmZmVyLXN0cmVhbS5qcz8xMzQyIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IHtQYXNzVGhyb3VnaDogUGFzc1Rocm91Z2hTdHJlYW19ID0gcmVxdWlyZSgnc3RyZWFtJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gb3B0aW9ucyA9PiB7XG5cdG9wdGlvbnMgPSB7Li4ub3B0aW9uc307XG5cblx0Y29uc3Qge2FycmF5fSA9IG9wdGlvbnM7XG5cdGxldCB7ZW5jb2Rpbmd9ID0gb3B0aW9ucztcblx0Y29uc3QgaXNCdWZmZXIgPSBlbmNvZGluZyA9PT0gJ2J1ZmZlcic7XG5cdGxldCBvYmplY3RNb2RlID0gZmFsc2U7XG5cblx0aWYgKGFycmF5KSB7XG5cdFx0b2JqZWN0TW9kZSA9ICEoZW5jb2RpbmcgfHwgaXNCdWZmZXIpO1xuXHR9IGVsc2Uge1xuXHRcdGVuY29kaW5nID0gZW5jb2RpbmcgfHwgJ3V0ZjgnO1xuXHR9XG5cblx0aWYgKGlzQnVmZmVyKSB7XG5cdFx0ZW5jb2RpbmcgPSBudWxsO1xuXHR9XG5cblx0Y29uc3Qgc3RyZWFtID0gbmV3IFBhc3NUaHJvdWdoU3RyZWFtKHtvYmplY3RNb2RlfSk7XG5cblx0aWYgKGVuY29kaW5nKSB7XG5cdFx0c3RyZWFtLnNldEVuY29kaW5nKGVuY29kaW5nKTtcblx0fVxuXG5cdGxldCBsZW5ndGggPSAwO1xuXHRjb25zdCBjaHVua3MgPSBbXTtcblxuXHRzdHJlYW0ub24oJ2RhdGEnLCBjaHVuayA9PiB7XG5cdFx0Y2h1bmtzLnB1c2goY2h1bmspO1xuXG5cdFx0aWYgKG9iamVjdE1vZGUpIHtcblx0XHRcdGxlbmd0aCA9IGNodW5rcy5sZW5ndGg7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGxlbmd0aCArPSBjaHVuay5sZW5ndGg7XG5cdFx0fVxuXHR9KTtcblxuXHRzdHJlYW0uZ2V0QnVmZmVyZWRWYWx1ZSA9ICgpID0+IHtcblx0XHRpZiAoYXJyYXkpIHtcblx0XHRcdHJldHVybiBjaHVua3M7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGlzQnVmZmVyID8gQnVmZmVyLmNvbmNhdChjaHVua3MsIGxlbmd0aCkgOiBjaHVua3Muam9pbignJyk7XG5cdH07XG5cblx0c3RyZWFtLmdldEJ1ZmZlcmVkTGVuZ3RoID0gKCkgPT4gbGVuZ3RoO1xuXG5cdHJldHVybiBzdHJlYW07XG59O1xuIl0sIm5hbWVzIjpbIlBhc3NUaHJvdWdoIiwiUGFzc1Rocm91Z2hTdHJlYW0iLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsIm9wdGlvbnMiLCJhcnJheSIsImVuY29kaW5nIiwiaXNCdWZmZXIiLCJvYmplY3RNb2RlIiwic3RyZWFtIiwic2V0RW5jb2RpbmciLCJsZW5ndGgiLCJjaHVua3MiLCJvbiIsImNodW5rIiwicHVzaCIsImdldEJ1ZmZlcmVkVmFsdWUiLCJCdWZmZXIiLCJjb25jYXQiLCJqb2luIiwiZ2V0QnVmZmVyZWRMZW5ndGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cacheable-request/node_modules/get-stream/buffer-stream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/cacheable-request/node_modules/get-stream/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/cacheable-request/node_modules/get-stream/index.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { constants: BufferConstants } = __webpack_require__(/*! buffer */ \"buffer\");\nconst pump = __webpack_require__(/*! pump */ \"(ssr)/./node_modules/pump/index.js\");\nconst bufferStream = __webpack_require__(/*! ./buffer-stream */ \"(ssr)/./node_modules/cacheable-request/node_modules/get-stream/buffer-stream.js\");\nclass MaxBufferError extends Error {\n    constructor(){\n        super(\"maxBuffer exceeded\");\n        this.name = \"MaxBufferError\";\n    }\n}\nasync function getStream(inputStream, options) {\n    if (!inputStream) {\n        return Promise.reject(new Error(\"Expected a stream\"));\n    }\n    options = {\n        maxBuffer: Infinity,\n        ...options\n    };\n    const { maxBuffer } = options;\n    let stream;\n    await new Promise((resolve, reject)=>{\n        const rejectPromise = (error)=>{\n            // Don't retrieve an oversized buffer.\n            if (error && stream.getBufferedLength() <= BufferConstants.MAX_LENGTH) {\n                error.bufferedData = stream.getBufferedValue();\n            }\n            reject(error);\n        };\n        stream = pump(inputStream, bufferStream(options), (error)=>{\n            if (error) {\n                rejectPromise(error);\n                return;\n            }\n            resolve();\n        });\n        stream.on(\"data\", ()=>{\n            if (stream.getBufferedLength() > maxBuffer) {\n                rejectPromise(new MaxBufferError());\n            }\n        });\n    });\n    return stream.getBufferedValue();\n}\nmodule.exports = getStream;\n// TODO: Remove this for the next major release\nmodule.exports[\"default\"] = getStream;\nmodule.exports.buffer = (stream, options)=>getStream(stream, {\n        ...options,\n        encoding: \"buffer\"\n    });\nmodule.exports.array = (stream, options)=>getStream(stream, {\n        ...options,\n        array: true\n    });\nmodule.exports.MaxBufferError = MaxBufferError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2FjaGVhYmxlLXJlcXVlc3Qvbm9kZV9tb2R1bGVzL2dldC1zdHJlYW0vaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxNQUFNLEVBQUNBLFdBQVdDLGVBQWUsRUFBQyxHQUFHQyxtQkFBT0EsQ0FBQztBQUM3QyxNQUFNQyxPQUFPRCxtQkFBT0EsQ0FBQztBQUNyQixNQUFNRSxlQUFlRixtQkFBT0EsQ0FBQztBQUU3QixNQUFNRyx1QkFBdUJDO0lBQzVCQyxhQUFjO1FBQ2IsS0FBSyxDQUFDO1FBQ04sSUFBSSxDQUFDQyxJQUFJLEdBQUc7SUFDYjtBQUNEO0FBRUEsZUFBZUMsVUFBVUMsV0FBVyxFQUFFQyxPQUFPO0lBQzVDLElBQUksQ0FBQ0QsYUFBYTtRQUNqQixPQUFPRSxRQUFRQyxNQUFNLENBQUMsSUFBSVAsTUFBTTtJQUNqQztJQUVBSyxVQUFVO1FBQ1RHLFdBQVdDO1FBQ1gsR0FBR0osT0FBTztJQUNYO0lBRUEsTUFBTSxFQUFDRyxTQUFTLEVBQUMsR0FBR0g7SUFFcEIsSUFBSUs7SUFDSixNQUFNLElBQUlKLFFBQVEsQ0FBQ0ssU0FBU0o7UUFDM0IsTUFBTUssZ0JBQWdCQyxDQUFBQTtZQUNyQixzQ0FBc0M7WUFDdEMsSUFBSUEsU0FBU0gsT0FBT0ksaUJBQWlCLE1BQU1uQixnQkFBZ0JvQixVQUFVLEVBQUU7Z0JBQ3RFRixNQUFNRyxZQUFZLEdBQUdOLE9BQU9PLGdCQUFnQjtZQUM3QztZQUVBVixPQUFPTTtRQUNSO1FBRUFILFNBQVNiLEtBQUtPLGFBQWFOLGFBQWFPLFVBQVVRLENBQUFBO1lBQ2pELElBQUlBLE9BQU87Z0JBQ1ZELGNBQWNDO2dCQUNkO1lBQ0Q7WUFFQUY7UUFDRDtRQUVBRCxPQUFPUSxFQUFFLENBQUMsUUFBUTtZQUNqQixJQUFJUixPQUFPSSxpQkFBaUIsS0FBS04sV0FBVztnQkFDM0NJLGNBQWMsSUFBSWI7WUFDbkI7UUFDRDtJQUNEO0lBRUEsT0FBT1csT0FBT08sZ0JBQWdCO0FBQy9CO0FBRUFFLE9BQU9DLE9BQU8sR0FBR2pCO0FBQ2pCLCtDQUErQztBQUMvQ2dCLHlCQUFzQixHQUFHaEI7QUFDekJnQixxQkFBcUIsR0FBRyxDQUFDVCxRQUFRTCxVQUFZRixVQUFVTyxRQUFRO1FBQUMsR0FBR0wsT0FBTztRQUFFa0IsVUFBVTtJQUFRO0FBQzlGSixvQkFBb0IsR0FBRyxDQUFDVCxRQUFRTCxVQUFZRixVQUFVTyxRQUFRO1FBQUMsR0FBR0wsT0FBTztRQUFFbUIsT0FBTztJQUFJO0FBQ3RGTCw2QkFBNkIsR0FBR3BCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvY2FjaGVhYmxlLXJlcXVlc3Qvbm9kZV9tb2R1bGVzL2dldC1zdHJlYW0vaW5kZXguanM/M2JiYSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCB7Y29uc3RhbnRzOiBCdWZmZXJDb25zdGFudHN9ID0gcmVxdWlyZSgnYnVmZmVyJyk7XG5jb25zdCBwdW1wID0gcmVxdWlyZSgncHVtcCcpO1xuY29uc3QgYnVmZmVyU3RyZWFtID0gcmVxdWlyZSgnLi9idWZmZXItc3RyZWFtJyk7XG5cbmNsYXNzIE1heEJ1ZmZlckVycm9yIGV4dGVuZHMgRXJyb3Ige1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRzdXBlcignbWF4QnVmZmVyIGV4Y2VlZGVkJyk7XG5cdFx0dGhpcy5uYW1lID0gJ01heEJ1ZmZlckVycm9yJztcblx0fVxufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRTdHJlYW0oaW5wdXRTdHJlYW0sIG9wdGlvbnMpIHtcblx0aWYgKCFpbnB1dFN0cmVhbSkge1xuXHRcdHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ0V4cGVjdGVkIGEgc3RyZWFtJykpO1xuXHR9XG5cblx0b3B0aW9ucyA9IHtcblx0XHRtYXhCdWZmZXI6IEluZmluaXR5LFxuXHRcdC4uLm9wdGlvbnNcblx0fTtcblxuXHRjb25zdCB7bWF4QnVmZmVyfSA9IG9wdGlvbnM7XG5cblx0bGV0IHN0cmVhbTtcblx0YXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdGNvbnN0IHJlamVjdFByb21pc2UgPSBlcnJvciA9PiB7XG5cdFx0XHQvLyBEb24ndCByZXRyaWV2ZSBhbiBvdmVyc2l6ZWQgYnVmZmVyLlxuXHRcdFx0aWYgKGVycm9yICYmIHN0cmVhbS5nZXRCdWZmZXJlZExlbmd0aCgpIDw9IEJ1ZmZlckNvbnN0YW50cy5NQVhfTEVOR1RIKSB7XG5cdFx0XHRcdGVycm9yLmJ1ZmZlcmVkRGF0YSA9IHN0cmVhbS5nZXRCdWZmZXJlZFZhbHVlKCk7XG5cdFx0XHR9XG5cblx0XHRcdHJlamVjdChlcnJvcik7XG5cdFx0fTtcblxuXHRcdHN0cmVhbSA9IHB1bXAoaW5wdXRTdHJlYW0sIGJ1ZmZlclN0cmVhbShvcHRpb25zKSwgZXJyb3IgPT4ge1xuXHRcdFx0aWYgKGVycm9yKSB7XG5cdFx0XHRcdHJlamVjdFByb21pc2UoZXJyb3IpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHJlc29sdmUoKTtcblx0XHR9KTtcblxuXHRcdHN0cmVhbS5vbignZGF0YScsICgpID0+IHtcblx0XHRcdGlmIChzdHJlYW0uZ2V0QnVmZmVyZWRMZW5ndGgoKSA+IG1heEJ1ZmZlcikge1xuXHRcdFx0XHRyZWplY3RQcm9taXNlKG5ldyBNYXhCdWZmZXJFcnJvcigpKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG5cblx0cmV0dXJuIHN0cmVhbS5nZXRCdWZmZXJlZFZhbHVlKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0U3RyZWFtO1xuLy8gVE9ETzogUmVtb3ZlIHRoaXMgZm9yIHRoZSBuZXh0IG1ham9yIHJlbGVhc2Vcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBnZXRTdHJlYW07XG5tb2R1bGUuZXhwb3J0cy5idWZmZXIgPSAoc3RyZWFtLCBvcHRpb25zKSA9PiBnZXRTdHJlYW0oc3RyZWFtLCB7Li4ub3B0aW9ucywgZW5jb2Rpbmc6ICdidWZmZXInfSk7XG5tb2R1bGUuZXhwb3J0cy5hcnJheSA9IChzdHJlYW0sIG9wdGlvbnMpID0+IGdldFN0cmVhbShzdHJlYW0sIHsuLi5vcHRpb25zLCBhcnJheTogdHJ1ZX0pO1xubW9kdWxlLmV4cG9ydHMuTWF4QnVmZmVyRXJyb3IgPSBNYXhCdWZmZXJFcnJvcjtcbiJdLCJuYW1lcyI6WyJjb25zdGFudHMiLCJCdWZmZXJDb25zdGFudHMiLCJyZXF1aXJlIiwicHVtcCIsImJ1ZmZlclN0cmVhbSIsIk1heEJ1ZmZlckVycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJnZXRTdHJlYW0iLCJpbnB1dFN0cmVhbSIsIm9wdGlvbnMiLCJQcm9taXNlIiwicmVqZWN0IiwibWF4QnVmZmVyIiwiSW5maW5pdHkiLCJzdHJlYW0iLCJyZXNvbHZlIiwicmVqZWN0UHJvbWlzZSIsImVycm9yIiwiZ2V0QnVmZmVyZWRMZW5ndGgiLCJNQVhfTEVOR1RIIiwiYnVmZmVyZWREYXRhIiwiZ2V0QnVmZmVyZWRWYWx1ZSIsIm9uIiwibW9kdWxlIiwiZXhwb3J0cyIsImRlZmF1bHQiLCJidWZmZXIiLCJlbmNvZGluZyIsImFycmF5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cacheable-request/node_modules/get-stream/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/cacheable-request/node_modules/lowercase-keys/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/cacheable-request/node_modules/lowercase-keys/index.js ***!
  \*****************************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = (object)=>{\n    const result = {};\n    for (const [key, value] of Object.entries(object)){\n        result[key.toLowerCase()] = value;\n    }\n    return result;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY2FjaGVhYmxlLXJlcXVlc3Qvbm9kZV9tb2R1bGVzL2xvd2VyY2FzZS1rZXlzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0FBLE9BQU9DLE9BQU8sR0FBR0MsQ0FBQUE7SUFDaEIsTUFBTUMsU0FBUyxDQUFDO0lBRWhCLEtBQUssTUFBTSxDQUFDQyxLQUFLQyxNQUFNLElBQUlDLE9BQU9DLE9BQU8sQ0FBQ0wsUUFBUztRQUNsREMsTUFBTSxDQUFDQyxJQUFJSSxXQUFXLEdBQUcsR0FBR0g7SUFDN0I7SUFFQSxPQUFPRjtBQUNSIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvY2FjaGVhYmxlLXJlcXVlc3Qvbm9kZV9tb2R1bGVzL2xvd2VyY2FzZS1rZXlzL2luZGV4LmpzPzEzMjgiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSBvYmplY3QgPT4ge1xuXHRjb25zdCByZXN1bHQgPSB7fTtcblxuXHRmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhvYmplY3QpKSB7XG5cdFx0cmVzdWx0W2tleS50b0xvd2VyQ2FzZSgpXSA9IHZhbHVlO1xuXHR9XG5cblx0cmV0dXJuIHJlc3VsdDtcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIm9iamVjdCIsInJlc3VsdCIsImtleSIsInZhbHVlIiwiT2JqZWN0IiwiZW50cmllcyIsInRvTG93ZXJDYXNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cacheable-request/node_modules/lowercase-keys/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/cacheable-request/src/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/cacheable-request/src/index.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst urlLib = __webpack_require__(/*! url */ \"url\");\nconst normalizeUrl = __webpack_require__(/*! normalize-url */ \"(ssr)/./node_modules/normalize-url/index.js\");\nconst getStream = __webpack_require__(/*! get-stream */ \"(ssr)/./node_modules/cacheable-request/node_modules/get-stream/index.js\");\nconst CachePolicy = __webpack_require__(/*! http-cache-semantics */ \"(ssr)/./node_modules/http-cache-semantics/index.js\");\nconst Response = __webpack_require__(/*! responselike */ \"(ssr)/./node_modules/responselike/src/index.js\");\nconst lowercaseKeys = __webpack_require__(/*! lowercase-keys */ \"(ssr)/./node_modules/cacheable-request/node_modules/lowercase-keys/index.js\");\nconst cloneResponse = __webpack_require__(/*! clone-response */ \"(ssr)/./node_modules/clone-response/src/index.js\");\nconst Keyv = __webpack_require__(/*! keyv */ \"(ssr)/./node_modules/keyv/src/index.js\");\nclass CacheableRequest {\n    constructor(request, cacheAdapter){\n        if (typeof request !== \"function\") {\n            throw new TypeError(\"Parameter `request` must be a function\");\n        }\n        this.cache = new Keyv({\n            uri: typeof cacheAdapter === \"string\" && cacheAdapter,\n            store: typeof cacheAdapter !== \"string\" && cacheAdapter,\n            namespace: \"cacheable-request\"\n        });\n        return this.createCacheableRequest(request);\n    }\n    createCacheableRequest(request) {\n        return (opts, cb)=>{\n            let url;\n            if (typeof opts === \"string\") {\n                url = normalizeUrlObject(urlLib.parse(opts));\n                opts = {};\n            } else if (opts instanceof urlLib.URL) {\n                url = normalizeUrlObject(urlLib.parse(opts.toString()));\n                opts = {};\n            } else {\n                const [pathname, ...searchParts] = (opts.path || \"\").split(\"?\");\n                const search = searchParts.length > 0 ? `?${searchParts.join(\"?\")}` : \"\";\n                url = normalizeUrlObject({\n                    ...opts,\n                    pathname,\n                    search\n                });\n            }\n            opts = {\n                headers: {},\n                method: \"GET\",\n                cache: true,\n                strictTtl: false,\n                automaticFailover: false,\n                ...opts,\n                ...urlObjectToRequestOptions(url)\n            };\n            opts.headers = lowercaseKeys(opts.headers);\n            const ee = new EventEmitter();\n            const normalizedUrlString = normalizeUrl(urlLib.format(url), {\n                stripWWW: false,\n                removeTrailingSlash: false,\n                stripAuthentication: false\n            });\n            const key = `${opts.method}:${normalizedUrlString}`;\n            let revalidate = false;\n            let madeRequest = false;\n            const makeRequest = (opts)=>{\n                madeRequest = true;\n                let requestErrored = false;\n                let requestErrorCallback;\n                const requestErrorPromise = new Promise((resolve)=>{\n                    requestErrorCallback = ()=>{\n                        if (!requestErrored) {\n                            requestErrored = true;\n                            resolve();\n                        }\n                    };\n                });\n                const handler = (response)=>{\n                    if (revalidate && !opts.forceRefresh) {\n                        response.status = response.statusCode;\n                        const revalidatedPolicy = CachePolicy.fromObject(revalidate.cachePolicy).revalidatedPolicy(opts, response);\n                        if (!revalidatedPolicy.modified) {\n                            const headers = revalidatedPolicy.policy.responseHeaders();\n                            response = new Response(revalidate.statusCode, headers, revalidate.body, revalidate.url);\n                            response.cachePolicy = revalidatedPolicy.policy;\n                            response.fromCache = true;\n                        }\n                    }\n                    if (!response.fromCache) {\n                        response.cachePolicy = new CachePolicy(opts, response, opts);\n                        response.fromCache = false;\n                    }\n                    let clonedResponse;\n                    if (opts.cache && response.cachePolicy.storable()) {\n                        clonedResponse = cloneResponse(response);\n                        (async ()=>{\n                            try {\n                                const bodyPromise = getStream.buffer(response);\n                                await Promise.race([\n                                    requestErrorPromise,\n                                    new Promise((resolve)=>response.once(\"end\", resolve))\n                                ]);\n                                if (requestErrored) {\n                                    return;\n                                }\n                                const body = await bodyPromise;\n                                const value = {\n                                    cachePolicy: response.cachePolicy.toObject(),\n                                    url: response.url,\n                                    statusCode: response.fromCache ? revalidate.statusCode : response.statusCode,\n                                    body\n                                };\n                                let ttl = opts.strictTtl ? response.cachePolicy.timeToLive() : undefined;\n                                if (opts.maxTtl) {\n                                    ttl = ttl ? Math.min(ttl, opts.maxTtl) : opts.maxTtl;\n                                }\n                                await this.cache.set(key, value, ttl);\n                            } catch (error) {\n                                ee.emit(\"error\", new CacheableRequest.CacheError(error));\n                            }\n                        })();\n                    } else if (opts.cache && revalidate) {\n                        (async ()=>{\n                            try {\n                                await this.cache.delete(key);\n                            } catch (error) {\n                                ee.emit(\"error\", new CacheableRequest.CacheError(error));\n                            }\n                        })();\n                    }\n                    ee.emit(\"response\", clonedResponse || response);\n                    if (typeof cb === \"function\") {\n                        cb(clonedResponse || response);\n                    }\n                };\n                try {\n                    const req = request(opts, handler);\n                    req.once(\"error\", requestErrorCallback);\n                    req.once(\"abort\", requestErrorCallback);\n                    ee.emit(\"request\", req);\n                } catch (error) {\n                    ee.emit(\"error\", new CacheableRequest.RequestError(error));\n                }\n            };\n            (async ()=>{\n                const get = async (opts)=>{\n                    await Promise.resolve();\n                    const cacheEntry = opts.cache ? await this.cache.get(key) : undefined;\n                    if (typeof cacheEntry === \"undefined\") {\n                        return makeRequest(opts);\n                    }\n                    const policy = CachePolicy.fromObject(cacheEntry.cachePolicy);\n                    if (policy.satisfiesWithoutRevalidation(opts) && !opts.forceRefresh) {\n                        const headers = policy.responseHeaders();\n                        const response = new Response(cacheEntry.statusCode, headers, cacheEntry.body, cacheEntry.url);\n                        response.cachePolicy = policy;\n                        response.fromCache = true;\n                        ee.emit(\"response\", response);\n                        if (typeof cb === \"function\") {\n                            cb(response);\n                        }\n                    } else {\n                        revalidate = cacheEntry;\n                        opts.headers = policy.revalidationHeaders(opts);\n                        makeRequest(opts);\n                    }\n                };\n                const errorHandler = (error)=>ee.emit(\"error\", new CacheableRequest.CacheError(error));\n                this.cache.once(\"error\", errorHandler);\n                ee.on(\"response\", ()=>this.cache.removeListener(\"error\", errorHandler));\n                try {\n                    await get(opts);\n                } catch (error) {\n                    if (opts.automaticFailover && !madeRequest) {\n                        makeRequest(opts);\n                    }\n                    ee.emit(\"error\", new CacheableRequest.CacheError(error));\n                }\n            })();\n            return ee;\n        };\n    }\n}\nfunction urlObjectToRequestOptions(url) {\n    const options = {\n        ...url\n    };\n    options.path = `${url.pathname || \"/\"}${url.search || \"\"}`;\n    delete options.pathname;\n    delete options.search;\n    return options;\n}\nfunction normalizeUrlObject(url) {\n    // If url was parsed by url.parse or new URL:\n    // - hostname will be set\n    // - host will be hostname[:port]\n    // - port will be set if it was explicit in the parsed string\n    // Otherwise, url was from request options:\n    // - hostname or host may be set\n    // - host shall not have port encoded\n    return {\n        protocol: url.protocol,\n        auth: url.auth,\n        hostname: url.hostname || url.host || \"localhost\",\n        port: url.port,\n        pathname: url.pathname,\n        search: url.search\n    };\n}\nCacheableRequest.RequestError = class extends Error {\n    constructor(error){\n        super(error.message);\n        this.name = \"RequestError\";\n        Object.assign(this, error);\n    }\n};\nCacheableRequest.CacheError = class extends Error {\n    constructor(error){\n        super(error.message);\n        this.name = \"CacheError\";\n        Object.assign(this, error);\n    }\n};\nmodule.exports = CacheableRequest;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cacheable-request/src/index.js\n");

/***/ })

};
;