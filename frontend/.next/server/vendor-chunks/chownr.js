"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/chownr";
exports.ids = ["vendor-chunks/chownr"];
exports.modules = {

/***/ "(ssr)/./node_modules/chownr/chownr.js":
/*!***************************************!*\
  !*** ./node_modules/chownr/chownr.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst path = __webpack_require__(/*! path */ \"path\");\n/* istanbul ignore next */ const LCHOWN = fs.lchown ? \"lchown\" : \"chown\";\n/* istanbul ignore next */ const LCHOWNSYNC = fs.lchownSync ? \"lchownSync\" : \"chownSync\";\n/* istanbul ignore next */ const needEISDIRHandled = fs.lchown && !process.version.match(/v1[1-9]+\\./) && !process.version.match(/v10\\.[6-9]/);\nconst lchownSync = (path, uid, gid)=>{\n    try {\n        return fs[LCHOWNSYNC](path, uid, gid);\n    } catch (er) {\n        if (er.code !== \"ENOENT\") throw er;\n    }\n};\n/* istanbul ignore next */ const chownSync = (path, uid, gid)=>{\n    try {\n        return fs.chownSync(path, uid, gid);\n    } catch (er) {\n        if (er.code !== \"ENOENT\") throw er;\n    }\n};\n/* istanbul ignore next */ const handleEISDIR = needEISDIRHandled ? (path, uid, gid, cb)=>(er)=>{\n        // Node prior to v10 had a very questionable implementation of\n        // fs.lchown, which would always try to call fs.open on a directory\n        // Fall back to fs.chown in those cases.\n        if (!er || er.code !== \"EISDIR\") cb(er);\n        else fs.chown(path, uid, gid, cb);\n    } : (_, __, ___, cb)=>cb;\n/* istanbul ignore next */ const handleEISDirSync = needEISDIRHandled ? (path, uid, gid)=>{\n    try {\n        return lchownSync(path, uid, gid);\n    } catch (er) {\n        if (er.code !== \"EISDIR\") throw er;\n        chownSync(path, uid, gid);\n    }\n} : (path, uid, gid)=>lchownSync(path, uid, gid);\n// fs.readdir could only accept an options object as of node v6\nconst nodeVersion = process.version;\nlet readdir = (path, options, cb)=>fs.readdir(path, options, cb);\nlet readdirSync = (path, options)=>fs.readdirSync(path, options);\n/* istanbul ignore next */ if (/^v4\\./.test(nodeVersion)) readdir = (path, options, cb)=>fs.readdir(path, cb);\nconst chown = (cpath, uid, gid, cb)=>{\n    fs[LCHOWN](cpath, uid, gid, handleEISDIR(cpath, uid, gid, (er)=>{\n        // Skip ENOENT error\n        cb(er && er.code !== \"ENOENT\" ? er : null);\n    }));\n};\nconst chownrKid = (p, child, uid, gid, cb)=>{\n    if (typeof child === \"string\") return fs.lstat(path.resolve(p, child), (er, stats)=>{\n        // Skip ENOENT error\n        if (er) return cb(er.code !== \"ENOENT\" ? er : null);\n        stats.name = child;\n        chownrKid(p, stats, uid, gid, cb);\n    });\n    if (child.isDirectory()) {\n        chownr(path.resolve(p, child.name), uid, gid, (er)=>{\n            if (er) return cb(er);\n            const cpath = path.resolve(p, child.name);\n            chown(cpath, uid, gid, cb);\n        });\n    } else {\n        const cpath = path.resolve(p, child.name);\n        chown(cpath, uid, gid, cb);\n    }\n};\nconst chownr = (p, uid, gid, cb)=>{\n    readdir(p, {\n        withFileTypes: true\n    }, (er, children)=>{\n        // any error other than ENOTDIR or ENOTSUP means it's not readable,\n        // or doesn't exist.  give up.\n        if (er) {\n            if (er.code === \"ENOENT\") return cb();\n            else if (er.code !== \"ENOTDIR\" && er.code !== \"ENOTSUP\") return cb(er);\n        }\n        if (er || !children.length) return chown(p, uid, gid, cb);\n        let len = children.length;\n        let errState = null;\n        const then = (er)=>{\n            if (errState) return;\n            if (er) return cb(errState = er);\n            if (--len === 0) return chown(p, uid, gid, cb);\n        };\n        children.forEach((child)=>chownrKid(p, child, uid, gid, then));\n    });\n};\nconst chownrKidSync = (p, child, uid, gid)=>{\n    if (typeof child === \"string\") {\n        try {\n            const stats = fs.lstatSync(path.resolve(p, child));\n            stats.name = child;\n            child = stats;\n        } catch (er) {\n            if (er.code === \"ENOENT\") return;\n            else throw er;\n        }\n    }\n    if (child.isDirectory()) chownrSync(path.resolve(p, child.name), uid, gid);\n    handleEISDirSync(path.resolve(p, child.name), uid, gid);\n};\nconst chownrSync = (p, uid, gid)=>{\n    let children;\n    try {\n        children = readdirSync(p, {\n            withFileTypes: true\n        });\n    } catch (er) {\n        if (er.code === \"ENOENT\") return;\n        else if (er.code === \"ENOTDIR\" || er.code === \"ENOTSUP\") return handleEISDirSync(p, uid, gid);\n        else throw er;\n    }\n    if (children && children.length) children.forEach((child)=>chownrKidSync(p, child, uid, gid));\n    return handleEISDirSync(p, uid, gid);\n};\nmodule.exports = chownr;\nchownr.sync = chownrSync;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/chownr/chownr.js\n");

/***/ })

};
;