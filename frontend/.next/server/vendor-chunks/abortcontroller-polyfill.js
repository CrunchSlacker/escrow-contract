/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/abortcontroller-polyfill";
exports.ids = ["vendor-chunks/abortcontroller-polyfill"];
exports.modules = {

/***/ "(ssr)/./node_modules/abortcontroller-polyfill/dist/polyfill-patch-fetch.js":
/*!****************************************************************************!*\
  !*** ./node_modules/abortcontroller-polyfill/dist/polyfill-patch-fetch.js ***!
  \****************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(factory) {\n     true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n})(function() {\n    \"use strict\";\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n    function _defineProperties(target, props) {\n        for(var i = 0; i < props.length; i++){\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n        }\n    }\n    function _createClass(Constructor, protoProps, staticProps) {\n        if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n        if (staticProps) _defineProperties(Constructor, staticProps);\n        Object.defineProperty(Constructor, \"prototype\", {\n            writable: false\n        });\n        return Constructor;\n    }\n    function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function\");\n        }\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n            constructor: {\n                value: subClass,\n                writable: true,\n                configurable: true\n            }\n        });\n        Object.defineProperty(subClass, \"prototype\", {\n            writable: false\n        });\n        if (superClass) _setPrototypeOf(subClass, superClass);\n    }\n    function _getPrototypeOf(o) {\n        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n            return o.__proto__ || Object.getPrototypeOf(o);\n        };\n        return _getPrototypeOf(o);\n    }\n    function _setPrototypeOf(o, p) {\n        _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n            o.__proto__ = p;\n            return o;\n        };\n        return _setPrototypeOf(o, p);\n    }\n    function _isNativeReflectConstruct() {\n        if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n        if (Reflect.construct.sham) return false;\n        if (typeof Proxy === \"function\") return true;\n        try {\n            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n    function _assertThisInitialized(self1) {\n        if (self1 === void 0) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n        return self1;\n    }\n    function _possibleConstructorReturn(self1, call) {\n        if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n            return call;\n        } else if (call !== void 0) {\n            throw new TypeError(\"Derived constructors may only return object or undefined\");\n        }\n        return _assertThisInitialized(self1);\n    }\n    function _createSuper(Derived) {\n        var hasNativeReflectConstruct = _isNativeReflectConstruct();\n        return function _createSuperInternal() {\n            var Super = _getPrototypeOf(Derived), result;\n            if (hasNativeReflectConstruct) {\n                var NewTarget = _getPrototypeOf(this).constructor;\n                result = Reflect.construct(Super, arguments, NewTarget);\n            } else {\n                result = Super.apply(this, arguments);\n            }\n            return _possibleConstructorReturn(this, result);\n        };\n    }\n    function _superPropBase(object, property) {\n        while(!Object.prototype.hasOwnProperty.call(object, property)){\n            object = _getPrototypeOf(object);\n            if (object === null) break;\n        }\n        return object;\n    }\n    function _get() {\n        if (typeof Reflect !== \"undefined\" && Reflect.get) {\n            _get = Reflect.get.bind();\n        } else {\n            _get = function _get(target, property, receiver) {\n                var base = _superPropBase(target, property);\n                if (!base) return;\n                var desc = Object.getOwnPropertyDescriptor(base, property);\n                if (desc.get) {\n                    return desc.get.call(arguments.length < 3 ? target : receiver);\n                }\n                return desc.value;\n            };\n        }\n        return _get.apply(this, arguments);\n    }\n    var Emitter = /*#__PURE__*/ function() {\n        function Emitter() {\n            _classCallCheck(this, Emitter);\n            Object.defineProperty(this, \"listeners\", {\n                value: {},\n                writable: true,\n                configurable: true\n            });\n        }\n        _createClass(Emitter, [\n            {\n                key: \"addEventListener\",\n                value: function addEventListener(type, callback, options) {\n                    if (!(type in this.listeners)) {\n                        this.listeners[type] = [];\n                    }\n                    this.listeners[type].push({\n                        callback: callback,\n                        options: options\n                    });\n                }\n            },\n            {\n                key: \"removeEventListener\",\n                value: function removeEventListener(type, callback) {\n                    if (!(type in this.listeners)) {\n                        return;\n                    }\n                    var stack = this.listeners[type];\n                    for(var i = 0, l = stack.length; i < l; i++){\n                        if (stack[i].callback === callback) {\n                            stack.splice(i, 1);\n                            return;\n                        }\n                    }\n                }\n            },\n            {\n                key: \"dispatchEvent\",\n                value: function dispatchEvent(event) {\n                    if (!(event.type in this.listeners)) {\n                        return;\n                    }\n                    var stack = this.listeners[event.type];\n                    var stackToCall = stack.slice();\n                    for(var i = 0, l = stackToCall.length; i < l; i++){\n                        var listener = stackToCall[i];\n                        try {\n                            listener.callback.call(this, event);\n                        } catch (e) {\n                            Promise.resolve().then(function() {\n                                throw e;\n                            });\n                        }\n                        if (listener.options && listener.options.once) {\n                            this.removeEventListener(event.type, listener.callback);\n                        }\n                    }\n                    return !event.defaultPrevented;\n                }\n            }\n        ]);\n        return Emitter;\n    }();\n    var AbortSignal = /*#__PURE__*/ function(_Emitter) {\n        _inherits(AbortSignal, _Emitter);\n        var _super = _createSuper(AbortSignal);\n        function AbortSignal() {\n            var _this;\n            _classCallCheck(this, AbortSignal);\n            _this = _super.call(this); // Some versions of babel does not transpile super() correctly for IE <= 10, if the parent\n            // constructor has failed to run, then \"this.listeners\" will still be undefined and then we call\n            // the parent constructor directly instead as a workaround. For general details, see babel bug:\n            // https://github.com/babel/babel/issues/3041\n            // This hack was added as a fix for the issue described here:\n            // https://github.com/Financial-Times/polyfill-library/pull/59#issuecomment-477558042\n            if (!_this.listeners) {\n                Emitter.call(_assertThisInitialized(_this));\n            } // Compared to assignment, Object.defineProperty makes properties non-enumerable by default and\n            // we want Object.keys(new AbortController().signal) to be [] for compat with the native impl\n            Object.defineProperty(_assertThisInitialized(_this), \"aborted\", {\n                value: false,\n                writable: true,\n                configurable: true\n            });\n            Object.defineProperty(_assertThisInitialized(_this), \"onabort\", {\n                value: null,\n                writable: true,\n                configurable: true\n            });\n            Object.defineProperty(_assertThisInitialized(_this), \"reason\", {\n                value: undefined,\n                writable: true,\n                configurable: true\n            });\n            return _this;\n        }\n        _createClass(AbortSignal, [\n            {\n                key: \"toString\",\n                value: function toString() {\n                    return \"[object AbortSignal]\";\n                }\n            },\n            {\n                key: \"dispatchEvent\",\n                value: function dispatchEvent(event) {\n                    if (event.type === \"abort\") {\n                        this.aborted = true;\n                        if (typeof this.onabort === \"function\") {\n                            this.onabort.call(this, event);\n                        }\n                    }\n                    _get(_getPrototypeOf(AbortSignal.prototype), \"dispatchEvent\", this).call(this, event);\n                }\n            }\n        ]);\n        return AbortSignal;\n    }(Emitter);\n    var AbortController = /*#__PURE__*/ function() {\n        function AbortController() {\n            _classCallCheck(this, AbortController);\n            // Compared to assignment, Object.defineProperty makes properties non-enumerable by default and\n            // we want Object.keys(new AbortController()) to be [] for compat with the native impl\n            Object.defineProperty(this, \"signal\", {\n                value: new AbortSignal(),\n                writable: true,\n                configurable: true\n            });\n        }\n        _createClass(AbortController, [\n            {\n                key: \"abort\",\n                value: function abort(reason) {\n                    var event;\n                    try {\n                        event = new Event(\"abort\");\n                    } catch (e) {\n                        if (typeof document !== \"undefined\") {\n                            if (!document.createEvent) {\n                                // For Internet Explorer 8:\n                                event = document.createEventObject();\n                                event.type = \"abort\";\n                            } else {\n                                // For Internet Explorer 11:\n                                event = document.createEvent(\"Event\");\n                                event.initEvent(\"abort\", false, false);\n                            }\n                        } else {\n                            // Fallback where document isn't available:\n                            event = {\n                                type: \"abort\",\n                                bubbles: false,\n                                cancelable: false\n                            };\n                        }\n                    }\n                    var signalReason = reason;\n                    if (signalReason === undefined) {\n                        if (typeof document === \"undefined\") {\n                            signalReason = new Error(\"This operation was aborted\");\n                            signalReason.name = \"AbortError\";\n                        } else {\n                            try {\n                                signalReason = new DOMException(\"signal is aborted without reason\");\n                            } catch (err) {\n                                // IE 11 does not support calling the DOMException constructor, use a\n                                // regular error object on it instead.\n                                signalReason = new Error(\"This operation was aborted\");\n                                signalReason.name = \"AbortError\";\n                            }\n                        }\n                    }\n                    this.signal.reason = signalReason;\n                    this.signal.dispatchEvent(event);\n                }\n            },\n            {\n                key: \"toString\",\n                value: function toString() {\n                    return \"[object AbortController]\";\n                }\n            }\n        ]);\n        return AbortController;\n    }();\n    if (typeof Symbol !== \"undefined\" && Symbol.toStringTag) {\n        // These are necessary to make sure that we get correct output for:\n        // Object.prototype.toString.call(new AbortController())\n        AbortController.prototype[Symbol.toStringTag] = \"AbortController\";\n        AbortSignal.prototype[Symbol.toStringTag] = \"AbortSignal\";\n    }\n    function polyfillNeeded(self1) {\n        if (self1.__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL) {\n            console.log(\"__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL=true is set, will force install polyfill\");\n            return true;\n        } // Note that the \"unfetch\" minimal fetch polyfill defines fetch() without\n        // defining window.Request, and this polyfill need to work on top of unfetch\n        // so the below feature detection needs the !self.AbortController part.\n        // The Request.prototype check is also needed because Safari versions 11.1.2\n        // up to and including 12.1.x has a window.AbortController present but still\n        // does NOT correctly implement abortable fetch:\n        // https://bugs.webkit.org/show_bug.cgi?id=174980#c2\n        return typeof self1.Request === \"function\" && !self1.Request.prototype.hasOwnProperty(\"signal\") || !self1.AbortController;\n    }\n    /**\n   * Note: the \"fetch.Request\" default value is available for fetch imported from\n   * the \"node-fetch\" package and not in browsers. This is OK since browsers\n   * will be importing umd-polyfill.js from that path \"self\" is passed the\n   * decorator so the default value will not be used (because browsers that define\n   * fetch also has Request). One quirky setup where self.fetch exists but\n   * self.Request does not is when the \"unfetch\" minimal fetch polyfill is used\n   * on top of IE11; for this case the browser will try to use the fetch.Request\n   * default value which in turn will be undefined but then then \"if (Request)\"\n   * will ensure that you get a patched fetch but still no Request (as expected).\n   * @param {fetch, Request = fetch.Request}\n   * @returns {fetch: abortableFetch, Request: AbortableRequest}\n   */ function abortableFetchDecorator(patchTargets) {\n        if (\"function\" === typeof patchTargets) {\n            patchTargets = {\n                fetch: patchTargets\n            };\n        }\n        var _patchTargets = patchTargets, fetch = _patchTargets.fetch, _patchTargets$Request = _patchTargets.Request, NativeRequest = _patchTargets$Request === void 0 ? fetch.Request : _patchTargets$Request, NativeAbortController = _patchTargets.AbortController, _patchTargets$__FORCE = _patchTargets.__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL, __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL = _patchTargets$__FORCE === void 0 ? false : _patchTargets$__FORCE;\n        if (!polyfillNeeded({\n            fetch: fetch,\n            Request: NativeRequest,\n            AbortController: NativeAbortController,\n            __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL: __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL\n        })) {\n            return {\n                fetch: fetch,\n                Request: Request\n            };\n        }\n        var Request = NativeRequest; // Note that the \"unfetch\" minimal fetch polyfill defines fetch() without\n        // defining window.Request, and this polyfill need to work on top of unfetch\n        // hence we only patch it if it's available. Also we don't patch it if signal\n        // is already available on the Request prototype because in this case support\n        // is present and the patching below can cause a crash since it assigns to\n        // request.signal which is technically a read-only property. This latter error\n        // happens when you run the main5.js node-fetch example in the repo\n        // \"abortcontroller-polyfill-examples\". The exact error is:\n        //   request.signal = init.signal;\n        //   ^\n        // TypeError: Cannot set property signal of #<Request> which has only a getter\n        if (Request && !Request.prototype.hasOwnProperty(\"signal\") || __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL) {\n            Request = function Request(input, init) {\n                var signal;\n                if (init && init.signal) {\n                    signal = init.signal; // Never pass init.signal to the native Request implementation when the polyfill has\n                    // been installed because if we're running on top of a browser with a\n                    // working native AbortController (i.e. the polyfill was installed due to\n                    // __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL being set), then passing our\n                    // fake AbortSignal to the native fetch will trigger:\n                    // TypeError: Failed to construct 'Request': member signal is not of type AbortSignal.\n                    delete init.signal;\n                }\n                var request = new NativeRequest(input, init);\n                if (signal) {\n                    Object.defineProperty(request, \"signal\", {\n                        writable: false,\n                        enumerable: false,\n                        configurable: true,\n                        value: signal\n                    });\n                }\n                return request;\n            };\n            Request.prototype = NativeRequest.prototype;\n        }\n        var realFetch = fetch;\n        var abortableFetch = function abortableFetch(input, init) {\n            var signal = Request && Request.prototype.isPrototypeOf(input) ? input.signal : init ? init.signal : undefined;\n            if (signal) {\n                var abortError;\n                try {\n                    abortError = new DOMException(\"Aborted\", \"AbortError\");\n                } catch (err) {\n                    // IE 11 does not support calling the DOMException constructor, use a\n                    // regular error object on it instead.\n                    abortError = new Error(\"Aborted\");\n                    abortError.name = \"AbortError\";\n                } // Return early if already aborted, thus avoiding making an HTTP request\n                if (signal.aborted) {\n                    return Promise.reject(abortError);\n                } // Turn an event into a promise, reject it once `abort` is dispatched\n                var cancellation = new Promise(function(_, reject) {\n                    signal.addEventListener(\"abort\", function() {\n                        return reject(abortError);\n                    }, {\n                        once: true\n                    });\n                });\n                if (init && init.signal) {\n                    // Never pass .signal to the native implementation when the polyfill has\n                    // been installed because if we're running on top of a browser with a\n                    // working native AbortController (i.e. the polyfill was installed due to\n                    // __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL being set), then passing our\n                    // fake AbortSignal to the native fetch will trigger:\n                    // TypeError: Failed to execute 'fetch' on 'Window': member signal is not of type AbortSignal.\n                    delete init.signal;\n                } // Return the fastest promise (don't need to wait for request to finish)\n                return Promise.race([\n                    cancellation,\n                    realFetch(input, init)\n                ]);\n            }\n            return realFetch(input, init);\n        };\n        return {\n            fetch: abortableFetch,\n            Request: Request\n        };\n    }\n    (function(self1) {\n        if (!polyfillNeeded(self1)) {\n            return;\n        }\n        if (!self1.fetch) {\n            console.warn(\"fetch() is not available, cannot install abortcontroller-polyfill\");\n            return;\n        }\n        var _abortableFetch = abortableFetchDecorator(self1), fetch = _abortableFetch.fetch, Request = _abortableFetch.Request;\n        self1.fetch = fetch;\n        self1.Request = Request;\n        Object.defineProperty(self1, \"AbortController\", {\n            writable: true,\n            enumerable: false,\n            configurable: true,\n            value: AbortController\n        });\n        Object.defineProperty(self1, \"AbortSignal\", {\n            writable: true,\n            enumerable: false,\n            configurable: true,\n            value: AbortSignal\n        });\n    })(typeof self !== \"undefined\" ? self : global);\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/abortcontroller-polyfill/dist/polyfill-patch-fetch.js\n");

/***/ })

};
;