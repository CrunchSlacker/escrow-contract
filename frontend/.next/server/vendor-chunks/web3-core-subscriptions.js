"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/web3-core-subscriptions";
exports.ids = ["vendor-chunks/web3-core-subscriptions"];
exports.modules = {

/***/ "(ssr)/./node_modules/web3-core-subscriptions/lib/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/web3-core-subscriptions/lib/index.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ /**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */ \nvar Subscription = __webpack_require__(/*! ./subscription.js */ \"(ssr)/./node_modules/web3-core-subscriptions/lib/subscription.js\");\nvar Subscriptions = function Subscriptions(options) {\n    this.name = options.name;\n    this.type = options.type;\n    this.subscriptions = options.subscriptions || {};\n    this.requestManager = null;\n};\nSubscriptions.prototype.setRequestManager = function(rm) {\n    this.requestManager = rm;\n};\nSubscriptions.prototype.attachToObject = function(obj) {\n    var func = this.buildCall();\n    var name = this.name.split(\".\");\n    if (name.length > 1) {\n        obj[name[0]] = obj[name[0]] || {};\n        obj[name[0]][name[1]] = func;\n    } else {\n        obj[name[0]] = func;\n    }\n};\nSubscriptions.prototype.buildCall = function() {\n    var _this = this;\n    return function() {\n        if (!_this.subscriptions[arguments[0]]) {\n            console.warn(\"Subscription \" + JSON.stringify(arguments[0]) + \" doesn't exist. Subscribing anyway.\");\n        }\n        var subscription = new Subscription({\n            subscription: _this.subscriptions[arguments[0]] || {},\n            requestManager: _this.requestManager,\n            type: _this.type\n        });\n        return subscription.subscribe.apply(subscription, arguments);\n    };\n};\nmodule.exports = {\n    subscriptions: Subscriptions,\n    subscription: Subscription\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1jb3JlLXN1YnNjcmlwdGlvbnMvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7QUFlQSxHQUNBOzs7O0NBSUMsR0FDWTtBQUNiLElBQUlBLGVBQWVDLG1CQUFPQSxDQUFDO0FBQzNCLElBQUlDLGdCQUFnQixTQUFTQSxjQUFjQyxPQUFPO0lBQzlDLElBQUksQ0FBQ0MsSUFBSSxHQUFHRCxRQUFRQyxJQUFJO0lBQ3hCLElBQUksQ0FBQ0MsSUFBSSxHQUFHRixRQUFRRSxJQUFJO0lBQ3hCLElBQUksQ0FBQ0MsYUFBYSxHQUFHSCxRQUFRRyxhQUFhLElBQUksQ0FBQztJQUMvQyxJQUFJLENBQUNDLGNBQWMsR0FBRztBQUMxQjtBQUNBTCxjQUFjTSxTQUFTLENBQUNDLGlCQUFpQixHQUFHLFNBQVVDLEVBQUU7SUFDcEQsSUFBSSxDQUFDSCxjQUFjLEdBQUdHO0FBQzFCO0FBQ0FSLGNBQWNNLFNBQVMsQ0FBQ0csY0FBYyxHQUFHLFNBQVVDLEdBQUc7SUFDbEQsSUFBSUMsT0FBTyxJQUFJLENBQUNDLFNBQVM7SUFDekIsSUFBSVYsT0FBTyxJQUFJLENBQUNBLElBQUksQ0FBQ1csS0FBSyxDQUFDO0lBQzNCLElBQUlYLEtBQUtZLE1BQU0sR0FBRyxHQUFHO1FBQ2pCSixHQUFHLENBQUNSLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBR1EsR0FBRyxDQUFDUixJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQztRQUNoQ1EsR0FBRyxDQUFDUixJQUFJLENBQUMsRUFBRSxDQUFDLENBQUNBLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBR1M7SUFDNUIsT0FDSztRQUNERCxHQUFHLENBQUNSLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBR1M7SUFDbkI7QUFDSjtBQUNBWCxjQUFjTSxTQUFTLENBQUNNLFNBQVMsR0FBRztJQUNoQyxJQUFJRyxRQUFRLElBQUk7SUFDaEIsT0FBTztRQUNILElBQUksQ0FBQ0EsTUFBTVgsYUFBYSxDQUFDWSxTQUFTLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDcENDLFFBQVFDLElBQUksQ0FBQyxrQkFBa0JDLEtBQUtDLFNBQVMsQ0FBQ0osU0FBUyxDQUFDLEVBQUUsSUFBSTtRQUNsRTtRQUNBLElBQUlLLGVBQWUsSUFBSXZCLGFBQWE7WUFDaEN1QixjQUFjTixNQUFNWCxhQUFhLENBQUNZLFNBQVMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDO1lBQ3BEWCxnQkFBZ0JVLE1BQU1WLGNBQWM7WUFDcENGLE1BQU1ZLE1BQU1aLElBQUk7UUFDcEI7UUFDQSxPQUFPa0IsYUFBYUMsU0FBUyxDQUFDQyxLQUFLLENBQUNGLGNBQWNMO0lBQ3REO0FBQ0o7QUFDQVEsT0FBT0MsT0FBTyxHQUFHO0lBQ2JyQixlQUFlSjtJQUNmcUIsY0FBY3ZCO0FBQ2xCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvd2ViMy1jb3JlLXN1YnNjcmlwdGlvbnMvbGliL2luZGV4LmpzPzI1MzAiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAgICBUaGlzIGZpbGUgaXMgcGFydCBvZiB3ZWIzLmpzLlxuXG4gICAgd2ViMy5qcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gICAgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAgICAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuXG4gICAgd2ViMy5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICAgIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICAgIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuXG4gICAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gICAgYWxvbmcgd2l0aCB3ZWIzLmpzLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuKi9cbi8qKlxuICogQGZpbGUgaW5kZXguanNcbiAqIEBhdXRob3IgRmFiaWFuIFZvZ2Vsc3RlbGxlciA8ZmFiaWFuQGV0aGVyZXVtLm9yZz5cbiAqIEBkYXRlIDIwMTdcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgU3Vic2NyaXB0aW9uID0gcmVxdWlyZSgnLi9zdWJzY3JpcHRpb24uanMnKTtcbnZhciBTdWJzY3JpcHRpb25zID0gZnVuY3Rpb24gU3Vic2NyaXB0aW9ucyhvcHRpb25zKSB7XG4gICAgdGhpcy5uYW1lID0gb3B0aW9ucy5uYW1lO1xuICAgIHRoaXMudHlwZSA9IG9wdGlvbnMudHlwZTtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMgPSBvcHRpb25zLnN1YnNjcmlwdGlvbnMgfHwge307XG4gICAgdGhpcy5yZXF1ZXN0TWFuYWdlciA9IG51bGw7XG59O1xuU3Vic2NyaXB0aW9ucy5wcm90b3R5cGUuc2V0UmVxdWVzdE1hbmFnZXIgPSBmdW5jdGlvbiAocm0pIHtcbiAgICB0aGlzLnJlcXVlc3RNYW5hZ2VyID0gcm07XG59O1xuU3Vic2NyaXB0aW9ucy5wcm90b3R5cGUuYXR0YWNoVG9PYmplY3QgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgdmFyIGZ1bmMgPSB0aGlzLmJ1aWxkQ2FsbCgpO1xuICAgIHZhciBuYW1lID0gdGhpcy5uYW1lLnNwbGl0KCcuJyk7XG4gICAgaWYgKG5hbWUubGVuZ3RoID4gMSkge1xuICAgICAgICBvYmpbbmFtZVswXV0gPSBvYmpbbmFtZVswXV0gfHwge307XG4gICAgICAgIG9ialtuYW1lWzBdXVtuYW1lWzFdXSA9IGZ1bmM7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBvYmpbbmFtZVswXV0gPSBmdW5jO1xuICAgIH1cbn07XG5TdWJzY3JpcHRpb25zLnByb3RvdHlwZS5idWlsZENhbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIV90aGlzLnN1YnNjcmlwdGlvbnNbYXJndW1lbnRzWzBdXSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdTdWJzY3JpcHRpb24gJyArIEpTT04uc3RyaW5naWZ5KGFyZ3VtZW50c1swXSkgKyAnIGRvZXNuXFwndCBleGlzdC4gU3Vic2NyaWJpbmcgYW55d2F5LicpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKHtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbjogX3RoaXMuc3Vic2NyaXB0aW9uc1thcmd1bWVudHNbMF1dIHx8IHt9LFxuICAgICAgICAgICAgcmVxdWVzdE1hbmFnZXI6IF90aGlzLnJlcXVlc3RNYW5hZ2VyLFxuICAgICAgICAgICAgdHlwZTogX3RoaXMudHlwZVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbi5zdWJzY3JpYmUuYXBwbHkoc3Vic2NyaXB0aW9uLCBhcmd1bWVudHMpO1xuICAgIH07XG59O1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgc3Vic2NyaXB0aW9uczogU3Vic2NyaXB0aW9ucyxcbiAgICBzdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvblxufTtcbiJdLCJuYW1lcyI6WyJTdWJzY3JpcHRpb24iLCJyZXF1aXJlIiwiU3Vic2NyaXB0aW9ucyIsIm9wdGlvbnMiLCJuYW1lIiwidHlwZSIsInN1YnNjcmlwdGlvbnMiLCJyZXF1ZXN0TWFuYWdlciIsInByb3RvdHlwZSIsInNldFJlcXVlc3RNYW5hZ2VyIiwicm0iLCJhdHRhY2hUb09iamVjdCIsIm9iaiIsImZ1bmMiLCJidWlsZENhbGwiLCJzcGxpdCIsImxlbmd0aCIsIl90aGlzIiwiYXJndW1lbnRzIiwiY29uc29sZSIsIndhcm4iLCJKU09OIiwic3RyaW5naWZ5Iiwic3Vic2NyaXB0aW9uIiwic3Vic2NyaWJlIiwiYXBwbHkiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-core-subscriptions/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-core-subscriptions/lib/subscription.js":
/*!******************************************************************!*\
  !*** ./node_modules/web3-core-subscriptions/lib/subscription.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ /**\n * @file subscription.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */ \nvar errors = (__webpack_require__(/*! web3-core-helpers */ \"(ssr)/./node_modules/web3-core-helpers/lib/index.js\").errors);\nvar EventEmitter = __webpack_require__(/*! eventemitter3 */ \"(ssr)/./node_modules/web3-core-subscriptions/node_modules/eventemitter3/index.js\");\nvar formatters = (__webpack_require__(/*! web3-core-helpers */ \"(ssr)/./node_modules/web3-core-helpers/lib/index.js\").formatters);\nfunction identity(value) {\n    return value;\n}\nfunction Subscription(options) {\n    EventEmitter.call(this);\n    this.id = null;\n    this.callback = identity;\n    this.arguments = null;\n    this.lastBlock = null; // \"from\" block tracker for backfilling events on reconnection\n    this.options = {\n        subscription: options.subscription,\n        type: options.type,\n        requestManager: options.requestManager\n    };\n}\n// INHERIT\nSubscription.prototype = Object.create(EventEmitter.prototype);\nSubscription.prototype.constructor = Subscription;\n/**\n * Should be used to extract callback from array of arguments. Modifies input param\n *\n * @method extractCallback\n * @param {Array} arguments\n * @return {Function|Null} callback, if exists\n */ Subscription.prototype._extractCallback = function(args) {\n    if (typeof args[args.length - 1] === \"function\") {\n        return args.pop(); // modify the args array!\n    }\n};\n/**\n * Should be called to check if the number of arguments is correct\n *\n * @method validateArgs\n * @param {Array} arguments\n * @throws {Error} if it is not\n */ Subscription.prototype._validateArgs = function(args) {\n    var subscription = this.options.subscription;\n    if (!subscription) subscription = {};\n    if (!subscription.params) subscription.params = 0;\n    if (args.length !== subscription.params) {\n        throw errors.InvalidNumberOfParams(args.length, subscription.params, subscription.subscriptionName);\n    }\n};\n/**\n * Should be called to format input args of method\n *\n * @method formatInput\n * @param {Array}\n * @return {Array}\n */ Subscription.prototype._formatInput = function(args) {\n    var subscription = this.options.subscription;\n    if (!subscription) {\n        return args;\n    }\n    if (!subscription.inputFormatter) {\n        return args;\n    }\n    var formattedArgs = subscription.inputFormatter.map(function(formatter, index) {\n        return formatter ? formatter(args[index]) : args[index];\n    });\n    return formattedArgs;\n};\n/**\n * Should be called to format output(result) of method\n *\n * @method formatOutput\n * @param result {Object}\n * @return {Object}\n */ Subscription.prototype._formatOutput = function(result) {\n    var subscription = this.options.subscription;\n    return subscription && subscription.outputFormatter && result ? subscription.outputFormatter(result) : result;\n};\n/**\n * Should create payload from given input args\n *\n * @method toPayload\n * @param {Array} args\n * @return {Object}\n */ Subscription.prototype._toPayload = function(args) {\n    var params = [];\n    this.callback = this._extractCallback(args) || identity;\n    if (!this.subscriptionMethod) {\n        this.subscriptionMethod = args.shift();\n        // replace subscription with given name\n        if (this.options.subscription.subscriptionName) {\n            this.subscriptionMethod = this.options.subscription.subscriptionName;\n        }\n    }\n    if (!this.arguments) {\n        this.arguments = this._formatInput(args);\n        this._validateArgs(this.arguments);\n        args = []; // make empty after validation\n    }\n    // re-add subscriptionName\n    params.push(this.subscriptionMethod);\n    params = params.concat(this.arguments);\n    if (args.length) {\n        throw new Error(\"Only a callback is allowed as parameter on an already instantiated subscription.\");\n    }\n    return {\n        method: this.options.type + \"_subscribe\",\n        params: params\n    };\n};\n/**\n * Unsubscribes and clears callbacks\n *\n * @method unsubscribe\n * @return {Object}\n */ Subscription.prototype.unsubscribe = function(callback) {\n    this.options.requestManager.removeSubscription(this.id, callback);\n    this.id = null;\n    this.lastBlock = null;\n    this.removeAllListeners();\n};\n/**\n * Subscribes and watches for changes\n *\n * @method subscribe\n * @param {String} subscription the subscription\n * @param {Object} options the options object with address topics and fromBlock\n * @return {Object}\n */ Subscription.prototype.subscribe = function() {\n    var _this = this;\n    var args = Array.prototype.slice.call(arguments);\n    var payload = this._toPayload(args);\n    if (!payload) {\n        return this;\n    }\n    // throw error, if provider is not set\n    if (!this.options.requestManager.provider) {\n        setTimeout(function() {\n            var err1 = new Error(\"No provider set.\");\n            _this.callback(err1, null, _this);\n            _this.emit(\"error\", err1);\n        }, 0);\n        return this;\n    }\n    // throw error, if provider doesnt support subscriptions\n    if (!this.options.requestManager.provider.on) {\n        setTimeout(function() {\n            var err2 = new Error(\"The current provider doesn't support subscriptions: \" + _this.options.requestManager.provider.constructor.name);\n            _this.callback(err2, null, _this);\n            _this.emit(\"error\", err2);\n        }, 0);\n        return this;\n    }\n    // Re-subscription only: continue fetching from the last block we received.\n    // a dropped connection may have resulted in gaps in the logs...\n    if (this.lastBlock && !!this.options.params && typeof this.options.params === \"object\") {\n        payload.params[1] = this.options.params;\n        payload.params[1].fromBlock = formatters.inputBlockNumberFormatter(this.lastBlock + 1);\n    }\n    // if id is there unsubscribe first\n    if (this.id) {\n        this.unsubscribe();\n    }\n    // store the params in the options object\n    this.options.params = payload.params[1];\n    // get past logs, if fromBlock is available\n    if (payload.params[0] === \"logs\" && !!payload.params[1] && typeof payload.params[1] === \"object\" && payload.params[1].hasOwnProperty(\"fromBlock\") && isFinite(payload.params[1].fromBlock)) {\n        // send the subscription request\n        // copy the params to avoid race-condition with deletion below this block\n        var blockParams = Object.assign({}, payload.params[1]);\n        this.options.requestManager.send({\n            method: \"eth_getLogs\",\n            params: [\n                blockParams\n            ]\n        }, function(err, logs) {\n            if (!err) {\n                logs.forEach(function(log) {\n                    var output = _this._formatOutput(log);\n                    _this.callback(null, output, _this);\n                    _this.emit(\"data\", output);\n                });\n            // TODO subscribe here? after the past logs?\n            } else {\n                setTimeout(function() {\n                    _this.callback(err, null, _this);\n                    _this.emit(\"error\", err);\n                }, 0);\n            }\n        });\n    }\n    // create subscription\n    // TODO move to separate function? so that past logs can go first?\n    if (typeof payload.params[1] === \"object\") delete payload.params[1].fromBlock;\n    this.options.requestManager.send(payload, function(err, result) {\n        if (!err && result) {\n            _this.id = result;\n            _this.method = payload.params[0];\n            // call callback on notifications\n            _this.options.requestManager.addSubscription(_this, function(error, result) {\n                if (!error) {\n                    if (!Array.isArray(result)) {\n                        result = [\n                            result\n                        ];\n                    }\n                    result.forEach(function(resultItem) {\n                        var output = _this._formatOutput(resultItem);\n                        // Track current block (for gaps introduced by dropped connections)\n                        _this.lastBlock = !!output && typeof output === \"object\" ? output.blockNumber : null;\n                        if (typeof _this.options.subscription.subscriptionHandler === \"function\") {\n                            return _this.options.subscription.subscriptionHandler.call(_this, output);\n                        } else {\n                            _this.emit(\"data\", output);\n                        }\n                        // call the callback, last so that unsubscribe there won't affect the emit above\n                        _this.callback(null, output, _this);\n                    });\n                } else {\n                    _this.callback(error, false, _this);\n                    _this.emit(\"error\", error);\n                }\n            });\n            _this.emit(\"connected\", result);\n        } else {\n            setTimeout(function() {\n                _this.callback(err, false, _this);\n                _this.emit(\"error\", err);\n            }, 0);\n        }\n    });\n    // return an object to cancel the subscription\n    return this;\n};\n/**\n * Resubscribe\n *\n * @method resubscribe\n *\n * @returns {void}\n */ Subscription.prototype.resubscribe = function() {\n    this.options.requestManager.removeSubscription(this.id); // unsubscribe\n    this.id = null;\n    this.subscribe(this.callback);\n};\nmodule.exports = Subscription;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-core-subscriptions/lib/subscription.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-core-subscriptions/node_modules/eventemitter3/index.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/web3-core-subscriptions/node_modules/eventemitter3/index.js ***!
  \**********************************************************************************/
/***/ ((module) => {

eval("\nvar has = Object.prototype.hasOwnProperty, prefix = \"~\";\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */ function Events() {}\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n    Events.prototype = Object.create(null);\n    //\n    // This hack is needed because the `__proto__` property is still inherited in\n    // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n    //\n    if (!new Events().__proto__) prefix = false;\n}\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */ function EE(fn, context, once) {\n    this.fn = fn;\n    this.context = context;\n    this.once = once || false;\n}\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */ function addListener(emitter, event, fn, context, once) {\n    if (typeof fn !== \"function\") {\n        throw new TypeError(\"The listener must be a function\");\n    }\n    var listener = new EE(fn, context || emitter, once), evt = prefix ? prefix + event : event;\n    if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n    else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n    else emitter._events[evt] = [\n        emitter._events[evt],\n        listener\n    ];\n    return emitter;\n}\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */ function clearEvent(emitter, evt) {\n    if (--emitter._eventsCount === 0) emitter._events = new Events();\n    else delete emitter._events[evt];\n}\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */ function EventEmitter() {\n    this._events = new Events();\n    this._eventsCount = 0;\n}\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */ EventEmitter.prototype.eventNames = function eventNames() {\n    var names = [], events, name;\n    if (this._eventsCount === 0) return names;\n    for(name in events = this._events){\n        if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n    }\n    if (Object.getOwnPropertySymbols) {\n        return names.concat(Object.getOwnPropertySymbols(events));\n    }\n    return names;\n};\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */ EventEmitter.prototype.listeners = function listeners(event) {\n    var evt = prefix ? prefix + event : event, handlers = this._events[evt];\n    if (!handlers) return [];\n    if (handlers.fn) return [\n        handlers.fn\n    ];\n    for(var i = 0, l = handlers.length, ee = new Array(l); i < l; i++){\n        ee[i] = handlers[i].fn;\n    }\n    return ee;\n};\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */ EventEmitter.prototype.listenerCount = function listenerCount(event) {\n    var evt = prefix ? prefix + event : event, listeners = this._events[evt];\n    if (!listeners) return 0;\n    if (listeners.fn) return 1;\n    return listeners.length;\n};\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */ EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n    var evt = prefix ? prefix + event : event;\n    if (!this._events[evt]) return false;\n    var listeners = this._events[evt], len = arguments.length, args, i;\n    if (listeners.fn) {\n        if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n        switch(len){\n            case 1:\n                return listeners.fn.call(listeners.context), true;\n            case 2:\n                return listeners.fn.call(listeners.context, a1), true;\n            case 3:\n                return listeners.fn.call(listeners.context, a1, a2), true;\n            case 4:\n                return listeners.fn.call(listeners.context, a1, a2, a3), true;\n            case 5:\n                return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n            case 6:\n                return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n        }\n        for(i = 1, args = new Array(len - 1); i < len; i++){\n            args[i - 1] = arguments[i];\n        }\n        listeners.fn.apply(listeners.context, args);\n    } else {\n        var length = listeners.length, j;\n        for(i = 0; i < length; i++){\n            if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n            switch(len){\n                case 1:\n                    listeners[i].fn.call(listeners[i].context);\n                    break;\n                case 2:\n                    listeners[i].fn.call(listeners[i].context, a1);\n                    break;\n                case 3:\n                    listeners[i].fn.call(listeners[i].context, a1, a2);\n                    break;\n                case 4:\n                    listeners[i].fn.call(listeners[i].context, a1, a2, a3);\n                    break;\n                default:\n                    if (!args) for(j = 1, args = new Array(len - 1); j < len; j++){\n                        args[j - 1] = arguments[j];\n                    }\n                    listeners[i].fn.apply(listeners[i].context, args);\n            }\n        }\n    }\n    return true;\n};\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */ EventEmitter.prototype.on = function on(event, fn, context) {\n    return addListener(this, event, fn, context, false);\n};\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */ EventEmitter.prototype.once = function once(event, fn, context) {\n    return addListener(this, event, fn, context, true);\n};\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */ EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n    var evt = prefix ? prefix + event : event;\n    if (!this._events[evt]) return this;\n    if (!fn) {\n        clearEvent(this, evt);\n        return this;\n    }\n    var listeners = this._events[evt];\n    if (listeners.fn) {\n        if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {\n            clearEvent(this, evt);\n        }\n    } else {\n        for(var i = 0, events = [], length = listeners.length; i < length; i++){\n            if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {\n                events.push(listeners[i]);\n            }\n        }\n        //\n        // Reset the array, or remove it completely if we have no more listeners.\n        //\n        if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n        else clearEvent(this, evt);\n    }\n    return this;\n};\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */ EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n    var evt;\n    if (event) {\n        evt = prefix ? prefix + event : event;\n        if (this._events[evt]) clearEvent(this, evt);\n    } else {\n        this._events = new Events();\n        this._eventsCount = 0;\n    }\n    return this;\n};\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n//\n// Expose the module.\n//\nif (true) {\n    module.exports = EventEmitter;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-core-subscriptions/node_modules/eventemitter3/index.js\n");

/***/ })

};
;