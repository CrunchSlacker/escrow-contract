/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/simple-get";
exports.ids = ["vendor-chunks/simple-get"];
exports.modules = {

/***/ "(ssr)/./node_modules/simple-get/index.js":
/*!******************************************!*\
  !*** ./node_modules/simple-get/index.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = simpleGet;\nvar concat = __webpack_require__(/*! simple-concat */ \"(ssr)/./node_modules/simple-concat/index.js\");\nvar http = __webpack_require__(/*! http */ \"http\");\nvar https = __webpack_require__(/*! https */ \"https\");\nvar once = __webpack_require__(/*! once */ \"(ssr)/./node_modules/once/once.js\");\nvar querystring = __webpack_require__(/*! querystring */ \"querystring\");\nvar decompressResponse = __webpack_require__(/*! decompress-response */ \"(ssr)/./node_modules/simple-get/node_modules/decompress-response/index.js\") // excluded from browser build\n;\nvar url = __webpack_require__(/*! url */ \"url\");\nfunction simpleGet(opts, cb) {\n    opts = typeof opts === \"string\" ? {\n        url: opts\n    } : Object.assign({}, opts);\n    cb = once(cb);\n    opts.headers = Object.assign({}, opts.headers);\n    Object.keys(opts.headers).forEach(function(h) {\n        if (h.toLowerCase() !== h) {\n            opts.headers[h.toLowerCase()] = opts.headers[h];\n            delete opts.headers[h];\n        }\n    });\n    if (opts.url) {\n        var loc = url.parse(opts.url);\n        if (loc.hostname) opts.hostname = loc.hostname;\n        if (loc.port) opts.port = loc.port;\n        if (loc.protocol) opts.protocol = loc.protocol;\n        if (loc.auth) opts.auth = loc.auth;\n        opts.path = loc.path;\n        delete opts.url;\n    }\n    if (opts.maxRedirects == null) opts.maxRedirects = 10;\n    if (opts.method) opts.method = opts.method.toUpperCase();\n    var body;\n    if (opts.body) {\n        body = opts.json && !isStream(opts.body) ? JSON.stringify(opts.body) : opts.body;\n    } else if (opts.form) {\n        body = typeof opts.form === \"string\" ? opts.form : querystring.stringify(opts.form);\n        opts.headers[\"content-type\"] = \"application/x-www-form-urlencoded\";\n    }\n    delete opts.body;\n    delete opts.form;\n    if (body) {\n        if (!opts.method) opts.method = \"POST\";\n        if (!isStream(body)) opts.headers[\"content-length\"] = Buffer.byteLength(body);\n        if (opts.json) opts.headers[\"content-type\"] = \"application/json\";\n    }\n    if (opts.json) opts.headers.accept = \"application/json\";\n    if (!opts.headers[\"accept-encoding\"]) opts.headers[\"accept-encoding\"] = \"gzip, deflate\" // Prefer gzip\n    ;\n    var originalHost = opts.hostname // hostname before potential redirect\n    ;\n    var protocol = opts.protocol === \"https:\" ? https : http // Support http/https urls\n    ;\n    var req = protocol.request(opts, function(res) {\n        if (res.statusCode >= 300 && res.statusCode < 400 && \"location\" in res.headers) {\n            opts.url = res.headers.location // Follow 3xx redirects\n            ;\n            delete opts.headers.host // Discard `host` header on redirect (see #32)\n            ;\n            res.resume() // Discard response\n            ;\n            var redirectHost = url.parse(opts.url).hostname // eslint-disable-line node/no-deprecated-api\n            ;\n            // If redirected host is different than original host, drop headers to prevent cookie leak (#73)\n            if (redirectHost !== null && redirectHost !== originalHost) {\n                delete opts.headers.cookie;\n                delete opts.headers.authorization;\n            }\n            if ((res.statusCode === 301 || res.statusCode === 302) && opts.method === \"POST\") {\n                opts.method = \"GET\" // On 301/302 redirect, change POST to GET (see #35)\n                ;\n                delete opts.headers[\"content-length\"];\n                delete opts.headers[\"content-type\"];\n            }\n            if (opts.maxRedirects === 0) return cb(new Error(\"too many redirects\"));\n            opts.maxRedirects -= 1;\n            return simpleGet(opts, cb);\n        }\n        var tryUnzip = typeof decompressResponse === \"function\" && opts.method !== \"HEAD\";\n        cb(null, tryUnzip ? decompressResponse(res) : res);\n    });\n    req.on(\"timeout\", function() {\n        req.abort();\n        cb(new Error(\"Request timed out\"));\n    });\n    req.on(\"error\", cb);\n    if (body && isStream(body)) body.on(\"error\", cb).pipe(req);\n    else req.end(body);\n    return req;\n}\nsimpleGet.concat = function(opts, cb) {\n    return simpleGet(opts, function(err, res) {\n        if (err) return cb(err);\n        concat(res, function(err, data) {\n            if (err) return cb(err);\n            if (opts.json) {\n                try {\n                    data = JSON.parse(data.toString());\n                } catch (err) {\n                    return cb(err, res, data);\n                }\n            }\n            cb(null, res, data);\n        });\n    });\n};\n[\n    \"get\",\n    \"post\",\n    \"put\",\n    \"patch\",\n    \"head\",\n    \"delete\"\n].forEach(function(method) {\n    simpleGet[method] = function(opts, cb) {\n        if (typeof opts === \"string\") opts = {\n            url: opts\n        };\n        opts.method = method.toUpperCase();\n        return simpleGet(opts, cb);\n    };\n});\nfunction isStream(obj) {\n    return typeof obj.pipe === \"function\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/simple-get/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/simple-get/node_modules/decompress-response/index.js":
/*!***************************************************************************!*\
  !*** ./node_modules/simple-get/node_modules/decompress-response/index.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst PassThrough = (__webpack_require__(/*! stream */ \"stream\").PassThrough);\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\");\nconst mimicResponse = __webpack_require__(/*! mimic-response */ \"(ssr)/./node_modules/mimic-response/index.js\");\nmodule.exports = (response)=>{\n    // TODO: Use Array#includes when targeting Node.js 6\n    if ([\n        \"gzip\",\n        \"deflate\"\n    ].indexOf(response.headers[\"content-encoding\"]) === -1) {\n        return response;\n    }\n    const unzip = zlib.createUnzip();\n    const stream = new PassThrough();\n    mimicResponse(response, stream);\n    unzip.on(\"error\", (err)=>{\n        if (err.code === \"Z_BUF_ERROR\") {\n            stream.end();\n            return;\n        }\n        stream.emit(\"error\", err);\n    });\n    response.pipe(unzip).pipe(stream);\n    return stream;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2ltcGxlLWdldC9ub2RlX21vZHVsZXMvZGVjb21wcmVzcy1yZXNwb25zZS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBLE1BQU1BLGNBQWNDLHlEQUE2QjtBQUNqRCxNQUFNQyxPQUFPRCxtQkFBT0EsQ0FBQztBQUNyQixNQUFNRSxnQkFBZ0JGLG1CQUFPQSxDQUFDO0FBRTlCRyxPQUFPQyxPQUFPLEdBQUdDLENBQUFBO0lBQ2hCLG9EQUFvRDtJQUNwRCxJQUFJO1FBQUM7UUFBUTtLQUFVLENBQUNDLE9BQU8sQ0FBQ0QsU0FBU0UsT0FBTyxDQUFDLG1CQUFtQixNQUFNLENBQUMsR0FBRztRQUM3RSxPQUFPRjtJQUNSO0lBRUEsTUFBTUcsUUFBUVAsS0FBS1EsV0FBVztJQUM5QixNQUFNQyxTQUFTLElBQUlYO0lBRW5CRyxjQUFjRyxVQUFVSztJQUV4QkYsTUFBTUcsRUFBRSxDQUFDLFNBQVNDLENBQUFBO1FBQ2pCLElBQUlBLElBQUlDLElBQUksS0FBSyxlQUFlO1lBQy9CSCxPQUFPSSxHQUFHO1lBQ1Y7UUFDRDtRQUVBSixPQUFPSyxJQUFJLENBQUMsU0FBU0g7SUFDdEI7SUFFQVAsU0FBU1csSUFBSSxDQUFDUixPQUFPUSxJQUFJLENBQUNOO0lBRTFCLE9BQU9BO0FBQ1IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9zaW1wbGUtZ2V0L25vZGVfbW9kdWxlcy9kZWNvbXByZXNzLXJlc3BvbnNlL2luZGV4LmpzP2VlNTkiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgUGFzc1Rocm91Z2ggPSByZXF1aXJlKCdzdHJlYW0nKS5QYXNzVGhyb3VnaDtcbmNvbnN0IHpsaWIgPSByZXF1aXJlKCd6bGliJyk7XG5jb25zdCBtaW1pY1Jlc3BvbnNlID0gcmVxdWlyZSgnbWltaWMtcmVzcG9uc2UnKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXNwb25zZSA9PiB7XG5cdC8vIFRPRE86IFVzZSBBcnJheSNpbmNsdWRlcyB3aGVuIHRhcmdldGluZyBOb2RlLmpzIDZcblx0aWYgKFsnZ3ppcCcsICdkZWZsYXRlJ10uaW5kZXhPZihyZXNwb25zZS5oZWFkZXJzWydjb250ZW50LWVuY29kaW5nJ10pID09PSAtMSkge1xuXHRcdHJldHVybiByZXNwb25zZTtcblx0fVxuXG5cdGNvbnN0IHVuemlwID0gemxpYi5jcmVhdGVVbnppcCgpO1xuXHRjb25zdCBzdHJlYW0gPSBuZXcgUGFzc1Rocm91Z2goKTtcblxuXHRtaW1pY1Jlc3BvbnNlKHJlc3BvbnNlLCBzdHJlYW0pO1xuXG5cdHVuemlwLm9uKCdlcnJvcicsIGVyciA9PiB7XG5cdFx0aWYgKGVyci5jb2RlID09PSAnWl9CVUZfRVJST1InKSB7XG5cdFx0XHRzdHJlYW0uZW5kKCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0c3RyZWFtLmVtaXQoJ2Vycm9yJywgZXJyKTtcblx0fSk7XG5cblx0cmVzcG9uc2UucGlwZSh1bnppcCkucGlwZShzdHJlYW0pO1xuXG5cdHJldHVybiBzdHJlYW07XG59O1xuIl0sIm5hbWVzIjpbIlBhc3NUaHJvdWdoIiwicmVxdWlyZSIsInpsaWIiLCJtaW1pY1Jlc3BvbnNlIiwibW9kdWxlIiwiZXhwb3J0cyIsInJlc3BvbnNlIiwiaW5kZXhPZiIsImhlYWRlcnMiLCJ1bnppcCIsImNyZWF0ZVVuemlwIiwic3RyZWFtIiwib24iLCJlcnIiLCJjb2RlIiwiZW5kIiwiZW1pdCIsInBpcGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/simple-get/node_modules/decompress-response/index.js\n");

/***/ })

};
;