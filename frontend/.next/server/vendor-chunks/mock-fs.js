/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mock-fs";
exports.ids = ["vendor-chunks/mock-fs"];
exports.modules = {

/***/ "(ssr)/./node_modules/mock-fs/lib/binding.js":
/*!*********************************************!*\
  !*** ./node_modules/mock-fs/lib/binding.js ***!
  \*********************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\nconst path = __webpack_require__(/*! path */ \"path\");\nconst File = __webpack_require__(/*! ./file */ \"(ssr)/./node_modules/mock-fs/lib/file.js\");\nconst FileDescriptor = __webpack_require__(/*! ./descriptor */ \"(ssr)/./node_modules/mock-fs/lib/descriptor.js\");\nconst Directory = __webpack_require__(/*! ./directory */ \"(ssr)/./node_modules/mock-fs/lib/directory.js\");\nconst SymbolicLink = __webpack_require__(/*! ./symlink */ \"(ssr)/./node_modules/mock-fs/lib/symlink.js\");\nconst FSError = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mock-fs/lib/error.js\");\nconst constants = __webpack_require__(/*! constants */ \"constants\");\nconst getPathParts = (__webpack_require__(/*! ./filesystem */ \"(ssr)/./node_modules/mock-fs/lib/filesystem.js\").getPathParts);\nconst bufferFrom = (__webpack_require__(/*! ./buffer */ \"(ssr)/./node_modules/mock-fs/lib/buffer.js\").from);\nconst bufferAlloc = (__webpack_require__(/*! ./buffer */ \"(ssr)/./node_modules/mock-fs/lib/buffer.js\").alloc);\nconst MODE_TO_KTYPE = {\n    [constants.S_IFREG]: constants.UV_DIRENT_FILE,\n    [constants.S_IFDIR]: constants.UV_DIRENT_DIR,\n    [constants.S_IFBLK]: constants.UV_DIRENT_BLOCK,\n    [constants.S_IFCHR]: constants.UV_DIRENT_CHAR,\n    [constants.S_IFLNK]: constants.UV_DIRENT_LINK,\n    [constants.S_IFIFO]: constants.UV_DIRENT_FIFO,\n    [constants.S_IFSOCK]: constants.UV_DIRENT_SOCKET\n};\n/** Workaround for optimizations in node 8+ */ const fsBinding = process.binding(\"fs\");\nconst kUsePromises = fsBinding.kUsePromises;\nlet statValues;\nif (fsBinding.statValues) {\n    statValues = fsBinding.statValues; // node 10+\n} else if (fsBinding.getStatValues) {\n    statValues = fsBinding.getStatValues(); // node 8\n} else {\n    statValues = [];\n}\n// nodejs v6,8,10 and v12 before v12.10.0 has length 28\n// nodejs v12.10.0+ has length 36\nconst statContainsNs = statValues.length > 28;\n/** Introduction of BigUint64Array in 10.5 */ let BigUint64Array;\nif (global.BigUint64Array) {\n    BigUint64Array = global.BigUint64Array;\n} else {\n    BigUint64Array = function() {};\n}\nconst MAX_LINKS = 50;\n/**\n * Call the provided function and either return the result or call the callback\n * with it (depending on if a callback is provided).\n * @param {function()} callback Optional callback.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n * @param {Object} thisArg This argument for the following function.\n * @param {function()} func Function to call.\n * @return {*} Return (if callback is not provided).\n */ function maybeCallback(callback, ctx, thisArg, func) {\n    let err = null;\n    let val;\n    if (kUsePromises && callback === kUsePromises) {\n        // support nodejs v10+ fs.promises\n        try {\n            val = func.call(thisArg);\n        } catch (e) {\n            err = e;\n        }\n        return new Promise(function(resolve, reject) {\n            process.nextTick(function() {\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve(val);\n                }\n            });\n        });\n    } else if (callback && typeof callback === \"function\") {\n        try {\n            val = func.call(thisArg);\n        } catch (e) {\n            err = e;\n        }\n        process.nextTick(function() {\n            if (val === undefined) {\n                callback(err);\n            } else {\n                callback(err, val);\n            }\n        });\n    } else if (ctx && typeof ctx === \"object\") {\n        try {\n            return func.call(thisArg);\n        } catch (e) {\n            // default to errno for UNKNOWN\n            ctx.code = e.code || \"UNKNOWN\";\n            ctx.errno = e.errno || FSError.codes.UNKNOWN.errno;\n        }\n    } else {\n        return func.call(thisArg);\n    }\n}\n/**\n * set syscall property on context object, only for nodejs v10+.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n * @param {String} syscall Name of syscall.\n */ function markSyscall(ctx, syscall) {\n    if (ctx && typeof ctx === \"object\") {\n        ctx.syscall = syscall;\n    }\n}\n/**\n * Handle FSReqWrap oncomplete.\n * @param {Function} callback The callback.\n * @return {Function} The normalized callback.\n */ function normalizeCallback(callback) {\n    if (callback && typeof callback.oncomplete === \"function\") {\n        // Unpack callback from FSReqWrap\n        callback = callback.oncomplete.bind(callback);\n    }\n    return callback;\n}\n/**\n * Handle stat optimizations introduced in Node 8.\n * See https://github.com/nodejs/node/pull/11665.\n * @param {Function} callback The callback.\n * @return {Function} The wrapped callback.\n */ function wrapStatsCallback(callback) {\n    if (callback && typeof callback.oncomplete === \"function\") {\n        // Unpack callback from FSReqWrap\n        callback = callback.oncomplete.bind(callback);\n    }\n    if (typeof callback === \"function\") {\n        return function(err, stats) {\n            if (stats) {\n                fillStatsArray(stats, statValues);\n            }\n            callback.apply(this, arguments);\n        };\n    } else {\n        return callback;\n    }\n}\nfunction getDirentType(mode) {\n    const ktype = MODE_TO_KTYPE[mode & constants.S_IFMT];\n    if (ktype === undefined) {\n        return constants.UV_DIRENT_UNKNOWN;\n    }\n    return ktype;\n}\nfunction notImplemented() {\n    throw new Error(\"Method not implemented\");\n}\nfunction deBuffer(p) {\n    return Buffer.isBuffer(p) ? p.toString() : p;\n}\n/**\n * Create a new stats object.\n * @param {Object} config Stats properties.\n * @constructor\n */ function Stats(config) {\n    for(const key in config){\n        this[key] = config[key];\n    }\n    // node 10 expects an array internally\n    // see https://github.com/nodejs/node/pull/19714\n    fillStatsArray(config, this);\n}\n/**\n * Check if mode indicates property.\n * @param {number} property Property to check.\n * @return {boolean} Property matches mode.\n */ Stats.prototype._checkModeProperty = function(property) {\n    return (this.mode & constants.S_IFMT) === property;\n};\n/**\n * @return {Boolean} Is a directory.\n */ Stats.prototype.isDirectory = function() {\n    return this._checkModeProperty(constants.S_IFDIR);\n};\n/**\n * @return {Boolean} Is a regular file.\n */ Stats.prototype.isFile = function() {\n    return this._checkModeProperty(constants.S_IFREG);\n};\n/**\n * @return {Boolean} Is a block device.\n */ Stats.prototype.isBlockDevice = function() {\n    return this._checkModeProperty(constants.S_IFBLK);\n};\n/**\n * @return {Boolean} Is a character device.\n */ Stats.prototype.isCharacterDevice = function() {\n    return this._checkModeProperty(constants.S_IFCHR);\n};\n/**\n * @return {Boolean} Is a symbolic link.\n */ Stats.prototype.isSymbolicLink = function() {\n    return this._checkModeProperty(constants.S_IFLNK);\n};\n/**\n * @return {Boolean} Is a named pipe.\n */ Stats.prototype.isFIFO = function() {\n    return this._checkModeProperty(constants.S_IFIFO);\n};\n/**\n * @return {Boolean} Is a socket.\n */ Stats.prototype.isSocket = function() {\n    return this._checkModeProperty(constants.S_IFSOCK);\n};\n/**\n * Create a new binding with the given file system.\n * @param {FileSystem} system Mock file system.\n * @constructor\n */ function Binding(system) {\n    /**\n   * Mock file system.\n   * @type {FileSystem}\n   */ this._system = system;\n    /**\n   * Stats constructor.\n   * @type {function}\n   */ this.Stats = Stats;\n    /**\n   * Lookup of open files.\n   * @type {Object.<number, FileDescriptor>}\n   */ this._openFiles = {};\n    /**\n   * Counter for file descriptors.\n   * @type {number}\n   */ this._counter = -1;\n    const stdin = new FileDescriptor(constants.O_RDWR);\n    stdin.setItem(new File.StandardInput());\n    this.trackDescriptor(stdin);\n    const stdout = new FileDescriptor(constants.O_RDWR);\n    stdout.setItem(new File.StandardOutput());\n    this.trackDescriptor(stdout);\n    const stderr = new FileDescriptor(constants.O_RDWR);\n    stderr.setItem(new File.StandardError());\n    this.trackDescriptor(stderr);\n}\n/**\n * Get the file system underlying this binding.\n * @return {FileSystem} The underlying file system.\n */ Binding.prototype.getSystem = function() {\n    return this._system;\n};\n/**\n * Reset the file system underlying this binding.\n * @param {FileSystem} system The new file system.\n */ Binding.prototype.setSystem = function(system) {\n    this._system = system;\n};\n/**\n * Get a file descriptor.\n * @param {number} fd File descriptor identifier.\n * @return {FileDescriptor} File descriptor.\n */ Binding.prototype.getDescriptorById = function(fd) {\n    if (!this._openFiles.hasOwnProperty(fd)) {\n        throw new FSError(\"EBADF\");\n    }\n    return this._openFiles[fd];\n};\n/**\n * Keep track of a file descriptor as open.\n * @param {FileDescriptor} descriptor The file descriptor.\n * @return {number} Identifier for file descriptor.\n */ Binding.prototype.trackDescriptor = function(descriptor) {\n    const fd = ++this._counter;\n    this._openFiles[fd] = descriptor;\n    return fd;\n};\n/**\n * Stop tracking a file descriptor as open.\n * @param {number} fd Identifier for file descriptor.\n */ Binding.prototype.untrackDescriptorById = function(fd) {\n    if (!this._openFiles.hasOwnProperty(fd)) {\n        throw new FSError(\"EBADF\");\n    }\n    delete this._openFiles[fd];\n};\n/**\n * Resolve the canonicalized absolute pathname.\n * @param {string|Buffer} filepath The file path.\n * @param {string} encoding The encoding for the return.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n * @return {string|Buffer} The real path.\n */ Binding.prototype.realpath = function(filepath, encoding, callback, ctx) {\n    markSyscall(ctx, \"realpath\");\n    return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n        let realPath;\n        filepath = deBuffer(filepath);\n        const resolved = path.resolve(filepath);\n        const parts = getPathParts(resolved);\n        let item = this._system.getRoot();\n        let itemPath = \"/\";\n        let name, i, ii;\n        for(i = 0, ii = parts.length; i < ii; ++i){\n            name = parts[i];\n            while(item instanceof SymbolicLink){\n                itemPath = path.resolve(path.dirname(itemPath), item.getPath());\n                item = this._system.getItem(itemPath);\n            }\n            if (!item) {\n                throw new FSError(\"ENOENT\", filepath);\n            }\n            if (item instanceof Directory) {\n                itemPath = path.resolve(itemPath, name);\n                item = item.getItem(name);\n            } else {\n                throw new FSError(\"ENOTDIR\", filepath);\n            }\n        }\n        if (item) {\n            while(item instanceof SymbolicLink){\n                itemPath = path.resolve(path.dirname(itemPath), item.getPath());\n                item = this._system.getItem(itemPath);\n            }\n            realPath = itemPath;\n        } else {\n            throw new FSError(\"ENOENT\", filepath);\n        }\n        if (process.platform === \"win32\" && realPath.startsWith(\"\\\\\\\\?\\\\\")) {\n            // Remove win32 file namespace prefix \\\\?\\\n            realPath = realPath.slice(4);\n        }\n        if (encoding === \"buffer\") {\n            realPath = bufferFrom(realPath);\n        }\n        return realPath;\n    });\n};\n/**\n * Fill a Float64Array with stat information\n * This is based on the internal FillStatsArray function in Node.\n * https://github.com/nodejs/node/blob/4e05952a8a75af6df625415db612d3a9a1322682/src/node_file.cc#L533\n * @param {Object} stats An object with file stats\n * @param {Float64Array} statValues A Float64Array where stat values should be inserted\n * @returns {void}\n */ function fillStatsArray(stats, statValues) {\n    statValues[0] = stats.dev;\n    statValues[1] = stats.mode;\n    statValues[2] = stats.nlink;\n    statValues[3] = stats.uid;\n    statValues[4] = stats.gid;\n    statValues[5] = stats.rdev;\n    statValues[6] = stats.blksize;\n    statValues[7] = stats.ino;\n    statValues[8] = stats.size;\n    statValues[9] = stats.blocks;\n    if (statContainsNs) {\n        // nodejs v12.10.0+\n        // This is based on the internal FillStatsArray function in Node.\n        // https://github.com/nodejs/node/blob/3a2e75d9a5c31d20e429d505b82dd182e33f459a/src/node_file.h#L153-L187\n        statValues[10] = Math.floor(stats.atimeMs / 1000);\n        statValues[11] = stats.atimeMs % 1000 * 1000000;\n        statValues[12] = Math.floor(stats.mtimeMs / 1000);\n        statValues[13] = stats.mtimeMs % 1000 * 1000000;\n        statValues[14] = Math.floor(stats.ctimeMs / 1000);\n        statValues[15] = stats.ctimeMs % 1000 * 1000000;\n        statValues[16] = Math.floor(stats.birthtimeMs / 1000);\n        statValues[17] = stats.birthtimeMs % 1000 * 1000000;\n    } else {\n        // nodejs before v12.10.0\n        // This is based on the internal FillStatsArray function in Node.\n        // https://github.com/nodejs/node/blob/4e05952a8a75af6df625415db612d3a9a1322682/src/node_file.cc#L533\n        statValues[10] = stats.atimeMs;\n        statValues[11] = stats.mtimeMs;\n        statValues[12] = stats.ctimeMs;\n        statValues[13] = stats.birthtimeMs;\n    }\n}\n/**\n * Stat an item.\n * @param {string} filepath Path.\n * @param {function(Error, Stats)|Float64Array|BigUint64Array} callback Callback (optional). In Node 7.7.0+ this will be a Float64Array\n * that should be filled with stat values.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n * @return {Stats|undefined} Stats or undefined (if sync).\n */ Binding.prototype.stat = function(filepath, options, callback, ctx) {\n    // this seems wound not happen in nodejs v10+\n    if (arguments.length < 3) {\n        callback = options;\n        options = {};\n    }\n    markSyscall(ctx, \"stat\");\n    return maybeCallback(wrapStatsCallback(callback), ctx, this, function() {\n        filepath = deBuffer(filepath);\n        let item = this._system.getItem(filepath);\n        if (item instanceof SymbolicLink) {\n            item = this._system.getItem(path.resolve(path.dirname(filepath), item.getPath()));\n        }\n        if (!item) {\n            throw new FSError(\"ENOENT\", filepath);\n        }\n        const stats = item.getStats();\n        // In Node 7.7.0+, binding.stat accepts a Float64Array as the second argument,\n        // which should be filled with stat values.\n        // In prior versions of Node, binding.stat simply returns a Stats instance.\n        if (callback instanceof Float64Array || callback instanceof BigUint64Array) {\n            fillStatsArray(stats, callback);\n        } else {\n            fillStatsArray(stats, statValues);\n            return new Stats(stats);\n        }\n    });\n};\n/**\n * Stat an item.\n * @param {number} fd File descriptor.\n * @param {function(Error, Stats)|Float64Array|BigUint64Array} callback Callback (optional). In Node 7.7.0+ this will be a Float64Array\n * that should be filled with stat values.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n * @return {Stats|undefined} Stats or undefined (if sync).\n */ Binding.prototype.fstat = function(fd, options, callback, ctx) {\n    if (arguments.length < 3) {\n        callback = options;\n        options = {};\n    }\n    markSyscall(ctx, \"fstat\");\n    return maybeCallback(wrapStatsCallback(callback), ctx, this, function() {\n        const descriptor = this.getDescriptorById(fd);\n        const item = descriptor.getItem();\n        const stats = item.getStats();\n        // In Node 7.7.0+, binding.stat accepts a Float64Array as the second argument,\n        // which should be filled with stat values.\n        // In prior versions of Node, binding.stat simply returns a Stats instance.\n        if (callback instanceof Float64Array || callback instanceof BigUint64Array) {\n            fillStatsArray(stats, callback);\n        } else {\n            fillStatsArray(stats, statValues);\n            return new Stats(stats);\n        }\n    });\n};\n/**\n * Close a file descriptor.\n * @param {number} fd File descriptor.\n * @param {function(Error)} callback Callback (optional).\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n */ Binding.prototype.close = function(fd, callback, ctx) {\n    markSyscall(ctx, \"close\");\n    return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n        this.untrackDescriptorById(fd);\n    });\n};\n/**\n * Open and possibly create a file.\n * @param {string} pathname File path.\n * @param {number} flags Flags.\n * @param {number} mode Mode.\n * @param {function(Error, string)} callback Callback (optional).\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n * @return {string} File descriptor (if sync).\n */ Binding.prototype.open = function(pathname, flags, mode, callback, ctx) {\n    markSyscall(ctx, \"open\");\n    return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n        pathname = deBuffer(pathname);\n        const descriptor = new FileDescriptor(flags);\n        let item = this._system.getItem(pathname);\n        while(item instanceof SymbolicLink){\n            item = this._system.getItem(path.resolve(path.dirname(pathname), item.getPath()));\n        }\n        if (descriptor.isExclusive() && item) {\n            throw new FSError(\"EEXIST\", pathname);\n        }\n        if (descriptor.isCreate() && !item) {\n            const parent = this._system.getItem(path.dirname(pathname));\n            if (!parent) {\n                throw new FSError(\"ENOENT\", pathname);\n            }\n            if (!(parent instanceof Directory)) {\n                throw new FSError(\"ENOTDIR\", pathname);\n            }\n            item = new File();\n            if (mode) {\n                item.setMode(mode);\n            }\n            parent.addItem(path.basename(pathname), item);\n        }\n        if (descriptor.isRead()) {\n            if (!item) {\n                throw new FSError(\"ENOENT\", pathname);\n            }\n            if (!item.canRead()) {\n                throw new FSError(\"EACCES\", pathname);\n            }\n        }\n        if (descriptor.isWrite() && !item.canWrite()) {\n            throw new FSError(\"EACCES\", pathname);\n        }\n        if (item instanceof Directory && (descriptor.isTruncate() || descriptor.isAppend())) {\n            throw new FSError(\"EISDIR\", pathname);\n        }\n        if (descriptor.isTruncate()) {\n            if (!(item instanceof File)) {\n                throw new FSError(\"EBADF\");\n            }\n            item.setContent(\"\");\n        }\n        if (descriptor.isTruncate() || descriptor.isAppend()) {\n            descriptor.setPosition(item.getContent().length);\n        }\n        descriptor.setItem(item);\n        return this.trackDescriptor(descriptor);\n    });\n};\n/**\n * Open a file handler. A new api in nodejs v10+ for fs.promises\n * @param {string} pathname File path.\n * @param {number} flags Flags.\n * @param {number} mode Mode.\n * @param {function} callback Callback (optional), expecting kUsePromises in nodejs v10+.\n */ Binding.prototype.openFileHandle = function(pathname, flags, mode, callback) {\n    const self = this;\n    return this.open(pathname, flags, mode, kUsePromises).then(function(fd) {\n        // nodejs v10+ fs.promises FileHandler constructor only ask these three properties.\n        return {\n            getAsyncId: notImplemented,\n            fd: fd,\n            close: function() {\n                return self.close(fd, kUsePromises);\n            }\n        };\n    });\n};\n/**\n * Read from a file descriptor.\n * @param {string} fd File descriptor.\n * @param {Buffer} buffer Buffer that the contents will be written to.\n * @param {number} offset Offset in the buffer to start writing to.\n * @param {number} length Number of bytes to read.\n * @param {?number} position Where to begin reading in the file.  If null,\n *     data will be read from the current file position.\n * @param {function(Error, number, Buffer)} callback Callback (optional) called\n *     with any error, number of bytes read, and the buffer.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n * @return {number} Number of bytes read (if sync).\n */ Binding.prototype.read = function(fd, buffer, offset, length, position, callback, ctx) {\n    markSyscall(ctx, \"read\");\n    return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n        const descriptor = this.getDescriptorById(fd);\n        if (!descriptor.isRead()) {\n            throw new FSError(\"EBADF\");\n        }\n        const file = descriptor.getItem();\n        if (file instanceof Directory) {\n            throw new FSError(\"EISDIR\");\n        }\n        if (!(file instanceof File)) {\n            // deleted or not a regular file\n            throw new FSError(\"EBADF\");\n        }\n        if (typeof position !== \"number\" || position < 0) {\n            position = descriptor.getPosition();\n        }\n        const content = file.getContent();\n        const start = Math.min(position, content.length);\n        const end = Math.min(position + length, content.length);\n        const read = start < end ? content.copy(buffer, offset, start, end) : 0;\n        descriptor.setPosition(position + read);\n        return read;\n    });\n};\n/**\n * Write to a file descriptor given a buffer.\n * @param {string} src Source file.\n * @param {string} dest Destination file.\n * @param {number} flags Modifiers for copy operation.\n * @param {function(Error)} callback Callback (optional) called\n *     with any error.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n */ Binding.prototype.copyFile = function(src, dest, flags, callback, ctx) {\n    markSyscall(ctx, \"copyfile\");\n    return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n        src = deBuffer(src);\n        dest = deBuffer(dest);\n        const srcFd = this.open(src, constants.O_RDONLY);\n        try {\n            const srcDescriptor = this.getDescriptorById(srcFd);\n            if (!srcDescriptor.isRead()) {\n                throw new FSError(\"EBADF\");\n            }\n            const srcFile = srcDescriptor.getItem();\n            if (!(srcFile instanceof File)) {\n                throw new FSError(\"EBADF\");\n            }\n            const srcContent = srcFile.getContent();\n            let destFlags = constants.O_WRONLY | constants.O_CREAT | constants.O_TRUNC;\n            if ((flags & constants.COPYFILE_EXCL) === constants.COPYFILE_EXCL) {\n                destFlags |= constants.O_EXCL;\n            }\n            const destFd = this.open(dest, destFlags);\n            try {\n                this.write(destFd, srcContent, 0, srcContent.length, 0);\n            } finally{\n                this.close(destFd);\n            }\n        } finally{\n            this.close(srcFd);\n        }\n    });\n};\n/**\n * Write to a file descriptor given a buffer.\n * @param {string} fd File descriptor.\n * @param {Array<Buffer>} buffers Array of buffers with contents to write.\n * @param {?number} position Where to begin writing in the file.  If null,\n *     data will be written to the current file position.\n * @param {function(Error, number, Buffer)} callback Callback (optional) called\n *     with any error, number of bytes written, and the buffer.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n * @return {number} Number of bytes written (if sync).\n */ Binding.prototype.writeBuffers = function(fd, buffers, position, callback, ctx) {\n    markSyscall(ctx, \"write\");\n    return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n        const descriptor = this.getDescriptorById(fd);\n        if (!descriptor.isWrite()) {\n            throw new FSError(\"EBADF\");\n        }\n        const file = descriptor.getItem();\n        if (!(file instanceof File)) {\n            // not a regular file\n            throw new FSError(\"EBADF\");\n        }\n        if (typeof position !== \"number\" || position < 0) {\n            position = descriptor.getPosition();\n        }\n        let content = file.getContent();\n        const newContent = Buffer.concat(buffers);\n        const newLength = position + newContent.length;\n        if (content.length < newLength) {\n            const tempContent = bufferAlloc(newLength);\n            content.copy(tempContent);\n            content = tempContent;\n        }\n        const written = newContent.copy(content, position);\n        file.setContent(content);\n        descriptor.setPosition(newLength);\n        return written;\n    });\n};\n/**\n * Write to a file descriptor given a buffer.\n * @param {string} fd File descriptor.\n * @param {Buffer} buffer Buffer with contents to write.\n * @param {number} offset Offset in the buffer to start writing from.\n * @param {number} length Number of bytes to write.\n * @param {?number} position Where to begin writing in the file.  If null,\n *     data will be written to the current file position.\n * @param {function(Error, number, Buffer)} callback Callback (optional) called\n *     with any error, number of bytes written, and the buffer.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n * @return {number} Number of bytes written (if sync).\n */ Binding.prototype.writeBuffer = function(fd, buffer, offset, length, position, callback, ctx) {\n    markSyscall(ctx, \"write\");\n    return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n        const descriptor = this.getDescriptorById(fd);\n        if (!descriptor.isWrite()) {\n            throw new FSError(\"EBADF\");\n        }\n        const file = descriptor.getItem();\n        if (!(file instanceof File)) {\n            // not a regular file\n            throw new FSError(\"EBADF\");\n        }\n        if (typeof position !== \"number\" || position < 0) {\n            position = descriptor.getPosition();\n        }\n        let content = file.getContent();\n        const newLength = position + length;\n        if (content.length < newLength) {\n            const newContent = bufferAlloc(newLength);\n            content.copy(newContent);\n            content = newContent;\n        }\n        const sourceEnd = Math.min(offset + length, buffer.length);\n        const written = bufferFrom(buffer).copy(content, position, offset, sourceEnd);\n        file.setContent(content);\n        descriptor.setPosition(newLength);\n        return written;\n    });\n};\n/**\n * Alias for writeBuffer (used in Node <= 0.10).\n * @param {string} fd File descriptor.\n * @param {Buffer} buffer Buffer with contents to write.\n * @param {number} offset Offset in the buffer to start writing from.\n * @param {number} length Number of bytes to write.\n * @param {?number} position Where to begin writing in the file.  If null,\n *     data will be written to the current file position.\n * @param {function(Error, number, Buffer)} callback Callback (optional) called\n *     with any error, number of bytes written, and the buffer.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n * @return {number} Number of bytes written (if sync).\n */ Binding.prototype.write = Binding.prototype.writeBuffer;\n/**\n * Write to a file descriptor given a string.\n * @param {string} fd File descriptor.\n * @param {string} string String with contents to write.\n * @param {number} position Where to begin writing in the file.  If null,\n *     data will be written to the current file position.\n * @param {string} encoding String encoding.\n * @param {function(Error, number, string)} callback Callback (optional) called\n *     with any error, number of bytes written, and the string.\n * @return {number} Number of bytes written (if sync).\n */ Binding.prototype.writeString = function(fd, string, position, encoding, callback, ctx) {\n    markSyscall(ctx, \"write\");\n    const buffer = bufferFrom(string, encoding);\n    let wrapper;\n    if (callback && callback !== kUsePromises) {\n        if (callback.oncomplete) {\n            callback = callback.oncomplete.bind(callback);\n        }\n        wrapper = function(err, written, returned) {\n            callback(err, written, returned && string);\n        };\n    }\n    return this.writeBuffer(fd, buffer, 0, string.length, position, wrapper, ctx);\n};\n/**\n * Rename a file.\n * @param {string} oldPath Old pathname.\n * @param {string} newPath New pathname.\n * @param {function(Error)} callback Callback (optional).\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n * @return {undefined}\n */ Binding.prototype.rename = function(oldPath, newPath, callback, ctx) {\n    markSyscall(ctx, \"rename\");\n    return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n        oldPath = deBuffer(oldPath);\n        newPath = deBuffer(newPath);\n        const oldItem = this._system.getItem(oldPath);\n        if (!oldItem) {\n            throw new FSError(\"ENOENT\", oldPath);\n        }\n        const oldParent = this._system.getItem(path.dirname(oldPath));\n        const oldName = path.basename(oldPath);\n        const newItem = this._system.getItem(newPath);\n        const newParent = this._system.getItem(path.dirname(newPath));\n        const newName = path.basename(newPath);\n        if (newItem) {\n            // make sure they are the same type\n            if (oldItem instanceof File) {\n                if (newItem instanceof Directory) {\n                    throw new FSError(\"EISDIR\", newPath);\n                }\n            } else if (oldItem instanceof Directory) {\n                if (!(newItem instanceof Directory)) {\n                    throw new FSError(\"ENOTDIR\", newPath);\n                }\n                if (newItem.list().length > 0) {\n                    throw new FSError(\"ENOTEMPTY\", newPath);\n                }\n            }\n            newParent.removeItem(newName);\n        } else {\n            if (!newParent) {\n                throw new FSError(\"ENOENT\", newPath);\n            }\n            if (!(newParent instanceof Directory)) {\n                throw new FSError(\"ENOTDIR\", newPath);\n            }\n        }\n        oldParent.removeItem(oldName);\n        newParent.addItem(newName, oldItem);\n    });\n};\n/**\n * Read a directory.\n * @param {string} dirpath Path to directory.\n * @param {string} encoding The encoding ('utf-8' or 'buffer').\n * @param {boolean} withFileTypes whether or not to return fs.Dirent objects\n * @param {function(Error, (Array.<string>|Array.<Buffer>)} callback Callback\n *     (optional) called with any error or array of items in the directory.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n * @return {Array.<string>|Array.<Buffer>} Array of items in directory (if sync).\n */ Binding.prototype.readdir = function(dirpath, encoding, withFileTypes, callback, ctx) {\n    // again, the shorter arguments would not happen in nodejs v10+\n    if (arguments.length === 2) {\n        callback = encoding;\n        encoding = \"utf-8\";\n    } else if (arguments.length === 3) {\n        callback = withFileTypes;\n    }\n    markSyscall(ctx, \"scandir\");\n    return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n        dirpath = deBuffer(dirpath);\n        let dpath = dirpath;\n        let dir = this._system.getItem(dirpath);\n        while(dir instanceof SymbolicLink){\n            dpath = path.resolve(path.dirname(dpath), dir.getPath());\n            dir = this._system.getItem(dpath);\n        }\n        if (!dir) {\n            throw new FSError(\"ENOENT\", dirpath);\n        }\n        if (!(dir instanceof Directory)) {\n            throw new FSError(\"ENOTDIR\", dirpath);\n        }\n        if (!dir.canRead()) {\n            throw new FSError(\"EACCES\", dirpath);\n        }\n        let list = dir.list();\n        if (encoding === \"buffer\") {\n            list = list.map(function(item) {\n                return bufferFrom(item);\n            });\n        }\n        if (withFileTypes === true) {\n            const types = list.map(function(name) {\n                const stats = dir.getItem(name).getStats();\n                return getDirentType(stats.mode);\n            });\n            list = [\n                list,\n                types\n            ];\n        }\n        return list;\n    });\n};\n/**\n * Create a directory.\n * @param {string} pathname Path to new directory.\n * @param {number} mode Permissions.\n * @param {boolean} recursive Recursively create deep directory. (added in nodejs v10+)\n * @param {function(Error)} callback Optional callback.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n */ Binding.prototype.mkdir = function(pathname, mode, recursive, callback, ctx) {\n    if (typeof recursive !== \"boolean\") {\n        // when running nodejs < 10\n        ctx = callback;\n        callback = recursive;\n        recursive = false;\n    }\n    markSyscall(ctx, \"mkdir\");\n    return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n        pathname = deBuffer(pathname);\n        const item = this._system.getItem(pathname);\n        if (item) {\n            if (recursive && item instanceof Directory) {\n                // silently pass existing folder in recursive mode\n                return;\n            }\n            throw new FSError(\"EEXIST\", pathname);\n        }\n        const _mkdir = (function(_pathname) {\n            const parentDir = path.dirname(_pathname);\n            let parent = this._system.getItem(parentDir);\n            if (!parent) {\n                if (!recursive) {\n                    throw new FSError(\"ENOENT\", _pathname);\n                }\n                parent = _mkdir(parentDir, true);\n            }\n            this.access(parentDir, parseInt(\"0002\", 8));\n            const dir = new Directory();\n            if (mode) {\n                dir.setMode(mode);\n            }\n            return parent.addItem(path.basename(_pathname), dir);\n        }).bind(this);\n        _mkdir(pathname);\n    });\n};\n/**\n * Remove a directory.\n * @param {string} pathname Path to directory.\n * @param {function(Error)} callback Optional callback.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n */ Binding.prototype.rmdir = function(pathname, callback, ctx) {\n    markSyscall(ctx, \"rmdir\");\n    return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n        pathname = deBuffer(pathname);\n        const item = this._system.getItem(pathname);\n        if (!item) {\n            throw new FSError(\"ENOENT\", pathname);\n        }\n        if (!(item instanceof Directory)) {\n            throw new FSError(\"ENOTDIR\", pathname);\n        }\n        if (item.list().length > 0) {\n            throw new FSError(\"ENOTEMPTY\", pathname);\n        }\n        this.access(path.dirname(pathname), parseInt(\"0002\", 8));\n        const parent = this._system.getItem(path.dirname(pathname));\n        parent.removeItem(path.basename(pathname));\n    });\n};\nconst PATH_CHARS = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\nconst MAX_ATTEMPTS = 62 * 62 * 62;\n/**\n * Create a directory based on a template.\n * See http://web.mit.edu/freebsd/head/lib/libc/stdio/mktemp.c\n * @param {string} template Path template (trailing Xs will be replaced).\n * @param {string} encoding The encoding ('utf-8' or 'buffer').\n * @param {function(Error, string)} callback Optional callback.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n */ Binding.prototype.mkdtemp = function(prefix, encoding, callback, ctx) {\n    if (encoding && typeof encoding !== \"string\") {\n        callback = encoding;\n        encoding = \"utf-8\";\n    }\n    markSyscall(ctx, \"mkdtemp\");\n    return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n        prefix = prefix.replace(/X{0,6}$/, \"XXXXXX\");\n        const parentPath = path.dirname(prefix);\n        const parent = this._system.getItem(parentPath);\n        if (!parent) {\n            throw new FSError(\"ENOENT\", prefix);\n        }\n        if (!(parent instanceof Directory)) {\n            throw new FSError(\"ENOTDIR\", prefix);\n        }\n        this.access(parentPath, parseInt(\"0002\", 8));\n        const template = path.basename(prefix);\n        let unique = false;\n        let count = 0;\n        let name;\n        while(!unique && count < MAX_ATTEMPTS){\n            let position = template.length - 1;\n            let replacement = \"\";\n            while(template.charAt(position) === \"X\"){\n                replacement += PATH_CHARS.charAt(Math.floor(PATH_CHARS.length * Math.random()));\n                position -= 1;\n            }\n            const candidate = template.slice(0, position + 1) + replacement;\n            if (!parent.getItem(candidate)) {\n                name = candidate;\n                unique = true;\n            }\n            count += 1;\n        }\n        if (!name) {\n            throw new FSError(\"EEXIST\", prefix);\n        }\n        const dir = new Directory();\n        parent.addItem(name, dir);\n        let uniquePath = path.join(parentPath, name);\n        if (encoding === \"buffer\") {\n            uniquePath = bufferFrom(uniquePath);\n        }\n        return uniquePath;\n    });\n};\n/**\n * Truncate a file.\n * @param {number} fd File descriptor.\n * @param {number} len Number of bytes.\n * @param {function(Error)} callback Optional callback.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n */ Binding.prototype.ftruncate = function(fd, len, callback, ctx) {\n    markSyscall(ctx, \"ftruncate\");\n    return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n        const descriptor = this.getDescriptorById(fd);\n        if (!descriptor.isWrite()) {\n            throw new FSError(\"EINVAL\");\n        }\n        const file = descriptor.getItem();\n        if (!(file instanceof File)) {\n            throw new FSError(\"EINVAL\");\n        }\n        const content = file.getContent();\n        const newContent = bufferAlloc(len);\n        content.copy(newContent);\n        file.setContent(newContent);\n    });\n};\n/**\n * Legacy support.\n * @param {number} fd File descriptor.\n * @param {number} len Number of bytes.\n * @param {function(Error)} callback Optional callback.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n */ Binding.prototype.truncate = Binding.prototype.ftruncate;\n/**\n * Change user and group owner.\n * @param {string} pathname Path.\n * @param {number} uid User id.\n * @param {number} gid Group id.\n * @param {function(Error)} callback Optional callback.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n */ Binding.prototype.chown = function(pathname, uid, gid, callback, ctx) {\n    markSyscall(ctx, \"chown\");\n    return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n        pathname = deBuffer(pathname);\n        const item = this._system.getItem(pathname);\n        if (!item) {\n            throw new FSError(\"ENOENT\", pathname);\n        }\n        item.setUid(uid);\n        item.setGid(gid);\n    });\n};\n/**\n * Change user and group owner.\n * @param {number} fd File descriptor.\n * @param {number} uid User id.\n * @param {number} gid Group id.\n * @param {function(Error)} callback Optional callback.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n */ Binding.prototype.fchown = function(fd, uid, gid, callback, ctx) {\n    markSyscall(ctx, \"fchown\");\n    return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n        const descriptor = this.getDescriptorById(fd);\n        const item = descriptor.getItem();\n        item.setUid(uid);\n        item.setGid(gid);\n    });\n};\n/**\n * Change permissions.\n * @param {string} pathname Path.\n * @param {number} mode Mode.\n * @param {function(Error)} callback Optional callback.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n */ Binding.prototype.chmod = function(pathname, mode, callback, ctx) {\n    markSyscall(ctx, \"chmod\");\n    return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n        pathname = deBuffer(pathname);\n        const item = this._system.getItem(pathname);\n        if (!item) {\n            throw new FSError(\"ENOENT\", pathname);\n        }\n        item.setMode(mode);\n    });\n};\n/**\n * Change permissions.\n * @param {number} fd File descriptor.\n * @param {number} mode Mode.\n * @param {function(Error)} callback Optional callback.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n */ Binding.prototype.fchmod = function(fd, mode, callback, ctx) {\n    markSyscall(ctx, \"fchmod\");\n    return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n        const descriptor = this.getDescriptorById(fd);\n        const item = descriptor.getItem();\n        item.setMode(mode);\n    });\n};\n/**\n * Delete a named item.\n * @param {string} pathname Path to item.\n * @param {function(Error)} callback Optional callback.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n */ Binding.prototype.unlink = function(pathname, callback, ctx) {\n    markSyscall(ctx, \"unlink\");\n    return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n        pathname = deBuffer(pathname);\n        const item = this._system.getItem(pathname);\n        if (!item) {\n            throw new FSError(\"ENOENT\", pathname);\n        }\n        if (item instanceof Directory) {\n            throw new FSError(\"EPERM\", pathname);\n        }\n        const parent = this._system.getItem(path.dirname(pathname));\n        parent.removeItem(path.basename(pathname));\n    });\n};\n/**\n * Update timestamps.\n * @param {string} pathname Path to item.\n * @param {number} atime Access time (in seconds).\n * @param {number} mtime Modification time (in seconds).\n * @param {function(Error)} callback Optional callback.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n */ Binding.prototype.utimes = function(pathname, atime, mtime, callback, ctx) {\n    markSyscall(ctx, \"utimes\");\n    return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n        pathname = deBuffer(pathname);\n        const item = this._system.getItem(pathname);\n        if (!item) {\n            throw new FSError(\"ENOENT\", pathname);\n        }\n        item.setATime(new Date(atime * 1000));\n        item.setMTime(new Date(mtime * 1000));\n    });\n};\n/**\n * Update timestamps.\n * @param {number} fd File descriptor.\n * @param {number} atime Access time (in seconds).\n * @param {number} mtime Modification time (in seconds).\n * @param {function(Error)} callback Optional callback.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n */ Binding.prototype.futimes = function(fd, atime, mtime, callback, ctx) {\n    markSyscall(ctx, \"futimes\");\n    return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n        const descriptor = this.getDescriptorById(fd);\n        const item = descriptor.getItem();\n        item.setATime(new Date(atime * 1000));\n        item.setMTime(new Date(mtime * 1000));\n    });\n};\n/**\n * Synchronize in-core state with storage device.\n * @param {number} fd File descriptor.\n * @param {function(Error)} callback Optional callback.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n */ Binding.prototype.fsync = function(fd, callback, ctx) {\n    markSyscall(ctx, \"fsync\");\n    return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n        this.getDescriptorById(fd);\n    });\n};\n/**\n * Synchronize in-core metadata state with storage device.\n * @param {number} fd File descriptor.\n * @param {function(Error)} callback Optional callback.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n */ Binding.prototype.fdatasync = function(fd, callback, ctx) {\n    markSyscall(ctx, \"fdatasync\");\n    return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n        this.getDescriptorById(fd);\n    });\n};\n/**\n * Create a hard link.\n * @param {string} srcPath The existing file.\n * @param {string} destPath The new link to create.\n * @param {function(Error)} callback Optional callback.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n */ Binding.prototype.link = function(srcPath, destPath, callback, ctx) {\n    markSyscall(ctx, \"link\");\n    return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n        srcPath = deBuffer(srcPath);\n        destPath = deBuffer(destPath);\n        const item = this._system.getItem(srcPath);\n        if (!item) {\n            throw new FSError(\"ENOENT\", srcPath);\n        }\n        if (item instanceof Directory) {\n            throw new FSError(\"EPERM\", srcPath);\n        }\n        if (this._system.getItem(destPath)) {\n            throw new FSError(\"EEXIST\", destPath);\n        }\n        const parent = this._system.getItem(path.dirname(destPath));\n        if (!parent) {\n            throw new FSError(\"ENOENT\", destPath);\n        }\n        if (!(parent instanceof Directory)) {\n            throw new FSError(\"ENOTDIR\", destPath);\n        }\n        parent.addItem(path.basename(destPath), item);\n    });\n};\n/**\n * Create a symbolic link.\n * @param {string} srcPath Path from link to the source file.\n * @param {string} destPath Path for the generated link.\n * @param {string} type Ignored (used for Windows only).\n * @param {function(Error)} callback Optional callback.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n */ Binding.prototype.symlink = function(srcPath, destPath, type, callback, ctx) {\n    markSyscall(ctx, \"symlink\");\n    return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n        srcPath = deBuffer(srcPath);\n        destPath = deBuffer(destPath);\n        if (this._system.getItem(destPath)) {\n            throw new FSError(\"EEXIST\", destPath);\n        }\n        const parent = this._system.getItem(path.dirname(destPath));\n        if (!parent) {\n            throw new FSError(\"ENOENT\", destPath);\n        }\n        if (!(parent instanceof Directory)) {\n            throw new FSError(\"ENOTDIR\", destPath);\n        }\n        const link = new SymbolicLink();\n        link.setPath(srcPath);\n        parent.addItem(path.basename(destPath), link);\n    });\n};\n/**\n * Read the contents of a symbolic link.\n * @param {string} pathname Path to symbolic link.\n * @param {string} encoding The encoding ('utf-8' or 'buffer').\n * @param {function(Error, (string|Buffer))} callback Optional callback.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n * @return {string|Buffer} Symbolic link contents (path to source).\n */ Binding.prototype.readlink = function(pathname, encoding, callback, ctx) {\n    if (encoding && typeof encoding !== \"string\") {\n        // this would not happend in nodejs v10+\n        callback = encoding;\n        encoding = \"utf-8\";\n    }\n    markSyscall(ctx, \"readlink\");\n    return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n        pathname = deBuffer(pathname);\n        const link = this._system.getItem(pathname);\n        if (!link) {\n            throw new FSError(\"ENOENT\", pathname);\n        }\n        if (!(link instanceof SymbolicLink)) {\n            throw new FSError(\"EINVAL\", pathname);\n        }\n        let linkPath = link.getPath();\n        if (encoding === \"buffer\") {\n            linkPath = bufferFrom(linkPath);\n        }\n        return linkPath;\n    });\n};\n/**\n * Stat an item.\n * @param {string} filepath Path.\n * @param {function(Error, Stats)|Float64Array|BigUint64Array} callback Callback (optional). In Node 7.7.0+ this will be a Float64Array\n * that should be filled with stat values.\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n * @return {Stats|undefined} Stats or undefined (if sync).\n */ Binding.prototype.lstat = function(filepath, options, callback, ctx) {\n    if (arguments.length < 3) {\n        // this would not happend in nodejs v10+\n        callback = options;\n        options = {};\n    }\n    markSyscall(ctx, \"lstat\");\n    return maybeCallback(wrapStatsCallback(callback), ctx, this, function() {\n        filepath = deBuffer(filepath);\n        const item = this._system.getItem(filepath);\n        if (!item) {\n            throw new FSError(\"ENOENT\", filepath);\n        }\n        const stats = item.getStats();\n        // In Node 7.7.0+, binding.stat accepts a Float64Array as the second argument,\n        // which should be filled with stat values.\n        // In prior versions of Node, binding.stat simply returns a Stats instance.\n        if (callback instanceof Float64Array || callback instanceof BigUint64Array) {\n            fillStatsArray(stats, callback);\n        } else {\n            fillStatsArray(stats, statValues);\n            return new Stats(item.getStats());\n        }\n    });\n};\n/**\n * Tests user permissions.\n * @param {string} filepath Path.\n * @param {number} mode Mode.\n * @param {function(Error)} callback Callback (optional).\n * @param {Object} ctx Context object (optional), only for nodejs v10+.\n */ Binding.prototype.access = function(filepath, mode, callback, ctx) {\n    markSyscall(ctx, \"access\");\n    return maybeCallback(normalizeCallback(callback), ctx, this, function() {\n        filepath = deBuffer(filepath);\n        let item = this._system.getItem(filepath);\n        let links = 0;\n        while(item instanceof SymbolicLink){\n            if (links > MAX_LINKS) {\n                throw new FSError(\"ELOOP\", filepath);\n            }\n            filepath = path.resolve(path.dirname(filepath), item.getPath());\n            item = this._system.getItem(filepath);\n            ++links;\n        }\n        if (!item) {\n            throw new FSError(\"ENOENT\", filepath);\n        }\n        if (mode && process.getuid && process.getgid) {\n            const itemMode = item.getMode();\n            if (item.getUid() === process.getuid()) {\n                if ((itemMode & mode * 64) !== mode * 64) {\n                    throw new FSError(\"EACCES\", filepath);\n                }\n            } else if (item.getGid() === process.getgid()) {\n                if ((itemMode & mode * 8) !== mode * 8) {\n                    throw new FSError(\"EACCES\", filepath);\n                }\n            } else {\n                if ((itemMode & mode) !== mode) {\n                    throw new FSError(\"EACCES\", filepath);\n                }\n            }\n        }\n    });\n};\n/**\n * Not yet implemented.\n * @type {function()}\n */ Binding.prototype.StatWatcher = notImplemented;\n/**\n * Export the binding constructor.\n * @type {function()}\n */ exports = module.exports = Binding;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mock-fs/lib/binding.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mock-fs/lib/buffer.js":
/*!********************************************!*\
  !*** ./node_modules/mock-fs/lib/buffer.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("exports.from = Buffer.from || function(value, encoding) {\n    if (encoding) {\n        return new Buffer(value, encoding);\n    }\n    return new Buffer(value);\n};\nexports.alloc = Buffer.alloc || function(size) {\n    return new Buffer(size);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9jay1mcy9saWIvYnVmZmVyLmpzIiwibWFwcGluZ3MiOiJBQUFBQSxZQUFZLEdBQ1ZFLE9BQU9ELElBQUksSUFDWCxTQUFTRSxLQUFLLEVBQUVDLFFBQVE7SUFDdEIsSUFBSUEsVUFBVTtRQUNaLE9BQU8sSUFBSUYsT0FBT0MsT0FBT0M7SUFDM0I7SUFDQSxPQUFPLElBQUlGLE9BQU9DO0FBQ3BCO0FBRUZILGFBQWEsR0FDWEUsT0FBT0csS0FBSyxJQUNaLFNBQVNDLElBQUk7SUFDWCxPQUFPLElBQUlKLE9BQU9JO0FBQ3BCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvbW9jay1mcy9saWIvYnVmZmVyLmpzPzk2NmMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cy5mcm9tID1cbiAgQnVmZmVyLmZyb20gfHxcbiAgZnVuY3Rpb24odmFsdWUsIGVuY29kaW5nKSB7XG4gICAgaWYgKGVuY29kaW5nKSB7XG4gICAgICByZXR1cm4gbmV3IEJ1ZmZlcih2YWx1ZSwgZW5jb2RpbmcpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEJ1ZmZlcih2YWx1ZSk7XG4gIH07XG5cbmV4cG9ydHMuYWxsb2MgPVxuICBCdWZmZXIuYWxsb2MgfHxcbiAgZnVuY3Rpb24oc2l6ZSkge1xuICAgIHJldHVybiBuZXcgQnVmZmVyKHNpemUpO1xuICB9O1xuIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJmcm9tIiwiQnVmZmVyIiwidmFsdWUiLCJlbmNvZGluZyIsImFsbG9jIiwic2l6ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mock-fs/lib/buffer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mock-fs/lib/bypass.js":
/*!********************************************!*\
  !*** ./node_modules/mock-fs/lib/bypass.js ***!
  \********************************************/
/***/ ((module, exports) => {

eval("const realBinding = process.binding(\"fs\");\nlet storedBinding;\n/**\n * Perform action, bypassing mock FS\n * @example\n * // This file exists on the real FS, not on the mocked FS\n * const filePath = '/path/file.json';\n * const data = mock.bypass(() => fs.readFileSync(filePath, 'utf-8'));\n */ exports = module.exports = function bypass(fn) {\n    if (typeof fn !== \"function\") {\n        throw new Error(`Must provide a function to perform for mock.bypass()`);\n    }\n    disable();\n    let result;\n    try {\n        result = fn();\n    } finally{\n        if (result && typeof result.then === \"function\") {\n            result.then((r)=>{\n                enable();\n                return r;\n            }, (err)=>{\n                enable();\n                throw err;\n            });\n        } else {\n            enable();\n        }\n    }\n    return result;\n};\n/**\n * Temporarily disable Mocked FS\n */ function disable() {\n    if (realBinding._mockedBinding) {\n        storedBinding = realBinding._mockedBinding;\n        delete realBinding._mockedBinding;\n    }\n}\n/**\n * Enables Mocked FS after being disabled by disable()\n */ function enable() {\n    if (storedBinding) {\n        realBinding._mockedBinding = storedBinding;\n        storedBinding = undefined;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9tb2NrLWZzL2xpYi9ieXBhc3MuanM/MDY2NCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCByZWFsQmluZGluZyA9IHByb2Nlc3MuYmluZGluZygnZnMnKTtcbmxldCBzdG9yZWRCaW5kaW5nO1xuXG4vKipcbiAqIFBlcmZvcm0gYWN0aW9uLCBieXBhc3NpbmcgbW9jayBGU1xuICogQGV4YW1wbGVcbiAqIC8vIFRoaXMgZmlsZSBleGlzdHMgb24gdGhlIHJlYWwgRlMsIG5vdCBvbiB0aGUgbW9ja2VkIEZTXG4gKiBjb25zdCBmaWxlUGF0aCA9ICcvcGF0aC9maWxlLmpzb24nO1xuICogY29uc3QgZGF0YSA9IG1vY2suYnlwYXNzKCgpID0+IGZzLnJlYWRGaWxlU3luYyhmaWxlUGF0aCwgJ3V0Zi04JykpO1xuICovXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBieXBhc3MoZm4pIHtcbiAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcihgTXVzdCBwcm92aWRlIGEgZnVuY3Rpb24gdG8gcGVyZm9ybSBmb3IgbW9jay5ieXBhc3MoKWApO1xuICB9XG5cbiAgZGlzYWJsZSgpO1xuXG4gIGxldCByZXN1bHQ7XG4gIHRyeSB7XG4gICAgcmVzdWx0ID0gZm4oKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBpZiAocmVzdWx0ICYmIHR5cGVvZiByZXN1bHQudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVzdWx0LnRoZW4oXG4gICAgICAgIHIgPT4ge1xuICAgICAgICAgIGVuYWJsZSgpO1xuICAgICAgICAgIHJldHVybiByO1xuICAgICAgICB9LFxuICAgICAgICBlcnIgPT4ge1xuICAgICAgICAgIGVuYWJsZSgpO1xuICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZW5hYmxlKCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8qKlxuICogVGVtcG9yYXJpbHkgZGlzYWJsZSBNb2NrZWQgRlNcbiAqL1xuZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgaWYgKHJlYWxCaW5kaW5nLl9tb2NrZWRCaW5kaW5nKSB7XG4gICAgc3RvcmVkQmluZGluZyA9IHJlYWxCaW5kaW5nLl9tb2NrZWRCaW5kaW5nO1xuICAgIGRlbGV0ZSByZWFsQmluZGluZy5fbW9ja2VkQmluZGluZztcbiAgfVxufVxuXG4vKipcbiAqIEVuYWJsZXMgTW9ja2VkIEZTIGFmdGVyIGJlaW5nIGRpc2FibGVkIGJ5IGRpc2FibGUoKVxuICovXG5mdW5jdGlvbiBlbmFibGUoKSB7XG4gIGlmIChzdG9yZWRCaW5kaW5nKSB7XG4gICAgcmVhbEJpbmRpbmcuX21vY2tlZEJpbmRpbmcgPSBzdG9yZWRCaW5kaW5nO1xuICAgIHN0b3JlZEJpbmRpbmcgPSB1bmRlZmluZWQ7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJyZWFsQmluZGluZyIsInByb2Nlc3MiLCJiaW5kaW5nIiwic3RvcmVkQmluZGluZyIsImV4cG9ydHMiLCJtb2R1bGUiLCJieXBhc3MiLCJmbiIsIkVycm9yIiwiZGlzYWJsZSIsInJlc3VsdCIsInRoZW4iLCJyIiwiZW5hYmxlIiwiZXJyIiwiX21vY2tlZEJpbmRpbmciLCJ1bmRlZmluZWQiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLGNBQWNDLFFBQVFDLE9BQU8sQ0FBQztBQUNwQyxJQUFJQztBQUVKOzs7Ozs7Q0FNQyxHQUNEQyxVQUFVQyxPQUFPRCxPQUFPLEdBQUcsU0FBU0UsT0FBT0MsRUFBRTtJQUMzQyxJQUFJLE9BQU9BLE9BQU8sWUFBWTtRQUM1QixNQUFNLElBQUlDLE1BQU0sQ0FBQyxvREFBb0QsQ0FBQztJQUN4RTtJQUVBQztJQUVBLElBQUlDO0lBQ0osSUFBSTtRQUNGQSxTQUFTSDtJQUNYLFNBQVU7UUFDUixJQUFJRyxVQUFVLE9BQU9BLE9BQU9DLElBQUksS0FBSyxZQUFZO1lBQy9DRCxPQUFPQyxJQUFJLENBQ1RDLENBQUFBO2dCQUNFQztnQkFDQSxPQUFPRDtZQUNULEdBQ0FFLENBQUFBO2dCQUNFRDtnQkFDQSxNQUFNQztZQUNSO1FBRUosT0FBTztZQUNMRDtRQUNGO0lBQ0Y7SUFFQSxPQUFPSDtBQUNUO0FBRUE7O0NBRUMsR0FDRCxTQUFTRDtJQUNQLElBQUlULFlBQVllLGNBQWMsRUFBRTtRQUM5QlosZ0JBQWdCSCxZQUFZZSxjQUFjO1FBQzFDLE9BQU9mLFlBQVllLGNBQWM7SUFDbkM7QUFDRjtBQUVBOztDQUVDLEdBQ0QsU0FBU0Y7SUFDUCxJQUFJVixlQUFlO1FBQ2pCSCxZQUFZZSxjQUFjLEdBQUdaO1FBQzdCQSxnQkFBZ0JhO0lBQ2xCO0FBQ0YiLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9jay1mcy9saWIvYnlwYXNzLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mock-fs/lib/bypass.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mock-fs/lib/descriptor.js":
/*!************************************************!*\
  !*** ./node_modules/mock-fs/lib/descriptor.js ***!
  \************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\nconst constants = __webpack_require__(/*! constants */ \"constants\");\n/**\n * Create a new file descriptor.\n * @param {number} flags Flags.\n * @constructor\n */ function FileDescriptor(flags) {\n    /**\n   * Flags.\n   * @type {number}\n   */ this._flags = flags;\n    /**\n   * File system item.\n   * @type {Item}\n   */ this._item = null;\n    /**\n   * Current file position.\n   * @type {number}\n   */ this._position = 0;\n}\n/**\n * Set the item.\n * @param {Item} item File system item.\n */ FileDescriptor.prototype.setItem = function(item) {\n    this._item = item;\n};\n/**\n * Get the item.\n * @return {Item} File system item.\n */ FileDescriptor.prototype.getItem = function() {\n    return this._item;\n};\n/**\n * Get the current file position.\n * @return {number} File position.\n */ FileDescriptor.prototype.getPosition = function() {\n    return this._position;\n};\n/**\n * Set the current file position.\n * @param {number} position File position.\n */ FileDescriptor.prototype.setPosition = function(position) {\n    this._position = position;\n};\n/**\n * Check if file opened for appending.\n * @return {boolean} Opened for appending.\n */ FileDescriptor.prototype.isAppend = function() {\n    return (this._flags & constants.O_APPEND) === constants.O_APPEND;\n};\n/**\n * Check if file opened for creation.\n * @return {boolean} Opened for creation.\n */ FileDescriptor.prototype.isCreate = function() {\n    return (this._flags & constants.O_CREAT) === constants.O_CREAT;\n};\n/**\n * Check if file opened for reading.\n * @return {boolean} Opened for reading.\n */ FileDescriptor.prototype.isRead = function() {\n    return (this._flags & constants.O_WRONLY) !== constants.O_WRONLY;\n};\n/**\n * Check if file opened for writing.\n * @return {boolean} Opened for writing.\n */ FileDescriptor.prototype.isWrite = function() {\n    return (this._flags & constants.O_WRONLY) === constants.O_WRONLY || (this._flags & constants.O_RDWR) === constants.O_RDWR;\n};\n/**\n * Check if file opened for truncating.\n * @return {boolean} Opened for truncating.\n */ FileDescriptor.prototype.isTruncate = function() {\n    return (this._flags & constants.O_TRUNC) === constants.O_TRUNC;\n};\n/**\n * Check if file opened with exclusive flag.\n * @return {boolean} Opened with exclusive.\n */ FileDescriptor.prototype.isExclusive = function() {\n    return (this._flags & constants.O_EXCL) === constants.O_EXCL;\n};\n/**\n * Export the constructor.\n * @type {function()}\n */ exports = module.exports = FileDescriptor;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9jay1mcy9saWIvZGVzY3JpcHRvci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLFlBQVlDLG1CQUFPQSxDQUFDO0FBRTFCOzs7O0NBSUMsR0FDRCxTQUFTQyxlQUFlQyxLQUFLO0lBQzNCOzs7R0FHQyxHQUNELElBQUksQ0FBQ0MsTUFBTSxHQUFHRDtJQUVkOzs7R0FHQyxHQUNELElBQUksQ0FBQ0UsS0FBSyxHQUFHO0lBRWI7OztHQUdDLEdBQ0QsSUFBSSxDQUFDQyxTQUFTLEdBQUc7QUFDbkI7QUFFQTs7O0NBR0MsR0FDREosZUFBZUssU0FBUyxDQUFDQyxPQUFPLEdBQUcsU0FBU0MsSUFBSTtJQUM5QyxJQUFJLENBQUNKLEtBQUssR0FBR0k7QUFDZjtBQUVBOzs7Q0FHQyxHQUNEUCxlQUFlSyxTQUFTLENBQUNHLE9BQU8sR0FBRztJQUNqQyxPQUFPLElBQUksQ0FBQ0wsS0FBSztBQUNuQjtBQUVBOzs7Q0FHQyxHQUNESCxlQUFlSyxTQUFTLENBQUNJLFdBQVcsR0FBRztJQUNyQyxPQUFPLElBQUksQ0FBQ0wsU0FBUztBQUN2QjtBQUVBOzs7Q0FHQyxHQUNESixlQUFlSyxTQUFTLENBQUNLLFdBQVcsR0FBRyxTQUFTQyxRQUFRO0lBQ3RELElBQUksQ0FBQ1AsU0FBUyxHQUFHTztBQUNuQjtBQUVBOzs7Q0FHQyxHQUNEWCxlQUFlSyxTQUFTLENBQUNPLFFBQVEsR0FBRztJQUNsQyxPQUFPLENBQUMsSUFBSSxDQUFDVixNQUFNLEdBQUdKLFVBQVVlLFFBQVEsTUFBTWYsVUFBVWUsUUFBUTtBQUNsRTtBQUVBOzs7Q0FHQyxHQUNEYixlQUFlSyxTQUFTLENBQUNTLFFBQVEsR0FBRztJQUNsQyxPQUFPLENBQUMsSUFBSSxDQUFDWixNQUFNLEdBQUdKLFVBQVVpQixPQUFPLE1BQU1qQixVQUFVaUIsT0FBTztBQUNoRTtBQUVBOzs7Q0FHQyxHQUNEZixlQUFlSyxTQUFTLENBQUNXLE1BQU0sR0FBRztJQUNoQyxPQUFPLENBQUMsSUFBSSxDQUFDZCxNQUFNLEdBQUdKLFVBQVVtQixRQUFRLE1BQU1uQixVQUFVbUIsUUFBUTtBQUNsRTtBQUVBOzs7Q0FHQyxHQUNEakIsZUFBZUssU0FBUyxDQUFDYSxPQUFPLEdBQUc7SUFDakMsT0FDRSxDQUFDLElBQUksQ0FBQ2hCLE1BQU0sR0FBR0osVUFBVW1CLFFBQVEsTUFBTW5CLFVBQVVtQixRQUFRLElBQ3pELENBQUMsSUFBSSxDQUFDZixNQUFNLEdBQUdKLFVBQVVxQixNQUFNLE1BQU1yQixVQUFVcUIsTUFBTTtBQUV6RDtBQUVBOzs7Q0FHQyxHQUNEbkIsZUFBZUssU0FBUyxDQUFDZSxVQUFVLEdBQUc7SUFDcEMsT0FBTyxDQUFDLElBQUksQ0FBQ2xCLE1BQU0sR0FBR0osVUFBVXVCLE9BQU8sTUFBTXZCLFVBQVV1QixPQUFPO0FBQ2hFO0FBRUE7OztDQUdDLEdBQ0RyQixlQUFlSyxTQUFTLENBQUNpQixXQUFXLEdBQUc7SUFDckMsT0FBTyxDQUFDLElBQUksQ0FBQ3BCLE1BQU0sR0FBR0osVUFBVXlCLE1BQU0sTUFBTXpCLFVBQVV5QixNQUFNO0FBQzlEO0FBRUE7OztDQUdDLEdBQ0RDLFVBQVVDLE9BQU9ELE9BQU8sR0FBR3hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvbW9jay1mcy9saWIvZGVzY3JpcHRvci5qcz9jODhjIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgY29uc3RhbnRzID0gcmVxdWlyZSgnY29uc3RhbnRzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGZpbGUgZGVzY3JpcHRvci5cbiAqIEBwYXJhbSB7bnVtYmVyfSBmbGFncyBGbGFncy5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBGaWxlRGVzY3JpcHRvcihmbGFncykge1xuICAvKipcbiAgICogRmxhZ3MuXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLl9mbGFncyA9IGZsYWdzO1xuXG4gIC8qKlxuICAgKiBGaWxlIHN5c3RlbSBpdGVtLlxuICAgKiBAdHlwZSB7SXRlbX1cbiAgICovXG4gIHRoaXMuX2l0ZW0gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBDdXJyZW50IGZpbGUgcG9zaXRpb24uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICB0aGlzLl9wb3NpdGlvbiA9IDA7XG59XG5cbi8qKlxuICogU2V0IHRoZSBpdGVtLlxuICogQHBhcmFtIHtJdGVtfSBpdGVtIEZpbGUgc3lzdGVtIGl0ZW0uXG4gKi9cbkZpbGVEZXNjcmlwdG9yLnByb3RvdHlwZS5zZXRJdGVtID0gZnVuY3Rpb24oaXRlbSkge1xuICB0aGlzLl9pdGVtID0gaXRlbTtcbn07XG5cbi8qKlxuICogR2V0IHRoZSBpdGVtLlxuICogQHJldHVybiB7SXRlbX0gRmlsZSBzeXN0ZW0gaXRlbS5cbiAqL1xuRmlsZURlc2NyaXB0b3IucHJvdG90eXBlLmdldEl0ZW0gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuX2l0ZW07XG59O1xuXG4vKipcbiAqIEdldCB0aGUgY3VycmVudCBmaWxlIHBvc2l0aW9uLlxuICogQHJldHVybiB7bnVtYmVyfSBGaWxlIHBvc2l0aW9uLlxuICovXG5GaWxlRGVzY3JpcHRvci5wcm90b3R5cGUuZ2V0UG9zaXRpb24gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuX3Bvc2l0aW9uO1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIGN1cnJlbnQgZmlsZSBwb3NpdGlvbi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBwb3NpdGlvbiBGaWxlIHBvc2l0aW9uLlxuICovXG5GaWxlRGVzY3JpcHRvci5wcm90b3R5cGUuc2V0UG9zaXRpb24gPSBmdW5jdGlvbihwb3NpdGlvbikge1xuICB0aGlzLl9wb3NpdGlvbiA9IHBvc2l0aW9uO1xufTtcblxuLyoqXG4gKiBDaGVjayBpZiBmaWxlIG9wZW5lZCBmb3IgYXBwZW5kaW5nLlxuICogQHJldHVybiB7Ym9vbGVhbn0gT3BlbmVkIGZvciBhcHBlbmRpbmcuXG4gKi9cbkZpbGVEZXNjcmlwdG9yLnByb3RvdHlwZS5pc0FwcGVuZCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gKHRoaXMuX2ZsYWdzICYgY29uc3RhbnRzLk9fQVBQRU5EKSA9PT0gY29uc3RhbnRzLk9fQVBQRU5EO1xufTtcblxuLyoqXG4gKiBDaGVjayBpZiBmaWxlIG9wZW5lZCBmb3IgY3JlYXRpb24uXG4gKiBAcmV0dXJuIHtib29sZWFufSBPcGVuZWQgZm9yIGNyZWF0aW9uLlxuICovXG5GaWxlRGVzY3JpcHRvci5wcm90b3R5cGUuaXNDcmVhdGUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICh0aGlzLl9mbGFncyAmIGNvbnN0YW50cy5PX0NSRUFUKSA9PT0gY29uc3RhbnRzLk9fQ1JFQVQ7XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIGZpbGUgb3BlbmVkIGZvciByZWFkaW5nLlxuICogQHJldHVybiB7Ym9vbGVhbn0gT3BlbmVkIGZvciByZWFkaW5nLlxuICovXG5GaWxlRGVzY3JpcHRvci5wcm90b3R5cGUuaXNSZWFkID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAodGhpcy5fZmxhZ3MgJiBjb25zdGFudHMuT19XUk9OTFkpICE9PSBjb25zdGFudHMuT19XUk9OTFk7XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIGZpbGUgb3BlbmVkIGZvciB3cml0aW5nLlxuICogQHJldHVybiB7Ym9vbGVhbn0gT3BlbmVkIGZvciB3cml0aW5nLlxuICovXG5GaWxlRGVzY3JpcHRvci5wcm90b3R5cGUuaXNXcml0ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gKFxuICAgICh0aGlzLl9mbGFncyAmIGNvbnN0YW50cy5PX1dST05MWSkgPT09IGNvbnN0YW50cy5PX1dST05MWSB8fFxuICAgICh0aGlzLl9mbGFncyAmIGNvbnN0YW50cy5PX1JEV1IpID09PSBjb25zdGFudHMuT19SRFdSXG4gICk7XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIGZpbGUgb3BlbmVkIGZvciB0cnVuY2F0aW5nLlxuICogQHJldHVybiB7Ym9vbGVhbn0gT3BlbmVkIGZvciB0cnVuY2F0aW5nLlxuICovXG5GaWxlRGVzY3JpcHRvci5wcm90b3R5cGUuaXNUcnVuY2F0ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gKHRoaXMuX2ZsYWdzICYgY29uc3RhbnRzLk9fVFJVTkMpID09PSBjb25zdGFudHMuT19UUlVOQztcbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgZmlsZSBvcGVuZWQgd2l0aCBleGNsdXNpdmUgZmxhZy5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IE9wZW5lZCB3aXRoIGV4Y2x1c2l2ZS5cbiAqL1xuRmlsZURlc2NyaXB0b3IucHJvdG90eXBlLmlzRXhjbHVzaXZlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAodGhpcy5fZmxhZ3MgJiBjb25zdGFudHMuT19FWENMKSA9PT0gY29uc3RhbnRzLk9fRVhDTDtcbn07XG5cbi8qKlxuICogRXhwb3J0IHRoZSBjb25zdHJ1Y3Rvci5cbiAqIEB0eXBlIHtmdW5jdGlvbigpfVxuICovXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBGaWxlRGVzY3JpcHRvcjtcbiJdLCJuYW1lcyI6WyJjb25zdGFudHMiLCJyZXF1aXJlIiwiRmlsZURlc2NyaXB0b3IiLCJmbGFncyIsIl9mbGFncyIsIl9pdGVtIiwiX3Bvc2l0aW9uIiwicHJvdG90eXBlIiwic2V0SXRlbSIsIml0ZW0iLCJnZXRJdGVtIiwiZ2V0UG9zaXRpb24iLCJzZXRQb3NpdGlvbiIsInBvc2l0aW9uIiwiaXNBcHBlbmQiLCJPX0FQUEVORCIsImlzQ3JlYXRlIiwiT19DUkVBVCIsImlzUmVhZCIsIk9fV1JPTkxZIiwiaXNXcml0ZSIsIk9fUkRXUiIsImlzVHJ1bmNhdGUiLCJPX1RSVU5DIiwiaXNFeGNsdXNpdmUiLCJPX0VYQ0wiLCJleHBvcnRzIiwibW9kdWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mock-fs/lib/descriptor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mock-fs/lib/directory.js":
/*!***********************************************!*\
  !*** ./node_modules/mock-fs/lib/directory.js ***!
  \***********************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\nconst util = __webpack_require__(/*! util */ \"util\");\nconst Item = __webpack_require__(/*! ./item */ \"(ssr)/./node_modules/mock-fs/lib/item.js\");\nconst constants = __webpack_require__(/*! constants */ \"constants\");\n/**\n * A directory.\n * @constructor\n */ function Directory() {\n    Item.call(this);\n    /**\n   * Items in this directory.\n   * @type {Object.<string, Item>}\n   */ this._items = {};\n    /**\n   * Permissions.\n   */ this._mode = 511; // 0777\n}\nutil.inherits(Directory, Item);\n/**\n * Add an item to the directory.\n * @param {string} name The name to give the item.\n * @param {Item} item The item to add.\n * @return {Item} The added item.\n */ Directory.prototype.addItem = function(name, item) {\n    if (this._items.hasOwnProperty(name)) {\n        throw new Error(\"Item with the same name already exists: \" + name);\n    }\n    this._items[name] = item;\n    ++item.links;\n    if (item instanceof Directory) {\n        // for '.' entry\n        ++item.links;\n        // for subdirectory\n        ++this.links;\n    }\n    this.setMTime(new Date());\n    return item;\n};\n/**\n * Get a named item.\n * @param {string} name Item name.\n * @return {Item} The named item (or null if none).\n */ Directory.prototype.getItem = function(name) {\n    let item = null;\n    if (this._items.hasOwnProperty(name)) {\n        item = this._items[name];\n    }\n    return item;\n};\n/**\n * Remove an item.\n * @param {string} name Name of item to remove.\n * @return {Item} The orphan item.\n */ Directory.prototype.removeItem = function(name) {\n    if (!this._items.hasOwnProperty(name)) {\n        throw new Error(\"Item does not exist in directory: \" + name);\n    }\n    const item = this._items[name];\n    delete this._items[name];\n    --item.links;\n    if (item instanceof Directory) {\n        // for '.' entry\n        --item.links;\n        // for subdirectory\n        --this.links;\n    }\n    this.setMTime(new Date());\n    return item;\n};\n/**\n * Get list of item names in this directory.\n * @return {Array.<string>} Item names.\n */ Directory.prototype.list = function() {\n    return Object.keys(this._items).sort();\n};\n/**\n * Get directory stats.\n * @return {Object} Stats properties.\n */ Directory.prototype.getStats = function() {\n    const stats = Item.prototype.getStats.call(this);\n    stats.mode = this.getMode() | constants.S_IFDIR;\n    stats.size = 1;\n    stats.blocks = 1;\n    return stats;\n};\n/**\n * Export the constructor.\n * @type {function()}\n */ exports = module.exports = Directory;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9jay1mcy9saWIvZGlyZWN0b3J5LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTUEsT0FBT0MsbUJBQU9BLENBQUM7QUFFckIsTUFBTUMsT0FBT0QsbUJBQU9BLENBQUM7QUFFckIsTUFBTUUsWUFBWUYsbUJBQU9BLENBQUM7QUFFMUI7OztDQUdDLEdBQ0QsU0FBU0c7SUFDUEYsS0FBS0csSUFBSSxDQUFDLElBQUk7SUFFZDs7O0dBR0MsR0FDRCxJQUFJLENBQUNDLE1BQU0sR0FBRyxDQUFDO0lBRWY7O0dBRUMsR0FDRCxJQUFJLENBQUNDLEtBQUssR0FBRyxLQUFLLE9BQU87QUFDM0I7QUFDQVAsS0FBS1EsUUFBUSxDQUFDSixXQUFXRjtBQUV6Qjs7Ozs7Q0FLQyxHQUNERSxVQUFVSyxTQUFTLENBQUNDLE9BQU8sR0FBRyxTQUFTQyxJQUFJLEVBQUVDLElBQUk7SUFDL0MsSUFBSSxJQUFJLENBQUNOLE1BQU0sQ0FBQ08sY0FBYyxDQUFDRixPQUFPO1FBQ3BDLE1BQU0sSUFBSUcsTUFBTSw2Q0FBNkNIO0lBQy9EO0lBQ0EsSUFBSSxDQUFDTCxNQUFNLENBQUNLLEtBQUssR0FBR0M7SUFDcEIsRUFBRUEsS0FBS0csS0FBSztJQUNaLElBQUlILGdCQUFnQlIsV0FBVztRQUM3QixnQkFBZ0I7UUFDaEIsRUFBRVEsS0FBS0csS0FBSztRQUNaLG1CQUFtQjtRQUNuQixFQUFFLElBQUksQ0FBQ0EsS0FBSztJQUNkO0lBQ0EsSUFBSSxDQUFDQyxRQUFRLENBQUMsSUFBSUM7SUFDbEIsT0FBT0w7QUFDVDtBQUVBOzs7O0NBSUMsR0FDRFIsVUFBVUssU0FBUyxDQUFDUyxPQUFPLEdBQUcsU0FBU1AsSUFBSTtJQUN6QyxJQUFJQyxPQUFPO0lBQ1gsSUFBSSxJQUFJLENBQUNOLE1BQU0sQ0FBQ08sY0FBYyxDQUFDRixPQUFPO1FBQ3BDQyxPQUFPLElBQUksQ0FBQ04sTUFBTSxDQUFDSyxLQUFLO0lBQzFCO0lBQ0EsT0FBT0M7QUFDVDtBQUVBOzs7O0NBSUMsR0FDRFIsVUFBVUssU0FBUyxDQUFDVSxVQUFVLEdBQUcsU0FBU1IsSUFBSTtJQUM1QyxJQUFJLENBQUMsSUFBSSxDQUFDTCxNQUFNLENBQUNPLGNBQWMsQ0FBQ0YsT0FBTztRQUNyQyxNQUFNLElBQUlHLE1BQU0sdUNBQXVDSDtJQUN6RDtJQUNBLE1BQU1DLE9BQU8sSUFBSSxDQUFDTixNQUFNLENBQUNLLEtBQUs7SUFDOUIsT0FBTyxJQUFJLENBQUNMLE1BQU0sQ0FBQ0ssS0FBSztJQUN4QixFQUFFQyxLQUFLRyxLQUFLO0lBQ1osSUFBSUgsZ0JBQWdCUixXQUFXO1FBQzdCLGdCQUFnQjtRQUNoQixFQUFFUSxLQUFLRyxLQUFLO1FBQ1osbUJBQW1CO1FBQ25CLEVBQUUsSUFBSSxDQUFDQSxLQUFLO0lBQ2Q7SUFDQSxJQUFJLENBQUNDLFFBQVEsQ0FBQyxJQUFJQztJQUNsQixPQUFPTDtBQUNUO0FBRUE7OztDQUdDLEdBQ0RSLFVBQVVLLFNBQVMsQ0FBQ1csSUFBSSxHQUFHO0lBQ3pCLE9BQU9DLE9BQU9DLElBQUksQ0FBQyxJQUFJLENBQUNoQixNQUFNLEVBQUVpQixJQUFJO0FBQ3RDO0FBRUE7OztDQUdDLEdBQ0RuQixVQUFVSyxTQUFTLENBQUNlLFFBQVEsR0FBRztJQUM3QixNQUFNQyxRQUFRdkIsS0FBS08sU0FBUyxDQUFDZSxRQUFRLENBQUNuQixJQUFJLENBQUMsSUFBSTtJQUMvQ29CLE1BQU1DLElBQUksR0FBRyxJQUFJLENBQUNDLE9BQU8sS0FBS3hCLFVBQVV5QixPQUFPO0lBQy9DSCxNQUFNSSxJQUFJLEdBQUc7SUFDYkosTUFBTUssTUFBTSxHQUFHO0lBQ2YsT0FBT0w7QUFDVDtBQUVBOzs7Q0FHQyxHQUNETSxVQUFVQyxPQUFPRCxPQUFPLEdBQUczQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL21vY2stZnMvbGliL2RpcmVjdG9yeS5qcz83MjA5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxuY29uc3QgSXRlbSA9IHJlcXVpcmUoJy4vaXRlbScpO1xuXG5jb25zdCBjb25zdGFudHMgPSByZXF1aXJlKCdjb25zdGFudHMnKTtcblxuLyoqXG4gKiBBIGRpcmVjdG9yeS5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBEaXJlY3RvcnkoKSB7XG4gIEl0ZW0uY2FsbCh0aGlzKTtcblxuICAvKipcbiAgICogSXRlbXMgaW4gdGhpcyBkaXJlY3RvcnkuXG4gICAqIEB0eXBlIHtPYmplY3QuPHN0cmluZywgSXRlbT59XG4gICAqL1xuICB0aGlzLl9pdGVtcyA9IHt9O1xuXG4gIC8qKlxuICAgKiBQZXJtaXNzaW9ucy5cbiAgICovXG4gIHRoaXMuX21vZGUgPSA1MTE7IC8vIDA3Nzdcbn1cbnV0aWwuaW5oZXJpdHMoRGlyZWN0b3J5LCBJdGVtKTtcblxuLyoqXG4gKiBBZGQgYW4gaXRlbSB0byB0aGUgZGlyZWN0b3J5LlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgdG8gZ2l2ZSB0aGUgaXRlbS5cbiAqIEBwYXJhbSB7SXRlbX0gaXRlbSBUaGUgaXRlbSB0byBhZGQuXG4gKiBAcmV0dXJuIHtJdGVtfSBUaGUgYWRkZWQgaXRlbS5cbiAqL1xuRGlyZWN0b3J5LnByb3RvdHlwZS5hZGRJdGVtID0gZnVuY3Rpb24obmFtZSwgaXRlbSkge1xuICBpZiAodGhpcy5faXRlbXMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0l0ZW0gd2l0aCB0aGUgc2FtZSBuYW1lIGFscmVhZHkgZXhpc3RzOiAnICsgbmFtZSk7XG4gIH1cbiAgdGhpcy5faXRlbXNbbmFtZV0gPSBpdGVtO1xuICArK2l0ZW0ubGlua3M7XG4gIGlmIChpdGVtIGluc3RhbmNlb2YgRGlyZWN0b3J5KSB7XG4gICAgLy8gZm9yICcuJyBlbnRyeVxuICAgICsraXRlbS5saW5rcztcbiAgICAvLyBmb3Igc3ViZGlyZWN0b3J5XG4gICAgKyt0aGlzLmxpbmtzO1xuICB9XG4gIHRoaXMuc2V0TVRpbWUobmV3IERhdGUoKSk7XG4gIHJldHVybiBpdGVtO1xufTtcblxuLyoqXG4gKiBHZXQgYSBuYW1lZCBpdGVtLlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgSXRlbSBuYW1lLlxuICogQHJldHVybiB7SXRlbX0gVGhlIG5hbWVkIGl0ZW0gKG9yIG51bGwgaWYgbm9uZSkuXG4gKi9cbkRpcmVjdG9yeS5wcm90b3R5cGUuZ2V0SXRlbSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgbGV0IGl0ZW0gPSBudWxsO1xuICBpZiAodGhpcy5faXRlbXMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICBpdGVtID0gdGhpcy5faXRlbXNbbmFtZV07XG4gIH1cbiAgcmV0dXJuIGl0ZW07XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpdGVtLlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSBvZiBpdGVtIHRvIHJlbW92ZS5cbiAqIEByZXR1cm4ge0l0ZW19IFRoZSBvcnBoYW4gaXRlbS5cbiAqL1xuRGlyZWN0b3J5LnByb3RvdHlwZS5yZW1vdmVJdGVtID0gZnVuY3Rpb24obmFtZSkge1xuICBpZiAoIXRoaXMuX2l0ZW1zLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJdGVtIGRvZXMgbm90IGV4aXN0IGluIGRpcmVjdG9yeTogJyArIG5hbWUpO1xuICB9XG4gIGNvbnN0IGl0ZW0gPSB0aGlzLl9pdGVtc1tuYW1lXTtcbiAgZGVsZXRlIHRoaXMuX2l0ZW1zW25hbWVdO1xuICAtLWl0ZW0ubGlua3M7XG4gIGlmIChpdGVtIGluc3RhbmNlb2YgRGlyZWN0b3J5KSB7XG4gICAgLy8gZm9yICcuJyBlbnRyeVxuICAgIC0taXRlbS5saW5rcztcbiAgICAvLyBmb3Igc3ViZGlyZWN0b3J5XG4gICAgLS10aGlzLmxpbmtzO1xuICB9XG4gIHRoaXMuc2V0TVRpbWUobmV3IERhdGUoKSk7XG4gIHJldHVybiBpdGVtO1xufTtcblxuLyoqXG4gKiBHZXQgbGlzdCBvZiBpdGVtIG5hbWVzIGluIHRoaXMgZGlyZWN0b3J5LlxuICogQHJldHVybiB7QXJyYXkuPHN0cmluZz59IEl0ZW0gbmFtZXMuXG4gKi9cbkRpcmVjdG9yeS5wcm90b3R5cGUubGlzdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5faXRlbXMpLnNvcnQoKTtcbn07XG5cbi8qKlxuICogR2V0IGRpcmVjdG9yeSBzdGF0cy5cbiAqIEByZXR1cm4ge09iamVjdH0gU3RhdHMgcHJvcGVydGllcy5cbiAqL1xuRGlyZWN0b3J5LnByb3RvdHlwZS5nZXRTdGF0cyA9IGZ1bmN0aW9uKCkge1xuICBjb25zdCBzdGF0cyA9IEl0ZW0ucHJvdG90eXBlLmdldFN0YXRzLmNhbGwodGhpcyk7XG4gIHN0YXRzLm1vZGUgPSB0aGlzLmdldE1vZGUoKSB8IGNvbnN0YW50cy5TX0lGRElSO1xuICBzdGF0cy5zaXplID0gMTtcbiAgc3RhdHMuYmxvY2tzID0gMTtcbiAgcmV0dXJuIHN0YXRzO1xufTtcblxuLyoqXG4gKiBFeHBvcnQgdGhlIGNvbnN0cnVjdG9yLlxuICogQHR5cGUge2Z1bmN0aW9uKCl9XG4gKi9cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IERpcmVjdG9yeTtcbiJdLCJuYW1lcyI6WyJ1dGlsIiwicmVxdWlyZSIsIkl0ZW0iLCJjb25zdGFudHMiLCJEaXJlY3RvcnkiLCJjYWxsIiwiX2l0ZW1zIiwiX21vZGUiLCJpbmhlcml0cyIsInByb3RvdHlwZSIsImFkZEl0ZW0iLCJuYW1lIiwiaXRlbSIsImhhc093blByb3BlcnR5IiwiRXJyb3IiLCJsaW5rcyIsInNldE1UaW1lIiwiRGF0ZSIsImdldEl0ZW0iLCJyZW1vdmVJdGVtIiwibGlzdCIsIk9iamVjdCIsImtleXMiLCJzb3J0IiwiZ2V0U3RhdHMiLCJzdGF0cyIsIm1vZGUiLCJnZXRNb2RlIiwiU19JRkRJUiIsInNpemUiLCJibG9ja3MiLCJleHBvcnRzIiwibW9kdWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mock-fs/lib/directory.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mock-fs/lib/error.js":
/*!*******************************************!*\
  !*** ./node_modules/mock-fs/lib/error.js ***!
  \*******************************************/
/***/ ((module, exports) => {

"use strict";
eval("\nconst uvBinding = process.binding(\"uv\");\n/**\n * Error codes from libuv.\n * @enum {number}\n */ const codes = {};\nif (uvBinding.errmap) {\n    // nodejs v8+\n    uvBinding.errmap.forEach(function(value, errno) {\n        const code = value[0];\n        const message = value[1];\n        codes[code] = {\n            errno: errno,\n            message: message\n        };\n    });\n} else {\n    // nodejs v4 and v6\n    Object.keys(uvBinding).forEach(function(key) {\n        if (key.startsWith(\"UV_\")) {\n            const code = key.slice(3);\n            const errno = uvBinding[key];\n            codes[code] = {\n                errno: errno,\n                message: key\n            };\n        }\n    });\n}\n/**\n * Create an error.\n * @param {string} code Error code.\n * @param {string} path Path (optional).\n * @constructor\n */ function FSError(code, path) {\n    if (!codes.hasOwnProperty(code)) {\n        throw new Error(\"Programmer error, invalid error code: \" + code);\n    }\n    Error.call(this);\n    const details = codes[code];\n    let message = code + \", \" + details.message;\n    if (path) {\n        message += \" '\" + path + \"'\";\n    }\n    this.message = message;\n    this.code = code;\n    this.errno = details.errno;\n    if (path !== undefined) {\n        this.path = path;\n    }\n    Error.captureStackTrace(this, FSError);\n}\nFSError.prototype = new Error();\nFSError.codes = codes;\n/**\n * Error constructor.\n */ exports = module.exports = FSError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9jay1mcy9saWIvZXJyb3IuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxZQUFZQyxRQUFRQyxPQUFPLENBQUM7QUFDbEM7OztDQUdDLEdBQ0QsTUFBTUMsUUFBUSxDQUFDO0FBRWYsSUFBSUgsVUFBVUksTUFBTSxFQUFFO0lBQ3BCLGFBQWE7SUFDYkosVUFBVUksTUFBTSxDQUFDQyxPQUFPLENBQUMsU0FBU0MsS0FBSyxFQUFFQyxLQUFLO1FBQzVDLE1BQU1DLE9BQU9GLEtBQUssQ0FBQyxFQUFFO1FBQ3JCLE1BQU1HLFVBQVVILEtBQUssQ0FBQyxFQUFFO1FBQ3hCSCxLQUFLLENBQUNLLEtBQUssR0FBRztZQUFDRCxPQUFPQTtZQUFPRSxTQUFTQTtRQUFPO0lBQy9DO0FBQ0YsT0FBTztJQUNMLG1CQUFtQjtJQUNuQkMsT0FBT0MsSUFBSSxDQUFDWCxXQUFXSyxPQUFPLENBQUMsU0FBU08sR0FBRztRQUN6QyxJQUFJQSxJQUFJQyxVQUFVLENBQUMsUUFBUTtZQUN6QixNQUFNTCxPQUFPSSxJQUFJRSxLQUFLLENBQUM7WUFDdkIsTUFBTVAsUUFBUVAsU0FBUyxDQUFDWSxJQUFJO1lBQzVCVCxLQUFLLENBQUNLLEtBQUssR0FBRztnQkFBQ0QsT0FBT0E7Z0JBQU9FLFNBQVNHO1lBQUc7UUFDM0M7SUFDRjtBQUNGO0FBRUE7Ozs7O0NBS0MsR0FDRCxTQUFTRyxRQUFRUCxJQUFJLEVBQUVRLElBQUk7SUFDekIsSUFBSSxDQUFDYixNQUFNYyxjQUFjLENBQUNULE9BQU87UUFDL0IsTUFBTSxJQUFJVSxNQUFNLDJDQUEyQ1Y7SUFDN0Q7SUFDQVUsTUFBTUMsSUFBSSxDQUFDLElBQUk7SUFDZixNQUFNQyxVQUFVakIsS0FBSyxDQUFDSyxLQUFLO0lBQzNCLElBQUlDLFVBQVVELE9BQU8sT0FBT1ksUUFBUVgsT0FBTztJQUMzQyxJQUFJTyxNQUFNO1FBQ1JQLFdBQVcsT0FBT08sT0FBTztJQUMzQjtJQUNBLElBQUksQ0FBQ1AsT0FBTyxHQUFHQTtJQUNmLElBQUksQ0FBQ0QsSUFBSSxHQUFHQTtJQUNaLElBQUksQ0FBQ0QsS0FBSyxHQUFHYSxRQUFRYixLQUFLO0lBQzFCLElBQUlTLFNBQVNLLFdBQVc7UUFDdEIsSUFBSSxDQUFDTCxJQUFJLEdBQUdBO0lBQ2Q7SUFDQUUsTUFBTUksaUJBQWlCLENBQUMsSUFBSSxFQUFFUDtBQUNoQztBQUNBQSxRQUFRUSxTQUFTLEdBQUcsSUFBSUw7QUFDeEJILFFBQVFaLEtBQUssR0FBR0E7QUFFaEI7O0NBRUMsR0FDRHFCLFVBQVVDLE9BQU9ELE9BQU8sR0FBR1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9tb2NrLWZzL2xpYi9lcnJvci5qcz9kOGZhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgdXZCaW5kaW5nID0gcHJvY2Vzcy5iaW5kaW5nKCd1dicpO1xuLyoqXG4gKiBFcnJvciBjb2RlcyBmcm9tIGxpYnV2LlxuICogQGVudW0ge251bWJlcn1cbiAqL1xuY29uc3QgY29kZXMgPSB7fTtcblxuaWYgKHV2QmluZGluZy5lcnJtYXApIHtcbiAgLy8gbm9kZWpzIHY4K1xuICB1dkJpbmRpbmcuZXJybWFwLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIGVycm5vKSB7XG4gICAgY29uc3QgY29kZSA9IHZhbHVlWzBdO1xuICAgIGNvbnN0IG1lc3NhZ2UgPSB2YWx1ZVsxXTtcbiAgICBjb2Rlc1tjb2RlXSA9IHtlcnJubzogZXJybm8sIG1lc3NhZ2U6IG1lc3NhZ2V9O1xuICB9KTtcbn0gZWxzZSB7XG4gIC8vIG5vZGVqcyB2NCBhbmQgdjZcbiAgT2JqZWN0LmtleXModXZCaW5kaW5nKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgIGlmIChrZXkuc3RhcnRzV2l0aCgnVVZfJykpIHtcbiAgICAgIGNvbnN0IGNvZGUgPSBrZXkuc2xpY2UoMyk7XG4gICAgICBjb25zdCBlcnJubyA9IHV2QmluZGluZ1trZXldO1xuICAgICAgY29kZXNbY29kZV0gPSB7ZXJybm86IGVycm5vLCBtZXNzYWdlOiBrZXl9O1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGFuIGVycm9yLlxuICogQHBhcmFtIHtzdHJpbmd9IGNvZGUgRXJyb3IgY29kZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFBhdGggKG9wdGlvbmFsKS5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBGU0Vycm9yKGNvZGUsIHBhdGgpIHtcbiAgaWYgKCFjb2Rlcy5oYXNPd25Qcm9wZXJ0eShjb2RlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignUHJvZ3JhbW1lciBlcnJvciwgaW52YWxpZCBlcnJvciBjb2RlOiAnICsgY29kZSk7XG4gIH1cbiAgRXJyb3IuY2FsbCh0aGlzKTtcbiAgY29uc3QgZGV0YWlscyA9IGNvZGVzW2NvZGVdO1xuICBsZXQgbWVzc2FnZSA9IGNvZGUgKyAnLCAnICsgZGV0YWlscy5tZXNzYWdlO1xuICBpZiAocGF0aCkge1xuICAgIG1lc3NhZ2UgKz0gXCIgJ1wiICsgcGF0aCArIFwiJ1wiO1xuICB9XG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gIHRoaXMuY29kZSA9IGNvZGU7XG4gIHRoaXMuZXJybm8gPSBkZXRhaWxzLmVycm5vO1xuICBpZiAocGF0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpcy5wYXRoID0gcGF0aDtcbiAgfVxuICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBGU0Vycm9yKTtcbn1cbkZTRXJyb3IucHJvdG90eXBlID0gbmV3IEVycm9yKCk7XG5GU0Vycm9yLmNvZGVzID0gY29kZXM7XG5cbi8qKlxuICogRXJyb3IgY29uc3RydWN0b3IuXG4gKi9cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IEZTRXJyb3I7XG4iXSwibmFtZXMiOlsidXZCaW5kaW5nIiwicHJvY2VzcyIsImJpbmRpbmciLCJjb2RlcyIsImVycm1hcCIsImZvckVhY2giLCJ2YWx1ZSIsImVycm5vIiwiY29kZSIsIm1lc3NhZ2UiLCJPYmplY3QiLCJrZXlzIiwia2V5Iiwic3RhcnRzV2l0aCIsInNsaWNlIiwiRlNFcnJvciIsInBhdGgiLCJoYXNPd25Qcm9wZXJ0eSIsIkVycm9yIiwiY2FsbCIsImRldGFpbHMiLCJ1bmRlZmluZWQiLCJjYXB0dXJlU3RhY2tUcmFjZSIsInByb3RvdHlwZSIsImV4cG9ydHMiLCJtb2R1bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mock-fs/lib/error.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mock-fs/lib/file.js":
/*!******************************************!*\
  !*** ./node_modules/mock-fs/lib/file.js ***!
  \******************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\nconst util = __webpack_require__(/*! util */ \"util\");\nconst Item = __webpack_require__(/*! ./item */ \"(ssr)/./node_modules/mock-fs/lib/item.js\");\nconst bufferFrom = (__webpack_require__(/*! ./buffer */ \"(ssr)/./node_modules/mock-fs/lib/buffer.js\").from);\nconst bufferAlloc = (__webpack_require__(/*! ./buffer */ \"(ssr)/./node_modules/mock-fs/lib/buffer.js\").alloc);\nconst EMPTY = bufferAlloc(0);\nconst constants = __webpack_require__(/*! constants */ \"constants\");\n/**\n * A file.\n * @constructor\n */ function File() {\n    Item.call(this);\n    /**\n   * File content.\n   * @type {Buffer}\n   */ this._content = EMPTY;\n}\nutil.inherits(File, Item);\n/**\n * Get the file contents.\n * @return {Buffer} File contents.\n */ File.prototype.getContent = function() {\n    this.setATime(new Date());\n    return this._content;\n};\n/**\n * Set the file contents.\n * @param {string|Buffer} content File contents.\n */ File.prototype.setContent = function(content) {\n    if (typeof content === \"string\") {\n        content = bufferFrom(content);\n    } else if (!Buffer.isBuffer(content)) {\n        throw new Error(\"File content must be a string or buffer\");\n    }\n    this._content = content;\n    const now = Date.now();\n    this.setCTime(new Date(now));\n    this.setMTime(new Date(now));\n};\n/**\n * Get file stats.\n * @return {Object} Stats properties.\n */ File.prototype.getStats = function() {\n    const size = this._content.length;\n    const stats = Item.prototype.getStats.call(this);\n    stats.mode = this.getMode() | constants.S_IFREG;\n    stats.size = size;\n    stats.blocks = Math.ceil(size / 512);\n    return stats;\n};\n/**\n * Export the constructor.\n * @type {function()}\n */ exports = module.exports = File;\n/**\n * Standard input.\n * @constructor\n */ function StandardInput() {\n    File.call(this);\n    this.setMode(438); // 0666\n}\nutil.inherits(StandardInput, File);\nexports.StandardInput = StandardInput;\n/**\n * Standard output.\n * @constructor\n */ function StandardOutput() {\n    File.call(this);\n    this.setMode(438); // 0666\n}\nutil.inherits(StandardOutput, File);\n/**\n * Write the contents to stdout.\n * @param {string|Buffer} content File contents.\n */ StandardOutput.prototype.setContent = function(content) {\n    if (process.stdout.isTTY) {\n        process.stdout.write(content);\n    }\n};\nexports.StandardOutput = StandardOutput;\n/**\n * Standard error.\n * @constructor\n */ function StandardError() {\n    File.call(this);\n    this.setMode(438); // 0666\n}\nutil.inherits(StandardError, File);\n/**\n * Write the contents to stderr.\n * @param {string|Buffer} content File contents.\n */ StandardError.prototype.setContent = function(content) {\n    if (process.stderr.isTTY) {\n        process.stderr.write(content);\n    }\n};\nexports.StandardError = StandardError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9jay1mcy9saWIvZmlsZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLE9BQU9DLG1CQUFPQSxDQUFDO0FBRXJCLE1BQU1DLE9BQU9ELG1CQUFPQSxDQUFDO0FBQ3JCLE1BQU1FLGFBQWFGLHdGQUF3QjtBQUMzQyxNQUFNSSxjQUFjSix5RkFBeUI7QUFFN0MsTUFBTU0sUUFBUUYsWUFBWTtBQUMxQixNQUFNRyxZQUFZUCxtQkFBT0EsQ0FBQztBQUUxQjs7O0NBR0MsR0FDRCxTQUFTUTtJQUNQUCxLQUFLUSxJQUFJLENBQUMsSUFBSTtJQUVkOzs7R0FHQyxHQUNELElBQUksQ0FBQ0MsUUFBUSxHQUFHSjtBQUNsQjtBQUNBUCxLQUFLWSxRQUFRLENBQUNILE1BQU1QO0FBRXBCOzs7Q0FHQyxHQUNETyxLQUFLSSxTQUFTLENBQUNDLFVBQVUsR0FBRztJQUMxQixJQUFJLENBQUNDLFFBQVEsQ0FBQyxJQUFJQztJQUNsQixPQUFPLElBQUksQ0FBQ0wsUUFBUTtBQUN0QjtBQUVBOzs7Q0FHQyxHQUNERixLQUFLSSxTQUFTLENBQUNJLFVBQVUsR0FBRyxTQUFTQyxPQUFPO0lBQzFDLElBQUksT0FBT0EsWUFBWSxVQUFVO1FBQy9CQSxVQUFVZixXQUFXZTtJQUN2QixPQUFPLElBQUksQ0FBQ0MsT0FBT0MsUUFBUSxDQUFDRixVQUFVO1FBQ3BDLE1BQU0sSUFBSUcsTUFBTTtJQUNsQjtJQUNBLElBQUksQ0FBQ1YsUUFBUSxHQUFHTztJQUNoQixNQUFNSSxNQUFNTixLQUFLTSxHQUFHO0lBQ3BCLElBQUksQ0FBQ0MsUUFBUSxDQUFDLElBQUlQLEtBQUtNO0lBQ3ZCLElBQUksQ0FBQ0UsUUFBUSxDQUFDLElBQUlSLEtBQUtNO0FBQ3pCO0FBRUE7OztDQUdDLEdBQ0RiLEtBQUtJLFNBQVMsQ0FBQ1ksUUFBUSxHQUFHO0lBQ3hCLE1BQU1DLE9BQU8sSUFBSSxDQUFDZixRQUFRLENBQUNnQixNQUFNO0lBQ2pDLE1BQU1DLFFBQVExQixLQUFLVyxTQUFTLENBQUNZLFFBQVEsQ0FBQ2YsSUFBSSxDQUFDLElBQUk7SUFDL0NrQixNQUFNQyxJQUFJLEdBQUcsSUFBSSxDQUFDQyxPQUFPLEtBQUt0QixVQUFVdUIsT0FBTztJQUMvQ0gsTUFBTUYsSUFBSSxHQUFHQTtJQUNiRSxNQUFNSSxNQUFNLEdBQUdDLEtBQUtDLElBQUksQ0FBQ1IsT0FBTztJQUNoQyxPQUFPRTtBQUNUO0FBRUE7OztDQUdDLEdBQ0RPLFVBQVVDLE9BQU9ELE9BQU8sR0FBRzFCO0FBRTNCOzs7Q0FHQyxHQUNELFNBQVM0QjtJQUNQNUIsS0FBS0MsSUFBSSxDQUFDLElBQUk7SUFDZCxJQUFJLENBQUM0QixPQUFPLENBQUMsTUFBTSxPQUFPO0FBQzVCO0FBQ0F0QyxLQUFLWSxRQUFRLENBQUN5QixlQUFlNUI7QUFFN0IwQixxQkFBcUIsR0FBR0U7QUFFeEI7OztDQUdDLEdBQ0QsU0FBU0U7SUFDUDlCLEtBQUtDLElBQUksQ0FBQyxJQUFJO0lBQ2QsSUFBSSxDQUFDNEIsT0FBTyxDQUFDLE1BQU0sT0FBTztBQUM1QjtBQUNBdEMsS0FBS1ksUUFBUSxDQUFDMkIsZ0JBQWdCOUI7QUFFOUI7OztDQUdDLEdBQ0Q4QixlQUFlMUIsU0FBUyxDQUFDSSxVQUFVLEdBQUcsU0FBU0MsT0FBTztJQUNwRCxJQUFJc0IsUUFBUUMsTUFBTSxDQUFDQyxLQUFLLEVBQUU7UUFDeEJGLFFBQVFDLE1BQU0sQ0FBQ0UsS0FBSyxDQUFDekI7SUFDdkI7QUFDRjtBQUVBaUIsc0JBQXNCLEdBQUdJO0FBRXpCOzs7Q0FHQyxHQUNELFNBQVNLO0lBQ1BuQyxLQUFLQyxJQUFJLENBQUMsSUFBSTtJQUNkLElBQUksQ0FBQzRCLE9BQU8sQ0FBQyxNQUFNLE9BQU87QUFDNUI7QUFDQXRDLEtBQUtZLFFBQVEsQ0FBQ2dDLGVBQWVuQztBQUU3Qjs7O0NBR0MsR0FDRG1DLGNBQWMvQixTQUFTLENBQUNJLFVBQVUsR0FBRyxTQUFTQyxPQUFPO0lBQ25ELElBQUlzQixRQUFRSyxNQUFNLENBQUNILEtBQUssRUFBRTtRQUN4QkYsUUFBUUssTUFBTSxDQUFDRixLQUFLLENBQUN6QjtJQUN2QjtBQUNGO0FBRUFpQixxQkFBcUIsR0FBR1MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9tb2NrLWZzL2xpYi9maWxlLmpzP2JjODciXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuXG5jb25zdCBJdGVtID0gcmVxdWlyZSgnLi9pdGVtJyk7XG5jb25zdCBidWZmZXJGcm9tID0gcmVxdWlyZSgnLi9idWZmZXInKS5mcm9tO1xuY29uc3QgYnVmZmVyQWxsb2MgPSByZXF1aXJlKCcuL2J1ZmZlcicpLmFsbG9jO1xuXG5jb25zdCBFTVBUWSA9IGJ1ZmZlckFsbG9jKDApO1xuY29uc3QgY29uc3RhbnRzID0gcmVxdWlyZSgnY29uc3RhbnRzJyk7XG5cbi8qKlxuICogQSBmaWxlLlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIEZpbGUoKSB7XG4gIEl0ZW0uY2FsbCh0aGlzKTtcblxuICAvKipcbiAgICogRmlsZSBjb250ZW50LlxuICAgKiBAdHlwZSB7QnVmZmVyfVxuICAgKi9cbiAgdGhpcy5fY29udGVudCA9IEVNUFRZO1xufVxudXRpbC5pbmhlcml0cyhGaWxlLCBJdGVtKTtcblxuLyoqXG4gKiBHZXQgdGhlIGZpbGUgY29udGVudHMuXG4gKiBAcmV0dXJuIHtCdWZmZXJ9IEZpbGUgY29udGVudHMuXG4gKi9cbkZpbGUucHJvdG90eXBlLmdldENvbnRlbnQgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5zZXRBVGltZShuZXcgRGF0ZSgpKTtcbiAgcmV0dXJuIHRoaXMuX2NvbnRlbnQ7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgZmlsZSBjb250ZW50cy5cbiAqIEBwYXJhbSB7c3RyaW5nfEJ1ZmZlcn0gY29udGVudCBGaWxlIGNvbnRlbnRzLlxuICovXG5GaWxlLnByb3RvdHlwZS5zZXRDb250ZW50ID0gZnVuY3Rpb24oY29udGVudCkge1xuICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgY29udGVudCA9IGJ1ZmZlckZyb20oY29udGVudCk7XG4gIH0gZWxzZSBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihjb250ZW50KSkge1xuICAgIHRocm93IG5ldyBFcnJvcignRmlsZSBjb250ZW50IG11c3QgYmUgYSBzdHJpbmcgb3IgYnVmZmVyJyk7XG4gIH1cbiAgdGhpcy5fY29udGVudCA9IGNvbnRlbnQ7XG4gIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG4gIHRoaXMuc2V0Q1RpbWUobmV3IERhdGUobm93KSk7XG4gIHRoaXMuc2V0TVRpbWUobmV3IERhdGUobm93KSk7XG59O1xuXG4vKipcbiAqIEdldCBmaWxlIHN0YXRzLlxuICogQHJldHVybiB7T2JqZWN0fSBTdGF0cyBwcm9wZXJ0aWVzLlxuICovXG5GaWxlLnByb3RvdHlwZS5nZXRTdGF0cyA9IGZ1bmN0aW9uKCkge1xuICBjb25zdCBzaXplID0gdGhpcy5fY29udGVudC5sZW5ndGg7XG4gIGNvbnN0IHN0YXRzID0gSXRlbS5wcm90b3R5cGUuZ2V0U3RhdHMuY2FsbCh0aGlzKTtcbiAgc3RhdHMubW9kZSA9IHRoaXMuZ2V0TW9kZSgpIHwgY29uc3RhbnRzLlNfSUZSRUc7XG4gIHN0YXRzLnNpemUgPSBzaXplO1xuICBzdGF0cy5ibG9ja3MgPSBNYXRoLmNlaWwoc2l6ZSAvIDUxMik7XG4gIHJldHVybiBzdGF0cztcbn07XG5cbi8qKlxuICogRXhwb3J0IHRoZSBjb25zdHJ1Y3Rvci5cbiAqIEB0eXBlIHtmdW5jdGlvbigpfVxuICovXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBGaWxlO1xuXG4vKipcbiAqIFN0YW5kYXJkIGlucHV0LlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIFN0YW5kYXJkSW5wdXQoKSB7XG4gIEZpbGUuY2FsbCh0aGlzKTtcbiAgdGhpcy5zZXRNb2RlKDQzOCk7IC8vIDA2NjZcbn1cbnV0aWwuaW5oZXJpdHMoU3RhbmRhcmRJbnB1dCwgRmlsZSk7XG5cbmV4cG9ydHMuU3RhbmRhcmRJbnB1dCA9IFN0YW5kYXJkSW5wdXQ7XG5cbi8qKlxuICogU3RhbmRhcmQgb3V0cHV0LlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIFN0YW5kYXJkT3V0cHV0KCkge1xuICBGaWxlLmNhbGwodGhpcyk7XG4gIHRoaXMuc2V0TW9kZSg0MzgpOyAvLyAwNjY2XG59XG51dGlsLmluaGVyaXRzKFN0YW5kYXJkT3V0cHV0LCBGaWxlKTtcblxuLyoqXG4gKiBXcml0ZSB0aGUgY29udGVudHMgdG8gc3Rkb3V0LlxuICogQHBhcmFtIHtzdHJpbmd8QnVmZmVyfSBjb250ZW50IEZpbGUgY29udGVudHMuXG4gKi9cblN0YW5kYXJkT3V0cHV0LnByb3RvdHlwZS5zZXRDb250ZW50ID0gZnVuY3Rpb24oY29udGVudCkge1xuICBpZiAocHJvY2Vzcy5zdGRvdXQuaXNUVFkpIHtcbiAgICBwcm9jZXNzLnN0ZG91dC53cml0ZShjb250ZW50KTtcbiAgfVxufTtcblxuZXhwb3J0cy5TdGFuZGFyZE91dHB1dCA9IFN0YW5kYXJkT3V0cHV0O1xuXG4vKipcbiAqIFN0YW5kYXJkIGVycm9yLlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIFN0YW5kYXJkRXJyb3IoKSB7XG4gIEZpbGUuY2FsbCh0aGlzKTtcbiAgdGhpcy5zZXRNb2RlKDQzOCk7IC8vIDA2NjZcbn1cbnV0aWwuaW5oZXJpdHMoU3RhbmRhcmRFcnJvciwgRmlsZSk7XG5cbi8qKlxuICogV3JpdGUgdGhlIGNvbnRlbnRzIHRvIHN0ZGVyci5cbiAqIEBwYXJhbSB7c3RyaW5nfEJ1ZmZlcn0gY29udGVudCBGaWxlIGNvbnRlbnRzLlxuICovXG5TdGFuZGFyZEVycm9yLnByb3RvdHlwZS5zZXRDb250ZW50ID0gZnVuY3Rpb24oY29udGVudCkge1xuICBpZiAocHJvY2Vzcy5zdGRlcnIuaXNUVFkpIHtcbiAgICBwcm9jZXNzLnN0ZGVyci53cml0ZShjb250ZW50KTtcbiAgfVxufTtcblxuZXhwb3J0cy5TdGFuZGFyZEVycm9yID0gU3RhbmRhcmRFcnJvcjtcbiJdLCJuYW1lcyI6WyJ1dGlsIiwicmVxdWlyZSIsIkl0ZW0iLCJidWZmZXJGcm9tIiwiZnJvbSIsImJ1ZmZlckFsbG9jIiwiYWxsb2MiLCJFTVBUWSIsImNvbnN0YW50cyIsIkZpbGUiLCJjYWxsIiwiX2NvbnRlbnQiLCJpbmhlcml0cyIsInByb3RvdHlwZSIsImdldENvbnRlbnQiLCJzZXRBVGltZSIsIkRhdGUiLCJzZXRDb250ZW50IiwiY29udGVudCIsIkJ1ZmZlciIsImlzQnVmZmVyIiwiRXJyb3IiLCJub3ciLCJzZXRDVGltZSIsInNldE1UaW1lIiwiZ2V0U3RhdHMiLCJzaXplIiwibGVuZ3RoIiwic3RhdHMiLCJtb2RlIiwiZ2V0TW9kZSIsIlNfSUZSRUciLCJibG9ja3MiLCJNYXRoIiwiY2VpbCIsImV4cG9ydHMiLCJtb2R1bGUiLCJTdGFuZGFyZElucHV0Iiwic2V0TW9kZSIsIlN0YW5kYXJkT3V0cHV0IiwicHJvY2VzcyIsInN0ZG91dCIsImlzVFRZIiwid3JpdGUiLCJTdGFuZGFyZEVycm9yIiwic3RkZXJyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mock-fs/lib/file.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mock-fs/lib/filesystem.js":
/*!************************************************!*\
  !*** ./node_modules/mock-fs/lib/filesystem.js ***!
  \************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\nconst os = __webpack_require__(/*! os */ \"os\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst Directory = __webpack_require__(/*! ./directory */ \"(ssr)/./node_modules/mock-fs/lib/directory.js\");\nconst File = __webpack_require__(/*! ./file */ \"(ssr)/./node_modules/mock-fs/lib/file.js\");\nconst FSError = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mock-fs/lib/error.js\");\nconst SymbolicLink = __webpack_require__(/*! ./symlink */ \"(ssr)/./node_modules/mock-fs/lib/symlink.js\");\nconst isWindows = process.platform === \"win32\";\nfunction toNamespacedPath(filePath) {\n    return path.toNamespacedPath ? path.toNamespacedPath(filePath) : path._makeLong(filePath);\n}\nfunction getPathParts(filepath) {\n    const parts = toNamespacedPath(path.resolve(filepath)).split(path.sep);\n    parts.shift();\n    if (isWindows) {\n        // parts currently looks like ['', '?', 'c:', ...]\n        parts.shift();\n        const q = parts.shift(); // should be '?'\n        const base = \"\\\\\\\\\" + q + \"\\\\\" + parts.shift().toLowerCase();\n        parts.unshift(base);\n    }\n    if (parts[parts.length - 1] === \"\") {\n        parts.pop();\n    }\n    return parts;\n}\n/**\n * Create a new file system.\n * @param {Object} options Any filesystem options.\n * @param {boolean} options.createCwd Create a directory for `process.cwd()`\n *     (defaults to `true`).\n * @param {boolean} options.createTmp Create a directory for `os.tmpdir()`\n *     (defaults to `true`).\n * @constructor\n */ function FileSystem(options) {\n    options = options || {};\n    const createCwd = \"createCwd\" in options ? options.createCwd : true;\n    const createTmp = \"createTmp\" in options ? options.createTmp : true;\n    const root = new Directory();\n    // populate with default directories\n    const defaults = [];\n    if (createCwd) {\n        defaults.push(process.cwd());\n    }\n    if (createTmp) {\n        defaults.push(os.tmpdir && os.tmpdir() || os.tmpDir());\n    }\n    defaults.forEach(function(dir) {\n        const parts = getPathParts(dir);\n        let directory = root;\n        for(let i = 0, ii = parts.length; i < ii; ++i){\n            const name = parts[i];\n            const candidate = directory.getItem(name);\n            if (!candidate) {\n                directory = directory.addItem(name, new Directory());\n            } else if (candidate instanceof Directory) {\n                directory = candidate;\n            } else {\n                throw new Error(\"Failed to create directory: \" + dir);\n            }\n        }\n    });\n    /**\n   * Root directory.\n   * @type {Directory}\n   */ this._root = root;\n}\n/**\n * Get the root directory.\n * @return {Directory} The root directory.\n */ FileSystem.prototype.getRoot = function() {\n    return this._root;\n};\n/**\n * Get a file system item.\n * @param {string} filepath Path to item.\n * @return {Item} The item (or null if not found).\n */ FileSystem.prototype.getItem = function(filepath) {\n    const parts = getPathParts(filepath);\n    const currentParts = getPathParts(process.cwd());\n    let item = this._root;\n    let itemPath = \"/\";\n    for(let i = 0, ii = parts.length; i < ii; ++i){\n        const name = parts[i];\n        while(item instanceof SymbolicLink){\n            // Symbolic link being traversed as a directory --- If link targets\n            // another symbolic link, resolve target's path relative to the original\n            // link's target, otherwise relative to the current item.\n            itemPath = path.resolve(path.dirname(itemPath), item.getPath());\n            item = this.getItem(itemPath);\n        }\n        if (item) {\n            if (item instanceof Directory && name !== currentParts[i]) {\n                // make sure traversal is allowed\n                // This fails for Windows directories which do not have execute permission, by default. It may be a good idea\n                // to change this logic to windows-friendly. See notes in mock.createDirectoryInfoFromPaths()\n                if (!item.canExecute()) {\n                    throw new FSError(\"EACCES\", filepath);\n                }\n            }\n            if (item instanceof File) {\n                throw new FSError(\"ENOTDIR\", filepath);\n            }\n            item = item.getItem(name);\n        }\n        if (!item) {\n            break;\n        }\n        itemPath = path.resolve(itemPath, name);\n    }\n    return item;\n};\n/**\n * Populate a directory with an item.\n * @param {Directory} directory The directory to populate.\n * @param {string} name The name of the item.\n * @param {string|Buffer|function|Object} obj Instructions for creating the\n *     item.\n */ function populate(directory, name, obj) {\n    let item;\n    if (typeof obj === \"string\" || Buffer.isBuffer(obj)) {\n        // contents for a file\n        item = new File();\n        item.setContent(obj);\n    } else if (typeof obj === \"function\") {\n        // item factory\n        item = obj();\n    } else if (typeof obj === \"object\") {\n        // directory with more to populate\n        item = new Directory();\n        for(const key in obj){\n            populate(item, key, obj[key]);\n        }\n    } else {\n        throw new Error(\"Unsupported type: \" + typeof obj + \" of item \" + name);\n    }\n    /**\n   * Special exception for redundant adding of empty directories.\n   */ if (item instanceof Directory && item.list().length === 0 && directory.getItem(name) instanceof Directory) {\n    // pass\n    } else {\n        directory.addItem(name, item);\n    }\n}\n/**\n * Configure a mock file system.\n * @param {Object} paths Config object.\n * @param {Object} options Any filesystem options.\n * @param {boolean} options.createCwd Create a directory for `process.cwd()`\n *     (defaults to `true`).\n * @param {boolean} options.createTmp Create a directory for `os.tmpdir()`\n *     (defaults to `true`).\n * @return {FileSystem} Mock file system.\n */ FileSystem.create = function(paths, options) {\n    const system = new FileSystem(options);\n    for(const filepath in paths){\n        const parts = getPathParts(filepath);\n        let directory = system._root;\n        for(let i = 0, ii = parts.length - 1; i < ii; ++i){\n            const name = parts[i];\n            const candidate = directory.getItem(name);\n            if (!candidate) {\n                directory = directory.addItem(name, new Directory());\n            } else if (candidate instanceof Directory) {\n                directory = candidate;\n            } else {\n                throw new Error(\"Failed to create directory: \" + filepath);\n            }\n        }\n        populate(directory, parts[parts.length - 1], paths[filepath]);\n    }\n    return system;\n};\n/**\n * Generate a factory for new files.\n * @param {Object} config File config.\n * @return {function():File} Factory that creates a new file.\n */ FileSystem.file = function(config) {\n    config = config || {};\n    return function() {\n        const file = new File();\n        if (config.hasOwnProperty(\"content\")) {\n            file.setContent(config.content);\n        }\n        if (config.hasOwnProperty(\"mode\")) {\n            file.setMode(config.mode);\n        } else {\n            file.setMode(438); // 0666\n        }\n        if (config.hasOwnProperty(\"uid\")) {\n            file.setUid(config.uid);\n        }\n        if (config.hasOwnProperty(\"gid\")) {\n            file.setGid(config.gid);\n        }\n        if (config.hasOwnProperty(\"atime\")) {\n            file.setATime(config.atime);\n        }\n        if (config.hasOwnProperty(\"ctime\")) {\n            file.setCTime(config.ctime);\n        }\n        if (config.hasOwnProperty(\"mtime\")) {\n            file.setMTime(config.mtime);\n        }\n        if (config.hasOwnProperty(\"birthtime\")) {\n            file.setBirthtime(config.birthtime);\n        }\n        return file;\n    };\n};\n/**\n * Generate a factory for new symbolic links.\n * @param {Object} config File config.\n * @return {function():File} Factory that creates a new symbolic link.\n */ FileSystem.symlink = function(config) {\n    config = config || {};\n    return function() {\n        const link = new SymbolicLink();\n        if (config.hasOwnProperty(\"mode\")) {\n            link.setMode(config.mode);\n        } else {\n            link.setMode(438); // 0666\n        }\n        if (config.hasOwnProperty(\"uid\")) {\n            link.setUid(config.uid);\n        }\n        if (config.hasOwnProperty(\"gid\")) {\n            link.setGid(config.gid);\n        }\n        if (config.hasOwnProperty(\"path\")) {\n            link.setPath(config.path);\n        } else {\n            throw new Error('Missing \"path\" property');\n        }\n        if (config.hasOwnProperty(\"atime\")) {\n            link.setATime(config.atime);\n        }\n        if (config.hasOwnProperty(\"ctime\")) {\n            link.setCTime(config.ctime);\n        }\n        if (config.hasOwnProperty(\"mtime\")) {\n            link.setMTime(config.mtime);\n        }\n        if (config.hasOwnProperty(\"birthtime\")) {\n            link.setBirthtime(config.birthtime);\n        }\n        return link;\n    };\n};\n/**\n * Generate a factory for new directories.\n * @param {Object} config File config.\n * @return {function():Directory} Factory that creates a new directory.\n */ FileSystem.directory = function(config) {\n    config = config || {};\n    return function() {\n        const dir = new Directory();\n        if (config.hasOwnProperty(\"mode\")) {\n            dir.setMode(config.mode);\n        }\n        if (config.hasOwnProperty(\"uid\")) {\n            dir.setUid(config.uid);\n        }\n        if (config.hasOwnProperty(\"gid\")) {\n            dir.setGid(config.gid);\n        }\n        if (config.hasOwnProperty(\"items\")) {\n            for(const name in config.items){\n                populate(dir, name, config.items[name]);\n            }\n        }\n        if (config.hasOwnProperty(\"atime\")) {\n            dir.setATime(config.atime);\n        }\n        if (config.hasOwnProperty(\"ctime\")) {\n            dir.setCTime(config.ctime);\n        }\n        if (config.hasOwnProperty(\"mtime\")) {\n            dir.setMTime(config.mtime);\n        }\n        if (config.hasOwnProperty(\"birthtime\")) {\n            dir.setBirthtime(config.birthtime);\n        }\n        return dir;\n    };\n};\n/**\n * Module exports.\n * @type {function}\n */ exports = module.exports = FileSystem;\nexports.getPathParts = getPathParts;\nexports.toNamespacedPath = toNamespacedPath;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mock-fs/lib/filesystem.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mock-fs/lib/index.js":
/*!*******************************************!*\
  !*** ./node_modules/mock-fs/lib/index.js ***!
  \*******************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\nconst Binding = __webpack_require__(/*! ./binding */ \"(ssr)/./node_modules/mock-fs/lib/binding.js\");\nconst FSError = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mock-fs/lib/error.js\");\nconst FileSystem = __webpack_require__(/*! ./filesystem */ \"(ssr)/./node_modules/mock-fs/lib/filesystem.js\");\nconst realBinding = process.binding(\"fs\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst loader = __webpack_require__(/*! ./loader */ \"(ssr)/./node_modules/mock-fs/lib/loader.js\");\nconst bypass = __webpack_require__(/*! ./bypass */ \"(ssr)/./node_modules/mock-fs/lib/bypass.js\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst toNamespacedPath = FileSystem.toNamespacedPath;\nconst realProcessProps = {\n    cwd: process.cwd,\n    chdir: process.chdir\n};\nconst realCreateWriteStream = fs.createWriteStream;\nconst realStats = realBinding.Stats;\nconst realStatWatcher = realBinding.StatWatcher;\n/**\n * Pre-patch fs binding.\n * This allows mock-fs to work properly under nodejs v10+ readFile\n * As ReadFileContext nodejs v10+ implementation traps original binding methods:\n * const { FSReqWrap, close, read } = process.binding('fs');\n * Note this patch only solves issue for readFile, as the require of\n * ReadFileContext is delayed by readFile implementation.\n * if (!ReadFileContext) ReadFileContext = require('internal/fs/read_file_context')\n *\n * @param {string} key Property name.\n */ function patch(key) {\n    const existingMethod = realBinding[key];\n    realBinding[key] = (function() {\n        if (this._mockedBinding) {\n            return this._mockedBinding[key].apply(this._mockedBinding, arguments);\n        } else {\n            return existingMethod.apply(this, arguments);\n        }\n    }).bind(realBinding);\n}\nfor(const key in Binding.prototype){\n    if (typeof realBinding[key] === \"function\") {\n        // Stats and StatWatcher are constructors\n        if (key !== \"Stats\" && key !== \"StatWatcher\") {\n            patch(key);\n        }\n    }\n}\nfunction overrideBinding(binding) {\n    realBinding._mockedBinding = binding;\n}\nfunction overrideProcess(cwd, chdir) {\n    process.cwd = cwd;\n    process.chdir = chdir;\n}\n/**\n * Have to disable write stream _writev on nodejs v10+.\n *\n * nodejs v8 lib/fs.js\n * note binding.writeBuffers will use mock-fs patched writeBuffers.\n *\n *   const binding = process.binding('fs');\n *   function writev(fd, chunks, position, callback) {\n *     // ...\n *     binding.writeBuffers(fd, chunks, position, req);\n *   }\n *\n * nodejs v10+ lib/internal/fs/streams.js\n * note it uses original writeBuffers, bypassed mock-fs patched writeBuffers.\n *\n *  const {writeBuffers} = internalBinding('fs');\n *  function writev(fd, chunks, position, callback) {\n *    // ...\n *    writeBuffers(fd, chunks, position, req);\n *  }\n *\n * Luckily _writev is an optional method on Writeable stream implementation.\n * When _writev is missing, it will fall back to make multiple _write calls.\n */ function overrideCreateWriteStream() {\n    fs.createWriteStream = function(path, options) {\n        const output = realCreateWriteStream(path, options);\n        // disable _writev, this will over shadow WriteStream.prototype._writev\n        if (realBinding._mockedBinding) {\n            output._writev = undefined;\n        }\n        return output;\n    };\n}\nfunction restoreBinding() {\n    delete realBinding._mockedBinding;\n    realBinding.Stats = realStats;\n    realBinding.StatWatcher = realStatWatcher;\n}\nfunction restoreProcess() {\n    for(const key in realProcessProps){\n        process[key] = realProcessProps[key];\n    }\n}\nfunction restoreCreateWriteStream() {\n    fs.createWriteStream = realCreateWriteStream;\n}\n/**\n * Swap out the fs bindings for a mock file system.\n * @param {Object} config Mock file system configuration.\n * @param {Object} options Any filesystem options.\n * @param {boolean} options.createCwd Create a directory for `process.cwd()`\n *     (defaults to `true`).\n * @param {boolean} options.createTmp Create a directory for `os.tmpdir()`\n *     (defaults to `true`).\n */ exports = module.exports = function mock(config, options) {\n    const system = FileSystem.create(config, options);\n    const binding = new Binding(system);\n    overrideBinding(binding);\n    let currentPath = process.cwd();\n    overrideProcess(function cwd() {\n        if (realBinding._mockedBinding) {\n            return currentPath;\n        }\n        return realProcessProps.cwd();\n    }, function chdir(directory) {\n        if (realBinding._mockedBinding) {\n            if (!binding.stat(toNamespacedPath(directory)).isDirectory()) {\n                throw new FSError(\"ENOTDIR\");\n            }\n            currentPath = path.resolve(currentPath, directory);\n        } else {\n            return realProcessProps.chdir(directory);\n        }\n    });\n    overrideCreateWriteStream();\n};\n/**\n * Get hold of the mocked filesystem's 'root'\n * If fs hasn't currently been replaced, this will return an empty object\n */ exports.getMockRoot = function() {\n    if (realBinding._mockedBinding) {\n        return realBinding._mockedBinding.getSystem().getRoot();\n    } else {\n        return {};\n    }\n};\n/**\n * Restore the fs bindings for the real file system.\n */ exports.restore = function() {\n    restoreBinding();\n    restoreProcess();\n    restoreCreateWriteStream();\n};\n/**\n * Create a file factory.\n */ exports.file = FileSystem.file;\n/**\n * Create a directory factory.\n */ exports.directory = FileSystem.directory;\n/**\n * Create a symbolic link factory.\n */ exports.symlink = FileSystem.symlink;\n/**\n * Automatically maps specified paths (for use with `mock()`)\n */ exports.load = loader.load;\n/**\n * Perform action, bypassing mock FS\n * @example\n * // This file exists on the real FS, not on the mocked FS\n * const filePath = '/path/file.json';\n * const data = mock.bypass(() => fs.readFileSync(filePath, 'utf-8'));\n */ exports.bypass = bypass;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mock-fs/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mock-fs/lib/item.js":
/*!******************************************!*\
  !*** ./node_modules/mock-fs/lib/item.js ***!
  \******************************************/
/***/ ((module, exports) => {

"use strict";
eval("\nlet counter = 0;\n/**\n * Permissions.\n * @enum {number}\n */ const permissions = {\n    USER_READ: 256,\n    USER_WRITE: 128,\n    USER_EXEC: 64,\n    GROUP_READ: 32,\n    GROUP_WRITE: 16,\n    GROUP_EXEC: 8,\n    OTHER_READ: 4,\n    OTHER_WRITE: 2,\n    OTHER_EXEC: 1 // 0001\n};\nfunction getUid() {\n    // force NaN on windows.\n    return process.getuid ? process.getuid() : NaN;\n}\nfunction getGid() {\n    // force NaN on windows.\n    return process.getgid ? process.getgid() : NaN;\n}\n/**\n * A filesystem item.\n * @constructor\n */ function Item() {\n    const now = Date.now();\n    /**\n   * Access time.\n   * @type {Date}\n   */ this._atime = new Date(now);\n    /**\n   * Change time.\n   * @type {Date}\n   */ this._ctime = new Date(now);\n    /**\n   * Birth time.\n   * @type {Date}\n   */ this._birthtime = new Date(now);\n    /**\n   * Modification time.\n   * @type {Date}\n   */ this._mtime = new Date(now);\n    /**\n   * Permissions.\n   */ this._mode = 438; // 0666\n    /**\n   * User id.\n   * @type {number}\n   */ this._uid = getUid();\n    /**\n   * Group id.\n   * @type {number}\n   */ this._gid = getGid();\n    /**\n   * Item number.\n   * @type {number}\n   */ this._id = ++counter;\n    /**\n   * Number of links to this item.\n   */ this.links = 0;\n}\n/**\n * Add execute if read allowed\n * See notes in index.js -> mapping#addDir\n */ Item.fixWin32Permissions = (mode)=>process.platform !== \"win32\" ? mode : mode | (mode & permissions.USER_READ && permissions.USER_EXEC) | (mode & permissions.GROUP_READ && permissions.GROUP_EXEC) | (mode & permissions.OTHER_READ && permissions.OTHER_EXEC);\n/**\n * Determine if the current user has read permission.\n * @return {boolean} The current user can read.\n */ Item.prototype.canRead = function() {\n    const uid = getUid();\n    const gid = getGid();\n    let can = false;\n    if (uid === 0) {\n        can = true;\n    } else if (uid === this._uid || uid !== uid) {\n        // (uid !== uid) means uid is NaN, only for windows\n        can = (permissions.USER_READ & this._mode) === permissions.USER_READ;\n    } else if (gid === this._gid) {\n        can = (permissions.GROUP_READ & this._mode) === permissions.GROUP_READ;\n    } else {\n        can = (permissions.OTHER_READ & this._mode) === permissions.OTHER_READ;\n    }\n    return can;\n};\n/**\n * Determine if the current user has write permission.\n * @return {boolean} The current user can write.\n */ Item.prototype.canWrite = function() {\n    const uid = getUid();\n    const gid = getGid();\n    let can = false;\n    if (uid === 0) {\n        can = true;\n    } else if (uid === this._uid || uid !== uid) {\n        // (uid !== uid) means uid is NaN, only for windows\n        can = (permissions.USER_WRITE & this._mode) === permissions.USER_WRITE;\n    } else if (gid === this._gid) {\n        can = (permissions.GROUP_WRITE & this._mode) === permissions.GROUP_WRITE;\n    } else {\n        can = (permissions.OTHER_WRITE & this._mode) === permissions.OTHER_WRITE;\n    }\n    return can;\n};\n/**\n * Determine if the current user has execute permission.\n * @return {boolean} The current user can execute.\n */ Item.prototype.canExecute = function() {\n    const uid = getUid();\n    const gid = getGid();\n    let can = false;\n    if (uid === 0) {\n        can = true;\n    } else if (uid === this._uid || isNaN(uid)) {\n        // NaN occurs on windows\n        can = (permissions.USER_EXEC & this._mode) === permissions.USER_EXEC;\n    } else if (gid === this._gid) {\n        can = (permissions.GROUP_EXEC & this._mode) === permissions.GROUP_EXEC;\n    } else {\n        can = (permissions.OTHER_EXEC & this._mode) === permissions.OTHER_EXEC;\n    }\n    return can;\n};\n/**\n * Get access time.\n * @return {Date} Access time.\n */ Item.prototype.getATime = function() {\n    return this._atime;\n};\n/**\n * Set access time.\n * @param {Date} atime Access time.\n */ Item.prototype.setATime = function(atime) {\n    this._atime = atime;\n};\n/**\n * Get change time.\n * @return {Date} Change time.\n */ Item.prototype.getCTime = function() {\n    return this._ctime;\n};\n/**\n * Set change time.\n * @param {Date} ctime Change time.\n */ Item.prototype.setCTime = function(ctime) {\n    this._ctime = ctime;\n};\n/**\n * Get birth time.\n * @return {Date} Birth time.\n */ Item.prototype.getBirthtime = function() {\n    return this._birthtime;\n};\n/**\n * Set change time.\n * @param {Date} birthtime Birth time.\n */ Item.prototype.setBirthtime = function(birthtime) {\n    this._birthtime = birthtime;\n};\n/**\n * Get modification time.\n * @return {Date} Modification time.\n */ Item.prototype.getMTime = function() {\n    return this._mtime;\n};\n/**\n * Set modification time.\n * @param {Date} mtime Modification time.\n */ Item.prototype.setMTime = function(mtime) {\n    this._mtime = mtime;\n};\n/**\n * Get mode (permission only, e.g 0666).\n * @return {number} Mode.\n */ Item.prototype.getMode = function() {\n    return this._mode;\n};\n/**\n * Set mode (permission only, e.g 0666).\n * @param {Date} mode Mode.\n */ Item.prototype.setMode = function(mode) {\n    this.setCTime(new Date());\n    this._mode = mode;\n};\n/**\n * Get user id.\n * @return {number} User id.\n */ Item.prototype.getUid = function() {\n    return this._uid;\n};\n/**\n * Set user id.\n * @param {number} uid User id.\n */ Item.prototype.setUid = function(uid) {\n    this.setCTime(new Date());\n    this._uid = uid;\n};\n/**\n * Get group id.\n * @return {number} Group id.\n */ Item.prototype.getGid = function() {\n    return this._gid;\n};\n/**\n * Set group id.\n * @param {number} gid Group id.\n */ Item.prototype.setGid = function(gid) {\n    this.setCTime(new Date());\n    this._gid = gid;\n};\n/**\n * Get item stats.\n * @return {Object} Stats properties.\n */ Item.prototype.getStats = function() {\n    return {\n        dev: 8675309,\n        nlink: this.links,\n        uid: this.getUid(),\n        gid: this.getGid(),\n        rdev: 0,\n        blksize: 4096,\n        ino: this._id,\n        atime: this.getATime(),\n        mtime: this.getMTime(),\n        ctime: this.getCTime(),\n        birthtime: this.getBirthtime(),\n        atimeMs: +this.getATime(),\n        mtimeMs: +this.getMTime(),\n        ctimeMs: +this.getCTime(),\n        birthtimeMs: +this.getBirthtime()\n    };\n};\n/**\n * Get the item's string representation.\n * @return {string} String representation.\n */ Item.prototype.toString = function() {\n    return \"[\" + this.constructor.name + \"]\";\n};\n/**\n * Export the constructor.\n * @type {function()}\n */ exports = module.exports = Item;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mock-fs/lib/item.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mock-fs/lib/loader.js":
/*!********************************************!*\
  !*** ./node_modules/mock-fs/lib/loader.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const { fixWin32Permissions } = __webpack_require__(/*! ./item */ \"(ssr)/./node_modules/mock-fs/lib/item.js\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst FileSystem = __webpack_require__(/*! ./filesystem */ \"(ssr)/./node_modules/mock-fs/lib/filesystem.js\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst bypass = __webpack_require__(/*! ./bypass */ \"(ssr)/./node_modules/mock-fs/lib/bypass.js\");\nconst createContext = ({ output, options = {}, target }, newContext)=>Object.assign({\n        // Assign options and set defaults if needed\n        options: {\n            recursive: options.recursive !== false,\n            lazy: options.lazy !== false\n        },\n        output,\n        target\n    }, newContext);\nfunction addFile(context, stats, isRoot) {\n    const { output, target } = context;\n    const { lazy } = context.options;\n    if (!stats.isFile()) {\n        throw new Error(`${target} is not a valid file!`);\n    }\n    const outputPropKey = isRoot ? target : path.basename(target);\n    output[outputPropKey] = ()=>{\n        const content = !lazy ? fs.readFileSync(target) : \"\";\n        const file = FileSystem.file(Object.assign({}, stats, {\n            content\n        }))();\n        if (lazy) {\n            Object.defineProperty(file, \"_content\", {\n                get () {\n                    const res = bypass(()=>fs.readFileSync(target));\n                    Object.defineProperty(file, \"_content\", {\n                        value: res,\n                        writable: true\n                    });\n                    return res;\n                },\n                set (data) {\n                    Object.defineProperty(file, \"_content\", {\n                        value: data,\n                        writable: true\n                    });\n                },\n                configurable: true\n            });\n        }\n        return file;\n    };\n    return output[outputPropKey];\n}\nfunction addDir(context, stats, isRoot) {\n    const { target, output } = context;\n    const { recursive } = context.options;\n    if (!stats.isDirectory()) {\n        throw new Error(`${target} is not a valid directory!`);\n    }\n    stats = Object.assign({}, stats);\n    const outputPropKey = isRoot ? target : path.basename(target);\n    // On windows platforms, directories do not have the executable flag, which causes FileSystem.prototype.getItem\n    // to think that the directory cannot be traversed. This is a workaround, however, a better solution may be to\n    // re-think the logic in FileSystem.prototype.getItem\n    // This workaround adds executable privileges if read privileges are found\n    stats.mode = fixWin32Permissions(stats.mode);\n    // Create directory factory\n    const directoryItems = {};\n    output[outputPropKey] = FileSystem.directory(Object.assign(stats, {\n        items: directoryItems\n    }));\n    fs.readdirSync(target).forEach((p)=>{\n        const absPath = path.join(target, p);\n        const stats = fs.statSync(absPath);\n        const newContext = createContext(context, {\n            target: absPath,\n            output: directoryItems\n        });\n        if (recursive && stats.isDirectory()) {\n            addDir(newContext, stats);\n        } else if (stats.isFile()) {\n            addFile(newContext, stats);\n        }\n    });\n    return output[outputPropKey];\n}\n/**\n * Load directory or file from real FS\n */ exports.load = function(p, options) {\n    return bypass(()=>{\n        p = path.resolve(p);\n        const stats = fs.statSync(p);\n        const context = createContext({\n            output: {},\n            options,\n            target: p\n        });\n        if (stats.isDirectory()) {\n            return addDir(context, stats, true);\n        } else if (stats.isFile()) {\n            return addFile(context, stats, true);\n        }\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mock-fs/lib/loader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mock-fs/lib/symlink.js":
/*!*********************************************!*\
  !*** ./node_modules/mock-fs/lib/symlink.js ***!
  \*********************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\nconst util = __webpack_require__(/*! util */ \"util\");\nconst Item = __webpack_require__(/*! ./item */ \"(ssr)/./node_modules/mock-fs/lib/item.js\");\nconst constants = __webpack_require__(/*! constants */ \"constants\");\n/**\n * A directory.\n * @constructor\n */ function SymbolicLink() {\n    Item.call(this);\n    /**\n   * Relative path to source.\n   * @type {string}\n   */ this._path = undefined;\n}\nutil.inherits(SymbolicLink, Item);\n/**\n * Set the path to the source.\n * @param {string} pathname Path to source.\n */ SymbolicLink.prototype.setPath = function(pathname) {\n    this._path = pathname;\n};\n/**\n * Get the path to the source.\n * @return {string} Path to source.\n */ SymbolicLink.prototype.getPath = function() {\n    return this._path;\n};\n/**\n * Get symbolic link stats.\n * @return {Object} Stats properties.\n */ SymbolicLink.prototype.getStats = function() {\n    const size = this._path.length;\n    const stats = Item.prototype.getStats.call(this);\n    stats.mode = this.getMode() | constants.S_IFLNK;\n    stats.size = size;\n    stats.blocks = Math.ceil(size / 512);\n    return stats;\n};\n/**\n * Export the constructor.\n * @type {function()}\n */ exports = module.exports = SymbolicLink;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9jay1mcy9saWIvc3ltbGluay5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLE9BQU9DLG1CQUFPQSxDQUFDO0FBRXJCLE1BQU1DLE9BQU9ELG1CQUFPQSxDQUFDO0FBRXJCLE1BQU1FLFlBQVlGLG1CQUFPQSxDQUFDO0FBRTFCOzs7Q0FHQyxHQUNELFNBQVNHO0lBQ1BGLEtBQUtHLElBQUksQ0FBQyxJQUFJO0lBRWQ7OztHQUdDLEdBQ0QsSUFBSSxDQUFDQyxLQUFLLEdBQUdDO0FBQ2Y7QUFDQVAsS0FBS1EsUUFBUSxDQUFDSixjQUFjRjtBQUU1Qjs7O0NBR0MsR0FDREUsYUFBYUssU0FBUyxDQUFDQyxPQUFPLEdBQUcsU0FBU0MsUUFBUTtJQUNoRCxJQUFJLENBQUNMLEtBQUssR0FBR0s7QUFDZjtBQUVBOzs7Q0FHQyxHQUNEUCxhQUFhSyxTQUFTLENBQUNHLE9BQU8sR0FBRztJQUMvQixPQUFPLElBQUksQ0FBQ04sS0FBSztBQUNuQjtBQUVBOzs7Q0FHQyxHQUNERixhQUFhSyxTQUFTLENBQUNJLFFBQVEsR0FBRztJQUNoQyxNQUFNQyxPQUFPLElBQUksQ0FBQ1IsS0FBSyxDQUFDUyxNQUFNO0lBQzlCLE1BQU1DLFFBQVFkLEtBQUtPLFNBQVMsQ0FBQ0ksUUFBUSxDQUFDUixJQUFJLENBQUMsSUFBSTtJQUMvQ1csTUFBTUMsSUFBSSxHQUFHLElBQUksQ0FBQ0MsT0FBTyxLQUFLZixVQUFVZ0IsT0FBTztJQUMvQ0gsTUFBTUYsSUFBSSxHQUFHQTtJQUNiRSxNQUFNSSxNQUFNLEdBQUdDLEtBQUtDLElBQUksQ0FBQ1IsT0FBTztJQUNoQyxPQUFPRTtBQUNUO0FBRUE7OztDQUdDLEdBQ0RPLFVBQVVDLE9BQU9ELE9BQU8sR0FBR25CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvbW9jay1mcy9saWIvc3ltbGluay5qcz9mYTQ0Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxuY29uc3QgSXRlbSA9IHJlcXVpcmUoJy4vaXRlbScpO1xuXG5jb25zdCBjb25zdGFudHMgPSByZXF1aXJlKCdjb25zdGFudHMnKTtcblxuLyoqXG4gKiBBIGRpcmVjdG9yeS5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBTeW1ib2xpY0xpbmsoKSB7XG4gIEl0ZW0uY2FsbCh0aGlzKTtcblxuICAvKipcbiAgICogUmVsYXRpdmUgcGF0aCB0byBzb3VyY2UuXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICB0aGlzLl9wYXRoID0gdW5kZWZpbmVkO1xufVxudXRpbC5pbmhlcml0cyhTeW1ib2xpY0xpbmssIEl0ZW0pO1xuXG4vKipcbiAqIFNldCB0aGUgcGF0aCB0byB0aGUgc291cmNlLlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGhuYW1lIFBhdGggdG8gc291cmNlLlxuICovXG5TeW1ib2xpY0xpbmsucHJvdG90eXBlLnNldFBhdGggPSBmdW5jdGlvbihwYXRobmFtZSkge1xuICB0aGlzLl9wYXRoID0gcGF0aG5hbWU7XG59O1xuXG4vKipcbiAqIEdldCB0aGUgcGF0aCB0byB0aGUgc291cmNlLlxuICogQHJldHVybiB7c3RyaW5nfSBQYXRoIHRvIHNvdXJjZS5cbiAqL1xuU3ltYm9saWNMaW5rLnByb3RvdHlwZS5nZXRQYXRoID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLl9wYXRoO1xufTtcblxuLyoqXG4gKiBHZXQgc3ltYm9saWMgbGluayBzdGF0cy5cbiAqIEByZXR1cm4ge09iamVjdH0gU3RhdHMgcHJvcGVydGllcy5cbiAqL1xuU3ltYm9saWNMaW5rLnByb3RvdHlwZS5nZXRTdGF0cyA9IGZ1bmN0aW9uKCkge1xuICBjb25zdCBzaXplID0gdGhpcy5fcGF0aC5sZW5ndGg7XG4gIGNvbnN0IHN0YXRzID0gSXRlbS5wcm90b3R5cGUuZ2V0U3RhdHMuY2FsbCh0aGlzKTtcbiAgc3RhdHMubW9kZSA9IHRoaXMuZ2V0TW9kZSgpIHwgY29uc3RhbnRzLlNfSUZMTks7XG4gIHN0YXRzLnNpemUgPSBzaXplO1xuICBzdGF0cy5ibG9ja3MgPSBNYXRoLmNlaWwoc2l6ZSAvIDUxMik7XG4gIHJldHVybiBzdGF0cztcbn07XG5cbi8qKlxuICogRXhwb3J0IHRoZSBjb25zdHJ1Y3Rvci5cbiAqIEB0eXBlIHtmdW5jdGlvbigpfVxuICovXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBTeW1ib2xpY0xpbms7XG4iXSwibmFtZXMiOlsidXRpbCIsInJlcXVpcmUiLCJJdGVtIiwiY29uc3RhbnRzIiwiU3ltYm9saWNMaW5rIiwiY2FsbCIsIl9wYXRoIiwidW5kZWZpbmVkIiwiaW5oZXJpdHMiLCJwcm90b3R5cGUiLCJzZXRQYXRoIiwicGF0aG5hbWUiLCJnZXRQYXRoIiwiZ2V0U3RhdHMiLCJzaXplIiwibGVuZ3RoIiwic3RhdHMiLCJtb2RlIiwiZ2V0TW9kZSIsIlNfSUZMTksiLCJibG9ja3MiLCJNYXRoIiwiY2VpbCIsImV4cG9ydHMiLCJtb2R1bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mock-fs/lib/symlink.js\n");

/***/ })

};
;